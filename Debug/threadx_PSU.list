
threadx_PSU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f50  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  080121a8  080121a8  000131a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012768  08012768  000141e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012768  08012768  00013768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012770  08012770  000141e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012770  08012770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012774  08012774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08012778  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  200001e0  08012958  000141e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e38  08012958  00014e38  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000141e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025fe2  00000000  00000000  00014216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054d6  00000000  00000000  0003a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0003f6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001401  00000000  00000000  00041178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273f5  00000000  00000000  00042579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a0d  00000000  00000000  0006996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed22b  00000000  00000000  0009137b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e5a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008044  00000000  00000000  0017e5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  00186630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001e0 	.word	0x200001e0
 8000274:	00000000 	.word	0x00000000
 8000278:	08012190 	.word	0x08012190

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001e4 	.word	0x200001e4
 8000294:	08012190 	.word	0x08012190

08000298 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000298:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800029a:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800029e:	4918      	ldr	r1, [pc, #96]	@ (8000300 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002a0:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002a4:	4817      	ldr	r0, [pc, #92]	@ (8000304 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002a6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002ac:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002ae:	4816      	ldr	r0, [pc, #88]	@ (8000308 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b0:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002b2:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002b4:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002b6:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ba:	f64f 11ff 	movw	r1, #63999	@ 0xf9ff
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002be:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002c0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002c4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002c6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002ca:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ce:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002d2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002d8:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002e0:	f7ff bffe 	b.w	80002e0 <__tx_BadHandler>

080002e4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002ec:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ee:	f000 f895 	bl	800041c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002f6:	4770      	bx	lr

080002f8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002f8:	f7ff bffe 	b.w	80002f8 <__tx_NMIHandler>

080002fc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002fc:	f7ff bffe 	b.w	80002fc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000300:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000304:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000308:	200046e0 	.word	0x200046e0
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 800030c:	40ff0000 	.word	0x40ff0000

08000310 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000310:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000314:	4a2d      	ldr	r2, [pc, #180]	@ (80003cc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000316:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000318:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800031c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000320:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000324:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000326:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800032a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800032e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000332:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000336:	f3bf 8f6f 	isb	sy

0800033a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800033a:	e7fe      	b.n	800033a <__tx_wait_here>

0800033c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800033c:	4824      	ldr	r0, [pc, #144]	@ (80003d0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800033e:	4a25      	ldr	r2, [pc, #148]	@ (80003d4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000340:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000344:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000346:	b191      	cbz	r1, 800036e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000348:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800034a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800034e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000352:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000356:	d101      	bne.n	800035c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000358:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800035c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	4c1e      	ldr	r4, [pc, #120]	@ (80003d8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800035e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000362:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000366:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000368:	b10d      	cbz	r5, 800036e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800036a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800036c:	6023      	str	r3, [r4, #0]

0800036e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800036e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000370:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000372:	b1d1      	cbz	r1, 80003aa <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000374:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000376:	b662      	cpsie	i

08000378 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000378:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037a:	4c17      	ldr	r4, [pc, #92]	@ (80003d8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800037c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800037e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000382:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000384:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000386:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800038a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800038e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000392:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000396:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800039a:	d101      	bne.n	80003a0 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800039c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003a0 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003a0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003a4:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a8:	4770      	bx	lr

080003aa <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003aa:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003ac:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003ae:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003b0:	b909      	cbnz	r1, 80003b6 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003b4:	e7f9      	b.n	80003aa <__tx_ts_wait>

080003b6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003b6:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ba:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003be:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003c4:	e7d8      	b.n	8000378 <__tx_ts_restore>
 80003c6:	bf00      	nop

080003c8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c8:	4770      	bx	lr
 80003ca:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003cc:	2000477c 	.word	0x2000477c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003d0:	200046e4 	.word	0x200046e4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003d4:	200046e8 	.word	0x200046e8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d8:	20004ce8 	.word	0x20004ce8

080003dc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003dc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003de:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003e2:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003e6:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ea:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003ec:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003f0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003f2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003f4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003f6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003fa:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003fc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003fe:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000400:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000402:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000404:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000408:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 800040e:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000410:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000412:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000416:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000418:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr

0800041c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	4922      	ldr	r1, [pc, #136]	@ (80004a8 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800041e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000420:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000424:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000428:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800042a:	b13a      	cbz	r2, 800043c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800042c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000430:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000432:	b91a      	cbnz	r2, 800043c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000436:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800043a:	6018      	str	r0, [r3, #0]

0800043c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800043c:	491d      	ldr	r1, [pc, #116]	@ (80004b4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800043e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000440:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000442:	b122      	cbz	r2, 800044e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000444:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000446:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800044a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800044c:	e008      	b.n	8000460 <__tx_timer_done>

0800044e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800044e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000454:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000456:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000458:	d101      	bne.n	800045e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800045c:	6818      	ldr	r0, [r3, #0]

0800045e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800045e:	6008      	str	r0, [r1, #0]

08000460 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000460:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000462:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000464:	b912      	cbnz	r2, 800046c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000466:	4914      	ldr	r1, [pc, #80]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800046a:	b1c8      	cbz	r0, 80004a0 <__tx_timer_nothing_expired>

0800046c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800046c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800046e:	4912      	ldr	r1, [pc, #72]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000470:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000472:	b108      	cbz	r0, 8000478 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000474:	f00c fe94 	bl	800d1a0 <_tx_timer_expiration_process>

08000478 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800047a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800047c:	b172      	cbz	r2, 800049c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800047e:	f00c fde3 	bl	800d048 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000482:	4810      	ldr	r0, [pc, #64]	@ (80004c4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000484:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000486:	b949      	cbnz	r1, 800049c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800048a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800048c:	4a0f      	ldr	r2, [pc, #60]	@ (80004cc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800048e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000490:	480f      	ldr	r0, [pc, #60]	@ (80004d0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000496:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000498:	d000      	beq.n	800049c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800049a:	6002      	str	r2, [r0, #0]

0800049c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800049c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004a0 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004a0:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004a4:	4770      	bx	lr
 80004a6:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a8:	20004788 	.word	0x20004788
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004ac:	20004ce8 	.word	0x20004ce8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004b0:	2000478c 	.word	0x2000478c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b4:	20004818 	.word	0x20004818
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	2000481c 	.word	0x2000481c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004bc:	20004814 	.word	0x20004814
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004c0:	20004810 	.word	0x20004810
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c4:	2000477c 	.word	0x2000477c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c8:	200046e4 	.word	0x200046e4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004cc:	200046e8 	.word	0x200046e8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d0:	e000ed04 	.word	0xe000ed04

080004d4 <strlen>:
 80004d4:	4603      	mov	r3, r0
 80004d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d1fb      	bne.n	80004d6 <strlen+0x2>
 80004de:	1a18      	subs	r0, r3, r0
 80004e0:	3801      	subs	r0, #1
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_dmul>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8de 	bleq	8000a38 <__aeabi_dmul+0x1dc>
 800087c:	442c      	add	r4, r5
 800087e:	ea81 0603 	eor.w	r6, r1, r3
 8000882:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000886:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800088a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800088e:	bf18      	it	ne
 8000890:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000898:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800089c:	d038      	beq.n	8000910 <__aeabi_dmul+0xb4>
 800089e:	fba0 ce02 	umull	ip, lr, r0, r2
 80008a2:	f04f 0500 	mov.w	r5, #0
 80008a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80008ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008b2:	f04f 0600 	mov.w	r6, #0
 80008b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ba:	f09c 0f00 	teq	ip, #0
 80008be:	bf18      	it	ne
 80008c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80008c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80008cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80008d0:	d204      	bcs.n	80008dc <__aeabi_dmul+0x80>
 80008d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008d6:	416d      	adcs	r5, r5
 80008d8:	eb46 0606 	adc.w	r6, r6, r6
 80008dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f4:	bf88      	it	hi
 80008f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fa:	d81e      	bhi.n	800093a <__aeabi_dmul+0xde>
 80008fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000900:	bf08      	it	eq
 8000902:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000914:	ea46 0101 	orr.w	r1, r6, r1
 8000918:	ea40 0002 	orr.w	r0, r0, r2
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	f300 80ab 	bgt.w	8000a94 <__aeabi_dmul+0x238>
 800093e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000942:	bfde      	ittt	le
 8000944:	2000      	movle	r0, #0
 8000946:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800094a:	bd70      	pople	{r4, r5, r6, pc}
 800094c:	f1c4 0400 	rsb	r4, r4, #0
 8000950:	3c20      	subs	r4, #32
 8000952:	da35      	bge.n	80009c0 <__aeabi_dmul+0x164>
 8000954:	340c      	adds	r4, #12
 8000956:	dc1b      	bgt.n	8000990 <__aeabi_dmul+0x134>
 8000958:	f104 0414 	add.w	r4, r4, #20
 800095c:	f1c4 0520 	rsb	r5, r4, #32
 8000960:	fa00 f305 	lsl.w	r3, r0, r5
 8000964:	fa20 f004 	lsr.w	r0, r0, r4
 8000968:	fa01 f205 	lsl.w	r2, r1, r5
 800096c:	ea40 0002 	orr.w	r0, r0, r2
 8000970:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000974:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	fa21 f604 	lsr.w	r6, r1, r4
 8000980:	eb42 0106 	adc.w	r1, r2, r6
 8000984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000988:	bf08      	it	eq
 800098a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f1c4 040c 	rsb	r4, r4, #12
 8000994:	f1c4 0520 	rsb	r5, r4, #32
 8000998:	fa00 f304 	lsl.w	r3, r0, r4
 800099c:	fa20 f005 	lsr.w	r0, r0, r5
 80009a0:	fa01 f204 	lsl.w	r2, r1, r4
 80009a4:	ea40 0002 	orr.w	r0, r0, r2
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009b0:	f141 0100 	adc.w	r1, r1, #0
 80009b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b8:	bf08      	it	eq
 80009ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f1c4 0520 	rsb	r5, r4, #32
 80009c4:	fa00 f205 	lsl.w	r2, r0, r5
 80009c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009cc:	fa20 f304 	lsr.w	r3, r0, r4
 80009d0:	fa01 f205 	lsl.w	r2, r1, r5
 80009d4:	ea43 0302 	orr.w	r3, r3, r2
 80009d8:	fa21 f004 	lsr.w	r0, r1, r4
 80009dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009e0:	fa21 f204 	lsr.w	r2, r1, r4
 80009e4:	ea20 0002 	bic.w	r0, r0, r2
 80009e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f0:	bf08      	it	eq
 80009f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f094 0f00 	teq	r4, #0
 80009fc:	d10f      	bne.n	8000a1e <__aeabi_dmul+0x1c2>
 80009fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000a02:	0040      	lsls	r0, r0, #1
 8000a04:	eb41 0101 	adc.w	r1, r1, r1
 8000a08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a0c:	bf08      	it	eq
 8000a0e:	3c01      	subeq	r4, #1
 8000a10:	d0f7      	beq.n	8000a02 <__aeabi_dmul+0x1a6>
 8000a12:	ea41 0106 	orr.w	r1, r1, r6
 8000a16:	f095 0f00 	teq	r5, #0
 8000a1a:	bf18      	it	ne
 8000a1c:	4770      	bxne	lr
 8000a1e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	eb43 0303 	adc.w	r3, r3, r3
 8000a28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a2c:	bf08      	it	eq
 8000a2e:	3d01      	subeq	r5, #1
 8000a30:	d0f7      	beq.n	8000a22 <__aeabi_dmul+0x1c6>
 8000a32:	ea43 0306 	orr.w	r3, r3, r6
 8000a36:	4770      	bx	lr
 8000a38:	ea94 0f0c 	teq	r4, ip
 8000a3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a40:	bf18      	it	ne
 8000a42:	ea95 0f0c 	teqne	r5, ip
 8000a46:	d00c      	beq.n	8000a62 <__aeabi_dmul+0x206>
 8000a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4c:	bf18      	it	ne
 8000a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a52:	d1d1      	bne.n	80009f8 <__aeabi_dmul+0x19c>
 8000a54:	ea81 0103 	eor.w	r1, r1, r3
 8000a58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a66:	bf06      	itte	eq
 8000a68:	4610      	moveq	r0, r2
 8000a6a:	4619      	moveq	r1, r3
 8000a6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a70:	d019      	beq.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a72:	ea94 0f0c 	teq	r4, ip
 8000a76:	d102      	bne.n	8000a7e <__aeabi_dmul+0x222>
 8000a78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a7c:	d113      	bne.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a7e:	ea95 0f0c 	teq	r5, ip
 8000a82:	d105      	bne.n	8000a90 <__aeabi_dmul+0x234>
 8000a84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a88:	bf1c      	itt	ne
 8000a8a:	4610      	movne	r0, r2
 8000a8c:	4619      	movne	r1, r3
 8000a8e:	d10a      	bne.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a90:	ea81 0103 	eor.w	r1, r1, r3
 8000a94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a98:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000a9c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000aaa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000aae:	bd70      	pop	{r4, r5, r6, pc}

08000ab0 <__aeabi_ddiv>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ab6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000aba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000abe:	bf1d      	ittte	ne
 8000ac0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac4:	ea94 0f0c 	teqne	r4, ip
 8000ac8:	ea95 0f0c 	teqne	r5, ip
 8000acc:	f000 f8a7 	bleq	8000c1e <__aeabi_ddiv+0x16e>
 8000ad0:	eba4 0405 	sub.w	r4, r4, r5
 8000ad4:	ea81 0e03 	eor.w	lr, r1, r3
 8000ad8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000adc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ae0:	f000 8088 	beq.w	8000bf4 <__aeabi_ddiv+0x144>
 8000ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ae8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000aec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000af0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000af8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000afc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b04:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000b08:	429d      	cmp	r5, r3
 8000b0a:	bf08      	it	eq
 8000b0c:	4296      	cmpeq	r6, r2
 8000b0e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000b12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000b16:	d202      	bcs.n	8000b1e <__aeabi_ddiv+0x6e>
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1e:	1ab6      	subs	r6, r6, r2
 8000b20:	eb65 0503 	sbc.w	r5, r5, r3
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b2e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3a:	bf22      	ittt	cs
 8000b3c:	1ab6      	subcs	r6, r6, r2
 8000b3e:	4675      	movcs	r5, lr
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b52:	bf22      	ittt	cs
 8000b54:	1ab6      	subcs	r6, r6, r2
 8000b56:	4675      	movcs	r5, lr
 8000b58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b82:	bf22      	ittt	cs
 8000b84:	1ab6      	subcs	r6, r6, r2
 8000b86:	4675      	movcs	r5, lr
 8000b88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b8c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b90:	d018      	beq.n	8000bc4 <__aeabi_ddiv+0x114>
 8000b92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ba2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ba6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000baa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bae:	d1c0      	bne.n	8000b32 <__aeabi_ddiv+0x82>
 8000bb0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bb4:	d10b      	bne.n	8000bce <__aeabi_ddiv+0x11e>
 8000bb6:	ea41 0100 	orr.w	r1, r1, r0
 8000bba:	f04f 0000 	mov.w	r0, #0
 8000bbe:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000bc2:	e7b6      	b.n	8000b32 <__aeabi_ddiv+0x82>
 8000bc4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bc8:	bf04      	itt	eq
 8000bca:	4301      	orreq	r1, r0
 8000bcc:	2000      	moveq	r0, #0
 8000bce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000bd2:	bf88      	it	hi
 8000bd4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000bd8:	f63f aeaf 	bhi.w	800093a <__aeabi_dmul+0xde>
 8000bdc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000be0:	bf04      	itt	eq
 8000be2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bea:	f150 0000 	adcs.w	r0, r0, #0
 8000bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000bf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c00:	bfc2      	ittt	gt
 8000c02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c0c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c10:	f04f 0e00 	mov.w	lr, #0
 8000c14:	3c01      	subs	r4, #1
 8000c16:	e690      	b.n	800093a <__aeabi_dmul+0xde>
 8000c18:	ea45 0e06 	orr.w	lr, r5, r6
 8000c1c:	e68d      	b.n	800093a <__aeabi_dmul+0xde>
 8000c1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c22:	ea94 0f0c 	teq	r4, ip
 8000c26:	bf08      	it	eq
 8000c28:	ea95 0f0c 	teqeq	r5, ip
 8000c2c:	f43f af3b 	beq.w	8000aa6 <__aeabi_dmul+0x24a>
 8000c30:	ea94 0f0c 	teq	r4, ip
 8000c34:	d10a      	bne.n	8000c4c <__aeabi_ddiv+0x19c>
 8000c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c3a:	f47f af34 	bne.w	8000aa6 <__aeabi_dmul+0x24a>
 8000c3e:	ea95 0f0c 	teq	r5, ip
 8000c42:	f47f af25 	bne.w	8000a90 <__aeabi_dmul+0x234>
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_dmul+0x24a>
 8000c4c:	ea95 0f0c 	teq	r5, ip
 8000c50:	d106      	bne.n	8000c60 <__aeabi_ddiv+0x1b0>
 8000c52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c56:	f43f aefd 	beq.w	8000a54 <__aeabi_dmul+0x1f8>
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	e722      	b.n	8000aa6 <__aeabi_dmul+0x24a>
 8000c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c64:	bf18      	it	ne
 8000c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c6a:	f47f aec5 	bne.w	80009f8 <__aeabi_dmul+0x19c>
 8000c6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c72:	f47f af0d 	bne.w	8000a90 <__aeabi_dmul+0x234>
 8000c76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c7a:	f47f aeeb 	bne.w	8000a54 <__aeabi_dmul+0x1f8>
 8000c7e:	e712      	b.n	8000aa6 <__aeabi_dmul+0x24a>

08000c80 <__gedf2>:
 8000c80:	f04f 3cff 	mov.w	ip, #4294967295
 8000c84:	e006      	b.n	8000c94 <__cmpdf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__ledf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	e002      	b.n	8000c94 <__cmpdf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__cmpdf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ca0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000caa:	d01b      	beq.n	8000ce4 <__cmpdf2+0x54>
 8000cac:	b001      	add	sp, #4
 8000cae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cb2:	bf0c      	ite	eq
 8000cb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cb8:	ea91 0f03 	teqne	r1, r3
 8000cbc:	bf02      	ittt	eq
 8000cbe:	ea90 0f02 	teqeq	r0, r2
 8000cc2:	2000      	moveq	r0, #0
 8000cc4:	4770      	bxeq	lr
 8000cc6:	f110 0f00 	cmn.w	r0, #0
 8000cca:	ea91 0f03 	teq	r1, r3
 8000cce:	bf58      	it	pl
 8000cd0:	4299      	cmppl	r1, r3
 8000cd2:	bf08      	it	eq
 8000cd4:	4290      	cmpeq	r0, r2
 8000cd6:	bf2c      	ite	cs
 8000cd8:	17d8      	asrcs	r0, r3, #31
 8000cda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cde:	f040 0001 	orr.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cec:	d102      	bne.n	8000cf4 <__cmpdf2+0x64>
 8000cee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cf2:	d107      	bne.n	8000d04 <__cmpdf2+0x74>
 8000cf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cfc:	d1d6      	bne.n	8000cac <__cmpdf2+0x1c>
 8000cfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d02:	d0d3      	beq.n	8000cac <__cmpdf2+0x1c>
 8000d04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__aeabi_cdrcmple>:
 8000d0c:	4684      	mov	ip, r0
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4662      	mov	r2, ip
 8000d12:	468c      	mov	ip, r1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4663      	mov	r3, ip
 8000d18:	e000      	b.n	8000d1c <__aeabi_cdcmpeq>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_cdcmpeq>:
 8000d1c:	b501      	push	{r0, lr}
 8000d1e:	f7ff ffb7 	bl	8000c90 <__cmpdf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd01      	pop	{r0, pc}

08000d2c <__aeabi_dcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_dcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_dcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_dcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffce 	bl	8000d0c <__aeabi_cdrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_dcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc4 	bl	8000d0c <__aeabi_cdrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_dcmpun>:
 8000d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d98:	d102      	bne.n	8000da0 <__aeabi_dcmpun+0x10>
 8000d9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d9e:	d10a      	bne.n	8000db6 <__aeabi_dcmpun+0x26>
 8000da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__aeabi_dcmpun+0x20>
 8000daa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dae:	d102      	bne.n	8000db6 <__aeabi_dcmpun+0x26>
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4770      	bx	lr
 8000db6:	f04f 0001 	mov.w	r0, #1
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_d2iz>:
 8000dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000dc4:	d215      	bcs.n	8000df2 <__aeabi_d2iz+0x36>
 8000dc6:	d511      	bpl.n	8000dec <__aeabi_d2iz+0x30>
 8000dc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dd0:	d912      	bls.n	8000df8 <__aeabi_d2iz+0x3c>
 8000dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000de2:	fa23 f002 	lsr.w	r0, r3, r2
 8000de6:	bf18      	it	ne
 8000de8:	4240      	negne	r0, r0
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000df6:	d105      	bne.n	8000e04 <__aeabi_d2iz+0x48>
 8000df8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bx	lr
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <__aeabi_d2uiz>:
 8000e0c:	004a      	lsls	r2, r1, #1
 8000e0e:	d211      	bcs.n	8000e34 <__aeabi_d2uiz+0x28>
 8000e10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e14:	d211      	bcs.n	8000e3a <__aeabi_d2uiz+0x2e>
 8000e16:	d50d      	bpl.n	8000e34 <__aeabi_d2uiz+0x28>
 8000e18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e20:	d40e      	bmi.n	8000e40 <__aeabi_d2uiz+0x34>
 8000e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e32:	4770      	bx	lr
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	4770      	bx	lr
 8000e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e3e:	d102      	bne.n	8000e46 <__aeabi_d2uiz+0x3a>
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_d2f>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000e54:	bf24      	itt	cs
 8000e56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000e5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000e5e:	d90d      	bls.n	8000e7c <__aeabi_d2f+0x30>
 8000e60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000e70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000e80:	d121      	bne.n	8000ec6 <__aeabi_d2f+0x7a>
 8000e82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000e86:	bfbc      	itt	lt
 8000e88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000e8c:	4770      	bxlt	lr
 8000e8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000e92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e96:	f1c2 0218 	rsb	r2, r2, #24
 8000e9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ea2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ea6:	bf18      	it	ne
 8000ea8:	f040 0001 	orrne.w	r0, r0, #1
 8000eac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000eb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000eb8:	ea40 000c 	orr.w	r0, r0, ip
 8000ebc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ec4:	e7cc      	b.n	8000e60 <__aeabi_d2f+0x14>
 8000ec6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000eca:	d107      	bne.n	8000edc <__aeabi_d2f+0x90>
 8000ecc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ed0:	bf1e      	ittt	ne
 8000ed2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bxne	lr
 8000edc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ee0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_uldivmod>:
 8000eec:	b953      	cbnz	r3, 8000f04 <__aeabi_uldivmod+0x18>
 8000eee:	b94a      	cbnz	r2, 8000f04 <__aeabi_uldivmod+0x18>
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	bf08      	it	eq
 8000ef4:	2800      	cmpeq	r0, #0
 8000ef6:	bf1c      	itt	ne
 8000ef8:	f04f 31ff 	movne.w	r1, #4294967295
 8000efc:	f04f 30ff 	movne.w	r0, #4294967295
 8000f00:	f000 b9b4 	b.w	800126c <__aeabi_idiv0>
 8000f04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0c:	f000 f83c 	bl	8000f88 <__udivmoddi4>
 8000f10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_d2lz>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	f7ff ff0b 	bl	8000d40 <__aeabi_dcmplt>
 8000f2a:	b928      	cbnz	r0, 8000f38 <__aeabi_d2lz+0x1c>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f34:	f000 b80a 	b.w	8000f4c <__aeabi_d2ulz>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f3e:	f000 f805 	bl	8000f4c <__aeabi_d2ulz>
 8000f42:	4240      	negs	r0, r0
 8000f44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop

08000f4c <__aeabi_d2ulz>:
 8000f4c:	b5d0      	push	{r4, r6, r7, lr}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <__aeabi_d2ulz+0x34>)
 8000f52:	4606      	mov	r6, r0
 8000f54:	460f      	mov	r7, r1
 8000f56:	f7ff fc81 	bl	800085c <__aeabi_dmul>
 8000f5a:	f7ff ff57 	bl	8000e0c <__aeabi_d2uiz>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	f7ff fc02 	bl	8000768 <__aeabi_ui2d>
 8000f64:	2200      	movs	r2, #0
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <__aeabi_d2ulz+0x38>)
 8000f68:	f7ff fc78 	bl	800085c <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4630      	mov	r0, r6
 8000f72:	4639      	mov	r1, r7
 8000f74:	f7ff faba 	bl	80004ec <__aeabi_dsub>
 8000f78:	f7ff ff48 	bl	8000e0c <__aeabi_d2uiz>
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f80:	3df00000 	.word	0x3df00000
 8000f84:	41f00000 	.word	0x41f00000

08000f88 <__udivmoddi4>:
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000f8e:	460c      	mov	r4, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d14d      	bne.n	8001030 <__udivmoddi4+0xa8>
 8000f94:	428a      	cmp	r2, r1
 8000f96:	460f      	mov	r7, r1
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4696      	mov	lr, r2
 8000f9c:	fab2 f382 	clz	r3, r2
 8000fa0:	d960      	bls.n	8001064 <__udivmoddi4+0xdc>
 8000fa2:	b14b      	cbz	r3, 8000fb8 <__udivmoddi4+0x30>
 8000fa4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000fa8:	f1c3 0220 	rsb	r2, r3, #32
 8000fac:	409f      	lsls	r7, r3
 8000fae:	fa00 fc03 	lsl.w	ip, r0, r3
 8000fb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb6:	4317      	orrs	r7, r2
 8000fb8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000fbc:	fa1f f48e 	uxth.w	r4, lr
 8000fc0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000fc4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000fc8:	fb06 7711 	mls	r7, r6, r1, r7
 8000fcc:	fb01 f004 	mul.w	r0, r1, r4
 8000fd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x62>
 8000fd8:	eb1e 0202 	adds.w	r2, lr, r2
 8000fdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000fe0:	d202      	bcs.n	8000fe8 <__udivmoddi4+0x60>
 8000fe2:	4290      	cmp	r0, r2
 8000fe4:	f200 812d 	bhi.w	8001242 <__udivmoddi4+0x2ba>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	fa1f fc8c 	uxth.w	ip, ip
 8000ff0:	fbb2 f0f6 	udiv	r0, r2, r6
 8000ff4:	fb06 2210 	mls	r2, r6, r0, r2
 8000ff8:	fb00 f404 	mul.w	r4, r0, r4
 8000ffc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8001000:	4564      	cmp	r4, ip
 8001002:	d908      	bls.n	8001016 <__udivmoddi4+0x8e>
 8001004:	eb1e 0c0c 	adds.w	ip, lr, ip
 8001008:	f100 32ff 	add.w	r2, r0, #4294967295
 800100c:	d202      	bcs.n	8001014 <__udivmoddi4+0x8c>
 800100e:	4564      	cmp	r4, ip
 8001010:	f200 811a 	bhi.w	8001248 <__udivmoddi4+0x2c0>
 8001014:	4610      	mov	r0, r2
 8001016:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800101a:	ebac 0c04 	sub.w	ip, ip, r4
 800101e:	2100      	movs	r1, #0
 8001020:	b125      	cbz	r5, 800102c <__udivmoddi4+0xa4>
 8001022:	fa2c f303 	lsr.w	r3, ip, r3
 8001026:	2200      	movs	r2, #0
 8001028:	e9c5 3200 	strd	r3, r2, [r5]
 800102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001030:	428b      	cmp	r3, r1
 8001032:	d905      	bls.n	8001040 <__udivmoddi4+0xb8>
 8001034:	b10d      	cbz	r5, 800103a <__udivmoddi4+0xb2>
 8001036:	e9c5 0100 	strd	r0, r1, [r5]
 800103a:	2100      	movs	r1, #0
 800103c:	4608      	mov	r0, r1
 800103e:	e7f5      	b.n	800102c <__udivmoddi4+0xa4>
 8001040:	fab3 f183 	clz	r1, r3
 8001044:	2900      	cmp	r1, #0
 8001046:	d14d      	bne.n	80010e4 <__udivmoddi4+0x15c>
 8001048:	42a3      	cmp	r3, r4
 800104a:	f0c0 80f2 	bcc.w	8001232 <__udivmoddi4+0x2aa>
 800104e:	4290      	cmp	r0, r2
 8001050:	f080 80ef 	bcs.w	8001232 <__udivmoddi4+0x2aa>
 8001054:	4606      	mov	r6, r0
 8001056:	4623      	mov	r3, r4
 8001058:	4608      	mov	r0, r1
 800105a:	2d00      	cmp	r5, #0
 800105c:	d0e6      	beq.n	800102c <__udivmoddi4+0xa4>
 800105e:	e9c5 6300 	strd	r6, r3, [r5]
 8001062:	e7e3      	b.n	800102c <__udivmoddi4+0xa4>
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 80a2 	bne.w	80011ae <__udivmoddi4+0x226>
 800106a:	1a8a      	subs	r2, r1, r2
 800106c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8001070:	fa1f f68e 	uxth.w	r6, lr
 8001074:	2101      	movs	r1, #1
 8001076:	fbb2 f4f7 	udiv	r4, r2, r7
 800107a:	fb07 2014 	mls	r0, r7, r4, r2
 800107e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8001082:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001086:	fb06 f004 	mul.w	r0, r6, r4
 800108a:	4290      	cmp	r0, r2
 800108c:	d90f      	bls.n	80010ae <__udivmoddi4+0x126>
 800108e:	eb1e 0202 	adds.w	r2, lr, r2
 8001092:	f104 38ff 	add.w	r8, r4, #4294967295
 8001096:	bf2c      	ite	cs
 8001098:	f04f 0901 	movcs.w	r9, #1
 800109c:	f04f 0900 	movcc.w	r9, #0
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d903      	bls.n	80010ac <__udivmoddi4+0x124>
 80010a4:	f1b9 0f00 	cmp.w	r9, #0
 80010a8:	f000 80c8 	beq.w	800123c <__udivmoddi4+0x2b4>
 80010ac:	4644      	mov	r4, r8
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	fa1f fc8c 	uxth.w	ip, ip
 80010b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80010b8:	fb07 2210 	mls	r2, r7, r0, r2
 80010bc:	fb00 f606 	mul.w	r6, r0, r6
 80010c0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80010c4:	4566      	cmp	r6, ip
 80010c6:	d908      	bls.n	80010da <__udivmoddi4+0x152>
 80010c8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80010cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010d0:	d202      	bcs.n	80010d8 <__udivmoddi4+0x150>
 80010d2:	4566      	cmp	r6, ip
 80010d4:	f200 80bb 	bhi.w	800124e <__udivmoddi4+0x2c6>
 80010d8:	4610      	mov	r0, r2
 80010da:	ebac 0c06 	sub.w	ip, ip, r6
 80010de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010e2:	e79d      	b.n	8001020 <__udivmoddi4+0x98>
 80010e4:	f1c1 0620 	rsb	r6, r1, #32
 80010e8:	408b      	lsls	r3, r1
 80010ea:	fa04 fe01 	lsl.w	lr, r4, r1
 80010ee:	fa22 f706 	lsr.w	r7, r2, r6
 80010f2:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f6:	40f4      	lsrs	r4, r6
 80010f8:	408a      	lsls	r2, r1
 80010fa:	431f      	orrs	r7, r3
 80010fc:	ea4e 030c 	orr.w	r3, lr, ip
 8001100:	fa00 fe01 	lsl.w	lr, r0, r1
 8001104:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001108:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800110c:	fa1f fc87 	uxth.w	ip, r7
 8001110:	fbb4 f0f8 	udiv	r0, r4, r8
 8001114:	fb08 4410 	mls	r4, r8, r0, r4
 8001118:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800111c:	fb00 f90c 	mul.w	r9, r0, ip
 8001120:	45a1      	cmp	r9, r4
 8001122:	d90e      	bls.n	8001142 <__udivmoddi4+0x1ba>
 8001124:	193c      	adds	r4, r7, r4
 8001126:	f100 3aff 	add.w	sl, r0, #4294967295
 800112a:	bf2c      	ite	cs
 800112c:	f04f 0b01 	movcs.w	fp, #1
 8001130:	f04f 0b00 	movcc.w	fp, #0
 8001134:	45a1      	cmp	r9, r4
 8001136:	d903      	bls.n	8001140 <__udivmoddi4+0x1b8>
 8001138:	f1bb 0f00 	cmp.w	fp, #0
 800113c:	f000 8093 	beq.w	8001266 <__udivmoddi4+0x2de>
 8001140:	4650      	mov	r0, sl
 8001142:	eba4 0409 	sub.w	r4, r4, r9
 8001146:	fa1f f983 	uxth.w	r9, r3
 800114a:	fbb4 f3f8 	udiv	r3, r4, r8
 800114e:	fb08 4413 	mls	r4, r8, r3, r4
 8001152:	fb03 fc0c 	mul.w	ip, r3, ip
 8001156:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800115a:	45a4      	cmp	ip, r4
 800115c:	d906      	bls.n	800116c <__udivmoddi4+0x1e4>
 800115e:	193c      	adds	r4, r7, r4
 8001160:	f103 38ff 	add.w	r8, r3, #4294967295
 8001164:	d201      	bcs.n	800116a <__udivmoddi4+0x1e2>
 8001166:	45a4      	cmp	ip, r4
 8001168:	d87a      	bhi.n	8001260 <__udivmoddi4+0x2d8>
 800116a:	4643      	mov	r3, r8
 800116c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001170:	eba4 040c 	sub.w	r4, r4, ip
 8001174:	fba0 9802 	umull	r9, r8, r0, r2
 8001178:	4544      	cmp	r4, r8
 800117a:	46cc      	mov	ip, r9
 800117c:	4643      	mov	r3, r8
 800117e:	d302      	bcc.n	8001186 <__udivmoddi4+0x1fe>
 8001180:	d106      	bne.n	8001190 <__udivmoddi4+0x208>
 8001182:	45ce      	cmp	lr, r9
 8001184:	d204      	bcs.n	8001190 <__udivmoddi4+0x208>
 8001186:	3801      	subs	r0, #1
 8001188:	ebb9 0c02 	subs.w	ip, r9, r2
 800118c:	eb68 0307 	sbc.w	r3, r8, r7
 8001190:	b15d      	cbz	r5, 80011aa <__udivmoddi4+0x222>
 8001192:	ebbe 020c 	subs.w	r2, lr, ip
 8001196:	eb64 0403 	sbc.w	r4, r4, r3
 800119a:	fa04 f606 	lsl.w	r6, r4, r6
 800119e:	fa22 f301 	lsr.w	r3, r2, r1
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	431e      	orrs	r6, r3
 80011a6:	e9c5 6400 	strd	r6, r4, [r5]
 80011aa:	2100      	movs	r1, #0
 80011ac:	e73e      	b.n	800102c <__udivmoddi4+0xa4>
 80011ae:	fa02 fe03 	lsl.w	lr, r2, r3
 80011b2:	f1c3 0120 	rsb	r1, r3, #32
 80011b6:	fa04 f203 	lsl.w	r2, r4, r3
 80011ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80011be:	40cc      	lsrs	r4, r1
 80011c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80011c4:	fa20 f101 	lsr.w	r1, r0, r1
 80011c8:	fa1f f68e 	uxth.w	r6, lr
 80011cc:	fbb4 f0f7 	udiv	r0, r4, r7
 80011d0:	430a      	orrs	r2, r1
 80011d2:	fb07 4410 	mls	r4, r7, r0, r4
 80011d6:	0c11      	lsrs	r1, r2, #16
 80011d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80011dc:	fb00 f406 	mul.w	r4, r0, r6
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d90e      	bls.n	8001202 <__udivmoddi4+0x27a>
 80011e4:	eb1e 0101 	adds.w	r1, lr, r1
 80011e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80011ec:	bf2c      	ite	cs
 80011ee:	f04f 0901 	movcs.w	r9, #1
 80011f2:	f04f 0900 	movcc.w	r9, #0
 80011f6:	428c      	cmp	r4, r1
 80011f8:	d902      	bls.n	8001200 <__udivmoddi4+0x278>
 80011fa:	f1b9 0f00 	cmp.w	r9, #0
 80011fe:	d02c      	beq.n	800125a <__udivmoddi4+0x2d2>
 8001200:	4640      	mov	r0, r8
 8001202:	1b09      	subs	r1, r1, r4
 8001204:	b292      	uxth	r2, r2
 8001206:	fbb1 f4f7 	udiv	r4, r1, r7
 800120a:	fb07 1114 	mls	r1, r7, r4, r1
 800120e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001212:	fb04 f106 	mul.w	r1, r4, r6
 8001216:	4291      	cmp	r1, r2
 8001218:	d907      	bls.n	800122a <__udivmoddi4+0x2a2>
 800121a:	eb1e 0202 	adds.w	r2, lr, r2
 800121e:	f104 38ff 	add.w	r8, r4, #4294967295
 8001222:	d201      	bcs.n	8001228 <__udivmoddi4+0x2a0>
 8001224:	4291      	cmp	r1, r2
 8001226:	d815      	bhi.n	8001254 <__udivmoddi4+0x2cc>
 8001228:	4644      	mov	r4, r8
 800122a:	1a52      	subs	r2, r2, r1
 800122c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001230:	e721      	b.n	8001076 <__udivmoddi4+0xee>
 8001232:	1a86      	subs	r6, r0, r2
 8001234:	eb64 0303 	sbc.w	r3, r4, r3
 8001238:	2001      	movs	r0, #1
 800123a:	e70e      	b.n	800105a <__udivmoddi4+0xd2>
 800123c:	3c02      	subs	r4, #2
 800123e:	4472      	add	r2, lr
 8001240:	e735      	b.n	80010ae <__udivmoddi4+0x126>
 8001242:	3902      	subs	r1, #2
 8001244:	4472      	add	r2, lr
 8001246:	e6d0      	b.n	8000fea <__udivmoddi4+0x62>
 8001248:	44f4      	add	ip, lr
 800124a:	3802      	subs	r0, #2
 800124c:	e6e3      	b.n	8001016 <__udivmoddi4+0x8e>
 800124e:	44f4      	add	ip, lr
 8001250:	3802      	subs	r0, #2
 8001252:	e742      	b.n	80010da <__udivmoddi4+0x152>
 8001254:	3c02      	subs	r4, #2
 8001256:	4472      	add	r2, lr
 8001258:	e7e7      	b.n	800122a <__udivmoddi4+0x2a2>
 800125a:	3802      	subs	r0, #2
 800125c:	4471      	add	r1, lr
 800125e:	e7d0      	b.n	8001202 <__udivmoddi4+0x27a>
 8001260:	3b02      	subs	r3, #2
 8001262:	443c      	add	r4, r7
 8001264:	e782      	b.n	800116c <__udivmoddi4+0x1e4>
 8001266:	3802      	subs	r0, #2
 8001268:	443c      	add	r4, r7
 800126a:	e76a      	b.n	8001142 <__udivmoddi4+0x1ba>

0800126c <__aeabi_idiv0>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800127c:	2334      	movs	r3, #52	@ 0x34
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <tx_application_define+0x44>)
 8001286:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <tx_application_define+0x48>)
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <tx_application_define+0x4c>)
 800128a:	f00c f9bf 	bl	800d60c <_txe_byte_pool_create>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10a      	bne.n	80012aa <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <tx_application_define+0x4c>)
 8001296:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f000 f957 	bl	800154c <App_ThreadX_Init>
 800129e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001fc 	.word	0x200001fc
 80012b8:	080121a8 	.word	0x080121a8
 80012bc:	200005fc 	.word	0x200005fc

080012c0 <Set_Pin_Output>:
#include "tx_api.h"
extern TIM_HandleTypeDef htim2;



void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80012e0:	2311      	movs	r3, #17
 80012e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f005 f842 	bl	8006378 <HAL_GPIO_Init>
}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f005 f824 	bl	8006378 <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <delay_us>:

// Delay untuk mikrodetik
void delay_us(uint16_t us) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <delay_us+0x38>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start(&htim2);
 800134a:	4809      	ldr	r0, [pc, #36]	@ (8001370 <delay_us+0x38>)
 800134c:	f008 ffb0 	bl	800a2b0 <HAL_TIM_Base_Start>
	while (__HAL_TIM_GET_COUNTER(&htim2) < us){
 8001350:	e001      	b.n	8001356 <delay_us+0x1e>
		tx_thread_relinquish();
 8001352:	f00c faed 	bl	800d930 <_txe_thread_relinquish>
	while (__HAL_TIM_GET_COUNTER(&htim2) < us){
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <delay_us+0x38>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	429a      	cmp	r2, r3
 8001360:	d3f7      	bcc.n	8001352 <delay_us+0x1a>
	}
	HAL_TIM_Base_Stop(&htim2);
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <delay_us+0x38>)
 8001364:	f008 fff0 	bl	800a348 <HAL_TIM_Base_Stop>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20004530 	.word	0x20004530

08001374 <DS18B20_Start>:

uint8_t DS18B20_Start(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	uint8_t response = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai output
 800137e:	2120      	movs	r1, #32
 8001380:	4813      	ldr	r0, [pc, #76]	@ (80013d0 <DS18B20_Start+0x5c>)
 8001382:	f7ff ff9d 	bl	80012c0 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Pull pin low
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <DS18B20_Start+0x5c>)
 800138c:	f005 f95e 	bl	800664c <HAL_GPIO_WritePin>
	delay_us(480);  // Tahan selama 480us
 8001390:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001394:	f7ff ffd0 	bl	8001338 <delay_us>
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai input
 8001398:	2120      	movs	r1, #32
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <DS18B20_Start+0x5c>)
 800139c:	f7ff ffae 	bl	80012fc <Set_Pin_Input>
	delay_us(80);  // Tunggu selama 80us
 80013a0:	2050      	movs	r0, #80	@ 0x50
 80013a2:	f7ff ffc9 	bl	8001338 <delay_us>
	if (!HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))response = 1;  // Jika pin low, sensor hadir
 80013a6:	2120      	movs	r1, #32
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <DS18B20_Start+0x5c>)
 80013aa:	f005 f937 	bl	800661c <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <DS18B20_Start+0x46>
 80013b4:	2301      	movs	r3, #1
 80013b6:	71fb      	strb	r3, [r7, #7]
 80013b8:	e001      	b.n	80013be <DS18B20_Start+0x4a>
	else response = -1;
 80013ba:	23ff      	movs	r3, #255	@ 0xff
 80013bc:	71fb      	strb	r3, [r7, #7]
	delay_us(400);  // Tunggu selama 400us
 80013be:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80013c2:	f7ff ffb9 	bl	8001338 <delay_us>
	return response;
 80013c6:	79fb      	ldrb	r3, [r7, #7]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	42020000 	.word	0x42020000

080013d4 <DS18B20_Write>:

void DS18B20_Write(uint8_t data) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai output
 80013de:	2120      	movs	r1, #32
 80013e0:	481e      	ldr	r0, [pc, #120]	@ (800145c <DS18B20_Write+0x88>)
 80013e2:	f7ff ff6d 	bl	80012c0 <Set_Pin_Output>
	for (int i = 0; i < 8; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	e02e      	b.n	800144a <DS18B20_Write+0x76>
		if (data & (1 << i)) {  // Jika bit adalah 1
 80013ec:	79fa      	ldrb	r2, [r7, #7]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	fa42 f303 	asr.w	r3, r2, r3
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <DS18B20_Write+0x50>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai output
 80013fc:	2120      	movs	r1, #32
 80013fe:	4817      	ldr	r0, [pc, #92]	@ (800145c <DS18B20_Write+0x88>)
 8001400:	f7ff ff5e 	bl	80012c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Pull pin low
 8001404:	2200      	movs	r2, #0
 8001406:	2120      	movs	r1, #32
 8001408:	4814      	ldr	r0, [pc, #80]	@ (800145c <DS18B20_Write+0x88>)
 800140a:	f005 f91f 	bl	800664c <HAL_GPIO_WritePin>
			delay_us(1);  // Tunggu selama 1us
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ff92 	bl	8001338 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai input
 8001414:	2120      	movs	r1, #32
 8001416:	4811      	ldr	r0, [pc, #68]	@ (800145c <DS18B20_Write+0x88>)
 8001418:	f7ff ff70 	bl	80012fc <Set_Pin_Input>
			delay_us(60);  // Tunggu selama 60us
 800141c:	203c      	movs	r0, #60	@ 0x3c
 800141e:	f7ff ff8b 	bl	8001338 <delay_us>
 8001422:	e00f      	b.n	8001444 <DS18B20_Write+0x70>
		} else {  // Jika bit adalah 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai output
 8001424:	2120      	movs	r1, #32
 8001426:	480d      	ldr	r0, [pc, #52]	@ (800145c <DS18B20_Write+0x88>)
 8001428:	f7ff ff4a 	bl	80012c0 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Pull pin low
 800142c:	2200      	movs	r2, #0
 800142e:	2120      	movs	r1, #32
 8001430:	480a      	ldr	r0, [pc, #40]	@ (800145c <DS18B20_Write+0x88>)
 8001432:	f005 f90b 	bl	800664c <HAL_GPIO_WritePin>
			delay_us(60);  // Tunggu selama 60us
 8001436:	203c      	movs	r0, #60	@ 0x3c
 8001438:	f7ff ff7e 	bl	8001338 <delay_us>
			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai input
 800143c:	2120      	movs	r1, #32
 800143e:	4807      	ldr	r0, [pc, #28]	@ (800145c <DS18B20_Write+0x88>)
 8001440:	f7ff ff5c 	bl	80012fc <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b07      	cmp	r3, #7
 800144e:	ddcd      	ble.n	80013ec <DS18B20_Write+0x18>
		}
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	42020000 	.word	0x42020000

08001460 <DS18B20_Read>:

uint8_t DS18B20_Read(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai input
 800146a:	2120      	movs	r1, #32
 800146c:	481a      	ldr	r0, [pc, #104]	@ (80014d8 <DS18B20_Read+0x78>)
 800146e:	f7ff ff45 	bl	80012fc <Set_Pin_Input>
	for (int i = 0; i < 8; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	e026      	b.n	80014c6 <DS18B20_Read+0x66>
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai output
 8001478:	2120      	movs	r1, #32
 800147a:	4817      	ldr	r0, [pc, #92]	@ (80014d8 <DS18B20_Read+0x78>)
 800147c:	f7ff ff20 	bl	80012c0 <Set_Pin_Output>
		HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // Pull pin low
 8001480:	2200      	movs	r2, #0
 8001482:	2120      	movs	r1, #32
 8001484:	4814      	ldr	r0, [pc, #80]	@ (80014d8 <DS18B20_Read+0x78>)
 8001486:	f005 f8e1 	bl	800664c <HAL_GPIO_WritePin>
		delay_us(2);  // Tunggu selama 2us
 800148a:	2002      	movs	r0, #2
 800148c:	f7ff ff54 	bl	8001338 <delay_us>
		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // Set pin sebagai input
 8001490:	2120      	movs	r1, #32
 8001492:	4811      	ldr	r0, [pc, #68]	@ (80014d8 <DS18B20_Read+0x78>)
 8001494:	f7ff ff32 	bl	80012fc <Set_Pin_Input>
		if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN)) {  // Jika pin high
 8001498:	2120      	movs	r1, #32
 800149a:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <DS18B20_Read+0x78>)
 800149c:	f005 f8be 	bl	800661c <HAL_GPIO_ReadPin>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <DS18B20_Read+0x5a>
			value |= 1 << i;  // Simpan bit ke value
 80014a6:	2201      	movs	r2, #1
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	71fb      	strb	r3, [r7, #7]
		}
		delay_us(60);  // Tunggu selama 60us
 80014ba:	203c      	movs	r0, #60	@ 0x3c
 80014bc:	f7ff ff3c 	bl	8001338 <delay_us>
	for (int i = 0; i < 8; i++) {
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b07      	cmp	r3, #7
 80014ca:	ddd5      	ble.n	8001478 <DS18B20_Read+0x18>
	}
	return value;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	42020000 	.word	0x42020000

080014dc <DS18B20_GetTemp>:

float DS18B20_GetTemp(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint8_t temp_lsb, temp_msb;
	int16_t temp;

	DS18B20_Start();
 80014e2:	f7ff ff47 	bl	8001374 <DS18B20_Start>
	DS18B20_Write(0xCC);  // SKIP ROM
 80014e6:	20cc      	movs	r0, #204	@ 0xcc
 80014e8:	f7ff ff74 	bl	80013d4 <DS18B20_Write>
	DS18B20_Write(0x44);  // CONVERT T
 80014ec:	2044      	movs	r0, #68	@ 0x44
 80014ee:	f7ff ff71 	bl	80013d4 <DS18B20_Write>
	tx_thread_sleep(750);
 80014f2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80014f6:	f00b fad5 	bl	800caa4 <_tx_thread_sleep>

	DS18B20_Start();
 80014fa:	f7ff ff3b 	bl	8001374 <DS18B20_Start>
	DS18B20_Write(0xCC);  // SKIP ROM
 80014fe:	20cc      	movs	r0, #204	@ 0xcc
 8001500:	f7ff ff68 	bl	80013d4 <DS18B20_Write>
	DS18B20_Write(0xBE);  // READ SCRATCHPAD
 8001504:	20be      	movs	r0, #190	@ 0xbe
 8001506:	f7ff ff65 	bl	80013d4 <DS18B20_Write>

	temp_lsb = DS18B20_Read();
 800150a:	f7ff ffa9 	bl	8001460 <DS18B20_Read>
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	temp_msb = DS18B20_Read();
 8001512:	f7ff ffa5 	bl	8001460 <DS18B20_Read>
 8001516:	4603      	mov	r3, r0
 8001518:	71bb      	strb	r3, [r7, #6]
	temp = (temp_msb << 8) | temp_lsb;
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	b21a      	sxth	r2, r3
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	b21b      	sxth	r3, r3
 8001524:	4313      	orrs	r3, r2
 8001526:	80bb      	strh	r3, [r7, #4]

	return (float)temp / 16.0;
 8001528:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001534:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8001538:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800153c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af08      	add	r7, sp, #32
 8001552:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60bb      	str	r3, [r7, #8]
	(void)byte_pool;

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
	tx_thread_create(&setone, "Setone", ADC_Reading, 0, thread_Setone, THREAD_STACK_SIZE, 4, 4, 1, TX_AUTO_START);
 800155c:	23b0      	movs	r3, #176	@ 0xb0
 800155e:	9306      	str	r3, [sp, #24]
 8001560:	2301      	movs	r3, #1
 8001562:	9305      	str	r3, [sp, #20]
 8001564:	2301      	movs	r3, #1
 8001566:	9304      	str	r3, [sp, #16]
 8001568:	2304      	movs	r3, #4
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	2304      	movs	r3, #4
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	4b45      	ldr	r3, [pc, #276]	@ (800168c <App_ThreadX_Init+0x140>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2300      	movs	r3, #0
 800157c:	4a44      	ldr	r2, [pc, #272]	@ (8001690 <App_ThreadX_Init+0x144>)
 800157e:	4945      	ldr	r1, [pc, #276]	@ (8001694 <App_ThreadX_Init+0x148>)
 8001580:	4845      	ldr	r0, [pc, #276]	@ (8001698 <App_ThreadX_Init+0x14c>)
 8001582:	f00c f8e3 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&settwo, "Settwo", Setup, 0, thread_Settwo, THREAD_STACK_SIZE, 7, 7, 1, TX_AUTO_START);
 8001586:	23b0      	movs	r3, #176	@ 0xb0
 8001588:	9306      	str	r3, [sp, #24]
 800158a:	2301      	movs	r3, #1
 800158c:	9305      	str	r3, [sp, #20]
 800158e:	2301      	movs	r3, #1
 8001590:	9304      	str	r3, [sp, #16]
 8001592:	2307      	movs	r3, #7
 8001594:	9303      	str	r3, [sp, #12]
 8001596:	2307      	movs	r3, #7
 8001598:	9302      	str	r3, [sp, #8]
 800159a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <App_ThreadX_Init+0x150>)
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2300      	movs	r3, #0
 80015a6:	4a3e      	ldr	r2, [pc, #248]	@ (80016a0 <App_ThreadX_Init+0x154>)
 80015a8:	493e      	ldr	r1, [pc, #248]	@ (80016a4 <App_ThreadX_Init+0x158>)
 80015aa:	483f      	ldr	r0, [pc, #252]	@ (80016a8 <App_ThreadX_Init+0x15c>)
 80015ac:	f00c f8ce 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&setthree, "Setthree", Set_LED, 0, thread_Setthree, THREAD_STACK_SIZE, 6, 6, 1, TX_AUTO_START);
 80015b0:	23b0      	movs	r3, #176	@ 0xb0
 80015b2:	9306      	str	r3, [sp, #24]
 80015b4:	2301      	movs	r3, #1
 80015b6:	9305      	str	r3, [sp, #20]
 80015b8:	2301      	movs	r3, #1
 80015ba:	9304      	str	r3, [sp, #16]
 80015bc:	2306      	movs	r3, #6
 80015be:	9303      	str	r3, [sp, #12]
 80015c0:	2306      	movs	r3, #6
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <App_ThreadX_Init+0x160>)
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	4a37      	ldr	r2, [pc, #220]	@ (80016b0 <App_ThreadX_Init+0x164>)
 80015d2:	4938      	ldr	r1, [pc, #224]	@ (80016b4 <App_ThreadX_Init+0x168>)
 80015d4:	4838      	ldr	r0, [pc, #224]	@ (80016b8 <App_ThreadX_Init+0x16c>)
 80015d6:	f00c f8b9 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&setfour, "Setfour", Transmit_Data, 0, thread_Setfour, THREAD_STACK_SIZE, 6, 6, 1, TX_AUTO_START);
 80015da:	23b0      	movs	r3, #176	@ 0xb0
 80015dc:	9306      	str	r3, [sp, #24]
 80015de:	2301      	movs	r3, #1
 80015e0:	9305      	str	r3, [sp, #20]
 80015e2:	2301      	movs	r3, #1
 80015e4:	9304      	str	r3, [sp, #16]
 80015e6:	2306      	movs	r3, #6
 80015e8:	9303      	str	r3, [sp, #12]
 80015ea:	2306      	movs	r3, #6
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <App_ThreadX_Init+0x170>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	4a31      	ldr	r2, [pc, #196]	@ (80016c0 <App_ThreadX_Init+0x174>)
 80015fc:	4931      	ldr	r1, [pc, #196]	@ (80016c4 <App_ThreadX_Init+0x178>)
 80015fe:	4832      	ldr	r0, [pc, #200]	@ (80016c8 <App_ThreadX_Init+0x17c>)
 8001600:	f00c f8a4 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&setfive, "Setfive", Power_Consumption, 0, thread_Setfive, THREAD_STACK_SIZE, 7, 7, 1, TX_AUTO_START);
 8001604:	23b0      	movs	r3, #176	@ 0xb0
 8001606:	9306      	str	r3, [sp, #24]
 8001608:	2301      	movs	r3, #1
 800160a:	9305      	str	r3, [sp, #20]
 800160c:	2301      	movs	r3, #1
 800160e:	9304      	str	r3, [sp, #16]
 8001610:	2307      	movs	r3, #7
 8001612:	9303      	str	r3, [sp, #12]
 8001614:	2307      	movs	r3, #7
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <App_ThreadX_Init+0x180>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	4a2a      	ldr	r2, [pc, #168]	@ (80016d0 <App_ThreadX_Init+0x184>)
 8001626:	492b      	ldr	r1, [pc, #172]	@ (80016d4 <App_ThreadX_Init+0x188>)
 8001628:	482b      	ldr	r0, [pc, #172]	@ (80016d8 <App_ThreadX_Init+0x18c>)
 800162a:	f00c f88f 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&setsix, "Setsix", Temperature_Reading, 0, thread_Setsix, THREAD_STACK_SIZE, 4, 4, 1, TX_AUTO_START);
 800162e:	23b0      	movs	r3, #176	@ 0xb0
 8001630:	9306      	str	r3, [sp, #24]
 8001632:	2301      	movs	r3, #1
 8001634:	9305      	str	r3, [sp, #20]
 8001636:	2301      	movs	r3, #1
 8001638:	9304      	str	r3, [sp, #16]
 800163a:	2304      	movs	r3, #4
 800163c:	9303      	str	r3, [sp, #12]
 800163e:	2304      	movs	r3, #4
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <App_ThreadX_Init+0x190>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	2300      	movs	r3, #0
 800164e:	4a24      	ldr	r2, [pc, #144]	@ (80016e0 <App_ThreadX_Init+0x194>)
 8001650:	4924      	ldr	r1, [pc, #144]	@ (80016e4 <App_ThreadX_Init+0x198>)
 8001652:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <App_ThreadX_Init+0x19c>)
 8001654:	f00c f87a 	bl	800d74c <_txe_thread_create>
	tx_thread_create(&setseven, "setseven", Memory_Management, 0, thread_Setseven, THREAD_STACK_SIZE, 5, 5, 1, TX_AUTO_START);
 8001658:	23b0      	movs	r3, #176	@ 0xb0
 800165a:	9306      	str	r3, [sp, #24]
 800165c:	2301      	movs	r3, #1
 800165e:	9305      	str	r3, [sp, #20]
 8001660:	2301      	movs	r3, #1
 8001662:	9304      	str	r3, [sp, #16]
 8001664:	2305      	movs	r3, #5
 8001666:	9303      	str	r3, [sp, #12]
 8001668:	2305      	movs	r3, #5
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <App_ThreadX_Init+0x1a0>)
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <App_ThreadX_Init+0x1a4>)
 800167a:	491e      	ldr	r1, [pc, #120]	@ (80016f4 <App_ThreadX_Init+0x1a8>)
 800167c:	481e      	ldr	r0, [pc, #120]	@ (80016f8 <App_ThreadX_Init+0x1ac>)
 800167e:	f00c f865 	bl	800d74c <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000630 	.word	0x20000630
 8001690:	08001709 	.word	0x08001709
 8001694:	080121bc 	.word	0x080121bc
 8001698:	20003e30 	.word	0x20003e30
 800169c:	20000e30 	.word	0x20000e30
 80016a0:	08001cf5 	.word	0x08001cf5
 80016a4:	080121c4 	.word	0x080121c4
 80016a8:	20003ee0 	.word	0x20003ee0
 80016ac:	20001630 	.word	0x20001630
 80016b0:	08001d21 	.word	0x08001d21
 80016b4:	080121cc 	.word	0x080121cc
 80016b8:	20003f90 	.word	0x20003f90
 80016bc:	20001e30 	.word	0x20001e30
 80016c0:	08001d7d 	.word	0x08001d7d
 80016c4:	080121d8 	.word	0x080121d8
 80016c8:	20004040 	.word	0x20004040
 80016cc:	20002630 	.word	0x20002630
 80016d0:	08001a11 	.word	0x08001a11
 80016d4:	080121e0 	.word	0x080121e0
 80016d8:	200040f0 	.word	0x200040f0
 80016dc:	20002e30 	.word	0x20002e30
 80016e0:	08001fa9 	.word	0x08001fa9
 80016e4:	080121e8 	.word	0x080121e8
 80016e8:	200041a0 	.word	0x200041a0
 80016ec:	20003630 	.word	0x20003630
 80016f0:	08001f01 	.word	0x08001f01
 80016f4:	080121f0 	.word	0x080121f0
 80016f8:	20004250 	.word	0x20004250

080016fc <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001700:	f00a ffc2 	bl	800c688 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <ADC_Reading>:

/* USER CODE BEGIN 1 */
void ADC_Reading(ULONG initial_input) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b094      	sub	sp, #80	@ 0x50
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint32_t sumADC_voltage1, sumADC_current1, sumADC_voltage2, sumADC_current2;
	float voltage_current1,voltage_current2;
	uint32_t adcBuffer[4];

    while(1) {
    	sumADC_voltage1 = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
    	sumADC_current1 = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
    	sumADC_voltage2 = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	643b      	str	r3, [r7, #64]	@ 0x40
    	sumADC_current2 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    	HAL_ADC_Start_DMA(&hadc1, adcBuffer, 4);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2204      	movs	r2, #4
 8001726:	4619      	mov	r1, r3
 8001728:	48ad      	ldr	r0, [pc, #692]	@ (80019e0 <ADC_Reading+0x2d8>)
 800172a:	f002 fad1 	bl	8003cd0 <HAL_ADC_Start_DMA>
    	for (int i = 0; i < 50; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001732:	e012      	b.n	800175a <ADC_Reading+0x52>
    		sumADC_voltage1 += adcBuffer[0];
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001738:	4413      	add	r3, r2
 800173a:	64bb      	str	r3, [r7, #72]	@ 0x48
    		sumADC_voltage2 += adcBuffer[1];
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001740:	4413      	add	r3, r2
 8001742:	643b      	str	r3, [r7, #64]	@ 0x40
    		sumADC_current1 += adcBuffer[2];
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001748:	4413      	add	r3, r2
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
    		sumADC_current2 += adcBuffer[3];
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001750:	4413      	add	r3, r2
 8001752:	63fb      	str	r3, [r7, #60]	@ 0x3c
    	for (int i = 0; i < 50; i++) {
 8001754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001756:	3301      	adds	r3, #1
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800175c:	2b31      	cmp	r3, #49	@ 0x31
 800175e:	dde9      	ble.n	8001734 <ADC_Reading+0x2c>
    	}
    	HAL_ADC_Stop_DMA(&hadc1);
 8001760:	489f      	ldr	r0, [pc, #636]	@ (80019e0 <ADC_Reading+0x2d8>)
 8001762:	f002 fbad 	bl	8003ec0 <HAL_ADC_Stop_DMA>

    	uint32_t avg_voltage1 = sumADC_voltage1 / 50;
 8001766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001768:	4a9e      	ldr	r2, [pc, #632]	@ (80019e4 <ADC_Reading+0x2dc>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
    	uint32_t avg_current1 = sumADC_current1 / 50;
 8001772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001774:	4a9b      	ldr	r2, [pc, #620]	@ (80019e4 <ADC_Reading+0x2dc>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	633b      	str	r3, [r7, #48]	@ 0x30
    	uint32_t avg_voltage2 = sumADC_voltage2 / 50;
 800177e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001780:	4a98      	ldr	r2, [pc, #608]	@ (80019e4 <ADC_Reading+0x2dc>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	uint32_t avg_current2 = sumADC_current2 / 50;
 800178a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800178c:	4a95      	ldr	r2, [pc, #596]	@ (80019e4 <ADC_Reading+0x2dc>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28

    	value_voltage1 = ((avg_voltage1 - 60) * 3882) / (3942 - 60);
 8001796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001798:	f640 722a 	movw	r2, #3882	@ 0xf2a
 800179c:	fb02 f303 	mul.w	r3, r2, r3
 80017a0:	f5a3 3363 	sub.w	r3, r3, #232448	@ 0x38c00
 80017a4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80017a8:	4a8f      	ldr	r2, [pc, #572]	@ (80019e8 <ADC_Reading+0x2e0>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    	value_current1 = ((avg_current1 - 60) * 1023) / (4095 - 60);
 80017b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b6:	4613      	mov	r3, r2
 80017b8:	029b      	lsls	r3, r3, #10
 80017ba:	1a9b      	subs	r3, r3, r2
 80017bc:	f5a3 436f 	sub.w	r3, r3, #61184	@ 0xef00
 80017c0:	3bc4      	subs	r3, #196	@ 0xc4
 80017c2:	4a8a      	ldr	r2, [pc, #552]	@ (80019ec <ADC_Reading+0x2e4>)
 80017c4:	fba2 1203 	umull	r1, r2, r2, r3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	0adb      	lsrs	r3, r3, #11
 80017d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    	value_voltage2 = ((avg_voltage2 - 59) * 3886) / (3994 - 59);
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	f640 722e 	movw	r2, #3886	@ 0xf2e
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	f5a3 335f 	sub.w	r3, r3, #228352	@ 0x37c00
 80017e0:	f2a3 339a 	subw	r3, r3, #922	@ 0x39a
 80017e4:	4a82      	ldr	r2, [pc, #520]	@ (80019f0 <ADC_Reading+0x2e8>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    	value_current2 = ((avg_current2 - 61) * 1023) / (4095 - 61);
 80017f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017f2:	4613      	mov	r3, r2
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	f5a3 4373 	sub.w	r3, r3, #62208	@ 0xf300
 80017fc:	3bc3      	subs	r3, #195	@ 0xc3
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	4a7c      	ldr	r2, [pc, #496]	@ (80019f4 <ADC_Reading+0x2ec>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a9b      	lsrs	r3, r3, #10
 8001808:	84bb      	strh	r3, [r7, #36]	@ 0x24

    	if(value_voltage1 > 3882){
 800180a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800180e:	f640 722a 	movw	r2, #3882	@ 0xf2a
 8001812:	4293      	cmp	r3, r2
 8001814:	d902      	bls.n	800181c <ADC_Reading+0x114>
    		value_voltage1 = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    	}
    	if(value_voltage2 > 3886){
 800181c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001820:	f640 722e 	movw	r2, #3886	@ 0xf2e
 8001824:	4293      	cmp	r3, r2
 8001826:	d902      	bls.n	800182e <ADC_Reading+0x126>
    		value_voltage2 = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    	}

    	voltage1 = (value_voltage1 * 14.6) / 3882;
 800182e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe ffa8 	bl	8000788 <__aeabi_i2d>
 8001838:	a35b      	add	r3, pc, #364	@ (adr r3, 80019a8 <ADC_Reading+0x2a0>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f80d 	bl	800085c <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	a359      	add	r3, pc, #356	@ (adr r3, 80019b0 <ADC_Reading+0x2a8>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f92e 	bl	8000ab0 <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff faf6 	bl	8000e4c <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	4a65      	ldr	r2, [pc, #404]	@ (80019f8 <ADC_Reading+0x2f0>)
 8001864:	6013      	str	r3, [r2, #0]
    	voltage_current1 = (value_current1 * 3.2504) / 1023;
 8001866:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe ff8d 	bl	8000788 <__aeabi_i2d>
 800186e:	a352      	add	r3, pc, #328	@ (adr r3, 80019b8 <ADC_Reading+0x2b0>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fff2 	bl	800085c <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	a34f      	add	r3, pc, #316	@ (adr r3, 80019c0 <ADC_Reading+0x2b8>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7ff f913 	bl	8000ab0 <__aeabi_ddiv>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fadb 	bl	8000e4c <__aeabi_d2f>
 8001896:	4603      	mov	r3, r0
 8001898:	623b      	str	r3, [r7, #32]
    	current1 = ((voltage_current1 - 2.5) / 0.0655);
 800189a:	6a38      	ldr	r0, [r7, #32]
 800189c:	f7fe ff86 	bl	80007ac <__aeabi_f2d>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b55      	ldr	r3, [pc, #340]	@ (80019fc <ADC_Reading+0x2f4>)
 80018a6:	f7fe fe21 	bl	80004ec <__aeabi_dsub>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	a345      	add	r3, pc, #276	@ (adr r3, 80019c8 <ADC_Reading+0x2c0>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7ff f8fa 	bl	8000ab0 <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff fac2 	bl	8000e4c <__aeabi_d2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001a00 <ADC_Reading+0x2f8>)
 80018cc:	6013      	str	r3, [r2, #0]

    	voltage2 = (value_voltage2 * 14.6) / 3836;
 80018ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe ff58 	bl	8000788 <__aeabi_i2d>
 80018d8:	a333      	add	r3, pc, #204	@ (adr r3, 80019a8 <ADC_Reading+0x2a0>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe ffbd 	bl	800085c <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	a339      	add	r3, pc, #228	@ (adr r3, 80019d0 <ADC_Reading+0x2c8>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7ff f8de 	bl	8000ab0 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff faa6 	bl	8000e4c <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	4a40      	ldr	r2, [pc, #256]	@ (8001a04 <ADC_Reading+0x2fc>)
 8001904:	6013      	str	r3, [r2, #0]
    	voltage_current2 = (value_current2 * 3.2504) / 1023;
 8001906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ff3d 	bl	8000788 <__aeabi_i2d>
 800190e:	a32a      	add	r3, pc, #168	@ (adr r3, 80019b8 <ADC_Reading+0x2b0>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe ffa2 	bl	800085c <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	a327      	add	r3, pc, #156	@ (adr r3, 80019c0 <ADC_Reading+0x2b8>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7ff f8c3 	bl	8000ab0 <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff fa8b 	bl	8000e4c <__aeabi_d2f>
 8001936:	4603      	mov	r3, r0
 8001938:	61fb      	str	r3, [r7, #28]
    	current2 = ((voltage_current2 - 2.5) / 0.0665);
 800193a:	69f8      	ldr	r0, [r7, #28]
 800193c:	f7fe ff36 	bl	80007ac <__aeabi_f2d>
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <ADC_Reading+0x2f4>)
 8001946:	f7fe fdd1 	bl	80004ec <__aeabi_dsub>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	a321      	add	r3, pc, #132	@ (adr r3, 80019d8 <ADC_Reading+0x2d0>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7ff f8aa 	bl	8000ab0 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff fa72 	bl	8000e4c <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	4a27      	ldr	r2, [pc, #156]	@ (8001a08 <ADC_Reading+0x300>)
 800196c:	6013      	str	r3, [r2, #0]

    	if(voltage1 == 0){
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <ADC_Reading+0x2f0>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	d103      	bne.n	8001986 <ADC_Reading+0x27e>
    		current1 = 0.0;
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <ADC_Reading+0x2f8>)
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
    	}
    	if(voltage2 == 0){
 8001986:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <ADC_Reading+0x2fc>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001994:	d103      	bne.n	800199e <ADC_Reading+0x296>
    		current2 = 0.0;
 8001996:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <ADC_Reading+0x300>)
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
    	}
    	tx_thread_sleep(50);
 800199e:	2032      	movs	r0, #50	@ 0x32
 80019a0:	f00b f880 	bl	800caa4 <_tx_thread_sleep>
    while(1) {
 80019a4:	e6b4      	b.n	8001710 <ADC_Reading+0x8>
 80019a6:	bf00      	nop
 80019a8:	33333333 	.word	0x33333333
 80019ac:	402d3333 	.word	0x402d3333
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40ae5400 	.word	0x40ae5400
 80019b8:	b71758e2 	.word	0xb71758e2
 80019bc:	400a00d1 	.word	0x400a00d1
 80019c0:	00000000 	.word	0x00000000
 80019c4:	408ff800 	.word	0x408ff800
 80019c8:	a5e353f8 	.word	0xa5e353f8
 80019cc:	3fb0c49b 	.word	0x3fb0c49b
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40adf800 	.word	0x40adf800
 80019d8:	dd2f1aa0 	.word	0xdd2f1aa0
 80019dc:	3fb10624 	.word	0x3fb10624
 80019e0:	20004338 	.word	0x20004338
 80019e4:	51eb851f 	.word	0x51eb851f
 80019e8:	10e1cc09 	.word	0x10e1cc09
 80019ec:	03dec141 	.word	0x03dec141
 80019f0:	853cb2c7 	.word	0x853cb2c7
 80019f4:	81f79f8b 	.word	0x81f79f8b
 80019f8:	20004314 	.word	0x20004314
 80019fc:	40040000 	.word	0x40040000
 8001a00:	20004318 	.word	0x20004318
 8001a04:	2000431c 	.word	0x2000431c
 8001a08:	20004320 	.word	0x20004320
 8001a0c:	00000000 	.word	0x00000000

08001a10 <Power_Consumption>:
    }
}


void Power_Consumption(ULONG initial_input) {
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	float CurrentFiltered1,CurrentFiltered2;
	while(1) {
		//Current batt1 Consumption Algorithm
		NowMillis1 = tx_time_get();
 8001a18:	f00b fba4 	bl	800d164 <_tx_time_get>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4aa2      	ldr	r2, [pc, #648]	@ (8001ca8 <Power_Consumption+0x298>)
 8001a20:	6013      	str	r3, [r2, #0]
		if (NowMillis1 - BeforeMillis1 >= 1000){
 8001a22:	4ba1      	ldr	r3, [pc, #644]	@ (8001ca8 <Power_Consumption+0x298>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4ba1      	ldr	r3, [pc, #644]	@ (8001cac <Power_Consumption+0x29c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a30:	d35e      	bcc.n	8001af0 <Power_Consumption+0xe0>
			CurrentFiltered1 = 0.2 * current1 + 0.8 * CurrentFiltered1;
 8001a32:	4b9f      	ldr	r3, [pc, #636]	@ (8001cb0 <Power_Consumption+0x2a0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe feb8 	bl	80007ac <__aeabi_f2d>
 8001a3c:	a390      	add	r3, pc, #576	@ (adr r3, 8001c80 <Power_Consumption+0x270>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe ff0b 	bl	800085c <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4614      	mov	r4, r2
 8001a4c:	461d      	mov	r5, r3
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7fe feac 	bl	80007ac <__aeabi_f2d>
 8001a54:	a38c      	add	r3, pc, #560	@ (adr r3, 8001c88 <Power_Consumption+0x278>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe feff 	bl	800085c <__aeabi_dmul>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f7fe fd43 	bl	80004f0 <__adddf3>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f9eb 	bl	8000e4c <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	60fb      	str	r3, [r7, #12]
			ConsumptionEnergy1 -= (CurrentFiltered1 / 3600);
 8001a7a:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb4 <Power_Consumption+0x2a4>)
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a84:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8001cb8 <Power_Consumption+0x2a8>
 8001a88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a90:	4b88      	ldr	r3, [pc, #544]	@ (8001cb4 <Power_Consumption+0x2a4>)
 8001a92:	edc3 7a00 	vstr	s15, [r3]
			batterypercentage1 = ((BatteryCapacity1 - ConsumptionEnergy1) / BatteryCapacity1) *100;
 8001a96:	4b87      	ldr	r3, [pc, #540]	@ (8001cb4 <Power_Consumption+0x2a4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fe86 	bl	80007ac <__aeabi_f2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f04f 0000 	mov.w	r0, #0
 8001aa8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001aac:	f7fe fd1e 	bl	80004ec <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ac0:	f7fe fff6 	bl	8000ab0 <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4b7a      	ldr	r3, [pc, #488]	@ (8001cbc <Power_Consumption+0x2ac>)
 8001ad2:	f7fe fec3 	bl	800085c <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f9b5 	bl	8000e4c <__aeabi_d2f>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4a76      	ldr	r2, [pc, #472]	@ (8001cc0 <Power_Consumption+0x2b0>)
 8001ae6:	6013      	str	r3, [r2, #0]
			BeforeMillis1 = NowMillis1;
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <Power_Consumption+0x298>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6f      	ldr	r2, [pc, #444]	@ (8001cac <Power_Consumption+0x29c>)
 8001aee:	6013      	str	r3, [r2, #0]
		}

		//Current batt2 Consumption Algorithm
		NowMillis2 = tx_time_get();
 8001af0:	f00b fb38 	bl	800d164 <_tx_time_get>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a73      	ldr	r2, [pc, #460]	@ (8001cc4 <Power_Consumption+0x2b4>)
 8001af8:	6013      	str	r3, [r2, #0]
		if (NowMillis2 - BeforeMillis2 >= 1000){
 8001afa:	4b72      	ldr	r3, [pc, #456]	@ (8001cc4 <Power_Consumption+0x2b4>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b72      	ldr	r3, [pc, #456]	@ (8001cc8 <Power_Consumption+0x2b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b08:	d35c      	bcc.n	8001bc4 <Power_Consumption+0x1b4>
			CurrentFiltered2 = 0.2 * current2 + 0.8 * CurrentFiltered2;
 8001b0a:	4b70      	ldr	r3, [pc, #448]	@ (8001ccc <Power_Consumption+0x2bc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fe4c 	bl	80007ac <__aeabi_f2d>
 8001b14:	a35a      	add	r3, pc, #360	@ (adr r3, 8001c80 <Power_Consumption+0x270>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fe9f 	bl	800085c <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	461d      	mov	r5, r3
 8001b26:	68b8      	ldr	r0, [r7, #8]
 8001b28:	f7fe fe40 	bl	80007ac <__aeabi_f2d>
 8001b2c:	a356      	add	r3, pc, #344	@ (adr r3, 8001c88 <Power_Consumption+0x278>)
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f7fe fe93 	bl	800085c <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fcd7 	bl	80004f0 <__adddf3>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f97f 	bl	8000e4c <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	60bb      	str	r3, [r7, #8]
			ConsumptionEnergy2 -= (CurrentFiltered2 / 3600);
 8001b52:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd0 <Power_Consumption+0x2c0>)
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	edd7 6a02 	vldr	s13, [r7, #8]
 8001b5c:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 8001cb8 <Power_Consumption+0x2a8>
 8001b60:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b68:	4b59      	ldr	r3, [pc, #356]	@ (8001cd0 <Power_Consumption+0x2c0>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]
			batterypercentage2 = ((BatteryCapacity2 - ConsumptionEnergy2) / BatteryCapacity2) *100;
 8001b6e:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <Power_Consumption+0x2c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fe1a 	bl	80007ac <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	a144      	add	r1, pc, #272	@ (adr r1, 8001c90 <Power_Consumption+0x280>)
 8001b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b82:	f7fe fcb3 	bl	80004ec <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	a340      	add	r3, pc, #256	@ (adr r3, 8001c90 <Power_Consumption+0x280>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe ff8c 	bl	8000ab0 <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b45      	ldr	r3, [pc, #276]	@ (8001cbc <Power_Consumption+0x2ac>)
 8001ba6:	f7fe fe59 	bl	800085c <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff f94b 	bl	8000e4c <__aeabi_d2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <Power_Consumption+0x2c4>)
 8001bba:	6013      	str	r3, [r2, #0]
			BeforeMillis2 = NowMillis2;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <Power_Consumption+0x2b4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a41      	ldr	r2, [pc, #260]	@ (8001cc8 <Power_Consumption+0x2b8>)
 8001bc2:	6013      	str	r3, [r2, #0]
		}

		if(voltage1 != 0){
 8001bc4:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <Power_Consumption+0x2c8>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd2:	d021      	beq.n	8001c18 <Power_Consumption+0x208>
			if (current1 > 0.03) {
 8001bd4:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <Power_Consumption+0x2a0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fde7 	bl	80007ac <__aeabi_f2d>
 8001bde:	a32e      	add	r3, pc, #184	@ (adr r3, 8001c98 <Power_Consumption+0x288>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7ff f8ca 	bl	8000d7c <__aeabi_dcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <Power_Consumption+0x1e6>
				status1 = "Charger";
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <Power_Consumption+0x2cc>)
 8001bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8001ce0 <Power_Consumption+0x2d0>)
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	e013      	b.n	8001c1e <Power_Consumption+0x20e>
			}
			else if (current1 < -0.03){
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <Power_Consumption+0x2a0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fdd6 	bl	80007ac <__aeabi_f2d>
 8001c00:	a327      	add	r3, pc, #156	@ (adr r3, 8001ca0 <Power_Consumption+0x290>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7ff f89b 	bl	8000d40 <__aeabi_dcmplt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <Power_Consumption+0x20e>
				status1 = "Discharge";
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <Power_Consumption+0x2cc>)
 8001c12:	4a34      	ldr	r2, [pc, #208]	@ (8001ce4 <Power_Consumption+0x2d4>)
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	e002      	b.n	8001c1e <Power_Consumption+0x20e>
			}
		}
		else{
			status1 = "-";
 8001c18:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <Power_Consumption+0x2cc>)
 8001c1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ce8 <Power_Consumption+0x2d8>)
 8001c1c:	601a      	str	r2, [r3, #0]
		}

		if(voltage2 != 0){
 8001c1e:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <Power_Consumption+0x2dc>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	d021      	beq.n	8001c72 <Power_Consumption+0x262>
			if (current2 > 0.03) {
 8001c2e:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <Power_Consumption+0x2bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fdba 	bl	80007ac <__aeabi_f2d>
 8001c38:	a317      	add	r3, pc, #92	@ (adr r3, 8001c98 <Power_Consumption+0x288>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7ff f89d 	bl	8000d7c <__aeabi_dcmpgt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <Power_Consumption+0x240>
				status2 = "Charger";
 8001c48:	4b29      	ldr	r3, [pc, #164]	@ (8001cf0 <Power_Consumption+0x2e0>)
 8001c4a:	4a25      	ldr	r2, [pc, #148]	@ (8001ce0 <Power_Consumption+0x2d0>)
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e6e3      	b.n	8001a18 <Power_Consumption+0x8>
			}
			else if (current1 < -0.03){
 8001c50:	4b17      	ldr	r3, [pc, #92]	@ (8001cb0 <Power_Consumption+0x2a0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fda9 	bl	80007ac <__aeabi_f2d>
 8001c5a:	a311      	add	r3, pc, #68	@ (adr r3, 8001ca0 <Power_Consumption+0x290>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7ff f86e 	bl	8000d40 <__aeabi_dcmplt>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <Power_Consumption+0x268>
				status2 = "Discharge";
 8001c6a:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <Power_Consumption+0x2e0>)
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <Power_Consumption+0x2d4>)
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	e6d2      	b.n	8001a18 <Power_Consumption+0x8>
			}
		}
		else{
			status2 = "-";
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <Power_Consumption+0x2e0>)
 8001c74:	4a1c      	ldr	r2, [pc, #112]	@ (8001ce8 <Power_Consumption+0x2d8>)
 8001c76:	601a      	str	r2, [r3, #0]
		NowMillis1 = tx_time_get();
 8001c78:	e6ce      	b.n	8001a18 <Power_Consumption+0x8>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	9999999a 	.word	0x9999999a
 8001c84:	3fc99999 	.word	0x3fc99999
 8001c88:	9999999a 	.word	0x9999999a
 8001c8c:	3fe99999 	.word	0x3fe99999
 8001c90:	47ae147b 	.word	0x47ae147b
 8001c94:	400a7ae1 	.word	0x400a7ae1
 8001c98:	eb851eb8 	.word	0xeb851eb8
 8001c9c:	3f9eb851 	.word	0x3f9eb851
 8001ca0:	eb851eb8 	.word	0xeb851eb8
 8001ca4:	bf9eb851 	.word	0xbf9eb851
 8001ca8:	20004300 	.word	0x20004300
 8001cac:	20004304 	.word	0x20004304
 8001cb0:	20004318 	.word	0x20004318
 8001cb4:	20004324 	.word	0x20004324
 8001cb8:	45610000 	.word	0x45610000
 8001cbc:	40590000 	.word	0x40590000
 8001cc0:	20004330 	.word	0x20004330
 8001cc4:	20004308 	.word	0x20004308
 8001cc8:	2000430c 	.word	0x2000430c
 8001ccc:	20004320 	.word	0x20004320
 8001cd0:	20004328 	.word	0x20004328
 8001cd4:	20004334 	.word	0x20004334
 8001cd8:	20004314 	.word	0x20004314
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	080121fc 	.word	0x080121fc
 8001ce4:	08012204 	.word	0x08012204
 8001ce8:	08012210 	.word	0x08012210
 8001cec:	2000431c 	.word	0x2000431c
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <Setup>:
		}
	}
	tx_thread_sleep(50);
}

void Setup(ULONG initial_input) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	Beep_Beep(2,100,50);
 8001cfc:	2232      	movs	r2, #50	@ 0x32
 8001cfe:	2164      	movs	r1, #100	@ 0x64
 8001d00:	2002      	movs	r0, #2
 8001d02:	f000 f965 	bl	8001fd0 <Beep_Beep>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d0c:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <Setup+0x28>)
 8001d0e:	f004 fc9d 	bl	800664c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
    while(1) {
    	tx_thread_sleep(TX_WAIT_FOREVER);
 8001d12:	f04f 30ff 	mov.w	r0, #4294967295
 8001d16:	f00a fec5 	bl	800caa4 <_tx_thread_sleep>
 8001d1a:	e7fa      	b.n	8001d12 <Setup+0x1e>
 8001d1c:	42020400 	.word	0x42020400

08001d20 <Set_LED>:
    }
}

void Set_LED(ULONG initial_input) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d28:	2104      	movs	r1, #4
 8001d2a:	4813      	ldr	r0, [pc, #76]	@ (8001d78 <Set_LED+0x58>)
 8001d2c:	f008 fb94 	bl	800a458 <HAL_TIM_PWM_Start>
	while(1) {
		for(int i = 0; i < 4095; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e009      	b.n	8001d4a <Set_LED+0x2a>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <Set_LED+0x58>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	639a      	str	r2, [r3, #56]	@ 0x38
			tx_thread_sleep(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f00a feb0 	bl	800caa4 <_tx_thread_sleep>
		for(int i = 0; i < 4095; i++){
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3301      	adds	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d50:	4293      	cmp	r3, r2
 8001d52:	ddf0      	ble.n	8001d36 <Set_LED+0x16>
		}
		for(int i = 4095; i > 0; i--){
 8001d54:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	e009      	b.n	8001d70 <Set_LED+0x50>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <Set_LED+0x58>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
			tx_thread_sleep(1);
 8001d64:	2001      	movs	r0, #1
 8001d66:	f00a fe9d 	bl	800caa4 <_tx_thread_sleep>
		for(int i = 4095; i > 0; i--){
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	dcf2      	bgt.n	8001d5c <Set_LED+0x3c>
		for(int i = 0; i < 4095; i++){
 8001d76:	e7db      	b.n	8001d30 <Set_LED+0x10>
 8001d78:	200044e4 	.word	0x200044e4

08001d7c <Transmit_Data>:
		}
	}
}

void Transmit_Data(ULONG initial_input) {
 8001d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d80:	b0df      	sub	sp, #380	@ 0x17c
 8001d82:	af12      	add	r7, sp, #72	@ 0x48
 8001d84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001d88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d8c:	6018      	str	r0, [r3, #0]
	uint8_t requestBuffer[1];
	char buffer[256];
	while(1) {
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8001d8e:	4850      	ldr	r0, [pc, #320]	@ (8001ed0 <Transmit_Data+0x154>)
 8001d90:	f009 feab 	bl	800baea <HAL_HalfDuplex_EnableReceiver>
		HAL_UART_Receive(&huart2, requestBuffer, 1, 1000);
 8001d94:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8001d98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	484c      	ldr	r0, [pc, #304]	@ (8001ed0 <Transmit_Data+0x154>)
 8001da0:	f009 fd78 	bl	800b894 <HAL_UART_Receive>

		if (requestBuffer[0] == 0x55) {
 8001da4:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 8001da8:	2b55      	cmp	r3, #85	@ 0x55
 8001daa:	f040 808c 	bne.w	8001ec6 <Transmit_Data+0x14a>
			tx_thread_sleep(50);
 8001dae:	2032      	movs	r0, #50	@ 0x32
 8001db0:	f00a fe78 	bl	800caa4 <_tx_thread_sleep>
			int len = snprintf(buffer, sizeof(buffer),
 8001db4:	4b47      	ldr	r3, [pc, #284]	@ (8001ed4 <Transmit_Data+0x158>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fcf7 	bl	80007ac <__aeabi_f2d>
 8001dbe:	4682      	mov	sl, r0
 8001dc0:	468b      	mov	fp, r1
 8001dc2:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <Transmit_Data+0x15c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fcf0 	bl	80007ac <__aeabi_f2d>
 8001dcc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001dd0:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <Transmit_Data+0x160>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fce9 	bl	80007ac <__aeabi_f2d>
 8001dda:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <Transmit_Data+0x164>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fce2 	bl	80007ac <__aeabi_f2d>
 8001de8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001dec:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <Transmit_Data+0x168>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fcdb 	bl	80007ac <__aeabi_f2d>
 8001df6:	e9c7 0100 	strd	r0, r1, [r7]
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee8 <Transmit_Data+0x16c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fcd4 	bl	80007ac <__aeabi_f2d>
 8001e04:	4680      	mov	r8, r0
 8001e06:	4689      	mov	r9, r1
 8001e08:	4b38      	ldr	r3, [pc, #224]	@ (8001eec <Transmit_Data+0x170>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fccd 	bl	80007ac <__aeabi_f2d>
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
					"Temp: %.2f C | Volt1: %.2f V | Curr1: %.2f A | Volt2: %.2f V | Curr2: %.2f A | Cons1: %.4f Ah | Cons2: %.4f Ah | Batt1: %d%% | Batt2: %d%% | Stat1: %s | Stat2: %s\n",
					temperature, voltage1, current1, voltage2, current2, ConsumptionEnergy1, ConsumptionEnergy2,
					(int)round(batterypercentage1),(int)round(batterypercentage1), status1, status2);
 8001e16:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <Transmit_Data+0x174>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fcc6 	bl	80007ac <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	ec43 2b10 	vmov	d0, r2, r3
 8001e28:	f010 f96c 	bl	8012104 <round>
 8001e2c:	ec53 2b10 	vmov	r2, r3, d0
			int len = snprintf(buffer, sizeof(buffer),
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe ffc2 	bl	8000dbc <__aeabi_d2iz>
 8001e38:	4606      	mov	r6, r0
					(int)round(batterypercentage1),(int)round(batterypercentage1), status1, status2);
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <Transmit_Data+0x174>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fcb4 	bl	80007ac <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	ec43 2b10 	vmov	d0, r2, r3
 8001e4c:	f010 f95a 	bl	8012104 <round>
 8001e50:	ec53 2b10 	vmov	r2, r3, d0
			int len = snprintf(buffer, sizeof(buffer),
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe ffb0 	bl	8000dbc <__aeabi_d2iz>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <Transmit_Data+0x178>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b25      	ldr	r3, [pc, #148]	@ (8001ef8 <Transmit_Data+0x17c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001e6a:	9311      	str	r3, [sp, #68]	@ 0x44
 8001e6c:	9210      	str	r2, [sp, #64]	@ 0x40
 8001e6e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8001e70:	960e      	str	r6, [sp, #56]	@ 0x38
 8001e72:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001e76:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001e7a:	ed97 7b00 	vldr	d7, [r7]
 8001e7e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001e82:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001e8e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e92:	ed97 7b06 	vldr	d7, [r7, #24]
 8001e96:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e9a:	e9cd ab00 	strd	sl, fp, [sp]
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <Transmit_Data+0x180>)
 8001ea0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ea4:	f00c fca0 	bl	800e7e8 <sniprintf>
 8001ea8:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c

			HAL_HalfDuplex_EnableTransmitter(&huart2);
 8001eac:	4808      	ldr	r0, [pc, #32]	@ (8001ed0 <Transmit_Data+0x154>)
 8001eae:	f009 fdc8 	bl	800ba42 <HAL_HalfDuplex_EnableTransmitter>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 1000);
 8001eb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001ebc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec0:	4803      	ldr	r0, [pc, #12]	@ (8001ed0 <Transmit_Data+0x154>)
 8001ec2:	f009 fc49 	bl	800b758 <HAL_UART_Transmit>
		}
		tx_thread_sleep(50);
 8001ec6:	2032      	movs	r0, #50	@ 0x32
 8001ec8:	f00a fdec 	bl	800caa4 <_tx_thread_sleep>
		HAL_HalfDuplex_EnableReceiver(&huart2);
 8001ecc:	e75f      	b.n	8001d8e <Transmit_Data+0x12>
 8001ece:	bf00      	nop
 8001ed0:	20004610 	.word	0x20004610
 8001ed4:	20004310 	.word	0x20004310
 8001ed8:	20004314 	.word	0x20004314
 8001edc:	20004318 	.word	0x20004318
 8001ee0:	2000431c 	.word	0x2000431c
 8001ee4:	20004320 	.word	0x20004320
 8001ee8:	20004324 	.word	0x20004324
 8001eec:	20004328 	.word	0x20004328
 8001ef0:	20004330 	.word	0x20004330
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	08012214 	.word	0x08012214

08001f00 <Memory_Management>:
	}
}

void Memory_Management (ULONG initial_input) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint32_t address = 0x000000;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
	float nilai = 5.1234567;
 8001f0c:	4b21      	ldr	r3, [pc, #132]	@ (8001f94 <Memory_Management+0x94>)
 8001f0e:	60fb      	str	r3, [r7, #12]
	write_value(nilai, address);
 8001f10:	6938      	ldr	r0, [r7, #16]
 8001f12:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f16:	f000 f89d 	bl	8002054 <write_value>

	for (int i = 0; i < 3; i++) {
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e013      	b.n	8001f48 <Memory_Management+0x48>
		 ReadData(address, sizeof(float));
 8001f20:	2104      	movs	r1, #4
 8001f22:	6938      	ldr	r0, [r7, #16]
 8001f24:	f000 f918 	bl	8002158 <ReadData>
		  if (!isnan(read_data_float)) {
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <Memory_Management+0x98>)
 8001f2a:	edd3 7a00 	vldr	s15, [r3]
 8001f2e:	eef4 7a67 	vcmp.f32	s15, s15
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d601      	bvs.n	8001f3c <Memory_Management+0x3c>
			  break;
 8001f38:	bf00      	nop
 8001f3a:	e008      	b.n	8001f4e <Memory_Management+0x4e>
		  }
	tx_thread_sleep(50);
 8001f3c:	2032      	movs	r0, #50	@ 0x32
 8001f3e:	f00a fdb1 	bl	800caa4 <_tx_thread_sleep>
	for (int i = 0; i < 3; i++) {
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	dde8      	ble.n	8001f20 <Memory_Management+0x20>
	}

	while(1) {
		ReadData(address, sizeof(float));
 8001f4e:	2104      	movs	r1, #4
 8001f50:	6938      	ldr	r0, [r7, #16]
 8001f52:	f000 f901 	bl	8002158 <ReadData>
		printf("Read Data: %.2f |", read_data_float);
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <Memory_Management+0x98>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fc26 	bl	80007ac <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <Memory_Management+0x9c>)
 8001f66:	f00c fc2d 	bl	800e7c4 <iprintf>
		printf("Temp: %.2f\n", temperature);
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <Memory_Management+0xa0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fc1c 	bl	80007ac <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	480a      	ldr	r0, [pc, #40]	@ (8001fa4 <Memory_Management+0xa4>)
 8001f7a:	f00c fc23 	bl	800e7c4 <iprintf>
		Beep_Beep(1,50,50);
 8001f7e:	2232      	movs	r2, #50	@ 0x32
 8001f80:	2132      	movs	r1, #50	@ 0x32
 8001f82:	2001      	movs	r0, #1
 8001f84:	f000 f824 	bl	8001fd0 <Beep_Beep>
		tx_thread_sleep(3000);
 8001f88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f8c:	f00a fd8a 	bl	800caa4 <_tx_thread_sleep>
		ReadData(address, sizeof(float));
 8001f90:	e7dd      	b.n	8001f4e <Memory_Management+0x4e>
 8001f92:	bf00      	nop
 8001f94:	40a3f35b 	.word	0x40a3f35b
 8001f98:	2000432c 	.word	0x2000432c
 8001f9c:	080122b8 	.word	0x080122b8
 8001fa0:	20004310 	.word	0x20004310
 8001fa4:	080122cc 	.word	0x080122cc

08001fa8 <Temperature_Reading>:
	}
}

//Function to read temperature from DS18B20
void Temperature_Reading(ULONG initial_input){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	while(1){
		temperature = DS18B20_GetTemp();
 8001fb0:	f7ff fa94 	bl	80014dc <DS18B20_GetTemp>
 8001fb4:	eef0 7a40 	vmov.f32	s15, s0
 8001fb8:	4b04      	ldr	r3, [pc, #16]	@ (8001fcc <Temperature_Reading+0x24>)
 8001fba:	edc3 7a00 	vstr	s15, [r3]
		tx_thread_sleep(1000);
 8001fbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc2:	f00a fd6f 	bl	800caa4 <_tx_thread_sleep>
		temperature = DS18B20_GetTemp();
 8001fc6:	bf00      	nop
 8001fc8:	e7f2      	b.n	8001fb0 <Temperature_Reading+0x8>
 8001fca:	bf00      	nop
 8001fcc:	20004310 	.word	0x20004310

08001fd0 <Beep_Beep>:
	}
}

//Function Group Zone
//Function to produce a beep sound on the buzzer
void Beep_Beep(uint8_t cycle, uint16_t delay1, uint16_t delay2) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	80bb      	strh	r3, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	481a      	ldr	r0, [pc, #104]	@ (8002050 <Beep_Beep+0x80>)
 8001fe6:	f008 fa37 	bl	800a458 <HAL_TIM_PWM_Start>
	for (int i = 0; i < cycle; i++) {
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e026      	b.n	800203e <Beep_Beep+0x6e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4817      	ldr	r0, [pc, #92]	@ (8002050 <Beep_Beep+0x80>)
 8001ff4:	f008 fa30 	bl	800a458 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <Beep_Beep+0x80>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(delay1);
 8002002:	88bb      	ldrh	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	f00a fd4d 	bl	800caa4 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800200a:	4b11      	ldr	r3, [pc, #68]	@ (8002050 <Beep_Beep+0x80>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2200      	movs	r2, #0
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(50);
 8002012:	2032      	movs	r0, #50	@ 0x32
 8002014:	f00a fd46 	bl	800caa4 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8002018:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <Beep_Beep+0x80>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(delay2);
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	4618      	mov	r0, r3
 8002026:	f00a fd3d 	bl	800caa4 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800202a:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <Beep_Beep+0x80>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2200      	movs	r2, #0
 8002030:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(50);
 8002032:	2032      	movs	r0, #50	@ 0x32
 8002034:	f00a fd36 	bl	800caa4 <_tx_thread_sleep>
	for (int i = 0; i < cycle; i++) {
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3301      	adds	r3, #1
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	dbd4      	blt.n	8001ff0 <Beep_Beep+0x20>
	}
}
 8002046:	bf00      	nop
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	200044e4 	.word	0x200044e4

08002054 <write_value>:

//Function to erase and write values to flash memory
void write_value(float value, uint32_t address) {
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	ed87 0a01 	vstr	s0, [r7, #4]
 800205e:	6038      	str	r0, [r7, #0]
	uint8_t write_enable_cmd = 0x06;
 8002060:	2306      	movs	r3, #6
 8002062:	75fb      	strb	r3, [r7, #23]
    uint8_t data[sizeof(value)];
    memcpy(data, &value, sizeof(value));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	613b      	str	r3, [r7, #16]

    //Erase Sector Function (4 KB)
    uint8_t erase_cmd[4];
    erase_cmd[0] = 0x20;
 8002068:	2320      	movs	r3, #32
 800206a:	733b      	strb	r3, [r7, #12]
    erase_cmd[1] = (address >> 16) & 0xFF;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	b2db      	uxtb	r3, r3
 8002072:	737b      	strb	r3, [r7, #13]
    erase_cmd[2] = (address >> 8) & 0xFF;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	b2db      	uxtb	r3, r3
 800207a:	73bb      	strb	r3, [r7, #14]
    erase_cmd[3] = address & 0xFF;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	73fb      	strb	r3, [r7, #15]

    //Write Enable Function
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2110      	movs	r1, #16
 8002086:	4832      	ldr	r0, [pc, #200]	@ (8002150 <write_value+0xfc>)
 8002088:	f004 fae0 	bl	800664c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 800208c:	f107 0117 	add.w	r1, r7, #23
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	2201      	movs	r2, #1
 8002096:	482f      	ldr	r0, [pc, #188]	@ (8002154 <write_value+0x100>)
 8002098:	f007 fc34 	bl	8009904 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	2110      	movs	r1, #16
 80020a0:	482b      	ldr	r0, [pc, #172]	@ (8002150 <write_value+0xfc>)
 80020a2:	f004 fad3 	bl	800664c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2110      	movs	r1, #16
 80020aa:	4829      	ldr	r0, [pc, #164]	@ (8002150 <write_value+0xfc>)
 80020ac:	f004 face 	bl	800664c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, erase_cmd, 4, HAL_MAX_DELAY);
 80020b0:	f107 010c 	add.w	r1, r7, #12
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
 80020b8:	2204      	movs	r2, #4
 80020ba:	4826      	ldr	r0, [pc, #152]	@ (8002154 <write_value+0x100>)
 80020bc:	f007 fc22 	bl	8009904 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	2110      	movs	r1, #16
 80020c4:	4822      	ldr	r0, [pc, #136]	@ (8002150 <write_value+0xfc>)
 80020c6:	f004 fac1 	bl	800664c <HAL_GPIO_WritePin>
    tx_thread_sleep(100);
 80020ca:	2064      	movs	r0, #100	@ 0x64
 80020cc:	f00a fcea 	bl	800caa4 <_tx_thread_sleep>

    // command Write Data
    uint8_t write_cmd[4];
    write_cmd[0] = 0x02;
 80020d0:	2302      	movs	r3, #2
 80020d2:	723b      	strb	r3, [r7, #8]
    write_cmd[1] = (address >> 16) & 0xFF;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	727b      	strb	r3, [r7, #9]
    write_cmd[2] = (address >> 8) & 0xFF;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	72bb      	strb	r3, [r7, #10]
    write_cmd[3] = address & 0xFF;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	72fb      	strb	r3, [r7, #11]

    // Perintah Write Enable
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2110      	movs	r1, #16
 80020ee:	4818      	ldr	r0, [pc, #96]	@ (8002150 <write_value+0xfc>)
 80020f0:	f004 faac 	bl	800664c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &write_enable_cmd, 1, HAL_MAX_DELAY);
 80020f4:	f107 0117 	add.w	r1, r7, #23
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295
 80020fc:	2201      	movs	r2, #1
 80020fe:	4815      	ldr	r0, [pc, #84]	@ (8002154 <write_value+0x100>)
 8002100:	f007 fc00 	bl	8009904 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	2110      	movs	r1, #16
 8002108:	4811      	ldr	r0, [pc, #68]	@ (8002150 <write_value+0xfc>)
 800210a:	f004 fa9f 	bl	800664c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	2110      	movs	r1, #16
 8002112:	480f      	ldr	r0, [pc, #60]	@ (8002150 <write_value+0xfc>)
 8002114:	f004 fa9a 	bl	800664c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, write_cmd, 4, HAL_MAX_DELAY);
 8002118:	f107 0108 	add.w	r1, r7, #8
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	2204      	movs	r2, #4
 8002122:	480c      	ldr	r0, [pc, #48]	@ (8002154 <write_value+0x100>)
 8002124:	f007 fbee 	bl	8009904 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 8002128:	f107 0110 	add.w	r1, r7, #16
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	2204      	movs	r2, #4
 8002132:	4808      	ldr	r0, [pc, #32]	@ (8002154 <write_value+0x100>)
 8002134:	f007 fbe6 	bl	8009904 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	2110      	movs	r1, #16
 800213c:	4804      	ldr	r0, [pc, #16]	@ (8002150 <write_value+0xfc>)
 800213e:	f004 fa85 	bl	800664c <HAL_GPIO_WritePin>
    tx_thread_sleep(50);
 8002142:	2032      	movs	r0, #50	@ 0x32
 8002144:	f00a fcae 	bl	800caa4 <_tx_thread_sleep>
}
 8002148:	bf00      	nop
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	42020000 	.word	0x42020000
 8002154:	20004454 	.word	0x20004454

08002158 <ReadData>:

void ReadData(uint32_t address, uint32_t length) {
 8002158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800215c:	b087      	sub	sp, #28
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
 8002164:	466b      	mov	r3, sp
 8002166:	461e      	mov	r6, r3
    uint8_t cmd[4];
    cmd[0] = 0x03;
 8002168:	2303      	movs	r3, #3
 800216a:	733b      	strb	r3, [r7, #12]
    cmd[1] = (address >> 16) & 0xFF;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0c1b      	lsrs	r3, r3, #16
 8002170:	b2db      	uxtb	r3, r3
 8002172:	737b      	strb	r3, [r7, #13]
    cmd[2] = (address >> 8) & 0xFF;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	b2db      	uxtb	r3, r3
 800217a:	73bb      	strb	r3, [r7, #14]
    cmd[3] = address & 0xFF;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	73fb      	strb	r3, [r7, #15]

    uint8_t data[length];
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	3b01      	subs	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	2300      	movs	r3, #0
 800218c:	4688      	mov	r8, r1
 800218e:	4699      	mov	r9, r3
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800219c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021a4:	2300      	movs	r3, #0
 80021a6:	460c      	mov	r4, r1
 80021a8:	461d      	mov	r5, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	00eb      	lsls	r3, r5, #3
 80021b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b8:	00e2      	lsls	r2, r4, #3
 80021ba:	1dcb      	adds	r3, r1, #7
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	ebad 0d03 	sub.w	sp, sp, r3
 80021c4:	466b      	mov	r3, sp
 80021c6:	3300      	adds	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2110      	movs	r1, #16
 80021ce:	4811      	ldr	r0, [pc, #68]	@ (8002214 <ReadData+0xbc>)
 80021d0:	f004 fa3c 	bl	800664c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 80021d4:	f107 010c 	add.w	r1, r7, #12
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	2204      	movs	r2, #4
 80021de:	480e      	ldr	r0, [pc, #56]	@ (8002218 <ReadData+0xc0>)
 80021e0:	f007 fb90 	bl	8009904 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, length, HAL_MAX_DELAY);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	480a      	ldr	r0, [pc, #40]	@ (8002218 <ReadData+0xc0>)
 80021f0:	f007 fd8a 	bl	8009d08 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2110      	movs	r1, #16
 80021f8:	4806      	ldr	r0, [pc, #24]	@ (8002214 <ReadData+0xbc>)
 80021fa:	f004 fa27 	bl	800664c <HAL_GPIO_WritePin>

    memcpy(&read_data_float, data, sizeof(read_data_float));
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <ReadData+0xc4>)
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	46b5      	mov	sp, r6
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002214:	42020000 	.word	0x42020000
 8002218:	20004454 	.word	0x20004454
 800221c:	2000432c 	.word	0x2000432c

08002220 <__io_putchar>:
/* USER CODE BEGIN 0 */
const char* status1 = "Discharge";
const char* status2 = "Discharge";
uint8_t RxData2[30];

void __io_putchar(char ch) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 800222a:	1df9      	adds	r1, r7, #7
 800222c:	230a      	movs	r3, #10
 800222e:	2201      	movs	r2, #1
 8002230:	4803      	ldr	r0, [pc, #12]	@ (8002240 <__io_putchar+0x20>)
 8002232:	f009 fa91 	bl	800b758 <HAL_UART_Transmit>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000457c 	.word	0x2000457c

08002244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002248:	f001 f8c6 	bl	80033d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800224c:	f000 f814 	bl	8002278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002250:	f000 fb3e 	bl	80028d0 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8002254:	f000 f924 	bl	80024a0 <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8002258:	f000 faa2 	bl	80027a0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800225c:	f000 f996 	bl	800258c <MX_TIM1_Init>
  MX_ADC1_Init();
 8002260:	f000 f882 	bl	8002368 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002264:	f000 f93c 	bl	80024e0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002268:	f000 fae6 	bl	8002838 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800226c:	f000 fa4a 	bl	8002704 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //tx_kernel_enter();
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8002270:	f7ff fa44 	bl	80016fc <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <main+0x30>

08002278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b09c      	sub	sp, #112	@ 0x70
 800227c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800227e:	f107 0320 	add.w	r3, r7, #32
 8002282:	2250      	movs	r2, #80	@ 0x50
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f00c fb45 	bl	800e916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
 800229c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800229e:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <SystemClock_Config+0xe8>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <SystemClock_Config+0xe8>)
 80022a4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022a8:	6113      	str	r3, [r2, #16]
 80022aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <SystemClock_Config+0xe8>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80022b2:	607b      	str	r3, [r7, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80022b6:	bf00      	nop
 80022b8:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <SystemClock_Config+0xe8>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d1f9      	bne.n	80022b8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 80022c4:	2312      	movs	r3, #18
 80022c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2340      	movs	r3, #64	@ 0x40
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80022d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80022da:	2320      	movs	r3, #32
 80022dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022de:	2302      	movs	r3, #2
 80022e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80022e2:	2302      	movs	r3, #2
 80022e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022e6:	2301      	movs	r3, #1
 80022e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80022ea:	2320      	movs	r3, #32
 80022ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80022ee:	2302      	movs	r3, #2
 80022f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022f2:	2302      	movs	r3, #2
 80022f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022f6:	2302      	movs	r3, #2
 80022f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80022fa:	2308      	movs	r3, #8
 80022fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80022fe:	2300      	movs	r3, #0
 8002300:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	4618      	mov	r0, r3
 800230c:	f004 f9b6 	bl	800667c <HAL_RCC_OscConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002316:	f000 fb4f 	bl	80029b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231a:	231f      	movs	r3, #31
 800231c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	2103      	movs	r1, #3
 8002338:	4618      	mov	r0, r3
 800233a:	f004 fdd7 	bl	8006eec <HAL_RCC_ClockConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002344:	f000 fb38 	bl	80029b8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8002348:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <SystemClock_Config+0xec>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002350:	4a04      	ldr	r2, [pc, #16]	@ (8002364 <SystemClock_Config+0xec>)
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	3770      	adds	r7, #112	@ 0x70
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	44020800 	.word	0x44020800
 8002364:	40022000 	.word	0x40022000

08002368 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800236e:	463b      	mov	r3, r7
 8002370:	2220      	movs	r2, #32
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f00c face 	bl	800e916 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800237a:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <MX_ADC1_Init+0x120>)
 800237c:	4a43      	ldr	r2, [pc, #268]	@ (800248c <MX_ADC1_Init+0x124>)
 800237e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8002380:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002382:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002386:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002388:	4b3f      	ldr	r3, [pc, #252]	@ (8002488 <MX_ADC1_Init+0x120>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800238e:	4b3e      	ldr	r3, [pc, #248]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002394:	4b3c      	ldr	r3, [pc, #240]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002396:	2201      	movs	r2, #1
 8002398:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800239a:	4b3b      	ldr	r3, [pc, #236]	@ (8002488 <MX_ADC1_Init+0x120>)
 800239c:	2204      	movs	r2, #4
 800239e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80023a0:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023a6:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023ba:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023bc:	2200      	movs	r2, #0
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80023ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80023da:	4b2b      	ldr	r3, [pc, #172]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023e2:	4829      	ldr	r0, [pc, #164]	@ (8002488 <MX_ADC1_Init+0x120>)
 80023e4:	f001 fb26 	bl	8003a34 <HAL_ADC_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80023ee:	f000 fae3 	bl	80029b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023f2:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <MX_ADC1_Init+0x128>)
 80023f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023f6:	2306      	movs	r3, #6
 80023f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80023fa:	2305      	movs	r3, #5
 80023fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80023fe:	237f      	movs	r3, #127	@ 0x7f
 8002400:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002402:	2304      	movs	r3, #4
 8002404:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	4619      	mov	r1, r3
 800240e:	481e      	ldr	r0, [pc, #120]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002410:	f001 fdcc 	bl	8003fac <HAL_ADC_ConfigChannel>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800241a:	f000 facd 	bl	80029b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800241e:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <MX_ADC1_Init+0x12c>)
 8002420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002422:	230c      	movs	r3, #12
 8002424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002426:	2304      	movs	r3, #4
 8002428:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800242a:	463b      	mov	r3, r7
 800242c:	4619      	mov	r1, r3
 800242e:	4816      	ldr	r0, [pc, #88]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002430:	f001 fdbc 	bl	8003fac <HAL_ADC_ConfigChannel>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800243a:	f000 fabd 	bl	80029b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <MX_ADC1_Init+0x130>)
 8002440:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002442:	2312      	movs	r3, #18
 8002444:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8002446:	2305      	movs	r3, #5
 8002448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800244a:	463b      	mov	r3, r7
 800244c:	4619      	mov	r1, r3
 800244e:	480e      	ldr	r0, [pc, #56]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002450:	f001 fdac 	bl	8003fac <HAL_ADC_ConfigChannel>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800245a:	f000 faad 	bl	80029b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800245e:	4b0f      	ldr	r3, [pc, #60]	@ (800249c <MX_ADC1_Init+0x134>)
 8002460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002462:	2318      	movs	r3, #24
 8002464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002466:	2304      	movs	r3, #4
 8002468:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800246a:	463b      	mov	r3, r7
 800246c:	4619      	mov	r1, r3
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <MX_ADC1_Init+0x120>)
 8002470:	f001 fd9c 	bl	8003fac <HAL_ADC_ConfigChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800247a:	f000 fa9d 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20004338 	.word	0x20004338
 800248c:	42028000 	.word	0x42028000
 8002490:	14f00020 	.word	0x14f00020
 8002494:	10c00010 	.word	0x10c00010
 8002498:	04300002 	.word	0x04300002
 800249c:	2a000400 	.word	0x2a000400

080024a0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <MX_GPDMA1_Init+0x3c>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ac:	4a0b      	ldr	r2, [pc, #44]	@ (80024dc <MX_GPDMA1_Init+0x3c>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <MX_GPDMA1_Init+0x3c>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	201b      	movs	r0, #27
 80024ca:	f002 fc59 	bl	8004d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 80024ce:	201b      	movs	r0, #27
 80024d0:	f002 fc70 	bl	8004db4 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	44020c00 	.word	0x44020c00

080024e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <MX_SPI1_Init+0xa4>)
 80024e6:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <MX_SPI1_Init+0xa8>)
 80024e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ea:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <MX_SPI1_Init+0xa4>)
 80024ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80024f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024f2:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <MX_SPI1_Init+0xa4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <MX_SPI1_Init+0xa4>)
 80024fa:	2207      	movs	r2, #7
 80024fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024fe:	4b21      	ldr	r3, [pc, #132]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002504:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800250c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002512:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002514:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8002518:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800251a:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002522:	2200      	movs	r2, #0
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002526:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002528:	2200      	movs	r2, #0
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800252c:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800252e:	2207      	movs	r2, #7
 8002530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002534:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002538:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800253a:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800253c:	2200      	movs	r2, #0
 800253e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002540:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002542:	2200      	movs	r2, #0
 8002544:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002546:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002548:	2200      	movs	r2, #0
 800254a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800254c:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800254e:	2200      	movs	r2, #0
 8002550:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002554:	2200      	movs	r2, #0
 8002556:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002560:	2200      	movs	r2, #0
 8002562:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002566:	2200      	movs	r2, #0
 8002568:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_SPI1_Init+0xa4>)
 800256c:	2200      	movs	r2, #0
 800256e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <MX_SPI1_Init+0xa4>)
 8002572:	f007 f8cb 	bl	800970c <HAL_SPI_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800257c:	f000 fa1c 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20004454 	.word	0x20004454
 8002588:	40013000 	.word	0x40013000

0800258c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b09c      	sub	sp, #112	@ 0x70
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002592:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	609a      	str	r2, [r3, #8]
 800259e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]
 80025be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2234      	movs	r2, #52	@ 0x34
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00c f9a5 	bl	800e916 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025cc:	4b4b      	ldr	r3, [pc, #300]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002700 <MX_TIM1_Init+0x174>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b48      	ldr	r3, [pc, #288]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80025de:	4b47      	ldr	r3, [pc, #284]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025e0:	f641 72ff 	movw	r2, #8191	@ 0x1fff
 80025e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b45      	ldr	r3, [pc, #276]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ec:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025f8:	4840      	ldr	r0, [pc, #256]	@ (80026fc <MX_TIM1_Init+0x170>)
 80025fa:	f007 fe02 	bl	800a202 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002604:	f000 f9d8 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800260e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002612:	4619      	mov	r1, r3
 8002614:	4839      	ldr	r0, [pc, #228]	@ (80026fc <MX_TIM1_Init+0x170>)
 8002616:	f008 fa51 	bl	800aabc <HAL_TIM_ConfigClockSource>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002620:	f000 f9ca 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002624:	4835      	ldr	r0, [pc, #212]	@ (80026fc <MX_TIM1_Init+0x170>)
 8002626:	f007 feb6 	bl	800a396 <HAL_TIM_PWM_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002630:	f000 f9c2 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002634:	2300      	movs	r3, #0
 8002636:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002640:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002644:	4619      	mov	r1, r3
 8002646:	482d      	ldr	r0, [pc, #180]	@ (80026fc <MX_TIM1_Init+0x170>)
 8002648:	f008 fefa 	bl	800b440 <HAL_TIMEx_MasterConfigSynchronization>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002652:	f000 f9b1 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002656:	2360      	movs	r3, #96	@ 0x60
 8002658:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800265e:	2300      	movs	r3, #0
 8002660:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002672:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002676:	2200      	movs	r2, #0
 8002678:	4619      	mov	r1, r3
 800267a:	4820      	ldr	r0, [pc, #128]	@ (80026fc <MX_TIM1_Init+0x170>)
 800267c:	f008 f90a 	bl	800a894 <HAL_TIM_PWM_ConfigChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002686:	f000 f997 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800268a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800268e:	2204      	movs	r2, #4
 8002690:	4619      	mov	r1, r3
 8002692:	481a      	ldr	r0, [pc, #104]	@ (80026fc <MX_TIM1_Init+0x170>)
 8002694:	f008 f8fe 	bl	800a894 <HAL_TIM_PWM_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800269e:	f000 f98b 	bl	80029b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026d2:	2300      	movs	r3, #0
 80026d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	4807      	ldr	r0, [pc, #28]	@ (80026fc <MX_TIM1_Init+0x170>)
 80026e0:	f008 ff16 	bl	800b510 <HAL_TIMEx_ConfigBreakDeadTime>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80026ea:	f000 f965 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026ee:	4803      	ldr	r0, [pc, #12]	@ (80026fc <MX_TIM1_Init+0x170>)
 80026f0:	f000 fbce 	bl	8002e90 <HAL_TIM_MspPostInit>

}
 80026f4:	bf00      	nop
 80026f6:	3770      	adds	r7, #112	@ 0x70
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200044e4 	.word	0x200044e4
 8002700:	40012c00 	.word	0x40012c00

08002704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	f107 0310 	add.w	r3, r7, #16
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002718:	1d3b      	adds	r3, r7, #4
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <MX_TIM2_Init+0x98>)
 8002724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <MX_TIM2_Init+0x98>)
 800272c:	2247      	movs	r2, #71	@ 0x47
 800272e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002730:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <MX_TIM2_Init+0x98>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65533;
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <MX_TIM2_Init+0x98>)
 8002738:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800273c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <MX_TIM2_Init+0x98>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <MX_TIM2_Init+0x98>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800274a:	4814      	ldr	r0, [pc, #80]	@ (800279c <MX_TIM2_Init+0x98>)
 800274c:	f007 fd59 	bl	800a202 <HAL_TIM_Base_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002756:	f000 f92f 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800275a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800275e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	@ (800279c <MX_TIM2_Init+0x98>)
 8002768:	f008 f9a8 	bl	800aabc <HAL_TIM_ConfigClockSource>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002772:	f000 f921 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4619      	mov	r1, r3
 8002782:	4806      	ldr	r0, [pc, #24]	@ (800279c <MX_TIM2_Init+0x98>)
 8002784:	f008 fe5c 	bl	800b440 <HAL_TIMEx_MasterConfigSynchronization>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800278e:	f000 f913 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20004530 	.word	0x20004530

080027a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027a4:	4b22      	ldr	r3, [pc, #136]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027a6:	4a23      	ldr	r2, [pc, #140]	@ (8002834 <MX_USART1_UART_Init+0x94>)
 80027a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027aa:	4b21      	ldr	r3, [pc, #132]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027be:	4b1c      	ldr	r3, [pc, #112]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027c6:	220c      	movs	r2, #12
 80027c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d0:	4b17      	ldr	r3, [pc, #92]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027dc:	4b14      	ldr	r3, [pc, #80]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80027e8:	4811      	ldr	r0, [pc, #68]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027ea:	f008 ff5d 	bl	800b6a8 <HAL_HalfDuplex_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027f4:	f000 f8e0 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027f8:	2100      	movs	r1, #0
 80027fa:	480d      	ldr	r0, [pc, #52]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 80027fc:	f009 fda0 	bl	800c340 <HAL_UARTEx_SetTxFifoThreshold>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002806:	f000 f8d7 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800280a:	2100      	movs	r1, #0
 800280c:	4808      	ldr	r0, [pc, #32]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 800280e:	f009 fdd5 	bl	800c3bc <HAL_UARTEx_SetRxFifoThreshold>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002818:	f000 f8ce 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800281c:	4804      	ldr	r0, [pc, #16]	@ (8002830 <MX_USART1_UART_Init+0x90>)
 800281e:	f009 fd56 	bl	800c2ce <HAL_UARTEx_DisableFifoMode>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002828:	f000 f8c6 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	2000457c 	.word	0x2000457c
 8002834:	40013800 	.word	0x40013800

08002838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800283c:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 800283e:	4a23      	ldr	r2, [pc, #140]	@ (80028cc <MX_USART2_UART_Init+0x94>)
 8002840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002842:	4b21      	ldr	r3, [pc, #132]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002844:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800284a:	4b1f      	ldr	r3, [pc, #124]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002856:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 800285e:	2208      	movs	r2, #8
 8002860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002862:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002868:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 800286a:	2200      	movs	r2, #0
 800286c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800286e:	4b16      	ldr	r3, [pc, #88]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002880:	4811      	ldr	r0, [pc, #68]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002882:	f008 ff11 	bl	800b6a8 <HAL_HalfDuplex_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800288c:	f000 f894 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002890:	2100      	movs	r1, #0
 8002892:	480d      	ldr	r0, [pc, #52]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 8002894:	f009 fd54 	bl	800c340 <HAL_UARTEx_SetTxFifoThreshold>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800289e:	f000 f88b 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028a2:	2100      	movs	r1, #0
 80028a4:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 80028a6:	f009 fd89 	bl	800c3bc <HAL_UARTEx_SetRxFifoThreshold>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80028b0:	f000 f882 	bl	80029b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	@ (80028c8 <MX_USART2_UART_Init+0x90>)
 80028b6:	f009 fd0a 	bl	800c2ce <HAL_UARTEx_DisableFifoMode>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80028c0:	f000 f87a 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20004610 	.word	0x20004610
 80028cc:	40004400 	.word	0x40004400

080028d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]
 80028e2:	60da      	str	r2, [r3, #12]
 80028e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <MX_GPIO_Init+0xc8>)
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002998 <MX_GPIO_Init+0xc8>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028f6:	4b28      	ldr	r3, [pc, #160]	@ (8002998 <MX_GPIO_Init+0xc8>)
 80028f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	4b24      	ldr	r3, [pc, #144]	@ (8002998 <MX_GPIO_Init+0xc8>)
 8002906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800290a:	4a23      	ldr	r2, [pc, #140]	@ (8002998 <MX_GPIO_Init+0xc8>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <MX_GPIO_Init+0xc8>)
 8002916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <MX_GPIO_Init+0xc8>)
 8002924:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002928:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <MX_GPIO_Init+0xc8>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002932:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <MX_GPIO_Init+0xc8>)
 8002934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	2110      	movs	r1, #16
 8002944:	4815      	ldr	r0, [pc, #84]	@ (800299c <MX_GPIO_Init+0xcc>)
 8002946:	f003 fe81 	bl	800664c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002950:	4813      	ldr	r0, [pc, #76]	@ (80029a0 <MX_GPIO_Init+0xd0>)
 8002952:	f003 fe7b 	bl	800664c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002956:	2310      	movs	r3, #16
 8002958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	4619      	mov	r1, r3
 800296c:	480b      	ldr	r0, [pc, #44]	@ (800299c <MX_GPIO_Init+0xcc>)
 800296e:	f003 fd03 	bl	8006378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002972:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4619      	mov	r1, r3
 800298a:	4805      	ldr	r0, [pc, #20]	@ (80029a0 <MX_GPIO_Init+0xd0>)
 800298c:	f003 fcf4 	bl	8006378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	44020c00 	.word	0x44020c00
 800299c:	42020000 	.word	0x42020000
 80029a0:	42020400 	.word	0x42020400

080029a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
		//ReadADC_voltage_current();
	}
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <Error_Handler+0x8>

080029c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0c8      	sub	sp, #288	@ 0x120
 80029d8:	af00      	add	r7, sp, #0
 80029da:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80029e2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80029fc:	4618      	mov	r0, r3
 80029fe:	2388      	movs	r3, #136	@ 0x88
 8002a00:	461a      	mov	r2, r3
 8002a02:	2100      	movs	r1, #0
 8002a04:	f00b ff87 	bl	800e916 <memset>
  if(hadc->Instance==ADC1)
 8002a08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a0c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a9b      	ldr	r2, [pc, #620]	@ (8002c84 <HAL_ADC_MspInit+0x2b0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	f040 812e 	bne.w	8002c78 <HAL_ADC_MspInit+0x2a4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002a1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a20:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002a24:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8002a30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002a38:	2200      	movs	r2, #0
 8002a3a:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fd95 	bl	8007570 <HAL_RCCEx_PeriphCLKConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8002a4c:	f7ff ffb4 	bl	80029b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a50:	4b8d      	ldr	r3, [pc, #564]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a56:	4a8c      	ldr	r2, [pc, #560]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a60:	4b89      	ldr	r3, [pc, #548]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a66:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002a6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002a7c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	4b82      	ldr	r3, [pc, #520]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a84:	4a80      	ldr	r2, [pc, #512]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a94:	f003 0204 	and.w	r2, r3, #4
 8002a98:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002a9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aa6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002aaa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aac:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ab2:	4a75      	ldr	r2, [pc, #468]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002abc:	4b72      	ldr	r3, [pc, #456]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002aca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002ad4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ad8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ada:	4b6b      	ldr	r3, [pc, #428]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae0:	4a69      	ldr	r2, [pc, #420]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aea:	4b67      	ldr	r3, [pc, #412]	@ (8002c88 <HAL_ADC_MspInit+0x2b4>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af0:	f003 0202 	and.w	r2, r3, #2
 8002af4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002af8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002b02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002b06:	681b      	ldr	r3, [r3, #0]
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8002b08:	2311      	movs	r3, #17
 8002b0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	485a      	ldr	r0, [pc, #360]	@ (8002c8c <HAL_ADC_MspInit+0x2b8>)
 8002b22:	f003 fc29 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b26:	2302      	movs	r3, #2
 8002b28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4854      	ldr	r0, [pc, #336]	@ (8002c90 <HAL_ADC_MspInit+0x2bc>)
 8002b40:	f003 fc1a 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	484d      	ldr	r0, [pc, #308]	@ (8002c94 <HAL_ADC_MspInit+0x2c0>)
 8002b5e:	f003 fc0b 	bl	8006378 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002b62:	2321      	movs	r3, #33	@ 0x21
 8002b64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002b80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 8002b8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.SrcBurstLength = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.DestBurstLength = 1;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002ba2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002bc8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002bcc:	4932      	ldr	r1, [pc, #200]	@ (8002c98 <HAL_ADC_MspInit+0x2c4>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fd96 	bl	8005700 <HAL_DMAEx_List_BuildNode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_ADC_MspInit+0x20a>
    {
      Error_Handler();
 8002bda:	f7ff feed 	bl	80029b8 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 8002bde:	4a2e      	ldr	r2, [pc, #184]	@ (8002c98 <HAL_ADC_MspInit+0x2c4>)
 8002be0:	2100      	movs	r1, #0
 8002be2:	482e      	ldr	r0, [pc, #184]	@ (8002c9c <HAL_ADC_MspInit+0x2c8>)
 8002be4:	f002 fdb8 	bl	8005758 <HAL_DMAEx_List_InsertNode>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_ADC_MspInit+0x21e>
    {
      Error_Handler();
 8002bee:	f7ff fee3 	bl	80029b8 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 8002bf2:	482a      	ldr	r0, [pc, #168]	@ (8002c9c <HAL_ADC_MspInit+0x2c8>)
 8002bf4:	f002 fe79 	bl	80058ea <HAL_DMAEx_List_SetCircularMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_ADC_MspInit+0x22e>
    {
      Error_Handler();
 8002bfe:	f7ff fedb 	bl	80029b8 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <HAL_ADC_MspInit+0x2d0>)
 8002c06:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 8002c08:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c0a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8002c10:	4b23      	ldr	r3, [pc, #140]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002c16:	4b22      	ldr	r3, [pc, #136]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002c1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c24:	2281      	movs	r2, #129	@ 0x81
 8002c26:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8002c28:	481d      	ldr	r0, [pc, #116]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c2a:	f002 fc1f 	bl	800546c <HAL_DMAEx_List_Init>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 8002c34:	f7ff fec0 	bl	80029b8 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 8002c38:	4918      	ldr	r1, [pc, #96]	@ (8002c9c <HAL_ADC_MspInit+0x2c8>)
 8002c3a:	4819      	ldr	r0, [pc, #100]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c3c:	f002 feb6 	bl	80059ac <HAL_DMAEx_List_LinkQ>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 8002c46:	f7ff feb7 	bl	80029b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 8002c4a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c56:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c58:	4a11      	ldr	r2, [pc, #68]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c5a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002c5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002c66:	2110      	movs	r1, #16
 8002c68:	480d      	ldr	r0, [pc, #52]	@ (8002ca0 <HAL_ADC_MspInit+0x2cc>)
 8002c6a:	f002 fb9e 	bl	80053aa <HAL_DMA_ConfigChannelAttributes>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 8002c74:	f7ff fea0 	bl	80029b8 <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c78:	bf00      	nop
 8002c7a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	42028000 	.word	0x42028000
 8002c88:	44020c00 	.word	0x44020c00
 8002c8c:	42020800 	.word	0x42020800
 8002c90:	42020000 	.word	0x42020000
 8002c94:	42020400 	.word	0x42020400
 8002c98:	200043a0 	.word	0x200043a0
 8002c9c:	200043c4 	.word	0x200043c4
 8002ca0:	200043dc 	.word	0x200043dc
 8002ca4:	40020050 	.word	0x40020050

08002ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0ae      	sub	sp, #184	@ 0xb8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc0:	f107 0318 	add.w	r3, r7, #24
 8002cc4:	2288      	movs	r2, #136	@ 0x88
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f00b fe24 	bl	800e916 <memset>
  if(hspi->Instance==SPI1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a38      	ldr	r2, [pc, #224]	@ (8002db4 <HAL_SPI_MspInit+0x10c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d169      	bne.n	8002dac <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002cd8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cea:	f107 0318 	add.w	r3, r7, #24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fc3e 	bl	8007570 <HAL_RCCEx_PeriphCLKConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002cfa:	f7ff fe5d 	bl	80029b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d0a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d22:	4a25      	ldr	r2, [pc, #148]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d2c:	4b22      	ldr	r3, [pc, #136]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d40:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <HAL_SPI_MspInit+0x110>)
 8002d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d58:	23c0      	movs	r3, #192	@ 0xc0
 8002d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d70:	2305      	movs	r3, #5
 8002d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	480f      	ldr	r0, [pc, #60]	@ (8002dbc <HAL_SPI_MspInit+0x114>)
 8002d7e:	f003 fafb 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d82:	2308      	movs	r3, #8
 8002d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d9a:	2305      	movs	r3, #5
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4806      	ldr	r0, [pc, #24]	@ (8002dc0 <HAL_SPI_MspInit+0x118>)
 8002da8:	f003 fae6 	bl	8006378 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002dac:	bf00      	nop
 8002dae:	37b8      	adds	r7, #184	@ 0xb8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40013000 	.word	0x40013000
 8002db8:	44020c00 	.word	0x44020c00
 8002dbc:	42020000 	.word	0x42020000
 8002dc0:	42020400 	.word	0x42020400

08002dc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a28      	ldr	r2, [pc, #160]	@ (8002e84 <HAL_TIM_Base_MspInit+0xc0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10f      	bne.n	8002e06 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002de6:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dec:	4a26      	ldr	r2, [pc, #152]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002dee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002df2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e04:	e03a      	b.n	8002e7c <HAL_TIM_Base_MspInit+0xb8>
  else if(htim_base->Instance==TIM2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d135      	bne.n	8002e7c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e16:	4a1c      	ldr	r2, [pc, #112]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e34:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc4>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4809      	ldr	r0, [pc, #36]	@ (8002e8c <HAL_TIM_Base_MspInit+0xc8>)
 8002e68:	f003 fa86 	bl	8006378 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	202d      	movs	r0, #45	@ 0x2d
 8002e72:	f001 ff85 	bl	8004d80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e76:	202d      	movs	r0, #45	@ 0x2d
 8002e78:	f001 ff9c 	bl	8004db4 <HAL_NVIC_EnableIRQ>
}
 8002e7c:	bf00      	nop
 8002e7e:	3728      	adds	r7, #40	@ 0x28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	44020c00 	.word	0x44020c00
 8002e8c:	42020000 	.word	0x42020000

08002e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a22      	ldr	r2, [pc, #136]	@ (8002f38 <HAL_TIM_MspPostInit+0xa8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d13e      	bne.n	8002f30 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb8:	4a20      	ldr	r2, [pc, #128]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ed6:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ee0:	4b16      	ldr	r3, [pc, #88]	@ (8002f3c <HAL_TIM_MspPostInit+0xac>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC7     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	480d      	ldr	r0, [pc, #52]	@ (8002f40 <HAL_TIM_MspPostInit+0xb0>)
 8002f0a:	f003 fa35 	bl	8006378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f20:	2301      	movs	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4806      	ldr	r0, [pc, #24]	@ (8002f44 <HAL_TIM_MspPostInit+0xb4>)
 8002f2c:	f003 fa24 	bl	8006378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	44020c00 	.word	0x44020c00
 8002f40:	42020800 	.word	0x42020800
 8002f44:	42020000 	.word	0x42020000

08002f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0ae      	sub	sp, #184	@ 0xb8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f60:	f107 0318 	add.w	r3, r7, #24
 8002f64:	2288      	movs	r2, #136	@ 0x88
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f00b fcd4 	bl	800e916 <memset>
  if(huart->Instance==USART1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_UART_MspInit+0x15c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d146      	bne.n	8003006 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f78:	f04f 0201 	mov.w	r2, #1
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 faef 	bl	8007570 <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002f98:	f7ff fd0e 	bl	80029b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9c:	4b42      	ldr	r3, [pc, #264]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fa2:	4a41      	ldr	r2, [pc, #260]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002fac:	4b3e      	ldr	r3, [pc, #248]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b3b      	ldr	r3, [pc, #236]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc0:	4a39      	ldr	r2, [pc, #228]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fca:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8002fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe0:	2312      	movs	r3, #18
 8002fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	482b      	ldr	r0, [pc, #172]	@ (80030ac <HAL_UART_MspInit+0x164>)
 8003000:	f003 f9ba 	bl	8006378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003004:	e049      	b.n	800309a <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a29      	ldr	r2, [pc, #164]	@ (80030b0 <HAL_UART_MspInit+0x168>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d144      	bne.n	800309a <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003010:	f04f 0202 	mov.w	r2, #2
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800301c:	2300      	movs	r3, #0
 800301e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	4618      	mov	r0, r3
 8003026:	f004 faa3 	bl	8007570 <HAL_RCCEx_PeriphCLKConfig>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8003030:	f7ff fcc2 	bl	80029b8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003034:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8003036:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800303a:	4a1b      	ldr	r2, [pc, #108]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 800303c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003040:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8003046:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003052:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8003054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003058:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003062:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <HAL_UART_MspInit+0x160>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003070:	2304      	movs	r3, #4
 8003072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003076:	2312      	movs	r3, #18
 8003078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003088:	2307      	movs	r3, #7
 800308a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003092:	4619      	mov	r1, r3
 8003094:	4805      	ldr	r0, [pc, #20]	@ (80030ac <HAL_UART_MspInit+0x164>)
 8003096:	f003 f96f 	bl	8006378 <HAL_GPIO_Init>
}
 800309a:	bf00      	nop
 800309c:	37b8      	adds	r7, #184	@ 0xb8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800
 80030a8:	44020c00 	.word	0x44020c00
 80030ac:	42020000 	.word	0x42020000
 80030b0:	40004400 	.word	0x40004400

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <NMI_Handler+0x4>

080030bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <MemManage_Handler+0x4>

080030cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <BusFault_Handler+0x4>

080030d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <UsageFault_Handler+0x4>

080030dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80030f0:	4802      	ldr	r0, [pc, #8]	@ (80030fc <GPDMA1_Channel0_IRQHandler+0x10>)
 80030f2:	f001 fff9 	bl	80050e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200043dc 	.word	0x200043dc

08003100 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003104:	4802      	ldr	r0, [pc, #8]	@ (8003110 <TIM2_IRQHandler+0x10>)
 8003106:	f007 fa75 	bl	800a5f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20004530 	.word	0x20004530

08003114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return 1;
 8003118:	2301      	movs	r3, #1
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_kill>:

int _kill(int pid, int sig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800312e:	f00b fc45 	bl	800e9bc <__errno>
 8003132:	4603      	mov	r3, r0
 8003134:	2216      	movs	r2, #22
 8003136:	601a      	str	r2, [r3, #0]
  return -1;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <_exit>:

void _exit (int status)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ffe7 	bl	8003124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003156:	bf00      	nop
 8003158:	e7fd      	b.n	8003156 <_exit+0x12>

0800315a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e00a      	b.n	8003182 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800316c:	f3af 8000 	nop.w
 8003170:	4601      	mov	r1, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	60ba      	str	r2, [r7, #8]
 8003178:	b2ca      	uxtb	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	dbf0      	blt.n	800316c <_read+0x12>
  }

  return len;
 800318a:	687b      	ldr	r3, [r7, #4]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	e009      	b.n	80031ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	60ba      	str	r2, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff f836 	bl	8002220 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	dbf1      	blt.n	80031a6 <_write+0x12>
  }
  return len;
 80031c2:	687b      	ldr	r3, [r7, #4]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_close>:

int _close(int file)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f4:	605a      	str	r2, [r3, #4]
  return 0;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <_isatty>:

int _isatty(int file)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800323c:	4a14      	ldr	r2, [pc, #80]	@ (8003290 <_sbrk+0x5c>)
 800323e:	4b15      	ldr	r3, [pc, #84]	@ (8003294 <_sbrk+0x60>)
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <_sbrk+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003250:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <_sbrk+0x64>)
 8003252:	4a12      	ldr	r2, [pc, #72]	@ (800329c <_sbrk+0x68>)
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <_sbrk+0x64>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	429a      	cmp	r2, r3
 8003262:	d207      	bcs.n	8003274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003264:	f00b fbaa 	bl	800e9bc <__errno>
 8003268:	4603      	mov	r3, r0
 800326a:	220c      	movs	r2, #12
 800326c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800326e:	f04f 33ff 	mov.w	r3, #4294967295
 8003272:	e009      	b.n	8003288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003274:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800327a:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <_sbrk+0x64>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <_sbrk+0x64>)
 8003284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003286:	68fb      	ldr	r3, [r7, #12]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20008000 	.word	0x20008000
 8003294:	00000400 	.word	0x00000400
 8003298:	200046a4 	.word	0x200046a4
 800329c:	20004e38 	.word	0x20004e38

080032a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032a6:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <SystemInit+0xc8>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003368 <SystemInit+0xc8>)
 80032ae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80032b6:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <SystemInit+0xcc>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80032bc:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <SystemInit+0xcc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <SystemInit+0xcc>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80032c8:	4b28      	ldr	r3, [pc, #160]	@ (800336c <SystemInit+0xcc>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4927      	ldr	r1, [pc, #156]	@ (800336c <SystemInit+0xcc>)
 80032ce:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <SystemInit+0xd0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80032d4:	4b25      	ldr	r3, [pc, #148]	@ (800336c <SystemInit+0xcc>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <SystemInit+0xcc>)
 80032dc:	2200      	movs	r2, #0
 80032de:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80032e0:	4b22      	ldr	r3, [pc, #136]	@ (800336c <SystemInit+0xcc>)
 80032e2:	4a24      	ldr	r2, [pc, #144]	@ (8003374 <SystemInit+0xd4>)
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80032e6:	4b21      	ldr	r3, [pc, #132]	@ (800336c <SystemInit+0xcc>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <SystemInit+0xcc>)
 80032ee:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <SystemInit+0xd4>)
 80032f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <SystemInit+0xcc>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80032f8:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <SystemInit+0xcc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1b      	ldr	r2, [pc, #108]	@ (800336c <SystemInit+0xcc>)
 80032fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003302:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <SystemInit+0xcc>)
 8003306:	2200      	movs	r2, #0
 8003308:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <SystemInit+0xc8>)
 800330c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003310:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003312:	4b19      	ldr	r3, [pc, #100]	@ (8003378 <SystemInit+0xd8>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800331a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003322:	d003      	beq.n	800332c <SystemInit+0x8c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800332a:	d117      	bne.n	800335c <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800332c:	4b12      	ldr	r3, [pc, #72]	@ (8003378 <SystemInit+0xd8>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003338:	4b0f      	ldr	r3, [pc, #60]	@ (8003378 <SystemInit+0xd8>)
 800333a:	4a10      	ldr	r2, [pc, #64]	@ (800337c <SystemInit+0xdc>)
 800333c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800333e:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <SystemInit+0xd8>)
 8003340:	4a0f      	ldr	r2, [pc, #60]	@ (8003380 <SystemInit+0xe0>)
 8003342:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003344:	4b0c      	ldr	r3, [pc, #48]	@ (8003378 <SystemInit+0xd8>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	4a0b      	ldr	r2, [pc, #44]	@ (8003378 <SystemInit+0xd8>)
 800334a:	f043 0302 	orr.w	r3, r3, #2
 800334e:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <SystemInit+0xd8>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4a08      	ldr	r2, [pc, #32]	@ (8003378 <SystemInit+0xd8>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	61d3      	str	r3, [r2, #28]
  }
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	e000ed00 	.word	0xe000ed00
 800336c:	44020c00 	.word	0x44020c00
 8003370:	fae2eae3 	.word	0xfae2eae3
 8003374:	01010280 	.word	0x01010280
 8003378:	40022000 	.word	0x40022000
 800337c:	08192a3b 	.word	0x08192a3b
 8003380:	4c5d6e7f 	.word	0x4c5d6e7f

08003384 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003384:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003388:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800338a:	e003      	b.n	8003394 <LoopCopyDataInit>

0800338c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800338e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003390:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003392:	3104      	adds	r1, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003394:	480b      	ldr	r0, [pc, #44]	@ (80033c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003396:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003398:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800339a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800339c:	d3f6      	bcc.n	800338c <CopyDataInit>
	ldr	r2, =_sbss
 800339e:	4a0b      	ldr	r2, [pc, #44]	@ (80033cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80033a0:	e002      	b.n	80033a8 <LoopFillZerobss>

080033a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80033a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80033a4:	f842 3b04 	str.w	r3, [r2], #4

080033a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80033a8:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <LoopForever+0x16>)
	cmp	r2, r3
 80033aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80033ac:	d3f9      	bcc.n	80033a2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033ae:	f7ff ff77 	bl	80032a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b2:	f00b fb09 	bl	800e9c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033b6:	f7fe ff45 	bl	8002244 <main>

080033ba <LoopForever>:

LoopForever:
    b LoopForever
 80033ba:	e7fe      	b.n	80033ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80033bc:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80033c0:	08012778 	.word	0x08012778
	ldr	r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80033c8:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80033cc:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80033d0:	20004e38 	.word	0x20004e38

080033d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d4:	e7fe      	b.n	80033d4 <ADC1_IRQHandler>
	...

080033d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033dc:	2003      	movs	r0, #3
 80033de:	f001 fcc4 	bl	8004d6a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80033e2:	f003 ff3b 	bl	800725c <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0c      	ldr	r3, [pc, #48]	@ (800341c <HAL_Init+0x44>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	490b      	ldr	r1, [pc, #44]	@ (8003420 <HAL_Init+0x48>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003424 <HAL_Init+0x4c>)
 80033fa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033fc:	2004      	movs	r0, #4
 80033fe:	f001 fd09 	bl	8004e14 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003402:	2000      	movs	r0, #0
 8003404:	f000 f810 	bl	8003428 <HAL_InitTick>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e002      	b.n	8003418 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003412:	f7ff fad7 	bl	80029c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	44020c00 	.word	0x44020c00
 8003420:	080122f8 	.word	0x080122f8
 8003424:	20000008 	.word	0x20000008

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8003434:	4b33      	ldr	r3, [pc, #204]	@ (8003504 <HAL_InitTick+0xdc>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e05c      	b.n	80034fa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8003440:	4b31      	ldr	r3, [pc, #196]	@ (8003508 <HAL_InitTick+0xe0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d10c      	bne.n	8003466 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 800344c:	4b2f      	ldr	r3, [pc, #188]	@ (800350c <HAL_InitTick+0xe4>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b2c      	ldr	r3, [pc, #176]	@ (8003504 <HAL_InitTick+0xdc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800345a:	fbb3 f3f1 	udiv	r3, r3, r1
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e037      	b.n	80034d6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8003466:	f001 fd2d 	bl	8004ec4 <HAL_SYSTICK_GetCLKSourceConfig>
 800346a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d023      	beq.n	80034ba <HAL_InitTick+0x92>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d82d      	bhi.n	80034d4 <HAL_InitTick+0xac>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_InitTick+0x5e>
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d00d      	beq.n	80034a0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8003484:	e026      	b.n	80034d4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8003486:	4b21      	ldr	r3, [pc, #132]	@ (800350c <HAL_InitTick+0xe4>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <HAL_InitTick+0xdc>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8003494:	fbb3 f3f1 	udiv	r3, r3, r1
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	60fb      	str	r3, [r7, #12]
        break;
 800349e:	e01a      	b.n	80034d6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034a0:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <HAL_InitTick+0xdc>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
        break;
 80034b8:	e00d      	b.n	80034d6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80034ba:	4b12      	ldr	r3, [pc, #72]	@ (8003504 <HAL_InitTick+0xdc>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]
        break;
 80034d2:	e000      	b.n	80034d6 <HAL_InitTick+0xae>
        break;
 80034d4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 fc7a 	bl	8004dd0 <HAL_SYSTICK_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e009      	b.n	80034fa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e6:	2200      	movs	r2, #0
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	f001 fc47 	bl	8004d80 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <HAL_InitTick+0xe8>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000010 	.word	0x20000010
 8003508:	e000e010 	.word	0xe000e010
 800350c:	20000008 	.word	0x20000008
 8003510:	2000000c 	.word	0x2000000c

08003514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_GetTick+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	200046a8 	.word	0x200046a8

0800352c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <LL_ADC_EnableChannel0_GPIO+0x24>)
 80035c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <LL_ADC_EnableChannel0_GPIO+0x24>)
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	42028000 	.word	0x42028000

080035e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
 80035ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3360      	adds	r3, #96	@ 0x60
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <LL_ADC_SetOffset+0x44>)
 8003602:	4013      	ands	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	03fff000 	.word	0x03fff000

08003628 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3360      	adds	r3, #96	@ 0x60
 8003636:	461a      	mov	r2, r3
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3360      	adds	r3, #96	@ 0x60
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3360      	adds	r3, #96	@ 0x60
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80036b4:	bf00      	nop
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3360      	adds	r3, #96	@ 0x60
 80036d0:	461a      	mov	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	615a      	str	r2, [r3, #20]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003742:	b480      	push	{r7}
 8003744:	b087      	sub	sp, #28
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3330      	adds	r3, #48	@ 0x30
 8003752:	461a      	mov	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	4413      	add	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	211f      	movs	r1, #31
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0e9b      	lsrs	r3, r3, #26
 800377a:	f003 011f 	and.w	r1, r3, #31
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800379a:	b480      	push	{r7}
 800379c:	b087      	sub	sp, #28
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3314      	adds	r3, #20
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	0e5b      	lsrs	r3, r3, #25
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	4413      	add	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0d1b      	lsrs	r3, r3, #20
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2107      	movs	r1, #7
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	401a      	ands	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	0d1b      	lsrs	r3, r3, #20
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	431a      	orrs	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0318 	and.w	r3, r3, #24
 8003812:	4908      	ldr	r1, [pc, #32]	@ (8003834 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003814:	40d9      	lsrs	r1, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	400b      	ands	r3, r1
 800381a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381e:	431a      	orrs	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	000fffff 	.word	0x000fffff

08003838 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6093      	str	r3, [r2, #8]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003870:	d101      	bne.n	8003876 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003894:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003898:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038c0:	d101      	bne.n	80038c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800390c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003910:	f043 0202 	orr.w	r2, r3, #2
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <LL_ADC_IsEnabled+0x18>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <LL_ADC_IsEnabled+0x1a>
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d101      	bne.n	8003962 <LL_ADC_IsDisableOngoing+0x18>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_ADC_IsDisableOngoing+0x1a>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039ac:	f043 0210 	orr.w	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d101      	bne.n	80039d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d101      	bne.n	8003a26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e131      	b.n	8003cb2 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fe ffb9 	bl	80029d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fef1 	bl	800385c <LL_ADC_IsDeepPowerDownEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fed7 	bl	8003838 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff0c 	bl	80038ac <LL_ADC_IsInternalRegulatorEnabled>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff fef0 	bl	8003884 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aa4:	4b85      	ldr	r3, [pc, #532]	@ (8003cbc <HAL_ADC_Init+0x288>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	4a85      	ldr	r2, [pc, #532]	@ (8003cc0 <HAL_ADC_Init+0x28c>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ab8:	e002      	b.n	8003ac0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f9      	bne.n	8003aba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff feee 	bl	80038ac <LL_ADC_IsInternalRegulatorEnabled>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10d      	bne.n	8003af2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	f043 0210 	orr.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae6:	f043 0201 	orr.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff62 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003afc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 80ca 	bne.w	8003ca0 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80c6 	bne.w	8003ca0 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fefb 	bl	8003924 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b34:	4863      	ldr	r0, [pc, #396]	@ (8003cc4 <HAL_ADC_Init+0x290>)
 8003b36:	f7ff fef5 	bl	8003924 <LL_ADC_IsEnabled>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4619      	mov	r1, r3
 8003b46:	4860      	ldr	r0, [pc, #384]	@ (8003cc8 <HAL_ADC_Init+0x294>)
 8003b48:	f7ff fcf0 	bl	800352c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e5b      	ldrb	r3, [r3, #25]
 8003b50:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b56:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b5c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b62:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d106      	bne.n	8003b88 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	045b      	lsls	r3, r3, #17
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b94:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	4b48      	ldr	r3, [pc, #288]	@ (8003ccc <HAL_ADC_Init+0x298>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	69b9      	ldr	r1, [r7, #24]
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff1b 	bl	8003a0e <LL_ADC_INJ_IsConversionOngoing>
 8003bd8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13d      	bne.n	8003c5c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d13a      	bne.n	8003c5c <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	7e1b      	ldrb	r3, [r3, #24]
 8003bea:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bf2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c02:	f023 0302 	bic.w	r3, r3, #2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	69b9      	ldr	r1, [r7, #24]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d118      	bne.n	8003c4c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c36:	4311      	orrs	r1, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	611a      	str	r2, [r3, #16]
 8003c4a:	e007      	b.n	8003c5c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d10c      	bne.n	8003c7e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	f023 010f 	bic.w	r1, r3, #15
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c7c:	e007      	b.n	8003c8e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 020f 	bic.w	r2, r2, #15
 8003c8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c9e:	e007      	b.n	8003cb0 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	053e2d63 	.word	0x053e2d63
 8003cc4:	42028000 	.word	0x42028000
 8003cc8:	42028300 	.word	0x42028300
 8003ccc:	fff04007 	.word	0xfff04007

08003cd0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0a2      	sub	sp, #136	@ 0x88
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fe6d 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80d9 	bne.w	8003ea0 <HAL_ADC_Start_DMA+0x1d0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_Start_DMA+0x2c>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0d6      	b.n	8003eaa <HAL_ADC_Start_DMA+0x1da>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fe0d 	bl	8004924 <ADC_Enable>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003d10:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f040 80be 	bne.w	8003e96 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <HAL_ADC_Start_DMA+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	f023 0206 	bic.w	r2, r3, #6
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d46:	e002      	b.n	8003d4e <HAL_ADC_Start_DMA+0x7e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d52:	4a58      	ldr	r2, [pc, #352]	@ (8003eb4 <HAL_ADC_Start_DMA+0x1e4>)
 8003d54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5a:	4a57      	ldr	r2, [pc, #348]	@ (8003eb8 <HAL_ADC_Start_DMA+0x1e8>)
 8003d5c:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d62:	4a56      	ldr	r2, [pc, #344]	@ (8003ebc <HAL_ADC_Start_DMA+0x1ec>)
 8003d64:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	221c      	movs	r2, #28
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0210 	orr.w	r2, r2, #16
 8003d84:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d04d      	beq.n	8003e40 <HAL_ADC_Start_DMA+0x170>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d046      	beq.n	8003e3c <HAL_ADC_Start_DMA+0x16c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d040      	beq.n	8003e3c <HAL_ADC_Start_DMA+0x16c>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fcaf 	bl	800572c <HAL_DMAEx_List_GetNodeConfig>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_ADC_Start_DMA+0x108>
            {
              return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e068      	b.n	8003eaa <HAL_ADC_Start_DMA+0x1da>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d104      	bne.n	8003de8 <HAL_ADC_Start_DMA+0x118>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de6:	e00a      	b.n	8003dfe <HAL_ADC_Start_DMA+0x12e>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d104      	bne.n	8003df8 <HAL_ADC_Start_DMA+0x128>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003df6:	e002      	b.n	8003dfe <HAL_ADC_Start_DMA+0x12e>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e0a:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 fbd2 	bl	80055d8 <HAL_DMAEx_List_Start_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003e3a:	e026      	b.n	8003e8a <HAL_ADC_Start_DMA+0x1ba>
          }
          else
          {
            return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e034      	b.n	8003eaa <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d104      	bne.n	8003e54 <HAL_ADC_Start_DMA+0x184>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e52:	e00c      	b.n	8003e6e <HAL_ADC_Start_DMA+0x19e>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d104      	bne.n	8003e68 <HAL_ADC_Start_DMA+0x198>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e66:	e002      	b.n	8003e6e <HAL_ADC_Start_DMA+0x19e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3340      	adds	r3, #64	@ 0x40
 8003e78:	4619      	mov	r1, r3
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e80:	f001 f856 	bl	8004f30 <HAL_DMA_Start_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fd6e 	bl	8003970 <LL_ADC_REG_StartConversion>
 8003e94:	e007      	b.n	8003ea6 <HAL_ADC_Start_DMA+0x1d6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003e9e:	e002      	b.n	8003ea6 <HAL_ADC_Start_DMA+0x1d6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 8003ea6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3788      	adds	r7, #136	@ 0x88
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	08004ae7 	.word	0x08004ae7
 8003eb8:	08004bbf 	.word	0x08004bbf
 8003ebc:	08004bdb 	.word	0x08004bdb

08003ec0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_Stop_DMA+0x16>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e051      	b.n	8003f7a <HAL_ADC_Stop_DMA+0xba>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003ede:	2103      	movs	r1, #3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fc63 	bl	80047ac <ADC_ConversionStop>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13f      	bne.n	8003f70 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d10f      	bne.n	8003f2e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f86c 	bl	8004ff0 <HAL_DMA_Abort>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0210 	bic.w	r2, r2, #16
 8003f3c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fd6f 	bl	8004a28 <ADC_Disable>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e002      	b.n	8003f56 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fd69 	bl	8004a28 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	f043 0201 	orr.w	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b6      	sub	sp, #216	@ 0xd8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x22>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e3d8      	b.n	8004780 <HAL_ADC_ConfigChannel+0x7d4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fcf0 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 83bd 	bne.w	8004762 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d104      	bne.n	8003ffa <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fadf 	bl	80035b8 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f7ff fb9b 	bl	8003742 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fcd5 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8004016:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fcf5 	bl	8003a0e <LL_ADC_INJ_IsConversionOngoing>
 8004024:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004028:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 81d9 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004032:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 81d4 	bne.w	80043e4 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004044:	d10f      	bne.n	8004066 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	4619      	mov	r1, r3
 8004052:	f7ff fba2 	bl	800379a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fb49 	bl	80036f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8004064:	e00e      	b.n	8004084 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	461a      	mov	r2, r3
 8004074:	f7ff fb91 	bl	800379a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fb39 	bl	80036f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d022      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6919      	ldr	r1, [r3, #16]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040b6:	f7ff fa93 	bl	80035e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6919      	ldr	r1, [r3, #16]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f7ff fadf 	bl	800368a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x136>
 80040dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040e0:	e000      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x138>
 80040e2:	2300      	movs	r3, #0
 80040e4:	461a      	mov	r2, r3
 80040e6:	f7ff faeb 	bl	80036c0 <LL_ADC_SetOffsetSaturation>
 80040ea:	e17b      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fa98 	bl	8003628 <LL_ADC_GetOffsetChannel>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x16c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fa8d 	bl	8003628 <LL_ADC_GetOffsetChannel>
 800410e:	4603      	mov	r3, r0
 8004110:	0e9b      	lsrs	r3, r3, #26
 8004112:	f003 021f 	and.w	r2, r3, #31
 8004116:	e01e      	b.n	8004156 <HAL_ADC_ConfigChannel+0x1aa>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fa82 	bl	8003628 <LL_ADC_GetOffsetChannel>
 8004124:	4603      	mov	r3, r0
 8004126:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800412e:	fa93 f3a3 	rbit	r3, r3
 8004132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8004136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800413a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800413e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e004      	b.n	8004154 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800414a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800415e:	2b00      	cmp	r3, #0
 8004160:	d105      	bne.n	800416e <HAL_ADC_ConfigChannel+0x1c2>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	e018      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x1f4>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800417a:	fa93 f3a3 	rbit	r3, r3
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004186:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800418a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e004      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8004196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800419a:	fab3 f383 	clz	r3, r3
 800419e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fa51 	bl	8003654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2101      	movs	r1, #1
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fa35 	bl	8003628 <LL_ADC_GetOffsetChannel>
 80041be:	4603      	mov	r3, r0
 80041c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_ADC_ConfigChannel+0x232>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fa2a 	bl	8003628 <LL_ADC_GetOffsetChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	f003 021f 	and.w	r2, r3, #31
 80041dc:	e01e      	b.n	800421c <HAL_ADC_ConfigChannel+0x270>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff fa1f 	bl	8003628 <LL_ADC_GetOffsetChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80041f4:	fa93 f3a3 	rbit	r3, r3
 80041f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80041fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e004      	b.n	800421a <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8004210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	2b00      	cmp	r3, #0
 8004226:	d105      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x288>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	e018      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2ba>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800424c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e004      	b.n	8004266 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 800425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004266:	429a      	cmp	r2, r3
 8004268:	d106      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2200      	movs	r2, #0
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff f9ee 	bl	8003654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff f9d2 	bl	8003628 <LL_ADC_GetOffsetChannel>
 8004284:	4603      	mov	r3, r0
 8004286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x2f8>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2102      	movs	r1, #2
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff f9c7 	bl	8003628 <LL_ADC_GetOffsetChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	e01e      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x336>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f9bc 	bl	8003628 <LL_ADC_GetOffsetChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80042c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80042ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80042d2:	2320      	movs	r3, #32
 80042d4:	e004      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80042d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042da:	fab3 f383 	clz	r3, r3
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d105      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x34e>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	0e9b      	lsrs	r3, r3, #26
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	e016      	b.n	8004328 <HAL_ADC_ConfigChannel+0x37c>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800430c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800430e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e004      	b.n	8004328 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800431e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004328:	429a      	cmp	r2, r3
 800432a:	d106      	bne.n	800433a <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2200      	movs	r2, #0
 8004332:	2102      	movs	r1, #2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff f98d 	bl	8003654 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2103      	movs	r1, #3
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff f971 	bl	8003628 <LL_ADC_GetOffsetChannel>
 8004346:	4603      	mov	r3, r0
 8004348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x3ba>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2103      	movs	r1, #3
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff f966 	bl	8003628 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	0e9b      	lsrs	r3, r3, #26
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	e017      	b.n	8004396 <HAL_ADC_ConfigChannel+0x3ea>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2103      	movs	r1, #3
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff f95b 	bl	8003628 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800437e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004380:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8004388:	2320      	movs	r3, #32
 800438a:	e003      	b.n	8004394 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 800438c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d105      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x402>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0e9b      	lsrs	r3, r3, #26
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	e011      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x426>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043b6:	fa93 f3a3 	rbit	r3, r3
 80043ba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80043bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80043c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 80043c6:	2320      	movs	r3, #32
 80043c8:	e003      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 80043ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d106      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	2103      	movs	r1, #3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff f938 	bl	8003654 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff fa9b 	bl	8003924 <LL_ADC_IsEnabled>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 813f 	bne.w	8004674 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f7ff f9f4 	bl	80037f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a8e      	ldr	r2, [pc, #568]	@ (8004648 <HAL_ADC_ConfigChannel+0x69c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f040 8130 	bne.w	8004674 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10b      	bne.n	800443c <HAL_ADC_ConfigChannel+0x490>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	0e9b      	lsrs	r3, r3, #26
 800442a:	3301      	adds	r3, #1
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2b09      	cmp	r3, #9
 8004432:	bf94      	ite	ls
 8004434:	2301      	movls	r3, #1
 8004436:	2300      	movhi	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e019      	b.n	8004470 <HAL_ADC_ConfigChannel+0x4c4>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800444a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800444c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800444e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e003      	b.n	8004460 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004458:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2b09      	cmp	r3, #9
 8004468:	bf94      	ite	ls
 800446a:	2301      	movls	r3, #1
 800446c:	2300      	movhi	r3, #0
 800446e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004470:	2b00      	cmp	r3, #0
 8004472:	d079      	beq.n	8004568 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_ADC_ConfigChannel+0x4e4>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	3301      	adds	r3, #1
 8004488:	069b      	lsls	r3, r3, #26
 800448a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800448e:	e015      	b.n	80044bc <HAL_ADC_ConfigChannel+0x510>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004498:	fa93 f3a3 	rbit	r3, r3
 800449c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800449e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80044a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e003      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80044ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3301      	adds	r3, #1
 80044b6:	069b      	lsls	r3, r3, #26
 80044b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x530>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0e9b      	lsrs	r3, r3, #26
 80044ce:	3301      	adds	r3, #1
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	e017      	b.n	800450c <HAL_ADC_ConfigChannel+0x560>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80044ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80044ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e003      	b.n	8004500 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 80044f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	3301      	adds	r3, #1
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	2101      	movs	r1, #1
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x586>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	0e9b      	lsrs	r3, r3, #26
 8004522:	3301      	adds	r3, #1
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	4613      	mov	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	4413      	add	r3, r2
 800452e:	051b      	lsls	r3, r3, #20
 8004530:	e018      	b.n	8004564 <HAL_ADC_ConfigChannel+0x5b8>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800454a:	2320      	movs	r3, #32
 800454c:	e003      	b.n	8004556 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 800454e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004550:	fab3 f383 	clz	r3, r3
 8004554:	b2db      	uxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	f003 021f 	and.w	r2, r3, #31
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004564:	430b      	orrs	r3, r1
 8004566:	e080      	b.n	800466a <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004570:	2b00      	cmp	r3, #0
 8004572:	d107      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x5d8>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	3301      	adds	r3, #1
 800457c:	069b      	lsls	r3, r3, #26
 800457e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004582:	e015      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x604>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 800459c:	2320      	movs	r3, #32
 800459e:	e003      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	fab3 f383 	clz	r3, r3
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	3301      	adds	r3, #1
 80045aa:	069b      	lsls	r3, r3, #26
 80045ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x624>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	0e9b      	lsrs	r3, r3, #26
 80045c2:	3301      	adds	r3, #1
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	e017      	b.n	8004600 <HAL_ADC_ConfigChannel+0x654>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	61fb      	str	r3, [r7, #28]
  return result;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e003      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	ea42 0103 	orr.w	r1, r2, r3
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_ADC_ConfigChannel+0x680>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0e9b      	lsrs	r3, r3, #26
 8004616:	3301      	adds	r3, #1
 8004618:	f003 021f 	and.w	r2, r3, #31
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	3b1e      	subs	r3, #30
 8004624:	051b      	lsls	r3, r3, #20
 8004626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800462a:	e01d      	b.n	8004668 <HAL_ADC_ConfigChannel+0x6bc>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fa93 f3a3 	rbit	r3, r3
 8004638:	613b      	str	r3, [r7, #16]
  return result;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004644:	2320      	movs	r3, #32
 8004646:	e005      	b.n	8004654 <HAL_ADC_ConfigChannel+0x6a8>
 8004648:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	b2db      	uxtb	r3, r3
 8004654:	3301      	adds	r3, #1
 8004656:	f003 021f 	and.w	r2, r3, #31
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	3b1e      	subs	r3, #30
 8004662:	051b      	lsls	r3, r3, #20
 8004664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004668:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800466e:	4619      	mov	r1, r3
 8004670:	f7ff f893 	bl	800379a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b43      	ldr	r3, [pc, #268]	@ (8004788 <HAL_ADC_ConfigChannel+0x7dc>)
 800467a:	4013      	ands	r3, r2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d079      	beq.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004680:	4842      	ldr	r0, [pc, #264]	@ (800478c <HAL_ADC_ConfigChannel+0x7e0>)
 8004682:	f7fe ff79 	bl	8003578 <LL_ADC_GetCommonPathInternalCh>
 8004686:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <HAL_ADC_ConfigChannel+0x7e4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d124      	bne.n	80046de <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11e      	bne.n	80046de <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004794 <HAL_ADC_ConfigChannel+0x7e8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d164      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046b2:	4619      	mov	r1, r3
 80046b4:	4835      	ldr	r0, [pc, #212]	@ (800478c <HAL_ADC_ConfigChannel+0x7e0>)
 80046b6:	f7fe ff4c 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046ba:	4b37      	ldr	r3, [pc, #220]	@ (8004798 <HAL_ADC_ConfigChannel+0x7ec>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	4a36      	ldr	r2, [pc, #216]	@ (800479c <HAL_ADC_ConfigChannel+0x7f0>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	3301      	adds	r3, #1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046ce:	e002      	b.n	80046d6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1f9      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046dc:	e04a      	b.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <HAL_ADC_ConfigChannel+0x7f4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d113      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10d      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a26      	ldr	r2, [pc, #152]	@ (8004794 <HAL_ADC_ConfigChannel+0x7e8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d13a      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004702:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004706:	4619      	mov	r1, r3
 8004708:	4820      	ldr	r0, [pc, #128]	@ (800478c <HAL_ADC_ConfigChannel+0x7e0>)
 800470a:	f7fe ff22 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470e:	e031      	b.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a23      	ldr	r2, [pc, #140]	@ (80047a4 <HAL_ADC_ConfigChannel+0x7f8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d113      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800471a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800471e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10d      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1a      	ldr	r2, [pc, #104]	@ (8004794 <HAL_ADC_ConfigChannel+0x7e8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d121      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004734:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004738:	4619      	mov	r1, r3
 800473a:	4814      	ldr	r0, [pc, #80]	@ (800478c <HAL_ADC_ConfigChannel+0x7e0>)
 800473c:	f7fe ff09 	bl	8003552 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004740:	e018      	b.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a18      	ldr	r2, [pc, #96]	@ (80047a8 <HAL_ADC_ConfigChannel+0x7fc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d113      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a10      	ldr	r2, [pc, #64]	@ (8004794 <HAL_ADC_ConfigChannel+0x7e8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe ff1a 	bl	8003594 <LL_ADC_EnableChannelVDDcore>
 8004760:	e008      	b.n	8004774 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800477c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004780:	4618      	mov	r0, r3
 8004782:	37d8      	adds	r7, #216	@ 0xd8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	80080000 	.word	0x80080000
 800478c:	42028300 	.word	0x42028300
 8004790:	c3210000 	.word	0xc3210000
 8004794:	42028000 	.word	0x42028000
 8004798:	20000008 	.word	0x20000008
 800479c:	053e2d63 	.word	0x053e2d63
 80047a0:	88600004 	.word	0x88600004
 80047a4:	c7520000 	.word	0xc7520000
 80047a8:	99200040 	.word	0x99200040

080047ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff f8fc 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 80047c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff f91d 	bl	8003a0e <LL_ADC_INJ_IsConversionOngoing>
 80047d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d103      	bne.n	80047e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 8098 	beq.w	8004914 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d02a      	beq.n	8004848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	7e5b      	ldrb	r3, [r3, #25]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d126      	bne.n	8004848 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7e1b      	ldrb	r3, [r3, #24]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d122      	bne.n	8004848 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004802:	2301      	movs	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004806:	e014      	b.n	8004832 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4a45      	ldr	r2, [pc, #276]	@ (8004920 <ADC_ConversionStop+0x174>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d90d      	bls.n	800482c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	f043 0210 	orr.w	r2, r3, #16
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e074      	b.n	8004916 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	3301      	adds	r3, #1
 8004830:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483c:	2b40      	cmp	r3, #64	@ 0x40
 800483e:	d1e3      	bne.n	8004808 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2240      	movs	r2, #64	@ 0x40
 8004846:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d014      	beq.n	8004878 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f8b4 	bl	80039c0 <LL_ADC_REG_IsConversionOngoing>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f871 	bl	800394a <LL_ADC_IsDisableOngoing>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff f890 	bl	8003998 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d014      	beq.n	80048a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff f8c3 	bl	8003a0e <LL_ADC_INJ_IsConversionOngoing>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff f859 	bl	800394a <LL_ADC_IsDisableOngoing>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff f89f 	bl	80039e6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d005      	beq.n	80048ba <ADC_ConversionStop+0x10e>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d105      	bne.n	80048c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80048b4:	230c      	movs	r3, #12
 80048b6:	617b      	str	r3, [r7, #20]
        break;
 80048b8:	e005      	b.n	80048c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80048ba:	2308      	movs	r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
        break;
 80048be:	e002      	b.n	80048c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80048c0:	2304      	movs	r3, #4
 80048c2:	617b      	str	r3, [r7, #20]
        break;
 80048c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80048c6:	f7fe fe25 	bl	8003514 <HAL_GetTick>
 80048ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80048cc:	e01b      	b.n	8004906 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80048ce:	f7fe fe21 	bl	8003514 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b05      	cmp	r3, #5
 80048da:	d914      	bls.n	8004906 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	f043 0210 	orr.w	r2, r3, #16
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e007      	b.n	8004916 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1dc      	bne.n	80048ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3720      	adds	r7, #32
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	a33fffff 	.word	0xa33fffff

08004924 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fff5 	bl	8003924 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d166      	bne.n	8004a0e <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <ADC_Enable+0xf4>)
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e052      	b.n	8004a10 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe ffb0 	bl	80038d4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004974:	4829      	ldr	r0, [pc, #164]	@ (8004a1c <ADC_Enable+0xf8>)
 8004976:	f7fe fdff 	bl	8003578 <LL_ADC_GetCommonPathInternalCh>
 800497a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800497c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004984:	4b26      	ldr	r3, [pc, #152]	@ (8004a20 <ADC_Enable+0xfc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	4a26      	ldr	r2, [pc, #152]	@ (8004a24 <ADC_Enable+0x100>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	099b      	lsrs	r3, r3, #6
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004998:	e002      	b.n	80049a0 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	3b01      	subs	r3, #1
 800499e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f9      	bne.n	800499a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049a6:	f7fe fdb5 	bl	8003514 <HAL_GetTick>
 80049aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049ac:	e028      	b.n	8004a00 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe ffb6 	bl	8003924 <LL_ADC_IsEnabled>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe ff86 	bl	80038d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80049c8:	f7fe fda4 	bl	8003514 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d914      	bls.n	8004a00 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d00d      	beq.n	8004a00 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e8:	f043 0210 	orr.w	r2, r3, #16
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f4:	f043 0201 	orr.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e007      	b.n	8004a10 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d1cf      	bne.n	80049ae <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	8000003f 	.word	0x8000003f
 8004a1c:	42028300 	.word	0x42028300
 8004a20:	20000008 	.word	0x20000008
 8004a24:	053e2d63 	.word	0x053e2d63

08004a28 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ff88 	bl	800394a <LL_ADC_IsDisableOngoing>
 8004a3a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe ff6f 	bl	8003924 <LL_ADC_IsEnabled>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d047      	beq.n	8004adc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d144      	bne.n	8004adc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030d 	and.w	r3, r3, #13
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d10c      	bne.n	8004a7a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe ff49 	bl	80038fc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a72:	f7fe fd4f 	bl	8003514 <HAL_GetTick>
 8004a76:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a78:	e029      	b.n	8004ace <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	f043 0210 	orr.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e023      	b.n	8004ade <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a96:	f7fe fd3d 	bl	8003514 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d914      	bls.n	8004ace <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	f043 0210 	orr.w	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e007      	b.n	8004ade <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1dc      	bne.n	8004a96 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d14b      	bne.n	8004b98 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d021      	beq.n	8004b5e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fdfc 	bl	800371c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d032      	beq.n	8004b90 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d12b      	bne.n	8004b90 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11f      	bne.n	8004b90 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b5c:	e018      	b.n	8004b90 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d111      	bne.n	8004b90 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d105      	bne.n	8004b90 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b88:	f043 0201 	orr.w	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f7fd ff07 	bl	80029a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b96:	e00e      	b.n	8004bb6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff f9f6 	bl	8003f96 <HAL_ADC_ErrorCallback>
}
 8004baa:	e004      	b.n	8004bb6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff f9d8 	bl	8003f82 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bd2:	bf00      	nop
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf8:	f043 0204 	orr.w	r2, r3, #4
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff f9c8 	bl	8003f96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c42:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <__NVIC_SetPriorityGrouping+0x44>)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	60d3      	str	r3, [r2, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c5c:	4b04      	ldr	r3, [pc, #16]	@ (8004c70 <__NVIC_GetPriorityGrouping+0x18>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	0a1b      	lsrs	r3, r3, #8
 8004c62:	f003 0307 	and.w	r3, r3, #7
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	e000ed00 	.word	0xe000ed00

08004c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	db0b      	blt.n	8004c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	f003 021f 	and.w	r2, r3, #31
 8004c8c:	4907      	ldr	r1, [pc, #28]	@ (8004cac <__NVIC_EnableIRQ+0x38>)
 8004c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2001      	movs	r0, #1
 8004c96:	fa00 f202 	lsl.w	r2, r0, r2
 8004c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	e000e100 	.word	0xe000e100

08004cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	db0a      	blt.n	8004cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	490c      	ldr	r1, [pc, #48]	@ (8004cfc <__NVIC_SetPriority+0x4c>)
 8004cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cce:	0112      	lsls	r2, r2, #4
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cd8:	e00a      	b.n	8004cf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4908      	ldr	r1, [pc, #32]	@ (8004d00 <__NVIC_SetPriority+0x50>)
 8004ce0:	88fb      	ldrh	r3, [r7, #6]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	3b04      	subs	r3, #4
 8004ce8:	0112      	lsls	r2, r2, #4
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	440b      	add	r3, r1
 8004cee:	761a      	strb	r2, [r3, #24]
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	e000e100 	.word	0xe000e100
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f1c3 0307 	rsb	r3, r3, #7
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	bf28      	it	cs
 8004d22:	2304      	movcs	r3, #4
 8004d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3304      	adds	r3, #4
 8004d2a:	2b06      	cmp	r3, #6
 8004d2c:	d902      	bls.n	8004d34 <NVIC_EncodePriority+0x30>
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3b03      	subs	r3, #3
 8004d32:	e000      	b.n	8004d36 <NVIC_EncodePriority+0x32>
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d38:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43da      	mvns	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	401a      	ands	r2, r3
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	43d9      	mvns	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d5c:	4313      	orrs	r3, r2
         );
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3724      	adds	r7, #36	@ 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b082      	sub	sp, #8
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff ff4c 	bl	8004c10 <__NVIC_SetPriorityGrouping>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d8e:	f7ff ff63 	bl	8004c58 <__NVIC_GetPriorityGrouping>
 8004d92:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	6978      	ldr	r0, [r7, #20]
 8004d9a:	f7ff ffb3 	bl	8004d04 <NVIC_EncodePriority>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff82 	bl	8004cb0 <__NVIC_SetPriority>
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ff56 	bl	8004c74 <__NVIC_EnableIRQ>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004de0:	d301      	bcc.n	8004de6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8004de2:	2301      	movs	r3, #1
 8004de4:	e00d      	b.n	8004e02 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8004de6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e10 <HAL_SYSTICK_Config+0x40>)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004dee:	4b08      	ldr	r3, [pc, #32]	@ (8004e10 <HAL_SYSTICK_Config+0x40>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004df4:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_SYSTICK_Config+0x40>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <HAL_SYSTICK_Config+0x40>)
 8004dfa:	f043 0303 	orr.w	r3, r3, #3
 8004dfe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010

08004e14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d844      	bhi.n	8004eac <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e4b 	.word	0x08004e4b
 8004e2c:	08004e69 	.word	0x08004e69
 8004e30:	08004e8b 	.word	0x08004e8b
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004e3d 	.word	0x08004e3d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6013      	str	r3, [r2, #0]
      break;
 8004e48:	e031      	b.n	8004eae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e50:	f023 0304 	bic.w	r3, r3, #4
 8004e54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004e56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004e58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004e5e:	f023 030c 	bic.w	r3, r3, #12
 8004e62:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004e66:	e022      	b.n	8004eae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004e68:	4b14      	ldr	r3, [pc, #80]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e6e:	f023 0304 	bic.w	r3, r3, #4
 8004e72:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004e74:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e7a:	f023 030c 	bic.w	r3, r3, #12
 8004e7e:	4a10      	ldr	r2, [pc, #64]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004e88:	e011      	b.n	8004eae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004ebc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e9c:	f023 030c 	bic.w	r3, r3, #12
 8004ea0:	4a07      	ldr	r2, [pc, #28]	@ (8004ec0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004ea2:	f043 0308 	orr.w	r3, r3, #8
 8004ea6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8004eaa:	e000      	b.n	8004eae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004eac:	bf00      	nop
  }
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	e000e010 	.word	0xe000e010
 8004ec0:	44020c00 	.word	0x44020c00

08004ec4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8004eca:	4b17      	ldr	r3, [pc, #92]	@ (8004f28 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8004ed6:	2304      	movs	r3, #4
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	e01e      	b.n	8004f1a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8004edc:	4b13      	ldr	r3, [pc, #76]	@ (8004f2c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8004ede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d00f      	beq.n	8004f0e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d80f      	bhi.n	8004f14 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d003      	beq.n	8004f08 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004f00:	e008      	b.n	8004f14 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004f02:	2300      	movs	r3, #0
 8004f04:	607b      	str	r3, [r7, #4]
        break;
 8004f06:	e008      	b.n	8004f1a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
        break;
 8004f0c:	e005      	b.n	8004f1a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004f0e:	2302      	movs	r3, #2
 8004f10:	607b      	str	r3, [r7, #4]
        break;
 8004f12:	e002      	b.n	8004f1a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004f14:	2300      	movs	r3, #0
 8004f16:	607b      	str	r3, [r7, #4]
        break;
 8004f18:	bf00      	nop
    }
  }
  return systick_source;
 8004f1a:	687b      	ldr	r3, [r7, #4]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000e010 	.word	0xe000e010
 8004f2c:	44020c00 	.word	0x44020c00

08004f30 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e04f      	b.n	8004fe8 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_DMA_Start_IT+0x26>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e048      	b.n	8004fe8 <HAL_DMA_Start_IT+0xb8>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d136      	bne.n	8004fd8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fa4f 	bl	8005422 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004f92:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004faa:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fc2:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e007      	b.n	8004fe8 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2240      	movs	r2, #64	@ 0x40
 8004fdc:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004ff8:	f7fe fa8c 	bl	8003514 <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e06b      	b.n	80050e0 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d008      	beq.n	8005026 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e05c      	b.n	80050e0 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0204 	orr.w	r2, r2, #4
 8005034:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2205      	movs	r2, #5
 800503a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800503e:	e020      	b.n	8005082 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005040:	f7fe fa68 	bl	8003514 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b05      	cmp	r3, #5
 800504c:	d919      	bls.n	8005082 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005052:	f043 0210 	orr.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2203      	movs	r2, #3
 800505e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005072:	2201      	movs	r2, #1
 8005074:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e02e      	b.n	80050e0 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0d7      	beq.n	8005040 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0202 	orr.w	r2, r2, #2
 800509e:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2204      	movs	r2, #4
 80050a4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80050b0:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ca:	2201      	movs	r2, #1
 80050cc:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80050f8:	f023 030f 	bic.w	r3, r3, #15
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005106:	3b50      	subs	r3, #80	@ 0x50
 8005108:	09db      	lsrs	r3, r3, #7
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2201      	movs	r2, #1
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4013      	ands	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 813b 	beq.w	800539e <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800514c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005152:	f043 0201 	orr.w	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005164:	2b00      	cmp	r3, #0
 8005166:	d011      	beq.n	800518c <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800517e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	f043 0202 	orr.w	r2, r3, #2
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051b0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b6:	f043 0204 	orr.w	r2, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e8:	f043 0208 	orr.w	r2, r3, #8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d013      	beq.n	8005226 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005214:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d04c      	beq.n	80052ce <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d045      	beq.n	80052ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800524a:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b04      	cmp	r3, #4
 8005256:	d12e      	bne.n	80052b6 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005266:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695a      	ldr	r2, [r3, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0202 	orr.w	r2, r2, #2
 8005276:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005288:	2b00      	cmp	r3, #0
 800528a:	d007      	beq.n	800529c <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005290:	2201      	movs	r2, #1
 8005292:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d07a      	beq.n	80053a2 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
        }

        return;
 80052b4:	e075      	b.n	80053a2 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2205      	movs	r2, #5
 80052ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d039      	beq.n	8005350 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d032      	beq.n	8005350 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d012      	beq.n	800531c <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d116      	bne.n	800532e <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005306:	2b00      	cmp	r3, #0
 8005308:	d111      	bne.n	800532e <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005316:	2201      	movs	r2, #1
 8005318:	731a      	strb	r2, [r3, #12]
 800531a:	e008      	b.n	800532e <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005336:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	2b00      	cmp	r3, #0
 8005356:	d025      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0202 	orr.w	r2, r2, #2
 8005366:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005380:	2201      	movs	r2, #1
 8005382:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
 800539c:	e002      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80053a2:	bf00      	nop
    }
  }
}
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e02b      	b.n	8005416 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80053c6:	f023 030f 	bic.w	r3, r3, #15
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d4:	3b50      	subs	r3, #80	@ 0x50
 80053d6:	09db      	lsrs	r3, r3, #7
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	2201      	movs	r2, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d012      	beq.n	8005414 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f003 0311 	and.w	r3, r3, #17
 80053f4:	2b11      	cmp	r3, #17
 80053f6:	d106      	bne.n	8005406 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	431a      	orrs	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	605a      	str	r2, [r3, #4]
 8005404:	e006      	b.n	8005414 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	b291      	uxth	r1, r2
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	430b      	orrs	r3, r1
 8005444:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 800544e:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7fe f84e 	bl	8003514 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e085      	b.n	8005590 <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a43      	ldr	r2, [pc, #268]	@ (8005598 <HAL_DMAEx_List_Init+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d049      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a42      	ldr	r2, [pc, #264]	@ (800559c <HAL_DMAEx_List_Init+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d044      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a40      	ldr	r2, [pc, #256]	@ (80055a0 <HAL_DMAEx_List_Init+0x134>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d03f      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a3f      	ldr	r2, [pc, #252]	@ (80055a4 <HAL_DMAEx_List_Init+0x138>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03a      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a3d      	ldr	r2, [pc, #244]	@ (80055a8 <HAL_DMAEx_List_Init+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d035      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3c      	ldr	r2, [pc, #240]	@ (80055ac <HAL_DMAEx_List_Init+0x140>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d030      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3a      	ldr	r2, [pc, #232]	@ (80055b0 <HAL_DMAEx_List_Init+0x144>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a39      	ldr	r2, [pc, #228]	@ (80055b4 <HAL_DMAEx_List_Init+0x148>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d026      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a37      	ldr	r2, [pc, #220]	@ (80055b8 <HAL_DMAEx_List_Init+0x14c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d021      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a36      	ldr	r2, [pc, #216]	@ (80055bc <HAL_DMAEx_List_Init+0x150>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d01c      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a34      	ldr	r2, [pc, #208]	@ (80055c0 <HAL_DMAEx_List_Init+0x154>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a33      	ldr	r2, [pc, #204]	@ (80055c4 <HAL_DMAEx_List_Init+0x158>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d012      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a31      	ldr	r2, [pc, #196]	@ (80055c8 <HAL_DMAEx_List_Init+0x15c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00d      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a30      	ldr	r2, [pc, #192]	@ (80055cc <HAL_DMAEx_List_Init+0x160>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d008      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2e      	ldr	r2, [pc, #184]	@ (80055d0 <HAL_DMAEx_List_Init+0x164>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <HAL_DMAEx_List_Init+0xb6>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	@ (80055d4 <HAL_DMAEx_List_Init+0x168>)
 8005520:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0206 	orr.w	r2, r2, #6
 8005540:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005542:	e00f      	b.n	8005564 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005544:	f7fd ffe6 	bl	8003514 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b05      	cmp	r3, #5
 8005550:	d908      	bls.n	8005564 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2210      	movs	r2, #16
 8005556:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2203      	movs	r2, #3
 800555c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e015      	b.n	8005590 <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e8      	bne.n	8005544 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa94 	bl	8005aa0 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40020050 	.word	0x40020050
 800559c:	400200d0 	.word	0x400200d0
 80055a0:	40020150 	.word	0x40020150
 80055a4:	400201d0 	.word	0x400201d0
 80055a8:	40020250 	.word	0x40020250
 80055ac:	400202d0 	.word	0x400202d0
 80055b0:	40020350 	.word	0x40020350
 80055b4:	400203d0 	.word	0x400203d0
 80055b8:	40021050 	.word	0x40021050
 80055bc:	400210d0 	.word	0x400210d0
 80055c0:	40021150 	.word	0x40021150
 80055c4:	400211d0 	.word	0x400211d0
 80055c8:	40021250 	.word	0x40021250
 80055cc:	400212d0 	.word	0x400212d0
 80055d0:	40021350 	.word	0x40021350
 80055d4:	400213d0 	.word	0x400213d0

080055d8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_DMAEx_List_Start_IT+0x16>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e082      	b.n	80056f8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80055f8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005604:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005606:	7dfb      	ldrb	r3, [r7, #23]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d005      	beq.n	8005618 <HAL_DMAEx_List_Start_IT+0x40>
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d16a      	bne.n	80056e8 <HAL_DMAEx_List_Start_IT+0x110>
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d067      	beq.n	80056e8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	d157      	bne.n	80056d4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_DMAEx_List_Start_IT+0x5a>
 800562e:	2302      	movs	r3, #2
 8005630:	e062      	b.n	80056f8 <HAL_DMAEx_List_Start_IT+0x120>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005646:	2202      	movs	r2, #2
 8005648:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005654:	2200      	movs	r2, #0
 8005656:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005666:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800567e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005696:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f107 010c 	add.w	r1, r7, #12
 80056a2:	2200      	movs	r2, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fd97 	bl	80061d8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	0c0b      	lsrs	r3, r1, #16
 80056b8:	041b      	lsls	r3, r3, #16
 80056ba:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80056c8:	4013      	ands	r3, r2
 80056ca:	68f9      	ldr	r1, [r7, #12]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e007      	b.n	80056f8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2240      	movs	r2, #64	@ 0x40
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_DMAEx_List_BuildNode+0x16>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e004      	b.n	8005724 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fa8d 	bl	8005c3c <DMA_List_BuildNode>

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_DMAEx_List_GetNodeConfig+0x16>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e004      	b.n	8005750 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fbcf 	bl	8005eec <DMA_List_GetNodeConfig>

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	@ 0x30
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_DMAEx_List_InsertNode+0x18>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0b6      	b.n	80058e2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d104      	bne.n	8005786 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2204      	movs	r2, #4
 8005780:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e0ad      	b.n	80058e2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68b9      	ldr	r1, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fcb6 	bl	8006100 <DMA_List_CheckNodesBaseAddresses>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d004      	beq.n	80057a4 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2205      	movs	r2, #5
 800579e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e09e      	b.n	80058e2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fcd7 	bl	8006160 <DMA_List_CheckNodesTypes>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d004      	beq.n	80057c2 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2204      	movs	r2, #4
 80057bc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e08f      	b.n	80058e2 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2202      	movs	r2, #2
 80057c6:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 80057ce:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80057d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fcfd 	bl	80061d8 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11a      	bne.n	800581c <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2201      	movs	r2, #1
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	e06c      	b.n	80058d4 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005806:	4013      	ands	r3, r2
 8005808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580c:	4319      	orrs	r1, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2202      	movs	r2, #2
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	e05b      	b.n	80058d4 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800582c:	4013      	ands	r3, r2
 800582e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005832:	4319      	orrs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e043      	b.n	80058ca <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8005846:	f107 0314 	add.w	r3, r7, #20
 800584a:	461a      	mov	r2, r3
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fcf2 	bl	8006238 <DMA_List_FindNode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d132      	bne.n	80058c0 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d11a      	bne.n	800589a <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	461a      	mov	r2, r3
 8005872:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005876:	4013      	ands	r3, r2
 8005878:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800587a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800587c:	4319      	orrs	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800588a:	4013      	ands	r3, r2
 800588c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800588e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005890:	4319      	orrs	r1, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005898:	e017      	b.n	80058ca <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800589a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800589c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80058b0:	4013      	ands	r3, r2
 80058b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b6:	4319      	orrs	r1, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058be:	e004      	b.n	80058ca <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2206      	movs	r2, #6
 80058c4:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e00b      	b.n	80058e2 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3730      	adds	r7, #48	@ 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b08a      	sub	sp, #40	@ 0x28
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e052      	b.n	80059a2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d104      	bne.n	800590e <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e049      	b.n	80059a2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00c      	beq.n	8005930 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d101      	bne.n	8005926 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	e03d      	b.n	80059a2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e038      	b.n	80059a2 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d104      	bne.n	8005942 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2204      	movs	r2, #4
 800593c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e02f      	b.n	80059a2 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f107 0220 	add.w	r2, r7, #32
 8005956:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fc3c 	bl	80061d8 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8005964:	f107 030c 	add.w	r3, r7, #12
 8005968:	461a      	mov	r2, r3
 800596a:	2100      	movs	r1, #0
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fc63 	bl	8006238 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800597c:	4013      	ands	r3, r2
 800597e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4610      	mov	r0, r2
 8005984:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005986:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005988:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3728      	adds	r7, #40	@ 0x28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_DMAEx_List_LinkQ+0x16>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e05e      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Get DMA state */
  state = hdma->State;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059cc:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d002      	beq.n	80059e0 <HAL_DMAEx_List_LinkQ+0x34>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d108      	bne.n	80059f2 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e048      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	7b1b      	ldrb	r3, [r3, #12]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d104      	bne.n	8005a06 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e03e      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	@ (8005a90 <HAL_DMAEx_List_LinkQ+0xe4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_DMAEx_List_LinkQ+0x82>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <HAL_DMAEx_List_LinkQ+0xe8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_DMAEx_List_LinkQ+0x82>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a98 <HAL_DMAEx_List_LinkQ+0xec>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_DMAEx_List_LinkQ+0x82>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_DMAEx_List_LinkQ+0xf0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_DMAEx_List_LinkQ+0x86>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_DMAEx_List_LinkQ+0x88>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_DMAEx_List_LinkQ+0xa4>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_DMAEx_List_LinkQ+0xa4>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2203      	movs	r2, #3
 8005a4a:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e019      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a54:	2b81      	cmp	r3, #129	@ 0x81
 8005a56:	d108      	bne.n	8005a6a <HAL_DMAEx_List_LinkQ+0xbe>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10d      	bne.n	8005a7c <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2204      	movs	r2, #4
 8005a64:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e00c      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2204      	movs	r2, #4
 8005a76:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e003      	b.n	8005a84 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40020350 	.word	0x40020350
 8005a94:	400203d0 	.word	0x400203d0
 8005a98:	40021350 	.word	0x40021350
 8005a9c:	400213d0 	.word	0x400213d0

08005aa0 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a50      	ldr	r2, [pc, #320]	@ (8005bfc <DMA_List_Init+0x15c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04a      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a4f      	ldr	r2, [pc, #316]	@ (8005c00 <DMA_List_Init+0x160>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d045      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a4d      	ldr	r2, [pc, #308]	@ (8005c04 <DMA_List_Init+0x164>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d040      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8005c08 <DMA_List_Init+0x168>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d03b      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c0c <DMA_List_Init+0x16c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d036      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a49      	ldr	r2, [pc, #292]	@ (8005c10 <DMA_List_Init+0x170>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d031      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a47      	ldr	r2, [pc, #284]	@ (8005c14 <DMA_List_Init+0x174>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d02c      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a46      	ldr	r2, [pc, #280]	@ (8005c18 <DMA_List_Init+0x178>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d027      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a44      	ldr	r2, [pc, #272]	@ (8005c1c <DMA_List_Init+0x17c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a43      	ldr	r2, [pc, #268]	@ (8005c20 <DMA_List_Init+0x180>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <DMA_List_Init+0x184>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a40      	ldr	r2, [pc, #256]	@ (8005c28 <DMA_List_Init+0x188>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3e      	ldr	r2, [pc, #248]	@ (8005c2c <DMA_List_Init+0x18c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c30 <DMA_List_Init+0x190>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a3b      	ldr	r2, [pc, #236]	@ (8005c34 <DMA_List_Init+0x194>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <DMA_List_Init+0xb4>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005c38 <DMA_List_Init+0x198>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <DMA_List_Init+0xb8>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <DMA_List_Init+0xba>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2200      	movs	r2, #0
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2200      	movs	r2, #0
 8005b94:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c14 <DMA_List_Init+0x174>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <DMA_List_Init+0x12e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	@ (8005c18 <DMA_List_Init+0x178>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <DMA_List_Init+0x12e>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <DMA_List_Init+0x194>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <DMA_List_Init+0x12e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <DMA_List_Init+0x198>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <DMA_List_Init+0x132>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <DMA_List_Init+0x134>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2200      	movs	r2, #0
 8005bee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	40020050 	.word	0x40020050
 8005c00:	400200d0 	.word	0x400200d0
 8005c04:	40020150 	.word	0x40020150
 8005c08:	400201d0 	.word	0x400201d0
 8005c0c:	40020250 	.word	0x40020250
 8005c10:	400202d0 	.word	0x400202d0
 8005c14:	40020350 	.word	0x40020350
 8005c18:	400203d0 	.word	0x400203d0
 8005c1c:	40021050 	.word	0x40021050
 8005c20:	400210d0 	.word	0x400210d0
 8005c24:	40021150 	.word	0x40021150
 8005c28:	400211d0 	.word	0x400211d0
 8005c2c:	40021250 	.word	0x40021250
 8005c30:	400212d0 	.word	0x400212d0
 8005c34:	40021350 	.word	0x40021350
 8005c38:	400213d0 	.word	0x400213d0

08005c3c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005c4e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005c54:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005c5a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005c60:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d017      	beq.n	8005ca2 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	3b01      	subs	r3, #1
 8005c86:	051b      	lsls	r3, r3, #20
 8005c88:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005c8c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	3b01      	subs	r3, #1
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005c9a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6859      	ldr	r1, [r3, #4]
 8005caa:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8005cae:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cbe:	d10c      	bne.n	8005cda <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d011      	beq.n	8005cf0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	e00a      	b.n	8005cf0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce2:	d105      	bne.n	8005cf0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00f      	beq.n	8005d26 <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d12:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005d1e:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005d20:	431a      	orrs	r2, r3
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d04e      	beq.n	8005dda <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d44:	3b01      	subs	r3, #1
 8005d46:	0419      	lsls	r1, r3, #16
 8005d48:	4b66      	ldr	r3, [pc, #408]	@ (8005ee4 <DMA_List_BuildNode+0x2a8>)
 8005d4a:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da06      	bge.n	8005d68 <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	e005      	b.n	8005d74 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	da06      	bge.n	8005d8a <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	e005      	b.n	8005d96 <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da06      	bge.n	8005dac <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	e005      	b.n	8005db8 <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	da06      	bge.n	8005dce <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	609a      	str	r2, [r3, #8]
 8005dcc:	e005      	b.n	8005dda <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d059      	beq.n	8005eaa <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da09      	bge.n	8005e12 <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	425b      	negs	r3, r3
 8005e04:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	615a      	str	r2, [r3, #20]
 8005e10:	e005      	b.n	8005e1e <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e16:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da0d      	bge.n	8005e42 <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2a:	425b      	negs	r3, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	0419      	lsls	r1, r3, #16
 8005e36:	4b2c      	ldr	r3, [pc, #176]	@ (8005ee8 <DMA_List_BuildNode+0x2ac>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	615a      	str	r2, [r3, #20]
 8005e40:	e009      	b.n	8005e56 <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4a:	0419      	lsls	r1, r3, #16
 8005e4c:	4b26      	ldr	r3, [pc, #152]	@ (8005ee8 <DMA_List_BuildNode+0x2ac>)
 8005e4e:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005e50:	431a      	orrs	r2, r3
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	da08      	bge.n	8005e70 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e62:	425b      	negs	r3, r3
 8005e64:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	619a      	str	r2, [r3, #24]
 8005e6e:	e004      	b.n	8005e7a <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e74:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	da0b      	bge.n	8005e9a <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e86:	425b      	negs	r3, r3
 8005e88:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005e92:	431a      	orrs	r2, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	619a      	str	r2, [r3, #24]
 8005e98:	e007      	b.n	8005eaa <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea2:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005eca:	e005      	b.n	8005ed8 <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	621a      	str	r2, [r3, #32]
}
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	07ff0000 	.word	0x07ff0000
 8005ee8:	1fff0000 	.word	0x1fff0000

08005eec <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0208 	and.w	r2, r3, #8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0203 	and.w	r2, r3, #3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f3a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005f44:	0d1b      	lsrs	r3, r3, #20
 8005f46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4a:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b66      	ldr	r3, [pc, #408]	@ (80060fc <DMA_List_GetNodeConfig+0x210>)
 8005f62:	4013      	ands	r3, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f86:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f8e:	60da      	str	r2, [r3, #12]
 8005f90:	e012      	b.n	8005fb8 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	e002      	b.n	8005fb8 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006016:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800601c:	e002      	b.n	8006024 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d04a      	beq.n	80060d6 <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800604a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800604c:	89fa      	ldrh	r2, [r7, #14]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	b29b      	uxth	r3, r3
 800605a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800605e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006060:	89fa      	ldrh	r2, [r7, #14]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006076:	425a      	negs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608c:	425a      	negs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006098:	89fa      	ldrh	r2, [r7, #14]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	0c1b      	lsrs	r3, r3, #16
 80060a4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80060a6:	89fa      	ldrh	r2, [r7, #14]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d004      	beq.n	80060c2 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060bc:	425a      	negs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da11      	bge.n	80060ee <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ce:	425a      	negs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80060d4:	e00b      	b.n	80060ee <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	0c002000 	.word	0x0c002000

08006100 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4313      	orrs	r3, r2
 8006116:	0c1b      	lsrs	r3, r3, #16
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e00a      	b.n	8006142 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	e004      	b.n	8006142 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	0c1b      	lsrs	r3, r3, #16
 8006146:	041b      	lsls	r3, r3, #16
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	429a      	cmp	r2, r3
 800614c:	d001      	beq.n	8006152 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d004      	beq.n	8006180 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	e00e      	b.n	800619e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e006      	b.n	800619e <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80061b0:	2302      	movs	r3, #2
 80061b2:	e00b      	b.n	80061cc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d001      	beq.n	80061ca <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e000      	b.n	80061cc <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00c      	beq.n	800620a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006230 <DMA_List_GetCLLRNodeInfo+0x58>)
 80061fa:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00f      	beq.n	8006222 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2207      	movs	r2, #7
 8006206:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8006208:	e00b      	b.n	8006222 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a08      	ldr	r2, [pc, #32]	@ (8006234 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8006214:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2205      	movs	r2, #5
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	bf00      	nop
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	fe010000 	.word	0xfe010000
 8006234:	f8010000 	.word	0xf8010000

08006238 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	@ 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d142      	bne.n	80062e2 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 800625c:	e01d      	b.n	800629a <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d107      	bne.n	8006274 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e00f      	b.n	8006294 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4413      	add	r3, r2
 8006284:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 800628c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d3dc      	bcc.n	800625e <DMA_List_FindNode+0x26>
 80062a4:	e029      	b.n	80062fa <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
 80062ba:	e00f      	b.n	80062dc <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0c1b      	lsrs	r3, r3, #16
 80062c6:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4413      	add	r3, r2
 80062cc:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80062d4:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3301      	adds	r3, #1
 80062e0:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d206      	bcs.n	80062fa <DMA_List_FindNode+0xc2>
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80062f2:	4013      	ands	r3, r2
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d1d5      	bne.n	80062a6 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d008      	beq.n	8006312 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006306:	4013      	ands	r3, r2
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	429a      	cmp	r2, r3
 800630c:	d001      	beq.n	8006312 <DMA_List_FindNode+0xda>
    {
      return 1U;
 800630e:	2301      	movs	r3, #1
 8006310:	e02b      	b.n	800636a <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69fa      	ldr	r2, [r7, #28]
 8006316:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	041b      	lsls	r3, r3, #16
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	461a      	mov	r2, r3
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00f      	beq.n	8006368 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	461a      	mov	r2, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006354:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8006358:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	041b      	lsls	r3, r3, #16
 8006362:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3724      	adds	r7, #36	@ 0x24
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006386:	e136      	b.n	80065f6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	2101      	movs	r1, #1
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	4013      	ands	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8128 	beq.w	80065f0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d003      	beq.n	80063b0 <HAL_GPIO_Init+0x38>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b12      	cmp	r3, #18
 80063ae:	d125      	bne.n	80063fc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	08da      	lsrs	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3208      	adds	r2, #8
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	220f      	movs	r2, #15
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4013      	ands	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	08da      	lsrs	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3208      	adds	r2, #8
 80063f6:	6979      	ldr	r1, [r7, #20]
 80063f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	2203      	movs	r2, #3
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	43db      	mvns	r3, r3
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4013      	ands	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0203 	and.w	r2, r3, #3
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4313      	orrs	r3, r2
 8006428:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d00b      	beq.n	8006450 <HAL_GPIO_Init+0xd8>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d007      	beq.n	8006450 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006444:	2b11      	cmp	r3, #17
 8006446:	d003      	beq.n	8006450 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b12      	cmp	r3, #18
 800644e:	d130      	bne.n	80064b2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	2203      	movs	r2, #3
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4013      	ands	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006486:	2201      	movs	r2, #1
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43db      	mvns	r3, r3
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4013      	ands	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	f003 0201 	and.w	r2, r3, #1
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d017      	beq.n	80064ea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	2203      	movs	r2, #3
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4013      	ands	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d07c      	beq.n	80065f0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80064f6:	4a47      	ldr	r2, [pc, #284]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	089b      	lsrs	r3, r3, #2
 80064fc:	3318      	adds	r3, #24
 80064fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006502:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	220f      	movs	r2, #15
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4013      	ands	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	0a9a      	lsrs	r2, r3, #10
 800651e:	4b3e      	ldr	r3, [pc, #248]	@ (8006618 <HAL_GPIO_Init+0x2a0>)
 8006520:	4013      	ands	r3, r2
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	f002 0203 	and.w	r2, r2, #3
 8006528:	00d2      	lsls	r2, r2, #3
 800652a:	4093      	lsls	r3, r2
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006532:	4938      	ldr	r1, [pc, #224]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	3318      	adds	r3, #24
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006540:	4b34      	ldr	r3, [pc, #208]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	43db      	mvns	r3, r3
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4013      	ands	r3, r2
 800654e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006564:	4a2b      	ldr	r2, [pc, #172]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800656a:	4b2a      	ldr	r3, [pc, #168]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	43db      	mvns	r3, r3
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4013      	ands	r3, r2
 8006578:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800658e:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006594:	4b1f      	ldr	r3, [pc, #124]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 8006596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800659a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	43db      	mvns	r3, r3
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4013      	ands	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80065ba:	4a16      	ldr	r2, [pc, #88]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80065c2:	4b14      	ldr	r3, [pc, #80]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 80065c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	43db      	mvns	r3, r3
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4013      	ands	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80065e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006614 <HAL_GPIO_Init+0x29c>)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	f47f aec1 	bne.w	8006388 <HAL_GPIO_Init+0x10>
  }
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	44022000 	.word	0x44022000
 8006618:	002f7f7f 	.word	0x002f7f7f

0800661c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e001      	b.n	800663e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	807b      	strh	r3, [r7, #2]
 8006658:	4613      	mov	r3, r2
 800665a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800665c:	787b      	ldrb	r3, [r7, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006662:	887a      	ldrh	r2, [r7, #2]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006668:	e002      	b.n	8006670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800666a:	887a      	ldrh	r2, [r7, #2]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d102      	bne.n	8006690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	f000 bc28 	b.w	8006ee0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006690:	4b94      	ldr	r3, [pc, #592]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f003 0318 	and.w	r3, r3, #24
 8006698:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800669a:	4b92      	ldr	r3, [pc, #584]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800669c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d05b      	beq.n	8006768 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d005      	beq.n	80066c2 <HAL_RCC_OscConfig+0x46>
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	2b18      	cmp	r3, #24
 80066ba:	d114      	bne.n	80066e6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d111      	bne.n	80066e6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69db      	ldr	r3, [r3, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d102      	bne.n	80066d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	f000 bc08 	b.w	8006ee0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80066d0:	4b84      	ldr	r3, [pc, #528]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	041b      	lsls	r3, r3, #16
 80066de:	4981      	ldr	r1, [pc, #516]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80066e0:	4313      	orrs	r3, r2
 80066e2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80066e4:	e040      	b.n	8006768 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d023      	beq.n	8006736 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066ee:	4b7d      	ldr	r3, [pc, #500]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a7c      	ldr	r2, [pc, #496]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80066f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fc ff0b 	bl	8003514 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006702:	f7fc ff07 	bl	8003514 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e3e5      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006714:	4b73      	ldr	r3, [pc, #460]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006720:	4b70      	ldr	r3, [pc, #448]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	496d      	ldr	r1, [pc, #436]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006730:	4313      	orrs	r3, r2
 8006732:	618b      	str	r3, [r1, #24]
 8006734:	e018      	b.n	8006768 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006736:	4b6b      	ldr	r3, [pc, #428]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6a      	ldr	r2, [pc, #424]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800673c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006742:	f7fc fee7 	bl	8003514 <HAL_GetTick>
 8006746:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800674a:	f7fc fee3 	bl	8003514 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e3c1      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800675c:	4b61      	ldr	r3, [pc, #388]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f0      	bne.n	800674a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80a0 	beq.w	80068b6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b10      	cmp	r3, #16
 800677a:	d005      	beq.n	8006788 <HAL_RCC_OscConfig+0x10c>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b18      	cmp	r3, #24
 8006780:	d109      	bne.n	8006796 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d106      	bne.n	8006796 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	f040 8092 	bne.w	80068b6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e3a4      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800679e:	d106      	bne.n	80067ae <HAL_RCC_OscConfig+0x132>
 80067a0:	4b50      	ldr	r3, [pc, #320]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4f      	ldr	r2, [pc, #316]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e058      	b.n	8006860 <HAL_RCC_OscConfig+0x1e4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d112      	bne.n	80067dc <HAL_RCC_OscConfig+0x160>
 80067b6:	4b4b      	ldr	r3, [pc, #300]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4a      	ldr	r2, [pc, #296]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	4b48      	ldr	r3, [pc, #288]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a47      	ldr	r2, [pc, #284]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	4b45      	ldr	r3, [pc, #276]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a44      	ldr	r2, [pc, #272]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	e041      	b.n	8006860 <HAL_RCC_OscConfig+0x1e4>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80067e4:	d112      	bne.n	800680c <HAL_RCC_OscConfig+0x190>
 80067e6:	4b3f      	ldr	r3, [pc, #252]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3e      	ldr	r2, [pc, #248]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	4b3c      	ldr	r3, [pc, #240]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a3b      	ldr	r2, [pc, #236]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80067f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b39      	ldr	r3, [pc, #228]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a38      	ldr	r2, [pc, #224]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e029      	b.n	8006860 <HAL_RCC_OscConfig+0x1e4>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006814:	d112      	bne.n	800683c <HAL_RCC_OscConfig+0x1c0>
 8006816:	4b33      	ldr	r3, [pc, #204]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a32      	ldr	r2, [pc, #200]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800681c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b30      	ldr	r3, [pc, #192]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a2f      	ldr	r2, [pc, #188]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	4b2d      	ldr	r3, [pc, #180]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2c      	ldr	r2, [pc, #176]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	e011      	b.n	8006860 <HAL_RCC_OscConfig+0x1e4>
 800683c:	4b29      	ldr	r3, [pc, #164]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	4b26      	ldr	r3, [pc, #152]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a25      	ldr	r2, [pc, #148]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800684e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b23      	ldr	r3, [pc, #140]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a22      	ldr	r2, [pc, #136]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 800685a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800685e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d013      	beq.n	8006890 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fc fe54 	bl	8003514 <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006870:	f7fc fe50 	bl	8003514 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b64      	cmp	r3, #100	@ 0x64
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e32e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006882:	4b18      	ldr	r3, [pc, #96]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0f0      	beq.n	8006870 <HAL_RCC_OscConfig+0x1f4>
 800688e:	e012      	b.n	80068b6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006890:	f7fc fe40 	bl	8003514 <HAL_GetTick>
 8006894:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006898:	f7fc fe3c 	bl	8003514 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	@ 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e31a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068aa:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <HAL_RCC_OscConfig+0x268>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 809a 	beq.w	80069f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_RCC_OscConfig+0x25a>
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b18      	cmp	r3, #24
 80068ce:	d149      	bne.n	8006964 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d146      	bne.n	8006964 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e2fe      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
 80068e2:	bf00      	nop
 80068e4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11c      	bne.n	8006928 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80068ee:	4b9a      	ldr	r3, [pc, #616]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0218 	and.w	r2, r3, #24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d014      	beq.n	8006928 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80068fe:	4b96      	ldr	r3, [pc, #600]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f023 0218 	bic.w	r2, r3, #24
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	4993      	ldr	r1, [pc, #588]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 800690c:	4313      	orrs	r3, r2
 800690e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006910:	f000 fdd0 	bl	80074b4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006914:	4b91      	ldr	r3, [pc, #580]	@ (8006b5c <HAL_RCC_OscConfig+0x4e0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f7fc fd85 	bl	8003428 <HAL_InitTick>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e2db      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006928:	f7fc fdf4 	bl	8003514 <HAL_GetTick>
 800692c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006930:	f7fc fdf0 	bl	8003514 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e2ce      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006942:	4b85      	ldr	r3, [pc, #532]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800694e:	4b82      	ldr	r3, [pc, #520]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	497e      	ldr	r1, [pc, #504]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 800695e:	4313      	orrs	r3, r2
 8006960:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006962:	e049      	b.n	80069f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d02c      	beq.n	80069c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800696c:	4b7a      	ldr	r3, [pc, #488]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f023 0218 	bic.w	r2, r3, #24
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	4977      	ldr	r1, [pc, #476]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800697e:	4b76      	ldr	r3, [pc, #472]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a75      	ldr	r2, [pc, #468]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698a:	f7fc fdc3 	bl	8003514 <HAL_GetTick>
 800698e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006992:	f7fc fdbf 	bl	8003514 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e29d      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80069b0:	4b69      	ldr	r3, [pc, #420]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	4966      	ldr	r1, [pc, #408]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	610b      	str	r3, [r1, #16]
 80069c4:	e018      	b.n	80069f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c6:	4b64      	ldr	r3, [pc, #400]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a63      	ldr	r2, [pc, #396]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d2:	f7fc fd9f 	bl	8003514 <HAL_GetTick>
 80069d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80069da:	f7fc fd9b 	bl	8003514 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e279      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f0      	bne.n	80069da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d03c      	beq.n	8006a7e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01c      	beq.n	8006a46 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0c:	4b52      	ldr	r3, [pc, #328]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a12:	4a51      	ldr	r2, [pc, #324]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fc fd7a 	bl	8003514 <HAL_GetTick>
 8006a20:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006a24:	f7fc fd76 	bl	8003514 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e254      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006a36:	4b48      	ldr	r3, [pc, #288]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ef      	beq.n	8006a24 <HAL_RCC_OscConfig+0x3a8>
 8006a44:	e01b      	b.n	8006a7e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a46:	4b44      	ldr	r3, [pc, #272]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a4c:	4a42      	ldr	r2, [pc, #264]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a56:	f7fc fd5d 	bl	8003514 <HAL_GetTick>
 8006a5a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006a5e:	f7fc fd59 	bl	8003514 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e237      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006a70:	4b39      	ldr	r3, [pc, #228]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1ef      	bne.n	8006a5e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 80d2 	beq.w	8006c30 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006a8c:	4b34      	ldr	r3, [pc, #208]	@ (8006b60 <HAL_RCC_OscConfig+0x4e4>)
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d118      	bne.n	8006aca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006a98:	4b31      	ldr	r3, [pc, #196]	@ (8006b60 <HAL_RCC_OscConfig+0x4e4>)
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	4a30      	ldr	r2, [pc, #192]	@ (8006b60 <HAL_RCC_OscConfig+0x4e4>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aa4:	f7fc fd36 	bl	8003514 <HAL_GetTick>
 8006aa8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aac:	f7fc fd32 	bl	8003514 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e210      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006abe:	4b28      	ldr	r3, [pc, #160]	@ (8006b60 <HAL_RCC_OscConfig+0x4e4>)
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d108      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x468>
 8006ad2:	4b21      	ldr	r3, [pc, #132]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ae2:	e074      	b.n	8006bce <HAL_RCC_OscConfig+0x552>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d118      	bne.n	8006b1e <HAL_RCC_OscConfig+0x4a2>
 8006aec:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006af2:	4a19      	ldr	r2, [pc, #100]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006afc:	4b16      	ldr	r3, [pc, #88]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b02:	4a15      	ldr	r2, [pc, #84]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b0c:	4b12      	ldr	r3, [pc, #72]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b12:	4a11      	ldr	r2, [pc, #68]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b14:	f023 0304 	bic.w	r3, r3, #4
 8006b18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b1c:	e057      	b.n	8006bce <HAL_RCC_OscConfig+0x552>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d11e      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4e8>
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b2e:	f043 0304 	orr.w	r3, r3, #4
 8006b32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b3c:	4a06      	ldr	r2, [pc, #24]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b46:	4b04      	ldr	r3, [pc, #16]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b4c:	4a02      	ldr	r2, [pc, #8]	@ (8006b58 <HAL_RCC_OscConfig+0x4dc>)
 8006b4e:	f043 0301 	orr.w	r3, r3, #1
 8006b52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b56:	e03a      	b.n	8006bce <HAL_RCC_OscConfig+0x552>
 8006b58:	44020c00 	.word	0x44020c00
 8006b5c:	2000000c 	.word	0x2000000c
 8006b60:	44020800 	.word	0x44020800
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	2b85      	cmp	r3, #133	@ 0x85
 8006b6a:	d118      	bne.n	8006b9e <HAL_RCC_OscConfig+0x522>
 8006b6c:	4ba2      	ldr	r3, [pc, #648]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b72:	4aa1      	ldr	r2, [pc, #644]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b74:	f043 0304 	orr.w	r3, r3, #4
 8006b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b7c:	4b9e      	ldr	r3, [pc, #632]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b82:	4a9d      	ldr	r2, [pc, #628]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b8c:	4b9a      	ldr	r3, [pc, #616]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b92:	4a99      	ldr	r2, [pc, #612]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006b9c:	e017      	b.n	8006bce <HAL_RCC_OscConfig+0x552>
 8006b9e:	4b96      	ldr	r3, [pc, #600]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ba4:	4a94      	ldr	r2, [pc, #592]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006bae:	4b92      	ldr	r3, [pc, #584]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb4:	4a90      	ldr	r2, [pc, #576]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006bb6:	f023 0304 	bic.w	r3, r3, #4
 8006bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006bbe:	4b8e      	ldr	r3, [pc, #568]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bc4:	4a8c      	ldr	r2, [pc, #560]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d016      	beq.n	8006c04 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd6:	f7fc fc9d 	bl	8003514 <HAL_GetTick>
 8006bda:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bdc:	e00a      	b.n	8006bf4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bde:	f7fc fc99 	bl	8003514 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d901      	bls.n	8006bf4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e175      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bf4:	4b80      	ldr	r3, [pc, #512]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0ed      	beq.n	8006bde <HAL_RCC_OscConfig+0x562>
 8006c02:	e015      	b.n	8006c30 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c04:	f7fc fc86 	bl	8003514 <HAL_GetTick>
 8006c08:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0c:	f7fc fc82 	bl	8003514 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e15e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c22:	4b75      	ldr	r3, [pc, #468]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ed      	bne.n	8006c0c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d036      	beq.n	8006caa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d019      	beq.n	8006c78 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c44:	4b6c      	ldr	r3, [pc, #432]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6b      	ldr	r2, [pc, #428]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fc fc60 	bl	8003514 <HAL_GetTick>
 8006c54:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006c58:	f7fc fc5c 	bl	8003514 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e13a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006c6a:	4b63      	ldr	r3, [pc, #396]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x5dc>
 8006c76:	e018      	b.n	8006caa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c78:	4b5f      	ldr	r3, [pc, #380]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006c7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fc fc46 	bl	8003514 <HAL_GetTick>
 8006c88:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006c8c:	f7fc fc42 	bl	8003514 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e120      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006c9e:	4b56      	ldr	r3, [pc, #344]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8115 	beq.w	8006ede <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	f000 80af 	beq.w	8006e1a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f040 8086 	bne.w	8006dd2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a4b      	ldr	r2, [pc, #300]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006ccc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd2:	f7fc fc1f 	bl	8003514 <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cd8:	e008      	b.n	8006cec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006cda:	f7fc fc1b 	bl	8003514 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e0f9      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006cec:	4b42      	ldr	r3, [pc, #264]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f0      	bne.n	8006cda <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006d0c:	0212      	lsls	r2, r2, #8
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	4939      	ldr	r1, [pc, #228]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	3b01      	subs	r3, #1
 8006d26:	025b      	lsls	r3, r3, #9
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d30:	3b01      	subs	r3, #1
 8006d32:	041b      	lsls	r3, r3, #16
 8006d34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	061b      	lsls	r3, r3, #24
 8006d42:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d46:	492c      	ldr	r1, [pc, #176]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	4a29      	ldr	r2, [pc, #164]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d52:	f023 0310 	bic.w	r3, r3, #16
 8006d56:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5c:	4a26      	ldr	r2, [pc, #152]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006d62:	4b25      	ldr	r3, [pc, #148]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d66:	4a24      	ldr	r2, [pc, #144]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d68:	f043 0310 	orr.w	r3, r3, #16
 8006d6c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006d6e:	4b22      	ldr	r3, [pc, #136]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	f023 020c 	bic.w	r2, r3, #12
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7a:	491f      	ldr	r1, [pc, #124]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006d80:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d84:	f023 0220 	bic.w	r2, r3, #32
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d8c:	491a      	ldr	r1, [pc, #104]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006d92:	4b19      	ldr	r3, [pc, #100]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d96:	4a18      	ldr	r2, [pc, #96]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006d9e:	4b16      	ldr	r3, [pc, #88]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a15      	ldr	r2, [pc, #84]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006daa:	f7fc fbb3 	bl	8003514 <HAL_GetTick>
 8006dae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006db2:	f7fc fbaf 	bl	8003514 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e08d      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCC_OscConfig+0x736>
 8006dd0:	e085      	b.n	8006ede <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006dd2:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a08      	ldr	r2, [pc, #32]	@ (8006df8 <HAL_RCC_OscConfig+0x77c>)
 8006dd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dde:	f7fc fb99 	bl	8003514 <HAL_GetTick>
 8006de2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006de6:	f7fc fb95 	bl	8003514 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d903      	bls.n	8006dfc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e073      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
 8006df8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ee      	bne.n	8006de6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006e08:	4b37      	ldr	r3, [pc, #220]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0c:	4a36      	ldr	r2, [pc, #216]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006e0e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	6293      	str	r3, [r2, #40]	@ 0x28
 8006e18:	e061      	b.n	8006ede <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006e1a:	4b33      	ldr	r3, [pc, #204]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e20:	4b31      	ldr	r3, [pc, #196]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e24:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d031      	beq.n	8006e92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f003 0203 	and.w	r2, r3, #3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d12a      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d122      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d11a      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	0a5b      	lsrs	r3, r3, #9
 8006e60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e68:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d111      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0c1b      	lsrs	r3, r3, #16
 8006e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d108      	bne.n	8006e92 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	0e1b      	lsrs	r3, r3, #24
 8006e84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e024      	b.n	8006ee0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e96:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e9a:	08db      	lsrs	r3, r3, #3
 8006e9c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d01a      	beq.n	8006ede <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006eae:	f023 0310 	bic.w	r3, r3, #16
 8006eb2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fc fb2e 	bl	8003514 <HAL_GetTick>
 8006eb8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006eba:	bf00      	nop
 8006ebc:	f7fc fb2a 	bl	8003514 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d0f9      	beq.n	8006ebc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ecc:	4a06      	ldr	r2, [pc, #24]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006ed2:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed6:	4a04      	ldr	r2, [pc, #16]	@ (8006ee8 <HAL_RCC_OscConfig+0x86c>)
 8006ed8:	f043 0310 	orr.w	r3, r3, #16
 8006edc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	44020c00 	.word	0x44020c00

08006eec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e19e      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f00:	4b83      	ldr	r3, [pc, #524]	@ (8007110 <HAL_RCC_ClockConfig+0x224>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d910      	bls.n	8006f30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b80      	ldr	r3, [pc, #512]	@ (8007110 <HAL_RCC_ClockConfig+0x224>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f023 020f 	bic.w	r2, r3, #15
 8006f16:	497e      	ldr	r1, [pc, #504]	@ (8007110 <HAL_RCC_ClockConfig+0x224>)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8007110 <HAL_RCC_ClockConfig+0x224>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e186      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d012      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	695a      	ldr	r2, [r3, #20]
 8006f40:	4b74      	ldr	r3, [pc, #464]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f42:	6a1b      	ldr	r3, [r3, #32]
 8006f44:	0a1b      	lsrs	r3, r3, #8
 8006f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d909      	bls.n	8006f62 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006f4e:	4b71      	ldr	r3, [pc, #452]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	496d      	ldr	r1, [pc, #436]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0308 	and.w	r3, r3, #8
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d012      	beq.n	8006f94 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	4b68      	ldr	r3, [pc, #416]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d909      	bls.n	8006f94 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006f80:	4b64      	ldr	r3, [pc, #400]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	4961      	ldr	r1, [pc, #388]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d908      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006fb0:	4b58      	ldr	r3, [pc, #352]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4955      	ldr	r1, [pc, #340]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d010      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689a      	ldr	r2, [r3, #8]
 8006fd2:	4b50      	ldr	r3, [pc, #320]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d908      	bls.n	8006ff0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006fde:	4b4d      	ldr	r3, [pc, #308]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f023 020f 	bic.w	r2, r3, #15
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	494a      	ldr	r1, [pc, #296]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8093 	beq.w	8007124 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007006:	4b43      	ldr	r3, [pc, #268]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d121      	bne.n	8007056 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e113      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800701e:	4b3d      	ldr	r3, [pc, #244]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d115      	bne.n	8007056 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e107      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8007036:	4b37      	ldr	r3, [pc, #220]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e0fb      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007046:	4b33      	ldr	r3, [pc, #204]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0f3      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8007056:	4b2f      	ldr	r3, [pc, #188]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f023 0203 	bic.w	r2, r3, #3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	492c      	ldr	r1, [pc, #176]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007064:	4313      	orrs	r3, r2
 8007066:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007068:	f7fc fa54 	bl	8003514 <HAL_GetTick>
 800706c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b03      	cmp	r3, #3
 8007074:	d112      	bne.n	800709c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007076:	e00a      	b.n	800708e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007078:	f7fc fa4c 	bl	8003514 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e0d7      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800708e:	4b21      	ldr	r3, [pc, #132]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f003 0318 	and.w	r3, r3, #24
 8007096:	2b18      	cmp	r3, #24
 8007098:	d1ee      	bne.n	8007078 <HAL_RCC_ClockConfig+0x18c>
 800709a:	e043      	b.n	8007124 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d112      	bne.n	80070ca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070a4:	e00a      	b.n	80070bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80070a6:	f7fc fa35 	bl	8003514 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e0c0      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80070bc:	4b15      	ldr	r3, [pc, #84]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 0318 	and.w	r3, r3, #24
 80070c4:	2b10      	cmp	r3, #16
 80070c6:	d1ee      	bne.n	80070a6 <HAL_RCC_ClockConfig+0x1ba>
 80070c8:	e02c      	b.n	8007124 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d122      	bne.n	8007118 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fc fa1e 	bl	8003514 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e0a9      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80070ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007114 <HAL_RCC_ClockConfig+0x228>)
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f003 0318 	and.w	r3, r3, #24
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d1ee      	bne.n	80070d4 <HAL_RCC_ClockConfig+0x1e8>
 80070f6:	e015      	b.n	8007124 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80070f8:	f7fc fa0c 	bl	8003514 <HAL_GetTick>
 80070fc:	4602      	mov	r2, r0
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007106:	4293      	cmp	r3, r2
 8007108:	d906      	bls.n	8007118 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e097      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
 800710e:	bf00      	nop
 8007110:	40022000 	.word	0x40022000
 8007114:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007118:	4b4b      	ldr	r3, [pc, #300]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	f003 0318 	and.w	r3, r3, #24
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e9      	bne.n	80070f8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	4b44      	ldr	r3, [pc, #272]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	429a      	cmp	r2, r3
 800713e:	d208      	bcs.n	8007152 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007140:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	f023 020f 	bic.w	r2, r3, #15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	493e      	ldr	r1, [pc, #248]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007152:	4b3e      	ldr	r3, [pc, #248]	@ (800724c <HAL_RCC_ClockConfig+0x360>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	429a      	cmp	r2, r3
 800715e:	d210      	bcs.n	8007182 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007160:	4b3a      	ldr	r3, [pc, #232]	@ (800724c <HAL_RCC_ClockConfig+0x360>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f023 020f 	bic.w	r2, r3, #15
 8007168:	4938      	ldr	r1, [pc, #224]	@ (800724c <HAL_RCC_ClockConfig+0x360>)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	4313      	orrs	r3, r2
 800716e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007170:	4b36      	ldr	r3, [pc, #216]	@ (800724c <HAL_RCC_ClockConfig+0x360>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d001      	beq.n	8007182 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e05d      	b.n	800723e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	4b2d      	ldr	r3, [pc, #180]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800719a:	429a      	cmp	r2, r3
 800719c:	d208      	bcs.n	80071b0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800719e:	4b2a      	ldr	r3, [pc, #168]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	4927      	ldr	r1, [pc, #156]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691a      	ldr	r2, [r3, #16]
 80071c0:	4b21      	ldr	r3, [pc, #132]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071c2:	6a1b      	ldr	r3, [r3, #32]
 80071c4:	091b      	lsrs	r3, r3, #4
 80071c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d209      	bcs.n	80071e2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	491a      	ldr	r1, [pc, #104]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d012      	beq.n	8007214 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695a      	ldr	r2, [r3, #20]
 80071f2:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	0a1b      	lsrs	r3, r3, #8
 80071f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d209      	bcs.n	8007214 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007200:	4b11      	ldr	r3, [pc, #68]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	021b      	lsls	r3, r3, #8
 800720e:	490e      	ldr	r1, [pc, #56]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 8007210:	4313      	orrs	r3, r2
 8007212:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007214:	f000 f822 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8007218:	4602      	mov	r2, r0
 800721a:	4b0b      	ldr	r3, [pc, #44]	@ (8007248 <HAL_RCC_ClockConfig+0x35c>)
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	490b      	ldr	r1, [pc, #44]	@ (8007250 <HAL_RCC_ClockConfig+0x364>)
 8007224:	5ccb      	ldrb	r3, [r1, r3]
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	4a0a      	ldr	r2, [pc, #40]	@ (8007254 <HAL_RCC_ClockConfig+0x368>)
 800722c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800722e:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <HAL_RCC_ClockConfig+0x36c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f7fc f8f8 	bl	8003428 <HAL_InitTick>
 8007238:	4603      	mov	r3, r0
 800723a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800723c:	7afb      	ldrb	r3, [r7, #11]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	44020c00 	.word	0x44020c00
 800724c:	40022000 	.word	0x40022000
 8007250:	080122f8 	.word	0x080122f8
 8007254:	20000008 	.word	0x20000008
 8007258:	2000000c 	.word	0x2000000c

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	@ 0x24
 8007260:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8007262:	4b8c      	ldr	r3, [pc, #560]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f003 0318 	and.w	r3, r3, #24
 800726a:	2b08      	cmp	r3, #8
 800726c:	d102      	bne.n	8007274 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800726e:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <HAL_RCC_GetSysClockFreq+0x23c>)
 8007270:	61fb      	str	r3, [r7, #28]
 8007272:	e107      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007274:	4b87      	ldr	r3, [pc, #540]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f003 0318 	and.w	r3, r3, #24
 800727c:	2b00      	cmp	r3, #0
 800727e:	d112      	bne.n	80072a6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8007280:	4b84      	ldr	r3, [pc, #528]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800728c:	4b81      	ldr	r3, [pc, #516]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	08db      	lsrs	r3, r3, #3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	4a81      	ldr	r2, [pc, #516]	@ (800749c <HAL_RCC_GetSysClockFreq+0x240>)
 8007298:	fa22 f303 	lsr.w	r3, r2, r3
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e0f1      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80072a0:	4b7e      	ldr	r3, [pc, #504]	@ (800749c <HAL_RCC_GetSysClockFreq+0x240>)
 80072a2:	61fb      	str	r3, [r7, #28]
 80072a4:	e0ee      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f003 0318 	and.w	r3, r3, #24
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d102      	bne.n	80072b8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072b2:	4b7b      	ldr	r3, [pc, #492]	@ (80074a0 <HAL_RCC_GetSysClockFreq+0x244>)
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e0e5      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072b8:	4b76      	ldr	r3, [pc, #472]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f003 0318 	and.w	r3, r3, #24
 80072c0:	2b18      	cmp	r3, #24
 80072c2:	f040 80dd 	bne.w	8007480 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80072c6:	4b73      	ldr	r3, [pc, #460]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80072d0:	4b70      	ldr	r3, [pc, #448]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d4:	0a1b      	lsrs	r3, r3, #8
 80072d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80072dc:	4b6d      	ldr	r3, [pc, #436]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e0:	091b      	lsrs	r3, r3, #4
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80072e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80072ec:	08db      	lsrs	r3, r3, #3
 80072ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	fb02 f303 	mul.w	r3, r2, r3
 80072f8:	ee07 3a90 	vmov	s15, r3
 80072fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007300:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80b7 	beq.w	800747a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d003      	beq.n	800731a <HAL_RCC_GetSysClockFreq+0xbe>
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d056      	beq.n	80073c6 <HAL_RCC_GetSysClockFreq+0x16a>
 8007318:	e077      	b.n	800740a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800731a:	4b5e      	ldr	r3, [pc, #376]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d02d      	beq.n	8007382 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007326:	4b5b      	ldr	r3, [pc, #364]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	4a5a      	ldr	r2, [pc, #360]	@ (800749c <HAL_RCC_GetSysClockFreq+0x240>)
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007350:	4b50      	ldr	r3, [pc, #320]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007360:	ed97 6a02 	vldr	s12, [r7, #8]
 8007364:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80074a4 <HAL_RCC_GetSysClockFreq+0x248>
 8007368:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800736c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8007370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007374:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8007380:	e065      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80074a8 <HAL_RCC_GetSysClockFreq+0x24c>
 8007390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80073a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80073a8:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80074a4 <HAL_RCC_GetSysClockFreq+0x248>
 80073ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80073b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80073c4:	e043      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80074ac <HAL_RCC_GetSysClockFreq+0x250>
 80073d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 80073da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80073e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ec:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80074a4 <HAL_RCC_GetSysClockFreq+0x248>
 80073f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80073f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80073f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007404:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8007408:	e021      	b.n	800744e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007414:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80074b0 <HAL_RCC_GetSysClockFreq+0x254>
 8007418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741c:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 800741e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800742c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007430:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80074a4 <HAL_RCC_GetSysClockFreq+0x248>
 8007434:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007438:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800743c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007440:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007448:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800744c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800744e:	4b11      	ldr	r3, [pc, #68]	@ (8007494 <HAL_RCC_GetSysClockFreq+0x238>)
 8007450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007452:	0a5b      	lsrs	r3, r3, #9
 8007454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007458:	3301      	adds	r3, #1
 800745a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007466:	edd7 6a06 	vldr	s13, [r7, #24]
 800746a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007472:	ee17 3a90 	vmov	r3, s15
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e004      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	e001      	b.n	8007484 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <HAL_RCC_GetSysClockFreq+0x240>)
 8007482:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8007484:	69fb      	ldr	r3, [r7, #28]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3724      	adds	r7, #36	@ 0x24
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	44020c00 	.word	0x44020c00
 8007498:	003d0900 	.word	0x003d0900
 800749c:	03d09000 	.word	0x03d09000
 80074a0:	017d7840 	.word	0x017d7840
 80074a4:	46000000 	.word	0x46000000
 80074a8:	4c742400 	.word	0x4c742400
 80074ac:	4bbebc20 	.word	0x4bbebc20
 80074b0:	4a742400 	.word	0x4a742400

080074b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80074b8:	f7ff fed0 	bl	800725c <HAL_RCC_GetSysClockFreq>
 80074bc:	4602      	mov	r2, r0
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80074c0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80074c2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80074c6:	4907      	ldr	r1, [pc, #28]	@ (80074e4 <HAL_RCC_GetHCLKFreq+0x30>)
 80074c8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80074ca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80074ce:	fa22 f303 	lsr.w	r3, r2, r3
 80074d2:	4a05      	ldr	r2, [pc, #20]	@ (80074e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80074d4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80074d6:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <HAL_RCC_GetHCLKFreq+0x34>)
 80074d8:	681b      	ldr	r3, [r3, #0]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	44020c00 	.word	0x44020c00
 80074e4:	080122f8 	.word	0x080122f8
 80074e8:	20000008 	.word	0x20000008

080074ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80074f0:	f7ff ffe0 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 80074f4:	4602      	mov	r2, r0
 80074f6:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	091b      	lsrs	r3, r3, #4
 80074fc:	f003 0307 	and.w	r3, r3, #7
 8007500:	4904      	ldr	r1, [pc, #16]	@ (8007514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007502:	5ccb      	ldrb	r3, [r1, r3]
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800750c:	4618      	mov	r0, r3
 800750e:	bd80      	pop	{r7, pc}
 8007510:	44020c00 	.word	0x44020c00
 8007514:	08012308 	.word	0x08012308

08007518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800751c:	f7ff ffca 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 8007520:	4602      	mov	r2, r0
 8007522:	4b06      	ldr	r3, [pc, #24]	@ (800753c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	f003 0307 	and.w	r3, r3, #7
 800752c:	4904      	ldr	r1, [pc, #16]	@ (8007540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800752e:	5ccb      	ldrb	r3, [r1, r3]
 8007530:	f003 031f 	and.w	r3, r3, #31
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007538:	4618      	mov	r0, r3
 800753a:	bd80      	pop	{r7, pc}
 800753c:	44020c00 	.word	0x44020c00
 8007540:	08012308 	.word	0x08012308

08007544 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007548:	f7ff ffb4 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 800754c:	4602      	mov	r2, r0
 800754e:	4b06      	ldr	r3, [pc, #24]	@ (8007568 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	0b1b      	lsrs	r3, r3, #12
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	4904      	ldr	r1, [pc, #16]	@ (800756c <HAL_RCC_GetPCLK3Freq+0x28>)
 800755a:	5ccb      	ldrb	r3, [r1, r3]
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007564:	4618      	mov	r0, r3
 8007566:	bd80      	pop	{r7, pc}
 8007568:	44020c00 	.word	0x44020c00
 800756c:	08012308 	.word	0x08012308

08007570 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007574:	b0aa      	sub	sp, #168	@ 0xa8
 8007576:	af00      	add	r7, sp, #0
 8007578:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800757c:	2300      	movs	r3, #0
 800757e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007582:	2300      	movs	r3, #0
 8007584:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007594:	2500      	movs	r5, #0
 8007596:	ea54 0305 	orrs.w	r3, r4, r5
 800759a:	d00b      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800759c:	4bb8      	ldr	r3, [pc, #736]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800759e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075a2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80075a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ac:	4ab4      	ldr	r2, [pc, #720]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80075ae:	430b      	orrs	r3, r1
 80075b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f002 0801 	and.w	r8, r2, #1
 80075c0:	f04f 0900 	mov.w	r9, #0
 80075c4:	ea58 0309 	orrs.w	r3, r8, r9
 80075c8:	d038      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80075ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d0:	2b05      	cmp	r3, #5
 80075d2:	d819      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80075d4:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007611 	.word	0x08007611
 80075e0:	080075f5 	.word	0x080075f5
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007611 	.word	0x08007611
 80075ec:	08007611 	.word	0x08007611
 80075f0:	08007611 	.word	0x08007611
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075f8:	3308      	adds	r3, #8
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 ffee 	bl	80095dc <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8007606:	e004      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800760e:	e000      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8007610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007612:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10c      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800761a:	4b99      	ldr	r3, [pc, #612]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800761c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007620:	f023 0107 	bic.w	r1, r3, #7
 8007624:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800762a:	4a95      	ldr	r2, [pc, #596]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800762c:	430b      	orrs	r3, r1
 800762e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007632:	e003      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007638:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800763c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f002 0a02 	and.w	sl, r2, #2
 8007648:	f04f 0b00 	mov.w	fp, #0
 800764c:	ea5a 030b 	orrs.w	r3, sl, fp
 8007650:	d03c      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	2b28      	cmp	r3, #40	@ 0x28
 800765a:	d01b      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800765c:	2b28      	cmp	r3, #40	@ 0x28
 800765e:	d815      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8007660:	2b20      	cmp	r3, #32
 8007662:	d019      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8007664:	2b20      	cmp	r3, #32
 8007666:	d811      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8007668:	2b18      	cmp	r3, #24
 800766a:	d017      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800766c:	2b18      	cmp	r3, #24
 800766e:	d80d      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8007674:	2b08      	cmp	r3, #8
 8007676:	d109      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007678:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800767c:	3308      	adds	r3, #8
 800767e:	4618      	mov	r0, r3
 8007680:	f001 ffac 	bl	80095dc <RCCEx_PLL2_Config>
 8007684:	4603      	mov	r3, r0
 8007686:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 800768a:	e00a      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007692:	e006      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8007694:	bf00      	nop
 8007696:	e004      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8007698:	bf00      	nop
 800769a:	e002      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80076a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80076aa:	4b75      	ldr	r3, [pc, #468]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80076b0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80076b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ba:	4a71      	ldr	r2, [pc, #452]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80076c2:	e003      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80076c8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f002 0304 	and.w	r3, r2, #4
 80076d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076dc:	2300      	movs	r3, #0
 80076de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076e2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d040      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80076ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80076f6:	d01e      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80076f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80076fc:	d817      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007702:	d01a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8007704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007708:	d811      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800770a:	2bc0      	cmp	r3, #192	@ 0xc0
 800770c:	d017      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800770e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007710:	d80d      	bhi.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8007712:	2b00      	cmp	r3, #0
 8007714:	d015      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8007716:	2b40      	cmp	r3, #64	@ 0x40
 8007718:	d109      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800771a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800771e:	3308      	adds	r3, #8
 8007720:	4618      	mov	r0, r3
 8007722:	f001 ff5b 	bl	80095dc <RCCEx_PLL2_Config>
 8007726:	4603      	mov	r3, r0
 8007728:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 800772c:	e00a      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007734:	e006      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8007736:	bf00      	nop
 8007738:	e004      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8007742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007744:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800774c:	4b4c      	ldr	r3, [pc, #304]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800774e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007752:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007756:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800775a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800775c:	4a48      	ldr	r2, [pc, #288]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800775e:	430b      	orrs	r3, r1
 8007760:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007764:	e003      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007766:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800776a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800776e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800777a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007784:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007788:	460b      	mov	r3, r1
 800778a:	4313      	orrs	r3, r2
 800778c:	d043      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800778e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007794:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007798:	d021      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800779a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800779e:	d81a      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80077a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077a4:	d01d      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80077a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077aa:	d814      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80077ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077b0:	d019      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80077b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80077b6:	d80e      	bhi.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d016      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
 80077bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077c0:	d109      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077c6:	3308      	adds	r3, #8
 80077c8:	4618      	mov	r0, r3
 80077ca:	f001 ff07 	bl	80095dc <RCCEx_PLL2_Config>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80077d4:	e00a      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80077dc:	e006      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80077de:	bf00      	nop
 80077e0:	e004      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80077e2:	bf00      	nop
 80077e4:	e002      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80077e6:	bf00      	nop
 80077e8:	e000      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 80077ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80077f4:	4b22      	ldr	r3, [pc, #136]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80077f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077fa:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80077fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007804:	4a1e      	ldr	r2, [pc, #120]	@ (8007880 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8007806:	430b      	orrs	r3, r1
 8007808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800780c:	e003      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007812:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007816:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007822:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007824:	2300      	movs	r3, #0
 8007826:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007828:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d03e      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007832:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800783c:	d01b      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800783e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007842:	d814      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007848:	d017      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x30a>
 800784a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800784e:	d80e      	bhi.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d017      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8007854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007858:	d109      	bne.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800785a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800785e:	3308      	adds	r3, #8
 8007860:	4618      	mov	r0, r3
 8007862:	f001 febb 	bl	80095dc <RCCEx_PLL2_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800786c:	e00b      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007874:	e007      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8007876:	bf00      	nop
 8007878:	e005      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 800787a:	bf00      	nop
 800787c:	e003      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x316>
 800787e:	bf00      	nop
 8007880:	44020c00 	.word	0x44020c00
        break;
 8007884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007886:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10c      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800788e:	4ba5      	ldr	r3, [pc, #660]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007890:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007894:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007898:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800789c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789e:	4aa1      	ldr	r2, [pc, #644]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80078a0:	430b      	orrs	r3, r1
 80078a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80078a6:	e003      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80078ac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80078be:	2300      	movs	r3, #0
 80078c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80078c2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	d03b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80078cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078d6:	d01b      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80078d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80078dc:	d814      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80078de:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078e2:	d017      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80078e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80078e8:	d80e      	bhi.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x398>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80078ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80078f2:	d109      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80078f8:	3308      	adds	r3, #8
 80078fa:	4618      	mov	r0, r3
 80078fc:	f001 fe6e 	bl	80095dc <RCCEx_PLL2_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8007906:	e008      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8007918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007922:	4b80      	ldr	r3, [pc, #512]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007928:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800792c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007932:	4a7c      	ldr	r2, [pc, #496]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007934:	430b      	orrs	r3, r1
 8007936:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007940:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007944:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007952:	2300      	movs	r3, #0
 8007954:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007956:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d033      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007960:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800796a:	d015      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800796c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007970:	d80e      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007976:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800797a:	d109      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800797c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007980:	3308      	adds	r3, #8
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fe2a 	bl	80095dc <RCCEx_PLL2_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800798e:	e006      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007996:	e002      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800799c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800799e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10c      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80079a6:	4b5f      	ldr	r3, [pc, #380]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80079a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079ac:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80079b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80079b8:	430b      	orrs	r3, r1
 80079ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80079c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80079c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	2100      	movs	r1, #0
 80079d2:	6639      	str	r1, [r7, #96]	@ 0x60
 80079d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80079da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80079de:	460b      	mov	r3, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	d033      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80079e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80079e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079ee:	d015      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80079f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f4:	d80e      	bhi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d012      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80079fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80079fe:	d109      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a04:	3308      	adds	r3, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f001 fde8 	bl	80095dc <RCCEx_PLL2_Config>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8007a12:	e006      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007a1a:	e002      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8007a1c:	bf00      	nop
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8007a20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a22:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8007a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a30:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007a34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007a42:	e003      	b.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007a48:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	2100      	movs	r1, #0
 8007a56:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a62:	460b      	mov	r3, r1
 8007a64:	4313      	orrs	r3, r2
 8007a66:	d00e      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007a68:	4b2e      	ldr	r3, [pc, #184]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a72:	61d3      	str	r3, [r2, #28]
 8007a74:	4b2b      	ldr	r3, [pc, #172]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a80:	4a28      	ldr	r2, [pc, #160]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a94:	2300      	movs	r3, #0
 8007a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a98:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d046      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007aac:	d021      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007aae:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007ab2:	d81a      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ab8:	d01d      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007abe:	d814      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007ac0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ac4:	d019      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8007ac6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aca:	d80e      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d016      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8007ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad4:	d109      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ada:	3308      	adds	r3, #8
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 fd7d 	bl	80095dc <RCCEx_PLL2_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007af0:	e006      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8007afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b00:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10f      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007b08:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007b0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b0e:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b18:	4a02      	ldr	r2, [pc, #8]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007b20:	e006      	b.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007b22:	bf00      	nop
 8007b24:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b28:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007b2c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b38:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b3e:	2300      	movs	r3, #0
 8007b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007b46:	460b      	mov	r3, r1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	d043      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b56:	d021      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8007b58:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007b5c:	d81a      	bhi.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b62:	d01d      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8007b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b68:	d814      	bhi.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007b6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b6e:	d019      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8007b70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b74:	d80e      	bhi.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d016      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8007b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b7e:	d109      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007b84:	3308      	adds	r3, #8
 8007b86:	4618      	mov	r0, r3
 8007b88:	f001 fd28 	bl	80095dc <RCCEx_PLL2_Config>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007b92:	e00a      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007b9a:	e006      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007b9c:	bf00      	nop
 8007b9e:	e004      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007baa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007bb2:	4bb6      	ldr	r3, [pc, #728]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007bb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bb8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bc2:	4ab2      	ldr	r2, [pc, #712]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007bc4:	430b      	orrs	r3, r1
 8007bc6:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007bca:	e003      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007bd0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007be0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007be2:	2300      	movs	r3, #0
 8007be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d030      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf6:	2b05      	cmp	r3, #5
 8007bf8:	d80f      	bhi.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d211      	bcs.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d911      	bls.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d109      	bne.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f001 fce5 	bl	80095dc <RCCEx_PLL2_Config>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007c18:	e006      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007c20:	e002      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8007c22:	bf00      	nop
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8007c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c28:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007c30:	4b96      	ldr	r3, [pc, #600]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c36:	f023 0107 	bic.w	r1, r3, #7
 8007c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c40:	4a92      	ldr	r2, [pc, #584]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007c42:	430b      	orrs	r3, r1
 8007c44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007c48:	e003      	b.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007c4e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007c68:	460b      	mov	r3, r1
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	d022      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	d005      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007c82:	e002      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8007c84:	bf00      	nop
 8007c86:	e000      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8007c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c8a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007c92:	4b7e      	ldr	r3, [pc, #504]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007c98:	f023 0108 	bic.w	r1, r3, #8
 8007c9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007caa:	e003      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cac:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007cb0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f000 80b0 	beq.w	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007cd2:	4b6f      	ldr	r3, [pc, #444]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	4a6e      	ldr	r2, [pc, #440]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8007cd8:	f043 0301 	orr.w	r3, r3, #1
 8007cdc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cde:	f7fb fc19 	bl	8003514 <HAL_GetTick>
 8007ce2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007ce6:	e00b      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ce8:	f7fb fc14 	bl	8003514 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d903      	bls.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007cfe:	e005      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007d00:	4b63      	ldr	r3, [pc, #396]	@ (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0ed      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8007d0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f040 808a 	bne.w	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d16:	4b5d      	ldr	r3, [pc, #372]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007d24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d022      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8007d2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d32:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d01b      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d3a:	4b54      	ldr	r3, [pc, #336]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007d48:	4b50      	ldr	r3, [pc, #320]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007d58:	4b4c      	ldr	r3, [pc, #304]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d5e:	4a4b      	ldr	r2, [pc, #300]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007d68:	4a48      	ldr	r2, [pc, #288]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d019      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7e:	f7fb fbc9 	bl	8003514 <HAL_GetTick>
 8007d82:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d86:	e00d      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d88:	f7fb fbc4 	bl	8003514 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d903      	bls.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8007da2:	e006      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007da4:	4b39      	ldr	r3, [pc, #228]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007da6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d0ea      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8007db2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d132      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dc8:	d10f      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8007dca:	4b30      	ldr	r3, [pc, #192]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dd8:	091b      	lsrs	r3, r3, #4
 8007dda:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007dde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007de2:	4a2a      	ldr	r2, [pc, #168]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007de4:	430b      	orrs	r3, r1
 8007de6:	61d3      	str	r3, [r2, #28]
 8007de8:	e005      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8007dea:	4b28      	ldr	r3, [pc, #160]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	4a27      	ldr	r2, [pc, #156]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007df0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007df4:	61d3      	str	r3, [r2, #28]
 8007df6:	4b25      	ldr	r3, [pc, #148]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dfc:	4a23      	ldr	r2, [pc, #140]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e06:	4b21      	ldr	r3, [pc, #132]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007e08:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007e0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e16:	4a1d      	ldr	r2, [pc, #116]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007e18:	430b      	orrs	r3, r1
 8007e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e1e:	e008      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e20:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007e24:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8007e28:	e003      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007e2e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e40:	2300      	movs	r3, #0
 8007e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e44:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	d038      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e54:	2b30      	cmp	r3, #48	@ 0x30
 8007e56:	d014      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8007e58:	2b30      	cmp	r3, #48	@ 0x30
 8007e5a:	d80e      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d012      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d80a      	bhi.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d015      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d106      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b07      	ldr	r3, [pc, #28]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e70:	4a06      	ldr	r2, [pc, #24]	@ (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e78:	e00d      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007e80:	e009      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8007e82:	bf00      	nop
 8007e84:	e007      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8007e86:	bf00      	nop
 8007e88:	e005      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8007e8a:	bf00      	nop
 8007e8c:	44020c00 	.word	0x44020c00
 8007e90:	44020800 	.word	0x44020800
        break;
 8007e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e96:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10c      	bne.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007e9e:	4bb5      	ldr	r3, [pc, #724]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007ea0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ea4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ea8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eae:	49b1      	ldr	r1, [pc, #708]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007eb6:	e003      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007ebc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8007ecc:	623b      	str	r3, [r7, #32]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	d03c      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ee0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d81d      	bhi.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f01 	.word	0x08007f01
 8007ef0:	08007f0f 	.word	0x08007f0f
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f2b 	.word	0x08007f2b
 8007efc:	08007f2b 	.word	0x08007f2b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f00:	4b9c      	ldr	r3, [pc, #624]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f04:	4a9b      	ldr	r2, [pc, #620]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f0a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007f0c:	e00e      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f12:	3308      	adds	r3, #8
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fb61 	bl	80095dc <RCCEx_PLL2_Config>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007f20:	e004      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007f28:	e000      	b.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8007f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f2c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10c      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007f34:	4b8f      	ldr	r3, [pc, #572]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f3a:	f023 0207 	bic.w	r2, r3, #7
 8007f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f44:	498b      	ldr	r1, [pc, #556]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007f4c:	e003      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007f52:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007f56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	d03c      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d01f      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d819      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8007f80:	2b18      	cmp	r3, #24
 8007f82:	d01d      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007f84:	2b18      	cmp	r3, #24
 8007f86:	d815      	bhi.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d007      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007f90:	e010      	b.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f92:	4b78      	ldr	r3, [pc, #480]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	4a77      	ldr	r2, [pc, #476]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f9c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007f9e:	e010      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 fb18 	bl	80095dc <RCCEx_PLL2_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007fb2:	e006      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007fba:	e002      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8007fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fc2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10c      	bne.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007fca:	4b6a      	ldr	r3, [pc, #424]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007fd0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007fd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fda:	4966      	ldr	r1, [pc, #408]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007fe2:	e003      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007fe8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ff8:	613b      	str	r3, [r7, #16]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008002:	460b      	mov	r3, r1
 8008004:	4313      	orrs	r3, r2
 8008006:	d03e      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8008008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800800c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800800e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008012:	d020      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8008014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008018:	d819      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xade>
 800801a:	2bc0      	cmp	r3, #192	@ 0xc0
 800801c:	d01d      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800801e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008020:	d815      	bhi.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xade>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8008026:	2b40      	cmp	r3, #64	@ 0x40
 8008028:	d007      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800802a:	e010      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800802c:	4b51      	ldr	r3, [pc, #324]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	4a50      	ldr	r2, [pc, #320]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008036:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008038:	e010      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800803a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800803e:	3308      	adds	r3, #8
 8008040:	4618      	mov	r0, r3
 8008042:	f001 facb 	bl	80095dc <RCCEx_PLL2_Config>
 8008046:	4603      	mov	r3, r0
 8008048:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800804c:	e006      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008054:	e002      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8008056:	bf00      	nop
 8008058:	e000      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800805a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10c      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008064:	4b43      	ldr	r3, [pc, #268]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800806a:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800806e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008074:	493f      	ldr	r1, [pc, #252]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008082:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008086:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	2100      	movs	r1, #0
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	60fb      	str	r3, [r7, #12]
 8008098:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800809c:	460b      	mov	r3, r1
 800809e:	4313      	orrs	r3, r2
 80080a0:	d038      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80080a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ac:	d00e      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80080ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b2:	d815      	bhi.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d017      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80080b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080bc:	d110      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080be:	4b2d      	ldr	r3, [pc, #180]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080c2:	4a2c      	ldr	r2, [pc, #176]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80080c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80080ca:	e00e      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80080d0:	3308      	adds	r3, #8
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 fa82 	bl	80095dc <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80080de:	e004      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80080e6:	e000      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80080e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080ea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10c      	bne.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80080f2:	4b20      	ldr	r3, [pc, #128]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80080f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008102:	491c      	ldr	r1, [pc, #112]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8008104:	4313      	orrs	r3, r2
 8008106:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800810a:	e003      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800810c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8008110:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008114:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	2100      	movs	r1, #0
 800811e:	6039      	str	r1, [r7, #0]
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	e9d7 1200 	ldrd	r1, r2, [r7]
 800812a:	460b      	mov	r3, r1
 800812c:	4313      	orrs	r3, r2
 800812e:	d039      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8008130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008136:	2b30      	cmp	r3, #48	@ 0x30
 8008138:	d01e      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800813a:	2b30      	cmp	r3, #48	@ 0x30
 800813c:	d815      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800813e:	2b10      	cmp	r3, #16
 8008140:	d002      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8008142:	2b20      	cmp	r3, #32
 8008144:	d007      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8008146:	e010      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800814a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814c:	4a09      	ldr	r2, [pc, #36]	@ (8008174 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800814e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008152:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008154:	e011      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008156:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800815a:	3308      	adds	r3, #8
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fa3d 	bl	80095dc <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008168:	e007      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8008170:	e003      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8008172:	bf00      	nop
 8008174:	44020c00 	.word	0x44020c00
        break;
 8008178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800817a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10c      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008188:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800818c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008192:	4908      	ldr	r1, [pc, #32]	@ (80081b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008194:	4313      	orrs	r3, r2
 8008196:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800819a:	e003      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80081a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80081a4:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	37a8      	adds	r7, #168	@ 0xa8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b2:	bf00      	nop
 80081b4:	44020c00 	.word	0x44020c00

080081b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b08b      	sub	sp, #44	@ 0x2c
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80081c0:	4bad      	ldr	r3, [pc, #692]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80081ca:	4bab      	ldr	r3, [pc, #684]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80081d4:	4ba8      	ldr	r3, [pc, #672]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	0a1b      	lsrs	r3, r3, #8
 80081da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081de:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80081e0:	4ba5      	ldr	r3, [pc, #660]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80081ea:	4ba3      	ldr	r3, [pc, #652]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	08db      	lsrs	r3, r3, #3
 80081f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	fb02 f303 	mul.w	r3, r2, r3
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008202:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 8126 	beq.w	800845a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b03      	cmp	r3, #3
 8008212:	d053      	beq.n	80082bc <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2b03      	cmp	r3, #3
 8008218:	d86f      	bhi.n	80082fa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d003      	beq.n	8008228 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d02b      	beq.n	800827e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8008226:	e068      	b.n	80082fa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008228:	4b93      	ldr	r3, [pc, #588]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	4a92      	ldr	r2, [pc, #584]	@ (800847c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008260:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008278:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800827c:	e068      	b.n	8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008288:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008484 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800828c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008290:	6a3b      	ldr	r3, [r7, #32]
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a04 	vldr	s12, [r7, #16]
 800829e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80082ba:	e049      	b.n	8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008488 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	ee07 3a90 	vmov	s15, r3
 80082d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d8:	ed97 6a04 	vldr	s12, [r7, #16]
 80082dc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80082e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80082f8:	e02a      	b.n	8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082fa:	4b5f      	ldr	r3, [pc, #380]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	08db      	lsrs	r3, r3, #3
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	4a5d      	ldr	r2, [pc, #372]	@ (800847c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008306:	fa22 f303 	lsr.w	r3, r2, r3
 800830a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	ee07 3a90 	vmov	s15, r3
 800831c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008320:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008332:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800834e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008350:	4b49      	ldr	r3, [pc, #292]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800835c:	d121      	bne.n	80083a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800835e:	4b46      	ldr	r3, [pc, #280]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d017      	beq.n	800839a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800836a:	4b43      	ldr	r3, [pc, #268]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800836c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836e:	0a5b      	lsrs	r3, r3, #9
 8008370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800837c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008380:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008384:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008390:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e006      	b.n	80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	e002      	b.n	80083a8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083a8:	4b33      	ldr	r3, [pc, #204]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083b4:	d121      	bne.n	80083fa <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80083b6:	4b30      	ldr	r3, [pc, #192]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d017      	beq.n	80083f2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80083c2:	4b2d      	ldr	r3, [pc, #180]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80083c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80083d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80083dc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80083e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]
 80083f0:	e006      	b.n	8008400 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
 80083f8:	e002      	b.n	8008400 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008400:	4b1d      	ldr	r3, [pc, #116]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800840c:	d121      	bne.n	8008452 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800840e:	4b1a      	ldr	r3, [pc, #104]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d017      	beq.n	800844a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800841a:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800841c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800841e:	0e1b      	lsrs	r3, r3, #24
 8008420:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800842c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008430:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008434:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008440:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008448:	e010      	b.n	800846c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
}
 8008450:	e00c      	b.n	800846c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	609a      	str	r2, [r3, #8]
}
 8008458:	e008      	b.n	800846c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	372c      	adds	r7, #44	@ 0x2c
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	44020c00 	.word	0x44020c00
 800847c:	03d09000 	.word	0x03d09000
 8008480:	46000000 	.word	0x46000000
 8008484:	4a742400 	.word	0x4a742400
 8008488:	4bbebc20 	.word	0x4bbebc20

0800848c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800848c:	b480      	push	{r7}
 800848e:	b08b      	sub	sp, #44	@ 0x2c
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008494:	4bad      	ldr	r3, [pc, #692]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800849e:	4bab      	ldr	r3, [pc, #684]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80084a8:	4ba8      	ldr	r3, [pc, #672]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084b2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80084b4:	4ba5      	ldr	r3, [pc, #660]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b8:	f003 0310 	and.w	r3, r3, #16
 80084bc:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80084be:	4ba3      	ldr	r3, [pc, #652]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084c2:	08db      	lsrs	r3, r3, #3
 80084c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084c8:	697a      	ldr	r2, [r7, #20]
 80084ca:	fb02 f303 	mul.w	r3, r2, r3
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8126 	beq.w	800872e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d053      	beq.n	8008590 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d86f      	bhi.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d003      	beq.n	80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d02b      	beq.n	8008552 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80084fa:	e068      	b.n	80085ce <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084fc:	4b93      	ldr	r3, [pc, #588]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	08db      	lsrs	r3, r3, #3
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	4a92      	ldr	r2, [pc, #584]	@ (8008750 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008508:	fa22 f303 	lsr.w	r3, r2, r3
 800850c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	ee07 3a90 	vmov	s15, r3
 8008514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	ee07 3a90 	vmov	s15, r3
 800852c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008530:	ed97 6a04 	vldr	s12, [r7, #16]
 8008534:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008540:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008550:	e068      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	ee07 3a90 	vmov	s15, r3
 8008558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8008758 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008572:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800858e:	e049      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800875c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800859e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80085b0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80085b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80085cc:	e02a      	b.n	8008624 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085ce:	4b5f      	ldr	r3, [pc, #380]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	08db      	lsrs	r3, r3, #3
 80085d4:	f003 0303 	and.w	r3, r3, #3
 80085d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008750 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80085da:	fa22 f303 	lsr.w	r3, r2, r3
 80085de:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	ee07 3a90 	vmov	s15, r3
 80085f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	ee07 3a90 	vmov	s15, r3
 80085fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008602:	ed97 6a04 	vldr	s12, [r7, #16]
 8008606:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008754 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800860a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008622:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008624:	4b49      	ldr	r3, [pc, #292]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800862c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008630:	d121      	bne.n	8008676 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008632:	4b46      	ldr	r3, [pc, #280]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d017      	beq.n	800866e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800863e:	4b43      	ldr	r3, [pc, #268]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008650:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008654:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008658:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800865c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008664:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	e006      	b.n	800867c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e002      	b.n	800867c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800867c:	4b33      	ldr	r3, [pc, #204]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008688:	d121      	bne.n	80086ce <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800868a:	4b30      	ldr	r3, [pc, #192]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800868c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d017      	beq.n	80086c6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008696:	4b2d      	ldr	r3, [pc, #180]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869a:	0c1b      	lsrs	r3, r3, #16
 800869c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80086a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80086b0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80086b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086bc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	605a      	str	r2, [r3, #4]
 80086c4:	e006      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	e002      	b.n	80086d4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d4:	4b1d      	ldr	r3, [pc, #116]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e0:	d121      	bne.n	8008726 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80086e2:	4b1a      	ldr	r3, [pc, #104]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d017      	beq.n	800871e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80086ee:	4b17      	ldr	r3, [pc, #92]	@ (800874c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80086f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f2:	0e1b      	lsrs	r3, r3, #24
 80086f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008700:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008704:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008708:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800870c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008714:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800871c:	e010      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
}
 8008724:	e00c      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	609a      	str	r2, [r3, #8]
}
 800872c:	e008      	b.n	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	609a      	str	r2, [r3, #8]
}
 8008740:	bf00      	nop
 8008742:	372c      	adds	r7, #44	@ 0x2c
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	44020c00 	.word	0x44020c00
 8008750:	03d09000 	.word	0x03d09000
 8008754:	46000000 	.word	0x46000000
 8008758:	4a742400 	.word	0x4a742400
 800875c:	4bbebc20 	.word	0x4bbebc20

08008760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08c      	sub	sp, #48	@ 0x30
 8008764:	af00      	add	r7, sp, #0
 8008766:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800876a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800876e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8008772:	430b      	orrs	r3, r1
 8008774:	d14b      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008776:	4bc4      	ldr	r3, [pc, #784]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800877c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008780:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008782:	4bc1      	ldr	r3, [pc, #772]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b02      	cmp	r3, #2
 800878e:	d108      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008796:	d104      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008798:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800879c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800879e:	f000 bf14 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80087a2:	4bb9      	ldr	r3, [pc, #740]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80087a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b0:	d108      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b8:	d104      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80087ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087c0:	f000 bf03 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80087c4:	4bb0      	ldr	r3, [pc, #704]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087d0:	d119      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80087d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087d8:	d115      	bne.n	8008806 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80087da:	4bab      	ldr	r3, [pc, #684]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80087e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087e6:	d30a      	bcc.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80087e8:	4ba7      	ldr	r3, [pc, #668]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80087ea:	69db      	ldr	r3, [r3, #28]
 80087ec:	0a1b      	lsrs	r3, r3, #8
 80087ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087f2:	4aa6      	ldr	r2, [pc, #664]	@ (8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 80087f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80087fa:	f000 bee6 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008802:	f000 bee2 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800880a:	f000 bede 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800880e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008812:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8008816:	ea52 0301 	orrs.w	r3, r2, r1
 800881a:	f000 838e 	beq.w	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 800881e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008822:	2a01      	cmp	r2, #1
 8008824:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8008828:	f080 86cc 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800882c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008830:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8008834:	ea52 0301 	orrs.w	r3, r2, r1
 8008838:	f000 82aa 	beq.w	8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800883c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008840:	2a01      	cmp	r2, #1
 8008842:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8008846:	f080 86bd 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800884a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800884e:	f1a3 0110 	sub.w	r1, r3, #16
 8008852:	ea52 0301 	orrs.w	r3, r2, r1
 8008856:	f000 8681 	beq.w	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800885a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800885e:	2a01      	cmp	r2, #1
 8008860:	f173 0310 	sbcs.w	r3, r3, #16
 8008864:	f080 86ae 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800886c:	1f19      	subs	r1, r3, #4
 800886e:	ea52 0301 	orrs.w	r3, r2, r1
 8008872:	f000 84b1 	beq.w	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8008876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800887a:	2a01      	cmp	r2, #1
 800887c:	f173 0304 	sbcs.w	r3, r3, #4
 8008880:	f080 86a0 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008888:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800888c:	430b      	orrs	r3, r1
 800888e:	f000 85aa 	beq.w	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8008892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008896:	497e      	ldr	r1, [pc, #504]	@ (8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8008898:	428a      	cmp	r2, r1
 800889a:	f173 0300 	sbcs.w	r3, r3, #0
 800889e:	f080 8691 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80088a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a6:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80088aa:	430b      	orrs	r3, r1
 80088ac:	f000 8532 	beq.w	8009314 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 80088b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088b4:	4977      	ldr	r1, [pc, #476]	@ (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 80088b6:	428a      	cmp	r2, r1
 80088b8:	f173 0300 	sbcs.w	r3, r3, #0
 80088bc:	f080 8682 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80088c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088c4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80088c8:	430b      	orrs	r3, r1
 80088ca:	f000 84bc 	beq.w	8009246 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80088ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d2:	4971      	ldr	r1, [pc, #452]	@ (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 80088d4:	428a      	cmp	r2, r1
 80088d6:	f173 0300 	sbcs.w	r3, r3, #0
 80088da:	f080 8673 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80088de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088e2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80088e6:	430b      	orrs	r3, r1
 80088e8:	f000 85f2 	beq.w	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 80088ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088f0:	496a      	ldr	r1, [pc, #424]	@ (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 80088f2:	428a      	cmp	r2, r1
 80088f4:	f173 0300 	sbcs.w	r3, r3, #0
 80088f8:	f080 8664 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80088fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008900:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8008904:	430b      	orrs	r3, r1
 8008906:	f000 81e5 	beq.w	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 800890a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800890e:	4964      	ldr	r1, [pc, #400]	@ (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8008910:	428a      	cmp	r2, r1
 8008912:	f173 0300 	sbcs.w	r3, r3, #0
 8008916:	f080 8655 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800891a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800891e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008922:	430b      	orrs	r3, r1
 8008924:	f000 83cc 	beq.w	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800892c:	495d      	ldr	r1, [pc, #372]	@ (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800892e:	428a      	cmp	r2, r1
 8008930:	f173 0300 	sbcs.w	r3, r3, #0
 8008934:	f080 8646 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008940:	430b      	orrs	r3, r1
 8008942:	f000 8331 	beq.w	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8008946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800894a:	4957      	ldr	r1, [pc, #348]	@ (8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800894c:	428a      	cmp	r2, r1
 800894e:	f173 0300 	sbcs.w	r3, r3, #0
 8008952:	f080 8637 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800895a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800895e:	430b      	orrs	r3, r1
 8008960:	f000 82bb 	beq.w	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8008964:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008968:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800896c:	f173 0300 	sbcs.w	r3, r3, #0
 8008970:	f080 8628 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008978:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800897c:	430b      	orrs	r3, r1
 800897e:	f000 826d 	beq.w	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8008982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008986:	f244 0101 	movw	r1, #16385	@ 0x4001
 800898a:	428a      	cmp	r2, r1
 800898c:	f173 0300 	sbcs.w	r3, r3, #0
 8008990:	f080 8618 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008998:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800899c:	430b      	orrs	r3, r1
 800899e:	f000 821e 	beq.w	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 80089a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a6:	f242 0101 	movw	r1, #8193	@ 0x2001
 80089aa:	428a      	cmp	r2, r1
 80089ac:	f173 0300 	sbcs.w	r3, r3, #0
 80089b0:	f080 8608 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80089b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089b8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80089bc:	430b      	orrs	r3, r1
 80089be:	f000 8137 	beq.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80089c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089c6:	f241 0101 	movw	r1, #4097	@ 0x1001
 80089ca:	428a      	cmp	r2, r1
 80089cc:	f173 0300 	sbcs.w	r3, r3, #0
 80089d0:	f080 85f8 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80089d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d8:	1f11      	subs	r1, r2, #4
 80089da:	430b      	orrs	r3, r1
 80089dc:	f000 80d2 	beq.w	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80089e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e4:	2a05      	cmp	r2, #5
 80089e6:	f173 0300 	sbcs.w	r3, r3, #0
 80089ea:	f080 85eb 	bcs.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80089ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f2:	1e51      	subs	r1, r2, #1
 80089f4:	430b      	orrs	r3, r1
 80089f6:	d006      	beq.n	8008a06 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80089f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fc:	1e91      	subs	r1, r2, #2
 80089fe:	430b      	orrs	r3, r1
 8008a00:	d06c      	beq.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8008a02:	f000 bddf 	b.w	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008a06:	4b20      	ldr	r3, [pc, #128]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008a08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008a18:	f7fe fd7e 	bl	8007518 <HAL_RCC_GetPCLK2Freq>
 8008a1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a1e:	f000 bdd4 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008a22:	4b19      	ldr	r3, [pc, #100]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a2e:	d10a      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d107      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a36:	f107 030c 	add.w	r3, r7, #12
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff fd26 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a44:	e048      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008a46:	4b10      	ldr	r3, [pc, #64]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d10c      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a54:	2b03      	cmp	r3, #3
 8008a56:	d109      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a58:	4b0b      	ldr	r3, [pc, #44]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	08db      	lsrs	r3, r3, #3
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	4a12      	ldr	r2, [pc, #72]	@ (8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008a64:	fa22 f303 	lsr.w	r3, r2, r3
 8008a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a6a:	e035      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008a6c:	4b06      	ldr	r3, [pc, #24]	@ (8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a78:	d11c      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	d119      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a84:	e028      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8008a86:	bf00      	nop
 8008a88:	44020c00 	.word	0x44020c00
 8008a8c:	017d7840 	.word	0x017d7840
 8008a90:	20000001 	.word	0x20000001
 8008a94:	10000001 	.word	0x10000001
 8008a98:	08000001 	.word	0x08000001
 8008a9c:	04000001 	.word	0x04000001
 8008aa0:	00200001 	.word	0x00200001
 8008aa4:	00040001 	.word	0x00040001
 8008aa8:	00020001 	.word	0x00020001
 8008aac:	03d09000 	.word	0x03d09000
 8008ab0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008ab4:	4b9f      	ldr	r3, [pc, #636]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d106      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8008ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	d103      	bne.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8008ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ace:	e003      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ad4:	f000 bd79 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ad8:	f000 bd77 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008adc:	4b95      	ldr	r3, [pc, #596]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008aee:	f7fe fcfd 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008af2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008af4:	f000 bd69 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008af8:	4b8e      	ldr	r3, [pc, #568]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b04:	d10a      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8008b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff fcbb 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1a:	e031      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008b1c:	4b85      	ldr	r3, [pc, #532]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d10c      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2a:	2b18      	cmp	r3, #24
 8008b2c:	d109      	bne.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b2e:	4b81      	ldr	r3, [pc, #516]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	4a7f      	ldr	r2, [pc, #508]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8008b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b40:	e01e      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008b42:	4b7c      	ldr	r3, [pc, #496]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b4e:	d105      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8008b56:	4b79      	ldr	r3, [pc, #484]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8008b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b5a:	e011      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008b5c:	4b75      	ldr	r3, [pc, #468]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d106      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8008b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6c:	2b28      	cmp	r3, #40	@ 0x28
 8008b6e:	d103      	bne.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8008b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008b7c:	f000 bd25 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008b80:	f000 bd23 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008b84:	4b6b      	ldr	r3, [pc, #428]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b8a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008b96:	f7fe fca9 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008b9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b9c:	f000 bd15 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008ba0:	4b64      	ldr	r3, [pc, #400]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ba8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bac:	d10a      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb4:	f107 030c 	add.w	r3, r7, #12
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fc67 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bc2:	e033      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008bc4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d10c      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bd4:	d109      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008bd6:	4b57      	ldr	r3, [pc, #348]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	08db      	lsrs	r3, r3, #3
 8008bdc:	f003 0303 	and.w	r3, r3, #3
 8008be0:	4a55      	ldr	r2, [pc, #340]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8008be2:	fa22 f303 	lsr.w	r3, r2, r3
 8008be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008be8:	e020      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008bea:	4b52      	ldr	r3, [pc, #328]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bf6:	d106      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bfe:	d102      	bne.n	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8008c00:	4b4e      	ldr	r3, [pc, #312]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8008c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c04:	e012      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008c06:	4b4b      	ldr	r3, [pc, #300]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d107      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008c1a:	d103      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8008c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c22:	e003      	b.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008c28:	f000 bccf 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008c2c:	f000 bccd 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008c30:	4b40      	ldr	r3, [pc, #256]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c36:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008c42:	f7fe fc7f 	bl	8007544 <HAL_RCC_GetPCLK3Freq>
 8008c46:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008c48:	f000 bcbf 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c52:	d108      	bne.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c54:	f107 030c 	add.w	r3, r7, #12
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fc17 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008c62:	f000 bcb2 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008c66:	4b33      	ldr	r3, [pc, #204]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d10d      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8008c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c78:	d109      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	08db      	lsrs	r3, r3, #3
 8008c80:	f003 0303 	and.w	r3, r3, #3
 8008c84:	4a2c      	ldr	r2, [pc, #176]	@ (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c8c:	e020      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008c8e:	4b29      	ldr	r3, [pc, #164]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9a:	d106      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ca2:	d102      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8008ca4:	4b25      	ldr	r3, [pc, #148]	@ (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8008ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ca8:	e012      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008caa:	4b22      	ldr	r3, [pc, #136]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d107      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008cbe:	d103      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8008cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cc6:	e003      	b.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ccc:	f000 bc7d 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008cd0:	f000 bc7b 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008cd4:	4b17      	ldr	r3, [pc, #92]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008ce6:	f7fe fbe5 	bl	80074b4 <HAL_RCC_GetHCLKFreq>
 8008cea:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008cec:	f000 bc6d 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d104      	bne.n	8008d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cf6:	f7fe fab1 	bl	800725c <HAL_RCC_GetSysClockFreq>
 8008cfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8008cfc:	f000 bc65 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d108      	bne.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d06:	f107 030c 	add.w	r3, r7, #12
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7ff fbbe 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008d14:	f000 bc59 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008d18:	4b06      	ldr	r3, [pc, #24]	@ (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d24:	d10e      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8008d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d10b      	bne.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8008d2c:	4b04      	ldr	r3, [pc, #16]	@ (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d30:	e02c      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8008d32:	bf00      	nop
 8008d34:	44020c00 	.word	0x44020c00
 8008d38:	03d09000 	.word	0x03d09000
 8008d3c:	003d0900 	.word	0x003d0900
 8008d40:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008d44:	4b95      	ldr	r3, [pc, #596]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0302 	and.w	r3, r3, #2
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d10c      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d109      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d56:	4b91      	ldr	r3, [pc, #580]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	4a8f      	ldr	r2, [pc, #572]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d68:	e010      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008d6a:	4b8c      	ldr	r3, [pc, #560]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d76:	d105      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8008d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	d102      	bne.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8008d7e:	4b89      	ldr	r3, [pc, #548]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d82:	e003      	b.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008d88:	f000 bc1f 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008d8c:	f000 bc1d 	b.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008d90:	4b82      	ldr	r3, [pc, #520]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d96:	f003 0308 	and.w	r3, r3, #8
 8008d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d106      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d103      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8008db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008db6:	e011      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008db8:	4b78      	ldr	r3, [pc, #480]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dc6:	d106      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	d103      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8008dce:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008dd4:	e002      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8008dda:	e3f6      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ddc:	e3f5      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008dde:	4b6f      	ldr	r3, [pc, #444]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008de0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008de4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008de8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d103      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008df0:	f7fe fb7c 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008df4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008df6:	e3e8      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fb41 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008e0e:	e3dc      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008e10:	4b62      	ldr	r3, [pc, #392]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d10d      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e22:	d109      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e24:	4b5d      	ldr	r3, [pc, #372]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e36:	e010      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008e38:	4b58      	ldr	r3, [pc, #352]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e44:	d106      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e4c:	d102      	bne.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8008e4e:	4b55      	ldr	r3, [pc, #340]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e52:	e002      	b.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008e58:	e3b7      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008e5a:	e3b6      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e62:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008e66:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d103      	bne.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e6e:	f7fe fb3d 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008e72:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e74:	e3a9      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e7e:	f107 030c 	add.w	r3, r7, #12
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fb02 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008e8c:	e39d      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008e8e:	4b43      	ldr	r3, [pc, #268]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d10d      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008ea0:	d109      	bne.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	08db      	lsrs	r3, r3, #3
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	4a3c      	ldr	r2, [pc, #240]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb4:	e010      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008eb6:	4b39      	ldr	r3, [pc, #228]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ec2:	d106      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8008ecc:	4b35      	ldr	r3, [pc, #212]	@ (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ed0:	e002      	b.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ed6:	e378      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ed8:	e377      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008eda:	4b30      	ldr	r3, [pc, #192]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ee0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d103      	bne.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008eec:	f7fe fafe 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8008ef0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ef2:	e36a      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8008ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008efa:	d107      	bne.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008efc:	f107 030c 	add.w	r3, r7, #12
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff fac3 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f0a:	e35e      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008f0c:	4b23      	ldr	r3, [pc, #140]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d10d      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8008f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f1e:	d109      	bne.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f20:	4b1e      	ldr	r3, [pc, #120]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	08db      	lsrs	r3, r3, #3
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f32:	e34a      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f38:	e347      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8008f3a:	4b18      	ldr	r3, [pc, #96]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f40:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008f44:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8008f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008f4c:	f7fe fafa 	bl	8007544 <HAL_RCC_GetPCLK3Freq>
 8008f50:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f52:	e33a      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5c:	f107 030c 	add.w	r3, r7, #12
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fa93 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f6a:	e32e      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8008f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d10d      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8008f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7e:	d109      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f80:	4b06      	ldr	r3, [pc, #24]	@ (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a05      	ldr	r2, [pc, #20]	@ (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f92:	e31a      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008f98:	e317      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008f9a:	bf00      	nop
 8008f9c:	44020c00 	.word	0x44020c00
 8008fa0:	03d09000 	.word	0x03d09000
 8008fa4:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008faa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008fae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008fba:	d044      	beq.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008fc2:	d879      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fca:	d02d      	beq.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fd2:	d871      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8008fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fda:	d017      	beq.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8008fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fe2:	d869      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff0:	d004      	beq.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8008ff2:	e061      	b.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008ff4:	f7fe faa6 	bl	8007544 <HAL_RCC_GetPCLK3Freq>
 8008ff8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8008ffa:	e060      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ffc:	f107 030c 	add.w	r3, r7, #12
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fa43 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800900a:	e058      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800900c:	4b82      	ldr	r3, [pc, #520]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800900e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b02      	cmp	r3, #2
 8009018:	d103      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800901a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009020:	e04d      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009026:	e04a      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009028:	4b7b      	ldr	r3, [pc, #492]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800902a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800902e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009036:	d103      	bne.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8009038:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800903c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800903e:	e03e      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009044:	e03b      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009046:	4b74      	ldr	r3, [pc, #464]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800904c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009052:	4b71      	ldr	r3, [pc, #452]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b02      	cmp	r3, #2
 800905c:	d10c      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800905e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d109      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009064:	4b6c      	ldr	r3, [pc, #432]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	08db      	lsrs	r3, r3, #3
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	4a6b      	ldr	r2, [pc, #428]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009070:	fa22 f303 	lsr.w	r3, r2, r3
 8009074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009076:	e01e      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009078:	4b67      	ldr	r3, [pc, #412]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009084:	d106      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800908c:	d102      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800908e:	4b64      	ldr	r3, [pc, #400]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009092:	e010      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009094:	4b60      	ldr	r3, [pc, #384]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800909c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090a0:	d106      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090a8:	d102      	bne.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090aa:	4b5e      	ldr	r3, [pc, #376]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80090ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090ae:	e002      	b.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80090b4:	e003      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80090b6:	e002      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80090bc:	bf00      	nop
          }
        }
        break;
 80090be:	e284      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80090c0:	4b55      	ldr	r3, [pc, #340]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80090c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090c6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80090ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090d2:	d044      	beq.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090da:	d879      	bhi.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090e2:	d02d      	beq.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80090e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ea:	d871      	bhi.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090f2:	d017      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80090f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090fa:	d869      	bhi.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80090fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009108:	d004      	beq.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800910a:	e061      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800910c:	f7fe f9ee 	bl	80074ec <HAL_RCC_GetPCLK1Freq>
 8009110:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8009112:	e060      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff f9b7 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009122:	e058      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009124:	4b3c      	ldr	r3, [pc, #240]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b02      	cmp	r3, #2
 8009130:	d103      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8009132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009136:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009138:	e04d      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800913e:	e04a      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009140:	4b35      	ldr	r3, [pc, #212]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800914a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800914e:	d103      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8009150:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009154:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8009156:	e03e      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800915c:	e03b      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800915e:	4b2e      	ldr	r3, [pc, #184]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009164:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800916a:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b02      	cmp	r3, #2
 8009174:	d10c      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d109      	bne.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800917c:	4b26      	ldr	r3, [pc, #152]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	08db      	lsrs	r3, r3, #3
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	4a25      	ldr	r2, [pc, #148]	@ (800921c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8009188:	fa22 f303 	lsr.w	r3, r2, r3
 800918c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800918e:	e01e      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009190:	4b21      	ldr	r3, [pc, #132]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919c:	d106      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800919e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a4:	d102      	bne.n	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80091a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009220 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80091a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091aa:	e010      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091b8:	d106      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80091ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091c0:	d102      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80091c2:	4b18      	ldr	r3, [pc, #96]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80091c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091c6:	e002      	b.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80091cc:	e003      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80091ce:	e002      	b.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80091d4:	bf00      	nop
          }
        }
        break;
 80091d6:	e1f8      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80091da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091e2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80091e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009218 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091f0:	d105      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80091f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d102      	bne.n	80091fe <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80091fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80091fc:	e1e5      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009204:	d110      	bne.n	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009206:	f107 0318 	add.w	r3, r7, #24
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe ffd4 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009214:	e1d9      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8009216:	bf00      	nop
 8009218:	44020c00 	.word	0x44020c00
 800921c:	03d09000 	.word	0x03d09000
 8009220:	003d0900 	.word	0x003d0900
 8009224:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800922e:	d107      	bne.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4618      	mov	r0, r3
 8009236:	f7ff f929 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800923e:	e1c4      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009244:	e1c1      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009246:	4b9d      	ldr	r3, [pc, #628]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009254:	2b04      	cmp	r3, #4
 8009256:	d859      	bhi.n	800930c <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8009258:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009275 	.word	0x08009275
 8009264:	08009285 	.word	0x08009285
 8009268:	0800930d 	.word	0x0800930d
 800926c:	08009295 	.word	0x08009295
 8009270:	0800929b 	.word	0x0800929b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009274:	f107 0318 	add.w	r3, r7, #24
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe ff9d 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009282:	e046      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009284:	f107 030c 	add.w	r3, r7, #12
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff f8ff 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009292:	e03e      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009294:	4b8a      	ldr	r3, [pc, #552]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009296:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009298:	e03b      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800929a:	4b88      	ldr	r3, [pc, #544]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800929c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092a0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a6:	4b85      	ldr	r3, [pc, #532]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d10c      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80092b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d109      	bne.n	80092cc <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b8:	4b80      	ldr	r3, [pc, #512]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	08db      	lsrs	r3, r3, #3
 80092be:	f003 0303 	and.w	r3, r3, #3
 80092c2:	4a80      	ldr	r2, [pc, #512]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80092c4:	fa22 f303 	lsr.w	r3, r2, r3
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092ca:	e01e      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092cc:	4b7b      	ldr	r3, [pc, #492]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d8:	d106      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092e0:	d102      	bne.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80092e2:	4b79      	ldr	r3, [pc, #484]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80092e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092e6:	e010      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092e8:	4b74      	ldr	r3, [pc, #464]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092f4:	d106      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092fc:	d102      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80092fe:	4b73      	ldr	r3, [pc, #460]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8009300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009302:	e002      	b.n	800930a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8009308:	e003      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800930a:	e002      	b.n	8009312 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009310:	bf00      	nop
          }
        }
        break;
 8009312:	e15a      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009314:	4b69      	ldr	r3, [pc, #420]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800931a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800931e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009322:	2b20      	cmp	r3, #32
 8009324:	d022      	beq.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8009326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009328:	2b20      	cmp	r3, #32
 800932a:	d858      	bhi.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	2b18      	cmp	r3, #24
 8009330:	d019      	beq.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8009332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009334:	2b18      	cmp	r3, #24
 8009336:	d852      	bhi.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	2b08      	cmp	r3, #8
 8009342:	d008      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8009344:	e04b      	b.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009346:	f107 0318 	add.w	r3, r7, #24
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe ff34 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009354:	e046      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009356:	f107 030c 	add.w	r3, r7, #12
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff f896 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009364:	e03e      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009366:	4b56      	ldr	r3, [pc, #344]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800936a:	e03b      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800936c:	4b53      	ldr	r3, [pc, #332]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800936e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009372:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009378:	4b50      	ldr	r3, [pc, #320]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b02      	cmp	r3, #2
 8009382:	d10c      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800938a:	4b4c      	ldr	r3, [pc, #304]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	4a4b      	ldr	r2, [pc, #300]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009396:	fa22 f303 	lsr.w	r3, r2, r3
 800939a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800939c:	e01e      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800939e:	4b47      	ldr	r3, [pc, #284]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093aa:	d106      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093b2:	d102      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80093b4:	4b44      	ldr	r3, [pc, #272]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80093b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093b8:	e010      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093ba:	4b40      	ldr	r3, [pc, #256]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093c6:	d106      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093ce:	d102      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093d0:	4b3e      	ldr	r3, [pc, #248]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093d4:	e002      	b.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80093da:	e003      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80093dc:	e002      	b.n	80093e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80093e2:	bf00      	nop
          }
        }
        break;
 80093e4:	e0f1      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80093e6:	4b35      	ldr	r3, [pc, #212]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093ec:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f8:	d023      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80093fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009400:	d858      	bhi.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8009402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009404:	2bc0      	cmp	r3, #192	@ 0xc0
 8009406:	d019      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	2bc0      	cmp	r3, #192	@ 0xc0
 800940c:	d852      	bhi.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8009414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009416:	2b40      	cmp	r3, #64	@ 0x40
 8009418:	d008      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800941a:	e04b      	b.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800941c:	f107 0318 	add.w	r3, r7, #24
 8009420:	4618      	mov	r0, r3
 8009422:	f7fe fec9 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800942a:	e046      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff f82b 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800943a:	e03e      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800943c:	4b20      	ldr	r3, [pc, #128]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800943e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8009440:	e03b      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009442:	4b1e      	ldr	r3, [pc, #120]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009448:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800944c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800944e:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d10c      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d109      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009460:	4b16      	ldr	r3, [pc, #88]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	08db      	lsrs	r3, r3, #3
 8009466:	f003 0303 	and.w	r3, r3, #3
 800946a:	4a16      	ldr	r2, [pc, #88]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800946c:	fa22 f303 	lsr.w	r3, r2, r3
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009472:	e01e      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009474:	4b11      	ldr	r3, [pc, #68]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800947c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009480:	d106      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8009482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009488:	d102      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800948a:	4b0f      	ldr	r3, [pc, #60]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800948c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800948e:	e010      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009498:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800949c:	d106      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094a4:	d102      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094a6:	4b09      	ldr	r3, [pc, #36]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094aa:	e002      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80094b0:	e003      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80094b2:	e002      	b.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80094b8:	bf00      	nop
          }
        }
        break;
 80094ba:	e086      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80094bc:	44020c00 	.word	0x44020c00
 80094c0:	00bb8000 	.word	0x00bb8000
 80094c4:	03d09000 	.word	0x03d09000
 80094c8:	003d0900 	.word	0x003d0900
 80094cc:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80094d0:	4b40      	ldr	r3, [pc, #256]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80094d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80094da:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80094dc:	4b3d      	ldr	r3, [pc, #244]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80094e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094e8:	d105      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80094f0:	4b39      	ldr	r3, [pc, #228]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80094f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094f4:	e031      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80094f6:	4b37      	ldr	r3, [pc, #220]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009502:	d10a      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8009504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009506:	2b10      	cmp	r3, #16
 8009508:	d107      	bne.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800950a:	f107 0318 	add.w	r3, r7, #24
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe fe52 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009518:	e01f      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800951a:	4b2e      	ldr	r3, [pc, #184]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800951c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d106      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	2b20      	cmp	r3, #32
 800952c:	d103      	bne.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800952e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009534:	e011      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009536:	4b27      	ldr	r3, [pc, #156]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800953c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009544:	d106      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8009546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009548:	2b30      	cmp	r3, #48	@ 0x30
 800954a:	d103      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 800954c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009552:	e002      	b.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8009558:	e037      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800955a:	e036      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800955c:	4b1d      	ldr	r3, [pc, #116]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800955e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009562:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009566:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956a:	2b10      	cmp	r3, #16
 800956c:	d107      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800956e:	f107 0318 	add.w	r3, r7, #24
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fe20 	bl	80081b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800957c:	e025      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800957e:	4b15      	ldr	r3, [pc, #84]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800958a:	d10a      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	2b20      	cmp	r3, #32
 8009590:	d107      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009592:	f107 030c 	add.w	r3, r7, #12
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe ff78 	bl	800848c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095a0:	e00f      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80095a2:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ae:	d105      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80095b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b2:	2b30      	cmp	r3, #48	@ 0x30
 80095b4:	d102      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80095b6:	4b08      	ldr	r3, [pc, #32]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80095b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095ba:	e002      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80095c0:	e003      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80095c2:	e002      	b.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80095c4:	2300      	movs	r3, #0
 80095c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80095c8:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80095ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3730      	adds	r7, #48	@ 0x30
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	44020c00 	.word	0x44020c00
 80095d8:	02dc6c00 	.word	0x02dc6c00

080095dc <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80095e4:	4b48      	ldr	r3, [pc, #288]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a47      	ldr	r2, [pc, #284]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80095ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095f0:	f7f9 ff90 	bl	8003514 <HAL_GetTick>
 80095f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80095f6:	e008      	b.n	800960a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80095f8:	f7f9 ff8c 	bl	8003514 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e07a      	b.n	8009700 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800960a:	4b3f      	ldr	r3, [pc, #252]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d1f0      	bne.n	80095f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009616:	4b3c      	ldr	r3, [pc, #240]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6811      	ldr	r1, [r2, #0]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	6852      	ldr	r2, [r2, #4]
 800962a:	0212      	lsls	r2, r2, #8
 800962c:	430a      	orrs	r2, r1
 800962e:	4936      	ldr	r1, [pc, #216]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009630:	4313      	orrs	r3, r2
 8009632:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	3b01      	subs	r3, #1
 800963a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	3b01      	subs	r3, #1
 8009644:	025b      	lsls	r3, r3, #9
 8009646:	b29b      	uxth	r3, r3
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	3b01      	subs	r3, #1
 8009650:	041b      	lsls	r3, r3, #16
 8009652:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	3b01      	subs	r3, #1
 800965e:	061b      	lsls	r3, r3, #24
 8009660:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009664:	4928      	ldr	r1, [pc, #160]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009666:	4313      	orrs	r3, r2
 8009668:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800966a:	4b27      	ldr	r3, [pc, #156]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 800966c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966e:	f023 020c 	bic.w	r2, r3, #12
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	4924      	ldr	r1, [pc, #144]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009678:	4313      	orrs	r3, r2
 800967a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800967c:	4b22      	ldr	r3, [pc, #136]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 800967e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009680:	f023 0220 	bic.w	r2, r3, #32
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	491f      	ldr	r1, [pc, #124]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 800968a:	4313      	orrs	r3, r2
 800968c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800968e:	4b1e      	ldr	r3, [pc, #120]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009696:	491c      	ldr	r1, [pc, #112]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 8009698:	4313      	orrs	r3, r2
 800969a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800969c:	4b1a      	ldr	r3, [pc, #104]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 800969e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a0:	4a19      	ldr	r2, [pc, #100]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096a2:	f023 0310 	bic.w	r3, r3, #16
 80096a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80096a8:	4b17      	ldr	r3, [pc, #92]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096b0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6a12      	ldr	r2, [r2, #32]
 80096b8:	00d2      	lsls	r2, r2, #3
 80096ba:	4913      	ldr	r1, [pc, #76]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80096c0:	4b11      	ldr	r3, [pc, #68]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c4:	4a10      	ldr	r2, [pc, #64]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096c6:	f043 0310 	orr.w	r3, r3, #16
 80096ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80096cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80096d8:	f7f9 ff1c 	bl	8003514 <HAL_GetTick>
 80096dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096de:	e008      	b.n	80096f2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096e0:	f7f9 ff18 	bl	8003514 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d901      	bls.n	80096f2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e006      	b.n	8009700 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80096f2:	4b05      	ldr	r3, [pc, #20]	@ (8009708 <RCCEx_PLL2_Config+0x12c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0f0      	beq.n	80096e0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80096fe:	2300      	movs	r3, #0

}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	44020c00 	.word	0x44020c00

0800970c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e0e7      	b.n	80098ee <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <HAL_SPI_Init+0x2c>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	2b0f      	cmp	r3, #15
 8009732:	d901      	bls.n	8009738 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e0da      	b.n	80098ee <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fd47 	bl	800a1cc <SPI_GetPacketSize>
 800973e:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <HAL_SPI_Init+0x42>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b08      	cmp	r3, #8
 800974c:	d811      	bhi.n	8009772 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009752:	4a69      	ldr	r2, [pc, #420]	@ (80098f8 <HAL_SPI_Init+0x1ec>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d009      	beq.n	800976c <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a67      	ldr	r2, [pc, #412]	@ (80098fc <HAL_SPI_Init+0x1f0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d004      	beq.n	800976c <HAL_SPI_Init+0x60>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a66      	ldr	r2, [pc, #408]	@ (8009900 <HAL_SPI_Init+0x1f4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d104      	bne.n	8009776 <HAL_SPI_Init+0x6a>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b10      	cmp	r3, #16
 8009770:	d901      	bls.n	8009776 <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0bb      	b.n	80098ee <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d106      	bne.n	8009790 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7f9 fa8c 	bl	8002ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2202      	movs	r2, #2
 8009794:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80097b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097bc:	d119      	bne.n	80097f2 <HAL_SPI_Init+0xe6>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c6:	d103      	bne.n	80097d0 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d008      	beq.n	80097e2 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10c      	bne.n	80097f2 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097e0:	d107      	bne.n	80097f2 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80097f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00f      	beq.n	800981e <HAL_SPI_Init+0x112>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d90b      	bls.n	800981e <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e007      	b.n	800982e <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800982c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69da      	ldr	r2, [r3, #28]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	431a      	orrs	r2, r3
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	ea42 0103 	orr.w	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	431a      	orrs	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009882:	431a      	orrs	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	431a      	orrs	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800988e:	431a      	orrs	r2, r3
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009894:	431a      	orrs	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800989a:	ea42 0103 	orr.w	r1, r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 0201 	bic.w	r2, r2, #1
 80098b8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00a      	beq.n	80098dc <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68db      	ldr	r3, [r3, #12]
 80098cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40013000 	.word	0x40013000
 80098fc:	40003800 	.word	0x40003800
 8009900:	40003c00 	.word	0x40003c00

08009904 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b088      	sub	sp, #32
 8009908:	af02      	add	r7, sp, #8
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3320      	adds	r3, #32
 800991a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800991c:	f7f9 fdfa 	bl	8003514 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b01      	cmp	r3, #1
 800992c:	d001      	beq.n	8009932 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800992e:	2302      	movs	r3, #2
 8009930:	e1e5      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <HAL_SPI_Transmit+0x3a>
 8009938:	88fb      	ldrh	r3, [r7, #6]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e1dd      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_SPI_Transmit+0x4c>
 800994c:	2302      	movs	r3, #2
 800994e:	e1d6      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2203      	movs	r2, #3
 800995c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	88fa      	ldrh	r2, [r7, #6]
 800997a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80099a8:	d108      	bne.n	80099bc <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e009      	b.n	80099d0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80099ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	0c1b      	lsrs	r3, r3, #16
 80099d8:	041b      	lsls	r3, r3, #16
 80099da:	88f9      	ldrh	r1, [r7, #6]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	430b      	orrs	r3, r1
 80099e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099fc:	d107      	bne.n	8009a0e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	d956      	bls.n	8009ac4 <HAL_SPI_Transmit+0x1c0>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a8d      	ldr	r2, [pc, #564]	@ (8009c50 <HAL_SPI_Transmit+0x34c>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d04a      	beq.n	8009ab6 <HAL_SPI_Transmit+0x1b2>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a8b      	ldr	r2, [pc, #556]	@ (8009c54 <HAL_SPI_Transmit+0x350>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d045      	beq.n	8009ab6 <HAL_SPI_Transmit+0x1b2>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a8a      	ldr	r2, [pc, #552]	@ (8009c58 <HAL_SPI_Transmit+0x354>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d147      	bne.n	8009ac4 <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009a34:	e03f      	b.n	8009ab6 <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	f003 0302 	and.w	r3, r3, #2
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d114      	bne.n	8009a6e <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6812      	ldr	r2, [r2, #0]
 8009a4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a54:	1d1a      	adds	r2, r3, #4
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	3b01      	subs	r3, #1
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009a6c:	e023      	b.n	8009ab6 <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a6e:	f7f9 fd51 	bl	8003514 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d803      	bhi.n	8009a86 <HAL_SPI_Transmit+0x182>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a84:	d102      	bne.n	8009a8c <HAL_SPI_Transmit+0x188>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d114      	bne.n	8009ab6 <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f000 facf 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e123      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1b9      	bne.n	8009a36 <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009ac2:	e0f6      	b.n	8009cb2 <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	2b07      	cmp	r3, #7
 8009aca:	f240 80eb 	bls.w	8009ca4 <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ace:	e05d      	b.n	8009b8c <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d132      	bne.n	8009b44 <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d918      	bls.n	8009b1c <HAL_SPI_Transmit+0x218>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d014      	beq.n	8009b1c <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6812      	ldr	r2, [r2, #0]
 8009afc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b02:	1d1a      	adds	r2, r3, #4
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	3b02      	subs	r3, #2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009b1a:	e037      	b.n	8009b8c <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b20:	881a      	ldrh	r2, [r3, #0]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b2a:	1c9a      	adds	r2, r3, #2
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009b42:	e023      	b.n	8009b8c <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b44:	f7f9 fce6 	bl	8003514 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d803      	bhi.n	8009b5c <HAL_SPI_Transmit+0x258>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d102      	bne.n	8009b62 <HAL_SPI_Transmit+0x25e>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d114      	bne.n	8009b8c <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 fa64 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e0b8      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d19b      	bne.n	8009ad0 <HAL_SPI_Transmit+0x1cc>
 8009b98:	e08b      	b.n	8009cb2 <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	f003 0302 	and.w	r3, r3, #2
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d159      	bne.n	8009c5c <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d918      	bls.n	8009be6 <HAL_SPI_Transmit+0x2e2>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb8:	2b40      	cmp	r3, #64	@ 0x40
 8009bba:	d914      	bls.n	8009be6 <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6812      	ldr	r2, [r2, #0]
 8009bc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bcc:	1d1a      	adds	r2, r3, #4
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b04      	subs	r3, #4
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009be4:	e05e      	b.n	8009ca4 <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d917      	bls.n	8009c22 <HAL_SPI_Transmit+0x31e>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d013      	beq.n	8009c22 <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bfe:	881a      	ldrh	r2, [r3, #0]
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c08:	1c9a      	adds	r2, r3, #2
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	3b02      	subs	r3, #2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c20:	e040      	b.n	8009ca4 <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3320      	adds	r3, #32
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	3b01      	subs	r3, #1
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009c4c:	e02a      	b.n	8009ca4 <HAL_SPI_Transmit+0x3a0>
 8009c4e:	bf00      	nop
 8009c50:	40013000 	.word	0x40013000
 8009c54:	40003800 	.word	0x40003800
 8009c58:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c5c:	f7f9 fc5a 	bl	8003514 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d803      	bhi.n	8009c74 <HAL_SPI_Transmit+0x370>
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d102      	bne.n	8009c7a <HAL_SPI_Transmit+0x376>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f9d8 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	e02c      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f47f af74 	bne.w	8009b9a <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2108      	movs	r1, #8
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f000 fa57 	bl	800a170 <SPI_WaitOnFlagUntilTimeout>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cce:	f043 0220 	orr.w	r2, r3, #32
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f000 f9a9 	bl	800a030 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3718      	adds	r7, #24
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop

08009d08 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3330      	adds	r3, #48	@ 0x30
 8009d1e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d20:	f7f9 fbf8 	bl	8003514 <HAL_GetTick>
 8009d24:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d001      	beq.n	8009d36 <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 8009d32:	2302      	movs	r3, #2
 8009d34:	e172      	b.n	800a01c <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d002      	beq.n	8009d42 <HAL_SPI_Receive+0x3a>
 8009d3c:	88fb      	ldrh	r3, [r7, #6]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e16a      	b.n	800a01c <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d101      	bne.n	8009d54 <HAL_SPI_Receive+0x4c>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e163      	b.n	800a01c <HAL_SPI_Receive+0x314>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2204      	movs	r2, #4
 8009d60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	88fa      	ldrh	r2, [r7, #6]
 8009d76:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	88fa      	ldrh	r2, [r7, #6]
 8009d7e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009dac:	d108      	bne.n	8009dc0 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	e009      	b.n	8009dd4 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8009dd2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	041b      	lsls	r3, r3, #16
 8009dde:	88f9      	ldrh	r1, [r7, #6]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f042 0201 	orr.w	r2, r2, #1
 8009df6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e00:	d107      	bne.n	8009e12 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d957      	bls.n	8009eca <HAL_SPI_Receive+0x1c2>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a81      	ldr	r2, [pc, #516]	@ (800a024 <HAL_SPI_Receive+0x31c>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d04b      	beq.n	8009ebc <HAL_SPI_Receive+0x1b4>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a7f      	ldr	r2, [pc, #508]	@ (800a028 <HAL_SPI_Receive+0x320>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d046      	beq.n	8009ebc <HAL_SPI_Receive+0x1b4>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a7e      	ldr	r2, [pc, #504]	@ (800a02c <HAL_SPI_Receive+0x324>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d148      	bne.n	8009eca <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009e38:	e040      	b.n	8009ebc <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	695a      	ldr	r2, [r3, #20]
 8009e40:	f248 0308 	movw	r3, #32776	@ 0x8008
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d014      	beq.n	8009e74 <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e52:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009e54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e5a:	1d1a      	adds	r2, r3, #4
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009e72:	e023      	b.n	8009ebc <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e74:	f7f9 fb4e 	bl	8003514 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	683a      	ldr	r2, [r7, #0]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d803      	bhi.n	8009e8c <HAL_SPI_Receive+0x184>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8a:	d102      	bne.n	8009e92 <HAL_SPI_Receive+0x18a>
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d114      	bne.n	8009ebc <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f8cc 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e0af      	b.n	800a01c <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1b8      	bne.n	8009e3a <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009ec8:	e095      	b.n	8009ff6 <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	2b07      	cmp	r3, #7
 8009ed0:	f240 808b 	bls.w	8009fea <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009ed4:	e03f      	b.n	8009f56 <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d114      	bne.n	8009f0e <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	8812      	ldrh	r2, [r2, #0]
 8009eec:	b292      	uxth	r2, r2
 8009eee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ef4:	1c9a      	adds	r2, r3, #2
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009f0c:	e023      	b.n	8009f56 <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f0e:	f7f9 fb01 	bl	8003514 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d803      	bhi.n	8009f26 <HAL_SPI_Receive+0x21e>
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f24:	d102      	bne.n	8009f2c <HAL_SPI_Receive+0x224>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d114      	bne.n	8009f56 <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 f87f 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e062      	b.n	800a01c <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1b9      	bne.n	8009ed6 <HAL_SPI_Receive+0x1ce>
 8009f62:	e048      	b.n	8009ff6 <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d117      	bne.n	8009fa2 <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f7e:	7812      	ldrb	r2, [r2, #0]
 8009f80:	b2d2      	uxtb	r2, r2
 8009f82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8009fa0:	e023      	b.n	8009fea <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fa2:	f7f9 fab7 	bl	8003514 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d803      	bhi.n	8009fba <HAL_SPI_Receive+0x2b2>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d102      	bne.n	8009fc0 <HAL_SPI_Receive+0x2b8>
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d114      	bne.n	8009fea <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f835 	bl	800a030 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	e018      	b.n	800a01c <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1b6      	bne.n	8009f64 <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 f81a 	bl	800a030 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 800a01a:	2300      	movs	r3, #0
  }
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40013000 	.word	0x40013000
 800a028:	40003800 	.word	0x40003800
 800a02c:	40003c00 	.word	0x40003c00

0800a030 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699a      	ldr	r2, [r3, #24]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f042 0208 	orr.w	r2, r2, #8
 800a04e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	699a      	ldr	r2, [r3, #24]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0210 	orr.w	r2, r2, #16
 800a05e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 0201 	bic.w	r2, r2, #1
 800a06e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	6812      	ldr	r2, [r2, #0]
 800a07a:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a092:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	2b04      	cmp	r3, #4
 800a09e:	d014      	beq.n	800a0ca <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00f      	beq.n	800a0ca <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	699a      	ldr	r2, [r3, #24]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0220 	orr.w	r2, r2, #32
 800a0c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d014      	beq.n	800a100 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00f      	beq.n	800a100 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0e6:	f043 0204 	orr.w	r2, r3, #4
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0fe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00f      	beq.n	800a12a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a110:	f043 0201 	orr.w	r2, r3, #1
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a128:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00f      	beq.n	800a154 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a13a:	f043 0208 	orr.w	r2, r3, #8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a152:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800a164:	bf00      	nop
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4613      	mov	r3, r2
 800a17e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a180:	e010      	b.n	800a1a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a182:	f7f9 f9c7 	bl	8003514 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d803      	bhi.n	800a19a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a198:	d102      	bne.n	800a1a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e00f      	b.n	800a1c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	695a      	ldr	r2, [r3, #20]
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2301      	moveq	r3, #1
 800a1b6:	2300      	movne	r3, #0
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d0df      	beq.n	800a182 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3710      	adds	r7, #16
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d8:	095b      	lsrs	r3, r3, #5
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	3307      	adds	r3, #7
 800a1ea:	08db      	lsrs	r3, r3, #3
 800a1ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e049      	b.n	800a2a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7f8 fdcb 	bl	8002dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2202      	movs	r2, #2
 800a232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3304      	adds	r3, #4
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f000 fd8b 	bl	800ad5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2201      	movs	r2, #1
 800a25a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d001      	beq.n	800a2c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e033      	b.n	800a330 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a19      	ldr	r2, [pc, #100]	@ (800a33c <HAL_TIM_Base_Start+0x8c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d009      	beq.n	800a2ee <HAL_TIM_Base_Start+0x3e>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e2:	d004      	beq.n	800a2ee <HAL_TIM_Base_Start+0x3e>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a15      	ldr	r2, [pc, #84]	@ (800a340 <HAL_TIM_Base_Start+0x90>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d115      	bne.n	800a31a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <HAL_TIM_Base_Start+0x94>)
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2b06      	cmp	r3, #6
 800a2fe:	d015      	beq.n	800a32c <HAL_TIM_Base_Start+0x7c>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a306:	d011      	beq.n	800a32c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f042 0201 	orr.w	r2, r2, #1
 800a316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a318:	e008      	b.n	800a32c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f042 0201 	orr.w	r2, r2, #1
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	e000      	b.n	800a32e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a32c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	40012c00 	.word	0x40012c00
 800a340:	40000400 	.word	0x40000400
 800a344:	00010007 	.word	0x00010007

0800a348 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6a1a      	ldr	r2, [r3, #32]
 800a356:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a35a:	4013      	ands	r3, r2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10f      	bne.n	800a380 <HAL_TIM_Base_Stop+0x38>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a1a      	ldr	r2, [r3, #32]
 800a366:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a36a:	4013      	ands	r3, r2
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d107      	bne.n	800a380 <HAL_TIM_Base_Stop+0x38>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e049      	b.n	800a43c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f841 	bl	800a444 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f000 fcc1 	bl	800ad5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a44c:	bf00      	nop
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <HAL_TIM_PWM_Start+0x24>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	bf14      	ite	ne
 800a474:	2301      	movne	r3, #1
 800a476:	2300      	moveq	r3, #0
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	e03c      	b.n	800a4f6 <HAL_TIM_PWM_Start+0x9e>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b04      	cmp	r3, #4
 800a480:	d109      	bne.n	800a496 <HAL_TIM_PWM_Start+0x3e>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	bf14      	ite	ne
 800a48e:	2301      	movne	r3, #1
 800a490:	2300      	moveq	r3, #0
 800a492:	b2db      	uxtb	r3, r3
 800a494:	e02f      	b.n	800a4f6 <HAL_TIM_PWM_Start+0x9e>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d109      	bne.n	800a4b0 <HAL_TIM_PWM_Start+0x58>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	bf14      	ite	ne
 800a4a8:	2301      	movne	r3, #1
 800a4aa:	2300      	moveq	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	e022      	b.n	800a4f6 <HAL_TIM_PWM_Start+0x9e>
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b0c      	cmp	r3, #12
 800a4b4:	d109      	bne.n	800a4ca <HAL_TIM_PWM_Start+0x72>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	bf14      	ite	ne
 800a4c2:	2301      	movne	r3, #1
 800a4c4:	2300      	moveq	r3, #0
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	e015      	b.n	800a4f6 <HAL_TIM_PWM_Start+0x9e>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d109      	bne.n	800a4e4 <HAL_TIM_PWM_Start+0x8c>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	bf14      	ite	ne
 800a4dc:	2301      	movne	r3, #1
 800a4de:	2300      	moveq	r3, #0
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	e008      	b.n	800a4f6 <HAL_TIM_PWM_Start+0x9e>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	bf14      	ite	ne
 800a4f0:	2301      	movne	r3, #1
 800a4f2:	2300      	moveq	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e06f      	b.n	800a5de <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <HAL_TIM_PWM_Start+0xb6>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2202      	movs	r2, #2
 800a508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a50c:	e023      	b.n	800a556 <HAL_TIM_PWM_Start+0xfe>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b04      	cmp	r3, #4
 800a512:	d104      	bne.n	800a51e <HAL_TIM_PWM_Start+0xc6>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2202      	movs	r2, #2
 800a518:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a51c:	e01b      	b.n	800a556 <HAL_TIM_PWM_Start+0xfe>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b08      	cmp	r3, #8
 800a522:	d104      	bne.n	800a52e <HAL_TIM_PWM_Start+0xd6>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a52c:	e013      	b.n	800a556 <HAL_TIM_PWM_Start+0xfe>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b0c      	cmp	r3, #12
 800a532:	d104      	bne.n	800a53e <HAL_TIM_PWM_Start+0xe6>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a53c:	e00b      	b.n	800a556 <HAL_TIM_PWM_Start+0xfe>
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b10      	cmp	r3, #16
 800a542:	d104      	bne.n	800a54e <HAL_TIM_PWM_Start+0xf6>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a54c:	e003      	b.n	800a556 <HAL_TIM_PWM_Start+0xfe>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2202      	movs	r2, #2
 800a552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2201      	movs	r2, #1
 800a55c:	6839      	ldr	r1, [r7, #0]
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 ff48 	bl	800b3f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1f      	ldr	r2, [pc, #124]	@ (800a5e8 <HAL_TIM_PWM_Start+0x190>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d107      	bne.n	800a57e <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a57c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a19      	ldr	r2, [pc, #100]	@ (800a5e8 <HAL_TIM_PWM_Start+0x190>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d009      	beq.n	800a59c <HAL_TIM_PWM_Start+0x144>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a590:	d004      	beq.n	800a59c <HAL_TIM_PWM_Start+0x144>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a15      	ldr	r2, [pc, #84]	@ (800a5ec <HAL_TIM_PWM_Start+0x194>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d115      	bne.n	800a5c8 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	4b13      	ldr	r3, [pc, #76]	@ (800a5f0 <HAL_TIM_PWM_Start+0x198>)
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2b06      	cmp	r3, #6
 800a5ac:	d015      	beq.n	800a5da <HAL_TIM_PWM_Start+0x182>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5b4:	d011      	beq.n	800a5da <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f042 0201 	orr.w	r2, r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c6:	e008      	b.n	800a5da <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0201 	orr.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e000      	b.n	800a5dc <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40012c00 	.word	0x40012c00
 800a5ec:	40000400 	.word	0x40000400
 800a5f0:	00010007 	.word	0x00010007

0800a5f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d020      	beq.n	800a658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01b      	beq.n	800a658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f06f 0202 	mvn.w	r2, #2
 800a628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f003 0303 	and.w	r3, r3, #3
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fb6e 	bl	800ad20 <HAL_TIM_IC_CaptureCallback>
 800a644:	e005      	b.n	800a652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 fb60 	bl	800ad0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fb71 	bl	800ad34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	f003 0304 	and.w	r3, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d020      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01b      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f06f 0204 	mvn.w	r2, #4
 800a674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2202      	movs	r2, #2
 800a67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fb48 	bl	800ad20 <HAL_TIM_IC_CaptureCallback>
 800a690:	e005      	b.n	800a69e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fb3a 	bl	800ad0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fb4b 	bl	800ad34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	f003 0308 	and.w	r3, r3, #8
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d020      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d01b      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f06f 0208 	mvn.w	r2, #8
 800a6c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2204      	movs	r2, #4
 800a6c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fb22 	bl	800ad20 <HAL_TIM_IC_CaptureCallback>
 800a6dc:	e005      	b.n	800a6ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fb14 	bl	800ad0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fb25 	bl	800ad34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	f003 0310 	and.w	r3, r3, #16
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d020      	beq.n	800a73c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b00      	cmp	r3, #0
 800a702:	d01b      	beq.n	800a73c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0210 	mvn.w	r2, #16
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2208      	movs	r2, #8
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fafc 	bl	800ad20 <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 faee 	bl	800ad0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 faff 	bl	800ad34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00c      	beq.n	800a760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d007      	beq.n	800a760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f06f 0201 	mvn.w	r2, #1
 800a758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 facc 	bl	800acf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a766:	2b00      	cmp	r3, #0
 800a768:	d104      	bne.n	800a774 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00c      	beq.n	800a78e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 ff51 	bl	800b630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d007      	beq.n	800a7b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a7aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 ff49 	bl	800b644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00c      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d007      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fab9 	bl	800ad48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	f003 0320 	and.w	r3, r3, #32
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00c      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f003 0320 	and.w	r3, r3, #32
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f06f 0220 	mvn.w	r2, #32
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 ff11 	bl	800b61c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00c      	beq.n	800a81e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 ff1d 	bl	800b658 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00c      	beq.n	800a842 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d007      	beq.n	800a842 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a83a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 ff15 	bl	800b66c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00c      	beq.n	800a866 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d007      	beq.n	800a866 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 ff0d 	bl	800b680 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00c      	beq.n	800a88a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d007      	beq.n	800a88a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 ff05 	bl	800b694 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
	...

0800a894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e0ff      	b.n	800aab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b14      	cmp	r3, #20
 800a8be:	f200 80f0 	bhi.w	800aaa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c8:	0800a91d 	.word	0x0800a91d
 800a8cc:	0800aaa3 	.word	0x0800aaa3
 800a8d0:	0800aaa3 	.word	0x0800aaa3
 800a8d4:	0800aaa3 	.word	0x0800aaa3
 800a8d8:	0800a95d 	.word	0x0800a95d
 800a8dc:	0800aaa3 	.word	0x0800aaa3
 800a8e0:	0800aaa3 	.word	0x0800aaa3
 800a8e4:	0800aaa3 	.word	0x0800aaa3
 800a8e8:	0800a99f 	.word	0x0800a99f
 800a8ec:	0800aaa3 	.word	0x0800aaa3
 800a8f0:	0800aaa3 	.word	0x0800aaa3
 800a8f4:	0800aaa3 	.word	0x0800aaa3
 800a8f8:	0800a9df 	.word	0x0800a9df
 800a8fc:	0800aaa3 	.word	0x0800aaa3
 800a900:	0800aaa3 	.word	0x0800aaa3
 800a904:	0800aaa3 	.word	0x0800aaa3
 800a908:	0800aa21 	.word	0x0800aa21
 800a90c:	0800aaa3 	.word	0x0800aaa3
 800a910:	0800aaa3 	.word	0x0800aaa3
 800a914:	0800aaa3 	.word	0x0800aaa3
 800a918:	0800aa61 	.word	0x0800aa61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	68b9      	ldr	r1, [r7, #8]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fa80 	bl	800ae28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699a      	ldr	r2, [r3, #24]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f042 0208 	orr.w	r2, r2, #8
 800a936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699a      	ldr	r2, [r3, #24]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f022 0204 	bic.w	r2, r2, #4
 800a946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6999      	ldr	r1, [r3, #24]
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	691a      	ldr	r2, [r3, #16]
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	430a      	orrs	r2, r1
 800a958:	619a      	str	r2, [r3, #24]
      break;
 800a95a:	e0a5      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68b9      	ldr	r1, [r7, #8]
 800a962:	4618      	mov	r0, r3
 800a964:	f000 fac8 	bl	800aef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	699a      	ldr	r2, [r3, #24]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	699a      	ldr	r2, [r3, #24]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6999      	ldr	r1, [r3, #24]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	021a      	lsls	r2, r3, #8
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	619a      	str	r2, [r3, #24]
      break;
 800a99c:	e084      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fb15 	bl	800afd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	69da      	ldr	r2, [r3, #28]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0208 	orr.w	r2, r2, #8
 800a9b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69da      	ldr	r2, [r3, #28]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f022 0204 	bic.w	r2, r2, #4
 800a9c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	69d9      	ldr	r1, [r3, #28]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	691a      	ldr	r2, [r3, #16]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	430a      	orrs	r2, r1
 800a9da:	61da      	str	r2, [r3, #28]
      break;
 800a9dc:	e064      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f000 fb61 	bl	800b0ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69da      	ldr	r2, [r3, #28]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	69da      	ldr	r2, [r3, #28]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	69d9      	ldr	r1, [r3, #28]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	021a      	lsls	r2, r3, #8
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	61da      	str	r2, [r3, #28]
      break;
 800aa1e:	e043      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fbae 	bl	800b188 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f042 0208 	orr.w	r2, r2, #8
 800aa3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0204 	bic.w	r2, r2, #4
 800aa4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	691a      	ldr	r2, [r3, #16]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	430a      	orrs	r2, r1
 800aa5c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aa5e:	e023      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fbda 	bl	800b220 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa8a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	021a      	lsls	r2, r3, #8
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	430a      	orrs	r2, r1
 800aa9e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aaa0:	e002      	b.n	800aaa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3718      	adds	r7, #24
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop

0800aabc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_TIM_ConfigClockSource+0x1c>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e0fe      	b.n	800acd6 <HAL_TIM_ConfigClockSource+0x21a>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800aaf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab14:	f000 80c9 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab1c:	f200 80ce 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab20:	4a6f      	ldr	r2, [pc, #444]	@ (800ace0 <HAL_TIM_ConfigClockSource+0x224>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	f000 80c1 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab28:	4a6d      	ldr	r2, [pc, #436]	@ (800ace0 <HAL_TIM_ConfigClockSource+0x224>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	f200 80c6 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab30:	4a6c      	ldr	r2, [pc, #432]	@ (800ace4 <HAL_TIM_ConfigClockSource+0x228>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	f000 80b9 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab38:	4a6a      	ldr	r2, [pc, #424]	@ (800ace4 <HAL_TIM_ConfigClockSource+0x228>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	f200 80be 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab40:	4a69      	ldr	r2, [pc, #420]	@ (800ace8 <HAL_TIM_ConfigClockSource+0x22c>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	f000 80b1 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab48:	4a67      	ldr	r2, [pc, #412]	@ (800ace8 <HAL_TIM_ConfigClockSource+0x22c>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	f200 80b6 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab50:	4a66      	ldr	r2, [pc, #408]	@ (800acec <HAL_TIM_ConfigClockSource+0x230>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	f000 80a9 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab58:	4a64      	ldr	r2, [pc, #400]	@ (800acec <HAL_TIM_ConfigClockSource+0x230>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	f200 80ae 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab60:	4a63      	ldr	r2, [pc, #396]	@ (800acf0 <HAL_TIM_ConfigClockSource+0x234>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	f000 80a1 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab68:	4a61      	ldr	r2, [pc, #388]	@ (800acf0 <HAL_TIM_ConfigClockSource+0x234>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	f200 80a6 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab70:	4a60      	ldr	r2, [pc, #384]	@ (800acf4 <HAL_TIM_ConfigClockSource+0x238>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	f000 8099 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab78:	4a5e      	ldr	r2, [pc, #376]	@ (800acf4 <HAL_TIM_ConfigClockSource+0x238>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	f200 809e 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab84:	f000 8091 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab8c:	f200 8096 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800ab90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab94:	f000 8089 	beq.w	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800ab98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab9c:	f200 808e 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800aba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aba4:	d03e      	beq.n	800ac24 <HAL_TIM_ConfigClockSource+0x168>
 800aba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abaa:	f200 8087 	bhi.w	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abb2:	f000 8086 	beq.w	800acc2 <HAL_TIM_ConfigClockSource+0x206>
 800abb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abba:	d87f      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abbc:	2b70      	cmp	r3, #112	@ 0x70
 800abbe:	d01a      	beq.n	800abf6 <HAL_TIM_ConfigClockSource+0x13a>
 800abc0:	2b70      	cmp	r3, #112	@ 0x70
 800abc2:	d87b      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abc4:	2b60      	cmp	r3, #96	@ 0x60
 800abc6:	d050      	beq.n	800ac6a <HAL_TIM_ConfigClockSource+0x1ae>
 800abc8:	2b60      	cmp	r3, #96	@ 0x60
 800abca:	d877      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abcc:	2b50      	cmp	r3, #80	@ 0x50
 800abce:	d03c      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x18e>
 800abd0:	2b50      	cmp	r3, #80	@ 0x50
 800abd2:	d873      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abd4:	2b40      	cmp	r3, #64	@ 0x40
 800abd6:	d058      	beq.n	800ac8a <HAL_TIM_ConfigClockSource+0x1ce>
 800abd8:	2b40      	cmp	r3, #64	@ 0x40
 800abda:	d86f      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abdc:	2b30      	cmp	r3, #48	@ 0x30
 800abde:	d064      	beq.n	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800abe0:	2b30      	cmp	r3, #48	@ 0x30
 800abe2:	d86b      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d060      	beq.n	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800abe8:	2b20      	cmp	r3, #32
 800abea:	d867      	bhi.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d05c      	beq.n	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d05a      	beq.n	800acaa <HAL_TIM_ConfigClockSource+0x1ee>
 800abf4:	e062      	b.n	800acbc <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac06:	f000 fbd5 	bl	800b3b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ac18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	609a      	str	r2, [r3, #8]
      break;
 800ac22:	e04f      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ac34:	f000 fbbe 	bl	800b3b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac46:	609a      	str	r2, [r3, #8]
      break;
 800ac48:	e03c      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac56:	461a      	mov	r2, r3
 800ac58:	f000 fb30 	bl	800b2bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2150      	movs	r1, #80	@ 0x50
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fb89 	bl	800b37a <TIM_ITRx_SetConfig>
      break;
 800ac68:	e02c      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac76:	461a      	mov	r2, r3
 800ac78:	f000 fb4f 	bl	800b31a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2160      	movs	r1, #96	@ 0x60
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fb79 	bl	800b37a <TIM_ITRx_SetConfig>
      break;
 800ac88:	e01c      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac96:	461a      	mov	r2, r3
 800ac98:	f000 fb10 	bl	800b2bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2140      	movs	r1, #64	@ 0x40
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 fb69 	bl	800b37a <TIM_ITRx_SetConfig>
      break;
 800aca8:	e00c      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4619      	mov	r1, r3
 800acb4:	4610      	mov	r0, r2
 800acb6:	f000 fb60 	bl	800b37a <TIM_ITRx_SetConfig>
      break;
 800acba:	e003      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	73fb      	strb	r3, [r7, #15]
      break;
 800acc0:	e000      	b.n	800acc4 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800acc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	00100070 	.word	0x00100070
 800ace4:	00100060 	.word	0x00100060
 800ace8:	00100050 	.word	0x00100050
 800acec:	00100040 	.word	0x00100040
 800acf0:	00100030 	.word	0x00100030
 800acf4:	00100020 	.word	0x00100020

0800acf8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a2c      	ldr	r2, [pc, #176]	@ (800ae20 <TIM_Base_SetConfig+0xc4>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d007      	beq.n	800ad84 <TIM_Base_SetConfig+0x28>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad7a:	d003      	beq.n	800ad84 <TIM_Base_SetConfig+0x28>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4a29      	ldr	r2, [pc, #164]	@ (800ae24 <TIM_Base_SetConfig+0xc8>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d108      	bne.n	800ad96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a21      	ldr	r2, [pc, #132]	@ (800ae20 <TIM_Base_SetConfig+0xc4>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <TIM_Base_SetConfig+0x52>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ada4:	d003      	beq.n	800adae <TIM_Base_SetConfig+0x52>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a1e      	ldr	r2, [pc, #120]	@ (800ae24 <TIM_Base_SetConfig+0xc8>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d108      	bne.n	800adc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a0e      	ldr	r2, [pc, #56]	@ (800ae20 <TIM_Base_SetConfig+0xc4>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d103      	bne.n	800adf4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	691a      	ldr	r2, [r3, #16]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2201      	movs	r2, #1
 800adf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d105      	bne.n	800ae12 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f023 0201 	bic.w	r2, r3, #1
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	611a      	str	r2, [r3, #16]
  }
}
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	40012c00 	.word	0x40012c00
 800ae24:	40000400 	.word	0x40000400

0800ae28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b087      	sub	sp, #28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	f023 0201 	bic.w	r2, r3, #1
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f023 0302 	bic.w	r3, r3, #2
 800ae74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	697a      	ldr	r2, [r7, #20]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a1c      	ldr	r2, [pc, #112]	@ (800aef4 <TIM_OC1_SetConfig+0xcc>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d10c      	bne.n	800aea2 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f023 0308 	bic.w	r3, r3, #8
 800ae8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f023 0304 	bic.w	r3, r3, #4
 800aea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a13      	ldr	r2, [pc, #76]	@ (800aef4 <TIM_OC1_SetConfig+0xcc>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d111      	bne.n	800aece <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aeb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aeb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	621a      	str	r2, [r3, #32]
}
 800aee8:	bf00      	nop
 800aeea:	371c      	adds	r7, #28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr
 800aef4:	40012c00 	.word	0x40012c00

0800aef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	f023 0210 	bic.w	r2, r3, #16
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800af26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	021b      	lsls	r3, r3, #8
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4313      	orrs	r3, r2
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f023 0320 	bic.w	r3, r3, #32
 800af46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	011b      	lsls	r3, r3, #4
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	4313      	orrs	r3, r2
 800af52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4a1e      	ldr	r2, [pc, #120]	@ (800afd0 <TIM_OC2_SetConfig+0xd8>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d10d      	bne.n	800af78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	4313      	orrs	r3, r2
 800af6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a15      	ldr	r2, [pc, #84]	@ (800afd0 <TIM_OC2_SetConfig+0xd8>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d113      	bne.n	800afa8 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	693a      	ldr	r2, [r7, #16]
 800af98:	4313      	orrs	r3, r2
 800af9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68fa      	ldr	r2, [r7, #12]
 800afb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	697a      	ldr	r2, [r7, #20]
 800afc0:	621a      	str	r2, [r3, #32]
}
 800afc2:	bf00      	nop
 800afc4:	371c      	adds	r7, #28
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40012c00 	.word	0x40012c00

0800afd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a1b      	ldr	r3, [r3, #32]
 800afe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a1b      	ldr	r3, [r3, #32]
 800afe8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	4313      	orrs	r3, r2
 800b018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	697a      	ldr	r2, [r7, #20]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a8 <TIM_OC3_SetConfig+0xd4>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d10d      	bne.n	800b052 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b03c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a14      	ldr	r2, [pc, #80]	@ (800b0a8 <TIM_OC3_SetConfig+0xd4>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d113      	bne.n	800b082 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	011b      	lsls	r3, r3, #4
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	4313      	orrs	r3, r2
 800b074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	693a      	ldr	r2, [r7, #16]
 800b07e:	4313      	orrs	r3, r2
 800b080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	621a      	str	r2, [r3, #32]
}
 800b09c:	bf00      	nop
 800b09e:	371c      	adds	r7, #28
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	40012c00 	.word	0x40012c00

0800b0ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b087      	sub	sp, #28
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	031b      	lsls	r3, r3, #12
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	4313      	orrs	r3, r2
 800b106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a1e      	ldr	r2, [pc, #120]	@ (800b184 <TIM_OC4_SetConfig+0xd8>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d10d      	bne.n	800b12c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	031b      	lsls	r3, r3, #12
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	4313      	orrs	r3, r2
 800b122:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b12a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a15      	ldr	r2, [pc, #84]	@ (800b184 <TIM_OC4_SetConfig+0xd8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d113      	bne.n	800b15c <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b13a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b142:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	019b      	lsls	r3, r3, #6
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	019b      	lsls	r3, r3, #6
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	4313      	orrs	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	621a      	str	r2, [r3, #32]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	40012c00 	.word	0x40012c00

0800b188 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b188:	b480      	push	{r7}
 800b18a:	b087      	sub	sp, #28
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b1cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	041b      	lsls	r3, r3, #16
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b21c <TIM_OC5_SetConfig+0x94>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d109      	bne.n	800b1f6 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b1e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	621a      	str	r2, [r3, #32]
}
 800b210:	bf00      	nop
 800b212:	371c      	adds	r7, #28
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	40012c00 	.word	0x40012c00

0800b220 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b220:	b480      	push	{r7}
 800b222:	b087      	sub	sp, #28
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a1b      	ldr	r3, [r3, #32]
 800b22e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a1b      	ldr	r3, [r3, #32]
 800b234:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b24e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	021b      	lsls	r3, r3, #8
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	4313      	orrs	r3, r2
 800b25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	051b      	lsls	r3, r3, #20
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a10      	ldr	r2, [pc, #64]	@ (800b2b8 <TIM_OC6_SetConfig+0x98>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d109      	bne.n	800b290 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	029b      	lsls	r3, r3, #10
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	621a      	str	r2, [r3, #32]
}
 800b2aa:	bf00      	nop
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	40012c00 	.word	0x40012c00

0800b2bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b087      	sub	sp, #28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	f023 0201 	bic.w	r2, r3, #1
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b2e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	011b      	lsls	r3, r3, #4
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f023 030a 	bic.w	r3, r3, #10
 800b2f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	621a      	str	r2, [r3, #32]
}
 800b30e:	bf00      	nop
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b087      	sub	sp, #28
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	f023 0210 	bic.w	r2, r3, #16
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	031b      	lsls	r3, r3, #12
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	4313      	orrs	r3, r2
 800b34e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	4313      	orrs	r3, r2
 800b360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	621a      	str	r2, [r3, #32]
}
 800b36e:	bf00      	nop
 800b370:	371c      	adds	r7, #28
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b085      	sub	sp, #20
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b394:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	f043 0307 	orr.w	r3, r3, #7
 800b3a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	609a      	str	r2, [r3, #8]
}
 800b3a8:	bf00      	nop
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	021a      	lsls	r2, r3, #8
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	609a      	str	r2, [r3, #8]
}
 800b3e8:	bf00      	nop
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f003 031f 	and.w	r3, r3, #31
 800b406:	2201      	movs	r2, #1
 800b408:	fa02 f303 	lsl.w	r3, r2, r3
 800b40c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6a1a      	ldr	r2, [r3, #32]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	43db      	mvns	r3, r3
 800b416:	401a      	ands	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1a      	ldr	r2, [r3, #32]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	fa01 f303 	lsl.w	r3, r1, r3
 800b42c:	431a      	orrs	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	621a      	str	r2, [r3, #32]
}
 800b432:	bf00      	nop
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
	...

0800b440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b450:	2b01      	cmp	r3, #1
 800b452:	d101      	bne.n	800b458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b454:	2302      	movs	r3, #2
 800b456:	e051      	b.n	800b4fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2202      	movs	r2, #2
 800b464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a22      	ldr	r2, [pc, #136]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d108      	bne.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b488:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	4313      	orrs	r3, r2
 800b492:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b49a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b49e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a14      	ldr	r2, [pc, #80]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d009      	beq.n	800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4c4:	d004      	beq.n	800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a10      	ldr	r2, [pc, #64]	@ (800b50c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d10c      	bne.n	800b4ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	40012c00 	.word	0x40012c00
 800b50c:	40000400 	.word	0x40000400

0800b510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b528:	2302      	movs	r3, #2
 800b52a:	e06e      	b.n	800b60a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4313      	orrs	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	4313      	orrs	r3, r2
 800b578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	4313      	orrs	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	699b      	ldr	r3, [r3, #24]
 800b5a0:	041b      	lsls	r3, r3, #16
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a17      	ldr	r2, [pc, #92]	@ (800b618 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d11c      	bne.n	800b5f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c8:	051b      	lsls	r3, r3, #20
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	40012c00 	.word	0x40012c00

0800b61c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b624:	bf00      	nop
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr

0800b630 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e04a      	b.n	800b750 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d106      	bne.n	800b6d2 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7f7 fc3b 	bl	8002f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2224      	movs	r2, #36	@ 0x24
 800b6d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f022 0201 	bic.w	r2, r2, #1
 800b6e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d002      	beq.n	800b6f8 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fbcc 	bl	800be90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fa4b 	bl	800bb94 <UART_SetConfig>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b01      	cmp	r3, #1
 800b702:	d101      	bne.n	800b708 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	e023      	b.n	800b750 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b716:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	689a      	ldr	r2, [r3, #8]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800b726:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0208 	orr.w	r2, r2, #8
 800b736:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0201 	orr.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fc43 	bl	800bfd4 <UART_CheckIdleState>
 800b74e:	4603      	mov	r3, r0
}
 800b750:	4618      	mov	r0, r3
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b08a      	sub	sp, #40	@ 0x28
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	4613      	mov	r3, r2
 800b766:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b76e:	2b20      	cmp	r3, #32
 800b770:	f040 808b 	bne.w	800b88a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <HAL_UART_Transmit+0x28>
 800b77a:	88fb      	ldrh	r3, [r7, #6]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b780:	2301      	movs	r3, #1
 800b782:	e083      	b.n	800b88c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78e:	2b80      	cmp	r3, #128	@ 0x80
 800b790:	d107      	bne.n	800b7a2 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689a      	ldr	r2, [r3, #8]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b7a0:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2221      	movs	r2, #33	@ 0x21
 800b7ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b7b2:	f7f7 feaf 	bl	8003514 <HAL_GetTick>
 800b7b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	88fa      	ldrh	r2, [r7, #6]
 800b7bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	88fa      	ldrh	r2, [r7, #6]
 800b7c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7d0:	d108      	bne.n	800b7e4 <HAL_UART_Transmit+0x8c>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d104      	bne.n	800b7e4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	61bb      	str	r3, [r7, #24]
 800b7e2:	e003      	b.n	800b7ec <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b7ec:	e030      	b.n	800b850 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	2180      	movs	r1, #128	@ 0x80
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 fc95 	bl	800c128 <UART_WaitOnFlagUntilTimeout>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d005      	beq.n	800b810 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e03d      	b.n	800b88c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	461a      	mov	r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b824:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	3302      	adds	r3, #2
 800b82a:	61bb      	str	r3, [r7, #24]
 800b82c:	e007      	b.n	800b83e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	781a      	ldrb	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	3301      	adds	r3, #1
 800b83c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b844:	b29b      	uxth	r3, r3
 800b846:	3b01      	subs	r3, #1
 800b848:	b29a      	uxth	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b856:	b29b      	uxth	r3, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1c8      	bne.n	800b7ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2200      	movs	r2, #0
 800b864:	2140      	movs	r1, #64	@ 0x40
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f000 fc5e 	bl	800c128 <UART_WaitOnFlagUntilTimeout>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2220      	movs	r2, #32
 800b876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	e006      	b.n	800b88c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	e000      	b.n	800b88c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b88a:	2302      	movs	r3, #2
  }
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3720      	adds	r7, #32
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08a      	sub	sp, #40	@ 0x28
 800b898:	af02      	add	r7, sp, #8
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	f040 80c4 	bne.w	800ba38 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <HAL_UART_Receive+0x28>
 800b8b6:	88fb      	ldrh	r3, [r7, #6]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e0bc      	b.n	800ba3a <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8ca:	2b40      	cmp	r3, #64	@ 0x40
 800b8cc:	d107      	bne.n	800b8de <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8dc:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2222      	movs	r2, #34	@ 0x22
 800b8ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8f4:	f7f7 fe0e 	bl	8003514 <HAL_GetTick>
 800b8f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	88fa      	ldrh	r2, [r7, #6]
 800b8fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	88fa      	ldrh	r2, [r7, #6]
 800b906:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b912:	d10e      	bne.n	800b932 <HAL_UART_Receive+0x9e>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d105      	bne.n	800b928 <HAL_UART_Receive+0x94>
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b922:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b926:	e02d      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	22ff      	movs	r2, #255	@ 0xff
 800b92c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b930:	e028      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10d      	bne.n	800b956 <HAL_UART_Receive+0xc2>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d104      	bne.n	800b94c <HAL_UART_Receive+0xb8>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	22ff      	movs	r2, #255	@ 0xff
 800b946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b94a:	e01b      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	227f      	movs	r2, #127	@ 0x7f
 800b950:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b954:	e016      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b95e:	d10d      	bne.n	800b97c <HAL_UART_Receive+0xe8>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d104      	bne.n	800b972 <HAL_UART_Receive+0xde>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	227f      	movs	r2, #127	@ 0x7f
 800b96c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b970:	e008      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	223f      	movs	r2, #63	@ 0x3f
 800b976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800b97a:	e003      	b.n	800b984 <HAL_UART_Receive+0xf0>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b98a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b994:	d108      	bne.n	800b9a8 <HAL_UART_Receive+0x114>
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d104      	bne.n	800b9a8 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	61bb      	str	r3, [r7, #24]
 800b9a6:	e003      	b.n	800b9b0 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b9b0:	e036      	b.n	800ba20 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2120      	movs	r1, #32
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 fbb3 	bl	800c128 <UART_WaitOnFlagUntilTimeout>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d005      	beq.n	800b9d4 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e032      	b.n	800ba3a <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	8a7b      	ldrh	r3, [r7, #18]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	3302      	adds	r3, #2
 800b9f0:	61bb      	str	r3, [r7, #24]
 800b9f2:	e00c      	b.n	800ba0e <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	8a7b      	ldrh	r3, [r7, #18]
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	4013      	ands	r3, r2
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1c2      	bne.n	800b9b2 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2220      	movs	r2, #32
 800ba30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	e000      	b.n	800ba3a <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800ba38:	2302      	movs	r3, #2
  }
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b08f      	sub	sp, #60	@ 0x3c
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d101      	bne.n	800ba58 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800ba54:	2302      	movs	r3, #2
 800ba56:	e042      	b.n	800bade <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2224      	movs	r2, #36	@ 0x24
 800ba64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	f023 030c 	bic.w	r3, r3, #12
 800ba7c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	461a      	mov	r2, r3
 800ba84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba88:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba8e:	e841 2300 	strex	r3, r2, [r1]
 800ba92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e6      	bne.n	800ba68 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	e853 3f00 	ldrex	r3, [r3]
 800baa6:	60bb      	str	r3, [r7, #8]
   return(result);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f043 0308 	orr.w	r3, r3, #8
 800baae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	461a      	mov	r2, r3
 800bab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800babc:	6979      	ldr	r1, [r7, #20]
 800babe:	69ba      	ldr	r2, [r7, #24]
 800bac0:	e841 2300 	strex	r3, r2, [r1]
 800bac4:	613b      	str	r3, [r7, #16]
   return(result);
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1e6      	bne.n	800ba9a <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2220      	movs	r2, #32
 800bad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	373c      	adds	r7, #60	@ 0x3c
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800baea:	b480      	push	{r7}
 800baec:	b08f      	sub	sp, #60	@ 0x3c
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_HalfDuplex_EnableReceiver+0x16>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e042      	b.n	800bb86 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2224      	movs	r2, #36	@ 0x24
 800bb0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	f023 030c 	bic.w	r3, r3, #12
 800bb24:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb30:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb36:	e841 2300 	strex	r3, r2, [r1]
 800bb3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e6      	bne.n	800bb10 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f043 0304 	orr.w	r3, r3, #4
 800bb56:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6979      	ldr	r1, [r7, #20]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e6      	bne.n	800bb42 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2220      	movs	r2, #32
 800bb78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	373c      	adds	r7, #60	@ 0x3c
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
	...

0800bb94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb98:	b094      	sub	sp, #80	@ 0x50
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	431a      	orrs	r2, r3
 800bbae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb0:	695b      	ldr	r3, [r3, #20]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	498a      	ldr	r1, [pc, #552]	@ (800bdec <UART_SetConfig+0x258>)
 800bbc4:	4019      	ands	r1, r3
 800bbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbcc:	430b      	orrs	r3, r1
 800bbce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbdc:	68d9      	ldr	r1, [r3, #12]
 800bbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	ea40 0301 	orr.w	r3, r0, r1
 800bbe6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbea:	699b      	ldr	r3, [r3, #24]
 800bbec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b7f      	ldr	r3, [pc, #508]	@ (800bdf0 <UART_SetConfig+0x25c>)
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d004      	beq.n	800bc02 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	6a1a      	ldr	r2, [r3, #32]
 800bbfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bc0c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc16:	430b      	orrs	r3, r1
 800bc18:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc20:	f023 000f 	bic.w	r0, r3, #15
 800bc24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc26:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	ea40 0301 	orr.w	r3, r0, r1
 800bc30:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	4b6f      	ldr	r3, [pc, #444]	@ (800bdf4 <UART_SetConfig+0x260>)
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d102      	bne.n	800bc42 <UART_SetConfig+0xae>
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc40:	e01a      	b.n	800bc78 <UART_SetConfig+0xe4>
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4b6c      	ldr	r3, [pc, #432]	@ (800bdf8 <UART_SetConfig+0x264>)
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d102      	bne.n	800bc52 <UART_SetConfig+0xbe>
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc50:	e012      	b.n	800bc78 <UART_SetConfig+0xe4>
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	4b69      	ldr	r3, [pc, #420]	@ (800bdfc <UART_SetConfig+0x268>)
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d102      	bne.n	800bc62 <UART_SetConfig+0xce>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc60:	e00a      	b.n	800bc78 <UART_SetConfig+0xe4>
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b62      	ldr	r3, [pc, #392]	@ (800bdf0 <UART_SetConfig+0x25c>)
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d103      	bne.n	800bc74 <UART_SetConfig+0xe0>
 800bc6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bc70:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc72:	e001      	b.n	800bc78 <UART_SetConfig+0xe4>
 800bc74:	2300      	movs	r3, #0
 800bc76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	4b5c      	ldr	r3, [pc, #368]	@ (800bdf0 <UART_SetConfig+0x25c>)
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d171      	bne.n	800bd66 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc84:	2200      	movs	r2, #0
 800bc86:	623b      	str	r3, [r7, #32]
 800bc88:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc8a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bc8e:	f7fc fd67 	bl	8008760 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc92:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 80e2 	beq.w	800be60 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca0:	4a57      	ldr	r2, [pc, #348]	@ (800be00 <UART_SetConfig+0x26c>)
 800bca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bca6:	461a      	mov	r2, r3
 800bca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcae:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	4413      	add	r3, r2
 800bcba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d305      	bcc.n	800bccc <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d903      	bls.n	800bcd4 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bcd2:	e0c5      	b.n	800be60 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	61bb      	str	r3, [r7, #24]
 800bcda:	61fa      	str	r2, [r7, #28]
 800bcdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	4a47      	ldr	r2, [pc, #284]	@ (800be00 <UART_SetConfig+0x26c>)
 800bce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	2200      	movs	r2, #0
 800bcea:	613b      	str	r3, [r7, #16]
 800bcec:	617a      	str	r2, [r7, #20]
 800bcee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bcf2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bcf6:	f7f5 f8f9 	bl	8000eec <__aeabi_uldivmod>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4610      	mov	r0, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	f04f 0200 	mov.w	r2, #0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	020b      	lsls	r3, r1, #8
 800bd0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd10:	0202      	lsls	r2, r0, #8
 800bd12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd14:	6849      	ldr	r1, [r1, #4]
 800bd16:	0849      	lsrs	r1, r1, #1
 800bd18:	2000      	movs	r0, #0
 800bd1a:	460c      	mov	r4, r1
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	eb12 0804 	adds.w	r8, r2, r4
 800bd22:	eb43 0905 	adc.w	r9, r3, r5
 800bd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	60fa      	str	r2, [r7, #12]
 800bd30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd34:	4640      	mov	r0, r8
 800bd36:	4649      	mov	r1, r9
 800bd38:	f7f5 f8d8 	bl	8000eec <__aeabi_uldivmod>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4613      	mov	r3, r2
 800bd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd4a:	d308      	bcc.n	800bd5e <UART_SetConfig+0x1ca>
 800bd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd52:	d204      	bcs.n	800bd5e <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800bd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bd5a:	60da      	str	r2, [r3, #12]
 800bd5c:	e080      	b.n	800be60 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bd64:	e07c      	b.n	800be60 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd6e:	d149      	bne.n	800be04 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd72:	2200      	movs	r2, #0
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd7c:	f7fc fcf0 	bl	8008760 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd80:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d06b      	beq.n	800be60 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8c:	4a1c      	ldr	r2, [pc, #112]	@ (800be00 <UART_SetConfig+0x26c>)
 800bd8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd92:	461a      	mov	r2, r3
 800bd94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd96:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd9a:	005a      	lsls	r2, r3, #1
 800bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	085b      	lsrs	r3, r3, #1
 800bda2:	441a      	add	r2, r3
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb0:	2b0f      	cmp	r3, #15
 800bdb2:	d916      	bls.n	800bde2 <UART_SetConfig+0x24e>
 800bdb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdba:	d212      	bcs.n	800bde2 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	f023 030f 	bic.w	r3, r3, #15
 800bdc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdc8:	085b      	lsrs	r3, r3, #1
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	f003 0307 	and.w	r3, r3, #7
 800bdd0:	b29a      	uxth	r2, r3
 800bdd2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800bdde:	60da      	str	r2, [r3, #12]
 800bde0:	e03e      	b.n	800be60 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bde8:	e03a      	b.n	800be60 <UART_SetConfig+0x2cc>
 800bdea:	bf00      	nop
 800bdec:	cfff69f3 	.word	0xcfff69f3
 800bdf0:	44002400 	.word	0x44002400
 800bdf4:	40013800 	.word	0x40013800
 800bdf8:	40004400 	.word	0x40004400
 800bdfc:	40004800 	.word	0x40004800
 800be00:	08012310 	.word	0x08012310
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800be04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be06:	2200      	movs	r2, #0
 800be08:	469a      	mov	sl, r3
 800be0a:	4693      	mov	fp, r2
 800be0c:	4650      	mov	r0, sl
 800be0e:	4659      	mov	r1, fp
 800be10:	f7fc fca6 	bl	8008760 <HAL_RCCEx_GetPeriphCLKFreq>
 800be14:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800be16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d021      	beq.n	800be60 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be20:	4a1a      	ldr	r2, [pc, #104]	@ (800be8c <UART_SetConfig+0x2f8>)
 800be22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be26:	461a      	mov	r2, r3
 800be28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	441a      	add	r2, r3
 800be36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be42:	2b0f      	cmp	r3, #15
 800be44:	d909      	bls.n	800be5a <UART_SetConfig+0x2c6>
 800be46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be4c:	d205      	bcs.n	800be5a <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be50:	b29a      	uxth	r2, r3
 800be52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	60da      	str	r2, [r3, #12]
 800be58:	e002      	b.n	800be60 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	2201      	movs	r2, #1
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6a:	2201      	movs	r2, #1
 800be6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be72:	2200      	movs	r2, #0
 800be74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be78:	2200      	movs	r2, #0
 800be7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800be80:	4618      	mov	r0, r3
 800be82:	3750      	adds	r7, #80	@ 0x50
 800be84:	46bd      	mov	sp, r7
 800be86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be8a:	bf00      	nop
 800be8c:	08012310 	.word	0x08012310

0800be90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9c:	f003 0308 	and.w	r3, r3, #8
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00a      	beq.n	800beba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bee0:	f003 0302 	and.w	r3, r3, #2
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00a      	beq.n	800befe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00a      	beq.n	800bf20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf24:	f003 0310 	and.w	r3, r3, #16
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf46:	f003 0320 	and.w	r3, r3, #32
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00a      	beq.n	800bf64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	430a      	orrs	r2, r1
 800bf62:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d01a      	beq.n	800bfa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	430a      	orrs	r2, r1
 800bf84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf8e:	d10a      	bne.n	800bfa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	430a      	orrs	r2, r1
 800bfa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00a      	beq.n	800bfc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	605a      	str	r2, [r3, #4]
  }
}
 800bfc8:	bf00      	nop
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b098      	sub	sp, #96	@ 0x60
 800bfd8:	af02      	add	r7, sp, #8
 800bfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfe4:	f7f7 fa96 	bl	8003514 <HAL_GetTick>
 800bfe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0308 	and.w	r3, r3, #8
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d12f      	bne.n	800c058 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bffc:	9300      	str	r3, [sp, #0]
 800bffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c000:	2200      	movs	r2, #0
 800c002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f88e 	bl	800c128 <UART_WaitOnFlagUntilTimeout>
 800c00c:	4603      	mov	r3, r0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d022      	beq.n	800c058 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c026:	653b      	str	r3, [r7, #80]	@ 0x50
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c030:	647b      	str	r3, [r7, #68]	@ 0x44
 800c032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e6      	bne.n	800c012 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2220      	movs	r2, #32
 800c048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e063      	b.n	800c120 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 0304 	and.w	r3, r3, #4
 800c062:	2b04      	cmp	r3, #4
 800c064:	d149      	bne.n	800c0fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c066:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c06e:	2200      	movs	r2, #0
 800c070:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 f857 	bl	800c128 <UART_WaitOnFlagUntilTimeout>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d03c      	beq.n	800c0fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	e853 3f00 	ldrex	r3, [r3]
 800c08c:	623b      	str	r3, [r7, #32]
   return(result);
 800c08e:	6a3b      	ldr	r3, [r7, #32]
 800c090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c09e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0a6:	e841 2300 	strex	r3, r2, [r1]
 800c0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1e6      	bne.n	800c080 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	e853 3f00 	ldrex	r3, [r3]
 800c0c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0d2:	61fa      	str	r2, [r7, #28]
 800c0d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	69b9      	ldr	r1, [r7, #24]
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	e841 2300 	strex	r3, r2, [r1]
 800c0de:	617b      	str	r3, [r7, #20]
   return(result);
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e5      	bne.n	800c0b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2220      	movs	r2, #32
 800c0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	e012      	b.n	800c120 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3758      	adds	r7, #88	@ 0x58
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	603b      	str	r3, [r7, #0]
 800c134:	4613      	mov	r3, r2
 800c136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c138:	e04f      	b.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c140:	d04b      	beq.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c142:	f7f7 f9e7 	bl	8003514 <HAL_GetTick>
 800c146:	4602      	mov	r2, r0
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	1ad3      	subs	r3, r2, r3
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d302      	bcc.n	800c158 <UART_WaitOnFlagUntilTimeout+0x30>
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c158:	2303      	movs	r3, #3
 800c15a:	e04e      	b.n	800c1fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	2b00      	cmp	r3, #0
 800c168:	d037      	beq.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2b80      	cmp	r3, #128	@ 0x80
 800c16e:	d034      	beq.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b40      	cmp	r3, #64	@ 0x40
 800c174:	d031      	beq.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	f003 0308 	and.w	r3, r3, #8
 800c180:	2b08      	cmp	r3, #8
 800c182:	d110      	bne.n	800c1a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2208      	movs	r2, #8
 800c18a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 f838 	bl	800c202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2208      	movs	r2, #8
 800c196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e029      	b.n	800c1fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1b4:	d111      	bne.n	800c1da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f000 f81e 	bl	800c202 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2220      	movs	r2, #32
 800c1ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e00f      	b.n	800c1fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	69da      	ldr	r2, [r3, #28]
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	bf0c      	ite	eq
 800c1ea:	2301      	moveq	r3, #1
 800c1ec:	2300      	movne	r3, #0
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	461a      	mov	r2, r3
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d0a0      	beq.n	800c13a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c202:	b480      	push	{r7}
 800c204:	b095      	sub	sp, #84	@ 0x54
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c212:	e853 3f00 	ldrex	r3, [r3]
 800c216:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c21a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	461a      	mov	r2, r3
 800c226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c228:	643b      	str	r3, [r7, #64]	@ 0x40
 800c22a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c22e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c230:	e841 2300 	strex	r3, r2, [r1]
 800c234:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1e6      	bne.n	800c20a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	3308      	adds	r3, #8
 800c242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c244:	6a3b      	ldr	r3, [r7, #32]
 800c246:	e853 3f00 	ldrex	r3, [r3]
 800c24a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c252:	f023 0301 	bic.w	r3, r3, #1
 800c256:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e3      	bne.n	800c23c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d118      	bne.n	800c2ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	e853 3f00 	ldrex	r3, [r3]
 800c288:	60bb      	str	r3, [r7, #8]
   return(result);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	f023 0310 	bic.w	r3, r3, #16
 800c290:	647b      	str	r3, [r7, #68]	@ 0x44
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c29a:	61bb      	str	r3, [r7, #24]
 800c29c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c29e:	6979      	ldr	r1, [r7, #20]
 800c2a0:	69ba      	ldr	r2, [r7, #24]
 800c2a2:	e841 2300 	strex	r3, r2, [r1]
 800c2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1e6      	bne.n	800c27c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2c2:	bf00      	nop
 800c2c4:	3754      	adds	r7, #84	@ 0x54
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d101      	bne.n	800c2e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e027      	b.n	800c334 <HAL_UARTEx_DisableFifoMode+0x66>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2224      	movs	r2, #36	@ 0x24
 800c2f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0201 	bic.w	r2, r2, #1
 800c30a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c312:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2220      	movs	r2, #32
 800c326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c354:	2302      	movs	r3, #2
 800c356:	e02d      	b.n	800c3b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2224      	movs	r2, #36	@ 0x24
 800c364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f022 0201 	bic.w	r2, r2, #1
 800c37e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	683a      	ldr	r2, [r7, #0]
 800c390:	430a      	orrs	r2, r1
 800c392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f84f 	bl	800c438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2220      	movs	r2, #32
 800c3a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3b2:	2300      	movs	r3, #0
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e02d      	b.n	800c430 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2224      	movs	r2, #36	@ 0x24
 800c3e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f022 0201 	bic.w	r2, r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f811 	bl	800c438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2220      	movs	r2, #32
 800c422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c444:	2b00      	cmp	r3, #0
 800c446:	d108      	bne.n	800c45a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2201      	movs	r2, #1
 800c44c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c458:	e031      	b.n	800c4be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c45a:	2308      	movs	r3, #8
 800c45c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c45e:	2308      	movs	r3, #8
 800c460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	0e5b      	lsrs	r3, r3, #25
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	f003 0307 	and.w	r3, r3, #7
 800c470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	0f5b      	lsrs	r3, r3, #29
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 0307 	and.w	r3, r3, #7
 800c480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c482:	7bbb      	ldrb	r3, [r7, #14]
 800c484:	7b3a      	ldrb	r2, [r7, #12]
 800c486:	4911      	ldr	r1, [pc, #68]	@ (800c4cc <UARTEx_SetNbDataToProcess+0x94>)
 800c488:	5c8a      	ldrb	r2, [r1, r2]
 800c48a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c48e:	7b3a      	ldrb	r2, [r7, #12]
 800c490:	490f      	ldr	r1, [pc, #60]	@ (800c4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c494:	fb93 f3f2 	sdiv	r3, r3, r2
 800c498:	b29a      	uxth	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	7b7a      	ldrb	r2, [r7, #13]
 800c4a4:	4909      	ldr	r1, [pc, #36]	@ (800c4cc <UARTEx_SetNbDataToProcess+0x94>)
 800c4a6:	5c8a      	ldrb	r2, [r1, r2]
 800c4a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4ac:	7b7a      	ldrb	r2, [r7, #13]
 800c4ae:	4908      	ldr	r1, [pc, #32]	@ (800c4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800c4b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c4be:	bf00      	nop
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	08012328 	.word	0x08012328
 800c4d0:	08012330 	.word	0x08012330

0800c4d4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	@ 0x38
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800c4e2:	2234      	movs	r2, #52	@ 0x34
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f002 fa15 	bl	800e916 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	f023 0303 	bic.w	r3, r3, #3
 800c4f2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	683a      	ldr	r2, [r7, #0]
 800c504:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	f1a3 0208 	sub.w	r2, r3, #8
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2202      	movs	r2, #2
 800c520:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800c526:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	4413      	add	r3, r2
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800c52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c530:	3b04      	subs	r3, #4
 800c532:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800c53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c540:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800c542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c544:	3b04      	subs	r3, #4
 800c546:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800c55a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c55c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c55e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800c564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c566:	3304      	adds	r3, #4
 800c568:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800c56a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c56c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c570:	4a1f      	ldr	r2, [pc, #124]	@ (800c5f0 <_tx_byte_pool_create+0x11c>)
 800c572:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2200      	movs	r2, #0
 800c578:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c57a:	f3ef 8310 	mrs	r3, PRIMASK
 800c57e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800c580:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800c582:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800c584:	b672      	cpsid	i
#endif
    return(int_posture);
 800c586:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800c588:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	4a19      	ldr	r2, [pc, #100]	@ (800c5f4 <_tx_byte_pool_create+0x120>)
 800c58e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800c590:	4b19      	ldr	r3, [pc, #100]	@ (800c5f8 <_tx_byte_pool_create+0x124>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d109      	bne.n	800c5ac <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800c598:	4a18      	ldr	r2, [pc, #96]	@ (800c5fc <_tx_byte_pool_create+0x128>)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5aa:	e011      	b.n	800c5d0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800c5ac:	4b13      	ldr	r3, [pc, #76]	@ (800c5fc <_tx_byte_pool_create+0x128>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5b6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a3a      	ldr	r2, [r7, #32]
 800c5ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800c5d0:	4b09      	ldr	r3, [pc, #36]	@ (800c5f8 <_tx_byte_pool_create+0x124>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	4a08      	ldr	r2, [pc, #32]	@ (800c5f8 <_tx_byte_pool_create+0x124>)
 800c5d8:	6013      	str	r3, [r2, #0]
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f383 8810 	msr	PRIMASK, r3
}
 800c5e4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3738      	adds	r7, #56	@ 0x38
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	ffffeeee 	.word	0xffffeeee
 800c5f4:	42595445 	.word	0x42595445
 800c5f8:	200046d8 	.word	0x200046d8
 800c5fc:	200046d4 	.word	0x200046d4

0800c600 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800c604:	f000 f960 	bl	800c8c8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800c608:	f000 fdec 	bl	800d1e4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800c60c:	4b12      	ldr	r3, [pc, #72]	@ (800c658 <_tx_initialize_high_level+0x58>)
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	4b12      	ldr	r3, [pc, #72]	@ (800c65c <_tx_initialize_high_level+0x5c>)
 800c614:	2200      	movs	r2, #0
 800c616:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800c618:	4b11      	ldr	r3, [pc, #68]	@ (800c660 <_tx_initialize_high_level+0x60>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	4b11      	ldr	r3, [pc, #68]	@ (800c664 <_tx_initialize_high_level+0x64>)
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800c624:	4b10      	ldr	r3, [pc, #64]	@ (800c668 <_tx_initialize_high_level+0x68>)
 800c626:	2200      	movs	r2, #0
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	4b10      	ldr	r3, [pc, #64]	@ (800c66c <_tx_initialize_high_level+0x6c>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800c630:	4b0f      	ldr	r3, [pc, #60]	@ (800c670 <_tx_initialize_high_level+0x70>)
 800c632:	2200      	movs	r2, #0
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	4b0f      	ldr	r3, [pc, #60]	@ (800c674 <_tx_initialize_high_level+0x74>)
 800c638:	2200      	movs	r2, #0
 800c63a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800c63c:	4b0e      	ldr	r3, [pc, #56]	@ (800c678 <_tx_initialize_high_level+0x78>)
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
 800c642:	4b0e      	ldr	r3, [pc, #56]	@ (800c67c <_tx_initialize_high_level+0x7c>)
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800c648:	4b0d      	ldr	r3, [pc, #52]	@ (800c680 <_tx_initialize_high_level+0x80>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	4b0d      	ldr	r3, [pc, #52]	@ (800c684 <_tx_initialize_high_level+0x84>)
 800c650:	2200      	movs	r2, #0
 800c652:	601a      	str	r2, [r3, #0]
#endif
}
 800c654:	bf00      	nop
 800c656:	bd80      	pop	{r7, pc}
 800c658:	200046ac 	.word	0x200046ac
 800c65c:	200046b0 	.word	0x200046b0
 800c660:	200046b4 	.word	0x200046b4
 800c664:	200046b8 	.word	0x200046b8
 800c668:	200046bc 	.word	0x200046bc
 800c66c:	200046c0 	.word	0x200046c0
 800c670:	200046cc 	.word	0x200046cc
 800c674:	200046d0 	.word	0x200046d0
 800c678:	200046d4 	.word	0x200046d4
 800c67c:	200046d8 	.word	0x200046d8
 800c680:	200046c4 	.word	0x200046c4
 800c684:	200046c8 	.word	0x200046c8

0800c688 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800c68c:	4b10      	ldr	r3, [pc, #64]	@ (800c6d0 <_tx_initialize_kernel_enter+0x48>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800c694:	d00c      	beq.n	800c6b0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c696:	4b0e      	ldr	r3, [pc, #56]	@ (800c6d0 <_tx_initialize_kernel_enter+0x48>)
 800c698:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800c69c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800c69e:	f7f3 fdfb 	bl	8000298 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800c6a2:	f7ff ffad 	bl	800c600 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6d4 <_tx_initialize_kernel_enter+0x4c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	4a09      	ldr	r2, [pc, #36]	@ (800c6d4 <_tx_initialize_kernel_enter+0x4c>)
 800c6ae:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800c6b0:	4b07      	ldr	r3, [pc, #28]	@ (800c6d0 <_tx_initialize_kernel_enter+0x48>)
 800c6b2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800c6b6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800c6b8:	4b07      	ldr	r3, [pc, #28]	@ (800c6d8 <_tx_initialize_kernel_enter+0x50>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7f4 fdd7 	bl	8001270 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800c6c2:	4b03      	ldr	r3, [pc, #12]	@ (800c6d0 <_tx_initialize_kernel_enter+0x48>)
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800c6c8:	f7f3 fe22 	bl	8000310 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800c6cc:	bf00      	nop
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20000014 	.word	0x20000014
 800c6d4:	2000477c 	.word	0x2000477c
 800c6d8:	200046dc 	.word	0x200046dc

0800c6dc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b092      	sub	sp, #72	@ 0x48
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800c6ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c6f0:	21ef      	movs	r1, #239	@ 0xef
 800c6f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c6f4:	f002 f90f 	bl	800e916 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800c6f8:	22b0      	movs	r2, #176	@ 0xb0
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f002 f90a 	bl	800e916 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68ba      	ldr	r2, [r7, #8]
 800c706:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c718:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c71e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c724:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c72a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c732:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c738:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800c742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c744:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800c746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c748:	3b01      	subs	r3, #1
 800c74a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c74c:	4413      	add	r3, r2
 800c74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c754:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800c756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d007      	beq.n	800c76e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2200      	movs	r2, #0
 800c768:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800c76c:	e006      	b.n	800c77c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c772:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c778:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2203      	movs	r2, #3
 800c780:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4a48      	ldr	r2, [pc, #288]	@ (800c8a8 <_tx_thread_create+0x1cc>)
 800c786:	655a      	str	r2, [r3, #84]	@ 0x54
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800c78e:	4947      	ldr	r1, [pc, #284]	@ (800c8ac <_tx_thread_create+0x1d0>)
 800c790:	68f8      	ldr	r0, [r7, #12]
 800c792:	f7f3 fe23 	bl	80003dc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c796:	f3ef 8310 	mrs	r3, PRIMASK
 800c79a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800c79c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800c79e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c7a0:	b672      	cpsid	i
    return(int_posture);
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800c7a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4a41      	ldr	r2, [pc, #260]	@ (800c8b0 <_tx_thread_create+0x1d4>)
 800c7aa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800c7ac:	4b41      	ldr	r3, [pc, #260]	@ (800c8b4 <_tx_thread_create+0x1d8>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10b      	bne.n	800c7cc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800c7b4:	4a40      	ldr	r2, [pc, #256]	@ (800c8b8 <_tx_thread_create+0x1dc>)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800c7ca:	e016      	b.n	800c7fa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800c7cc:	4b3a      	ldr	r3, [pc, #232]	@ (800c8b8 <_tx_thread_create+0x1dc>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800c7d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7d8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800c7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800c7fa:	4b2e      	ldr	r3, [pc, #184]	@ (800c8b4 <_tx_thread_create+0x1d8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	3301      	adds	r3, #1
 800c800:	4a2c      	ldr	r2, [pc, #176]	@ (800c8b4 <_tx_thread_create+0x1d8>)
 800c802:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800c804:	4b2d      	ldr	r3, [pc, #180]	@ (800c8bc <_tx_thread_create+0x1e0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3301      	adds	r3, #1
 800c80a:	4a2c      	ldr	r2, [pc, #176]	@ (800c8bc <_tx_thread_create+0x1e0>)
 800c80c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800c80e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c810:	2b01      	cmp	r3, #1
 800c812:	d129      	bne.n	800c868 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c814:	f3ef 8305 	mrs	r3, IPSR
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800c81a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800c81c:	4b28      	ldr	r3, [pc, #160]	@ (800c8c0 <_tx_thread_create+0x1e4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4313      	orrs	r3, r2
 800c822:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800c826:	d30d      	bcc.n	800c844 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800c828:	4b26      	ldr	r3, [pc, #152]	@ (800c8c4 <_tx_thread_create+0x1e8>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800c82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c830:	2b00      	cmp	r3, #0
 800c832:	d009      	beq.n	800c848 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800c834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c838:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800c83a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c83c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c840:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c842:	e001      	b.n	800c848 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	647b      	str	r3, [r7, #68]	@ 0x44
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	f383 8810 	msr	PRIMASK, r3
}
 800c852:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 f9df 	bl	800cc18 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800c85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d01e      	beq.n	800c89e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800c860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c862:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c864:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c866:	e01a      	b.n	800c89e <_tx_thread_create+0x1c2>
 800c868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f383 8810 	msr	PRIMASK, r3
}
 800c872:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c874:	f3ef 8310 	mrs	r3, PRIMASK
 800c878:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c87a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c87c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c87e:	b672      	cpsid	i
    return(int_posture);
 800c880:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800c882:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800c884:	4b0d      	ldr	r3, [pc, #52]	@ (800c8bc <_tx_thread_create+0x1e0>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	3b01      	subs	r3, #1
 800c88a:	4a0c      	ldr	r2, [pc, #48]	@ (800c8bc <_tx_thread_create+0x1e0>)
 800c88c:	6013      	str	r3, [r2, #0]
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	f383 8810 	msr	PRIMASK, r3
}
 800c898:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c89a:	f000 f983 	bl	800cba4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3748      	adds	r7, #72	@ 0x48
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	0800d0ed 	.word	0x0800d0ed
 800c8ac:	0800ca0d 	.word	0x0800ca0d
 800c8b0:	54485244 	.word	0x54485244
 800c8b4:	200046f0 	.word	0x200046f0
 800c8b8:	200046ec 	.word	0x200046ec
 800c8bc:	2000477c 	.word	0x2000477c
 800c8c0:	20000014 	.word	0x20000014
 800c8c4:	200046e8 	.word	0x200046e8

0800c8c8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800c8cc:	4b12      	ldr	r3, [pc, #72]	@ (800c918 <_tx_thread_initialize+0x50>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800c8d2:	4b12      	ldr	r3, [pc, #72]	@ (800c91c <_tx_thread_initialize+0x54>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800c8d8:	4b11      	ldr	r3, [pc, #68]	@ (800c920 <_tx_thread_initialize+0x58>)
 800c8da:	2200      	movs	r2, #0
 800c8dc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c8de:	4b11      	ldr	r3, [pc, #68]	@ (800c924 <_tx_thread_initialize+0x5c>)
 800c8e0:	2220      	movs	r2, #32
 800c8e2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800c8e4:	2280      	movs	r2, #128	@ 0x80
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	480f      	ldr	r0, [pc, #60]	@ (800c928 <_tx_thread_initialize+0x60>)
 800c8ea:	f002 f814 	bl	800e916 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800c8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c92c <_tx_thread_initialize+0x64>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800c8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c930 <_tx_thread_initialize+0x68>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c934 <_tx_thread_initialize+0x6c>)
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800c900:	4b0d      	ldr	r3, [pc, #52]	@ (800c938 <_tx_thread_initialize+0x70>)
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800c906:	4b0d      	ldr	r3, [pc, #52]	@ (800c93c <_tx_thread_initialize+0x74>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800c90e:	4a0b      	ldr	r2, [pc, #44]	@ (800c93c <_tx_thread_initialize+0x74>)
 800c910:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800c912:	bf00      	nop
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	200046e4 	.word	0x200046e4
 800c91c:	200046e8 	.word	0x200046e8
 800c920:	200046f4 	.word	0x200046f4
 800c924:	200046f8 	.word	0x200046f8
 800c928:	200046fc 	.word	0x200046fc
 800c92c:	200046ec 	.word	0x200046ec
 800c930:	200046f0 	.word	0x200046f0
 800c934:	2000477c 	.word	0x2000477c
 800c938:	20004780 	.word	0x20004780
 800c93c:	20004784 	.word	0x20004784

0800c940 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 800c940:	b480      	push	{r7}
 800c942:	b08b      	sub	sp, #44	@ 0x2c
 800c944:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c946:	4b2b      	ldr	r3, [pc, #172]	@ (800c9f4 <_tx_thread_relinquish+0xb4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c94c:	f3ef 8310 	mrs	r3, PRIMASK
 800c950:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c952:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c954:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c956:	b672      	cpsid	i
    return(int_posture);
 800c958:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 800c95a:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95e:	69db      	ldr	r3, [r3, #28]
 800c960:	4a25      	ldr	r2, [pc, #148]	@ (800c9f8 <_tx_thread_relinquish+0xb8>)
 800c962:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c968:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c970:	429a      	cmp	r2, r3
 800c972:	d009      	beq.n	800c988 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	4920      	ldr	r1, [pc, #128]	@ (800c9fc <_tx_thread_relinquish+0xbc>)
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	4a1e      	ldr	r2, [pc, #120]	@ (800ca00 <_tx_thread_relinquish+0xc0>)
 800c986:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 800c988:	4b1e      	ldr	r3, [pc, #120]	@ (800ca04 <_tx_thread_relinquish+0xc4>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	69fa      	ldr	r2, [r7, #28]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d906      	bls.n	800c9a0 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c992:	4b1c      	ldr	r3, [pc, #112]	@ (800ca04 <_tx_thread_relinquish+0xc4>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a19      	ldr	r2, [pc, #100]	@ (800c9fc <_tx_thread_relinquish+0xbc>)
 800c998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c99c:	4a18      	ldr	r2, [pc, #96]	@ (800ca00 <_tx_thread_relinquish+0xc0>)
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f383 8810 	msr	PRIMASK, r3
}
 800c9aa:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 800c9ac:	4b14      	ldr	r3, [pc, #80]	@ (800ca00 <_tx_thread_relinquish+0xc0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d017      	beq.n	800c9e6 <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c9b6:	4b14      	ldr	r3, [pc, #80]	@ (800ca08 <_tx_thread_relinquish+0xc8>)
 800c9b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c9be:	f3ef 8305 	mrs	r3, IPSR
 800c9c2:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
    if (_tx_ipsr_get() == 0)
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10c      	bne.n	800c9e4 <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9ca:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ce:	60bb      	str	r3, [r7, #8]
    return(posture);
 800c9d0:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 800c9d2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c9d4:	b662      	cpsie	i
}
 800c9d6:	bf00      	nop
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	f383 8810 	msr	PRIMASK, r3
}
 800c9e2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800c9e4:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 800c9e6:	bf00      	nop
 800c9e8:	372c      	adds	r7, #44	@ 0x2c
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	200046e4 	.word	0x200046e4
 800c9f8:	20004ce8 	.word	0x20004ce8
 800c9fc:	200046fc 	.word	0x200046fc
 800ca00:	200046e8 	.word	0x200046e8
 800ca04:	200046f8 	.word	0x200046f8
 800ca08:	e000ed04 	.word	0xe000ed04

0800ca0c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ca12:	4b21      	ldr	r3, [pc, #132]	@ (800ca98 <_tx_thread_shell_entry+0x8c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca20:	4610      	mov	r0, r2
 800ca22:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800ca24:	4b1d      	ldr	r3, [pc, #116]	@ (800ca9c <_tx_thread_shell_entry+0x90>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800ca2c:	4b1b      	ldr	r3, [pc, #108]	@ (800ca9c <_tx_thread_shell_entry+0x90>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	69f8      	ldr	r0, [r7, #28]
 800ca32:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ca34:	f3ef 8310 	mrs	r3, PRIMASK
 800ca38:	607b      	str	r3, [r7, #4]
    return(posture);
 800ca3a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800ca3c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ca3e:	b672      	cpsid	i
    return(int_posture);
 800ca40:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800ca42:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2201      	movs	r2, #1
 800ca48:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2200      	movs	r2, #0
 800ca54:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ca56:	4b12      	ldr	r3, [pc, #72]	@ (800caa0 <_tx_thread_shell_entry+0x94>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	4a10      	ldr	r2, [pc, #64]	@ (800caa0 <_tx_thread_shell_entry+0x94>)
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	f383 8810 	msr	PRIMASK, r3
}
 800ca6a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800ca6c:	f3ef 8314 	mrs	r3, CONTROL
 800ca70:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800ca72:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800ca74:	617b      	str	r3, [r7, #20]
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f023 0304 	bic.w	r3, r3, #4
 800ca7c:	617b      	str	r3, [r7, #20]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	f383 8814 	msr	CONTROL, r3
}
 800ca88:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800ca8a:	69f8      	ldr	r0, [r7, #28]
 800ca8c:	f000 f9c4 	bl	800ce18 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ca90:	bf00      	nop
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	200046e4 	.word	0x200046e4
 800ca9c:	20004780 	.word	0x20004780
 800caa0:	2000477c 	.word	0x2000477c

0800caa4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b08e      	sub	sp, #56	@ 0x38
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800caac:	f3ef 8310 	mrs	r3, PRIMASK
 800cab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800cab4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800cab6:	b672      	cpsid	i
    return(int_posture);
 800cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800caba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cabc:	4b35      	ldr	r3, [pc, #212]	@ (800cb94 <_tx_thread_sleep+0xf0>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800cac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d108      	bne.n	800cada <_tx_thread_sleep+0x36>
 800cac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caca:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	f383 8810 	msr	PRIMASK, r3
}
 800cad2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cad4:	2313      	movs	r3, #19
 800cad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad8:	e056      	b.n	800cb88 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cada:	f3ef 8305 	mrs	r3, IPSR
 800cade:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cae0:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cae2:	4b2d      	ldr	r3, [pc, #180]	@ (800cb98 <_tx_thread_sleep+0xf4>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d008      	beq.n	800cafe <_tx_thread_sleep+0x5a>
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	f383 8810 	msr	PRIMASK, r3
}
 800caf6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800caf8:	2313      	movs	r3, #19
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cafc:	e044      	b.n	800cb88 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800cafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb00:	4a26      	ldr	r2, [pc, #152]	@ (800cb9c <_tx_thread_sleep+0xf8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d108      	bne.n	800cb18 <_tx_thread_sleep+0x74>
 800cb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb08:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f383 8810 	msr	PRIMASK, r3
}
 800cb10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800cb12:	2313      	movs	r3, #19
 800cb14:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb16:	e037      	b.n	800cb88 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d108      	bne.n	800cb30 <_tx_thread_sleep+0x8c>
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb20:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f383 8810 	msr	PRIMASK, r3
}
 800cb28:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb2e:	e02b      	b.n	800cb88 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800cb30:	4b1b      	ldr	r3, [pc, #108]	@ (800cba0 <_tx_thread_sleep+0xfc>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d008      	beq.n	800cb4a <_tx_thread_sleep+0xa6>
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f383 8810 	msr	PRIMASK, r3
}
 800cb42:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cb44:	2313      	movs	r3, #19
 800cb46:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb48:	e01e      	b.n	800cb88 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800cb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4c:	2204      	movs	r2, #4
 800cb4e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb52:	2201      	movs	r2, #1
 800cb54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800cb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cb64:	4b0e      	ldr	r3, [pc, #56]	@ (800cba0 <_tx_thread_sleep+0xfc>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	4a0d      	ldr	r2, [pc, #52]	@ (800cba0 <_tx_thread_sleep+0xfc>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb70:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	f383 8810 	msr	PRIMASK, r3
}
 800cb78:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cb7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cb7c:	f000 f94c 	bl	800ce18 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800cb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3738      	adds	r7, #56	@ 0x38
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	200046e4 	.word	0x200046e4
 800cb98:	20000014 	.word	0x20000014
 800cb9c:	2000482c 	.word	0x2000482c
 800cba0:	2000477c 	.word	0x2000477c

0800cba4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b089      	sub	sp, #36	@ 0x24
 800cba8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cbaa:	4b17      	ldr	r3, [pc, #92]	@ (800cc08 <_tx_thread_system_preempt_check+0x64>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d121      	bne.n	800cbfa <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800cbb6:	4b15      	ldr	r3, [pc, #84]	@ (800cc0c <_tx_thread_system_preempt_check+0x68>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800cbbc:	4b14      	ldr	r3, [pc, #80]	@ (800cc10 <_tx_thread_system_preempt_check+0x6c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d017      	beq.n	800cbfa <_tx_thread_system_preempt_check+0x56>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cbca:	4b12      	ldr	r3, [pc, #72]	@ (800cc14 <_tx_thread_system_preempt_check+0x70>)
 800cbcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cbd2:	f3ef 8305 	mrs	r3, IPSR
 800cbd6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800cbd8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d10c      	bne.n	800cbf8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbde:	f3ef 8310 	mrs	r3, PRIMASK
 800cbe2:	60fb      	str	r3, [r7, #12]
    return(posture);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 800cbe6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cbe8:	b662      	cpsie	i
}
 800cbea:	bf00      	nop
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f383 8810 	msr	PRIMASK, r3
}
 800cbf6:	bf00      	nop
}
 800cbf8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800cbfa:	bf00      	nop
 800cbfc:	3724      	adds	r7, #36	@ 0x24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	2000477c 	.word	0x2000477c
 800cc0c:	200046e4 	.word	0x200046e4
 800cc10:	200046e8 	.word	0x200046e8
 800cc14:	e000ed04 	.word	0xe000ed04

0800cc18 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b096      	sub	sp, #88	@ 0x58
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cc20:	f3ef 8310 	mrs	r3, PRIMASK
 800cc24:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800cc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800cc28:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cc2a:	b672      	cpsid	i
    return(int_posture);
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cc2e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d005      	beq.n	800cc44 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	334c      	adds	r3, #76	@ 0x4c
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 fbaf 	bl	800d3a0 <_tx_timer_system_deactivate>
 800cc42:	e002      	b.n	800cc4a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800cc4a:	4b6c      	ldr	r3, [pc, #432]	@ (800cdfc <_tx_thread_system_resume+0x1e4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	4a6a      	ldr	r2, [pc, #424]	@ (800cdfc <_tx_thread_system_resume+0x1e4>)
 800cc52:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	f040 8083 	bne.w	800cd64 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 8097 	beq.w	800cd96 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d172      	bne.n	800cd56 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800cc7c:	4a60      	ldr	r2, [pc, #384]	@ (800ce00 <_tx_thread_system_resume+0x1e8>)
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc84:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800cc86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d154      	bne.n	800cd36 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800cc8c:	495c      	ldr	r1, [pc, #368]	@ (800ce00 <_tx_thread_system_resume+0x1e8>)
 800cc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800cca2:	2201      	movs	r2, #1
 800cca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cca6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccaa:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800ccac:	4b55      	ldr	r3, [pc, #340]	@ (800ce04 <_tx_thread_system_resume+0x1ec>)
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccb2:	4313      	orrs	r3, r2
 800ccb4:	4a53      	ldr	r2, [pc, #332]	@ (800ce04 <_tx_thread_system_resume+0x1ec>)
 800ccb6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800ccb8:	4b53      	ldr	r3, [pc, #332]	@ (800ce08 <_tx_thread_system_resume+0x1f0>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d269      	bcs.n	800cd96 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800ccc2:	4a51      	ldr	r2, [pc, #324]	@ (800ce08 <_tx_thread_system_resume+0x1f0>)
 800ccc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccc6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800ccc8:	4b50      	ldr	r3, [pc, #320]	@ (800ce0c <_tx_thread_system_resume+0x1f4>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800ccce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d103      	bne.n	800ccdc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800ccd4:	4a4d      	ldr	r2, [pc, #308]	@ (800ce0c <_tx_thread_system_resume+0x1f4>)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	e05c      	b.n	800cd96 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800ccdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cce0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d257      	bcs.n	800cd96 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800cce6:	4a49      	ldr	r2, [pc, #292]	@ (800ce0c <_tx_thread_system_resume+0x1f4>)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	f383 8810 	msr	PRIMASK, r3
}
 800ccf6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800ccf8:	4b40      	ldr	r3, [pc, #256]	@ (800cdfc <_tx_thread_system_resume+0x1e4>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800ccfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d174      	bne.n	800cdee <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cd04:	4b42      	ldr	r3, [pc, #264]	@ (800ce10 <_tx_thread_system_resume+0x1f8>)
 800cd06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd0a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cd0c:	f3ef 8305 	mrs	r3, IPSR
 800cd10:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800cd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10c      	bne.n	800cd32 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd18:	f3ef 8310 	mrs	r3, PRIMASK
 800cd1c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800cd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800cd20:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cd22:	b662      	cpsie	i
}
 800cd24:	bf00      	nop
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	f383 8810 	msr	PRIMASK, r3
}
 800cd30:	bf00      	nop
}
 800cd32:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800cd34:	e05b      	b.n	800cdee <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800cd36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd3a:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800cd3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800cd42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd4c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cd52:	621a      	str	r2, [r3, #32]
 800cd54:	e01f      	b.n	800cd96 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2203      	movs	r2, #3
 800cd60:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd62:	e018      	b.n	800cd96 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d014      	beq.n	800cd96 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d010      	beq.n	800cd96 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d106      	bne.n	800cd8a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd88:	e005      	b.n	800cd96 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800cd96:	4b1f      	ldr	r3, [pc, #124]	@ (800ce14 <_tx_thread_system_resume+0x1fc>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd9e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	f383 8810 	msr	PRIMASK, r3
}
 800cda6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800cda8:	4b18      	ldr	r3, [pc, #96]	@ (800ce0c <_tx_thread_system_resume+0x1f4>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d020      	beq.n	800cdf4 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cdb2:	4b12      	ldr	r3, [pc, #72]	@ (800cdfc <_tx_thread_system_resume+0x1e4>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d11a      	bne.n	800cdf4 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cdbe:	4b14      	ldr	r3, [pc, #80]	@ (800ce10 <_tx_thread_system_resume+0x1f8>)
 800cdc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdc4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdc6:	f3ef 8305 	mrs	r3, IPSR
 800cdca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cdcc:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10f      	bne.n	800cdf2 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd6:	613b      	str	r3, [r7, #16]
    return(posture);
 800cdd8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800cdda:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cddc:	b662      	cpsie	i
}
 800cdde:	bf00      	nop
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	f383 8810 	msr	PRIMASK, r3
}
 800cdea:	bf00      	nop
}
 800cdec:	e001      	b.n	800cdf2 <_tx_thread_system_resume+0x1da>
                                return;
 800cdee:	bf00      	nop
 800cdf0:	e000      	b.n	800cdf4 <_tx_thread_system_resume+0x1dc>
 800cdf2:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800cdf4:	3758      	adds	r7, #88	@ 0x58
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	2000477c 	.word	0x2000477c
 800ce00:	200046fc 	.word	0x200046fc
 800ce04:	200046f4 	.word	0x200046f4
 800ce08:	200046f8 	.word	0x200046f8
 800ce0c:	200046e8 	.word	0x200046e8
 800ce10:	e000ed04 	.word	0xe000ed04
 800ce14:	200046e4 	.word	0x200046e4

0800ce18 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b09e      	sub	sp, #120	@ 0x78
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800ce20:	4b81      	ldr	r3, [pc, #516]	@ (800d028 <_tx_thread_system_suspend+0x210>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce26:	f3ef 8310 	mrs	r3, PRIMASK
 800ce2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800ce2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800ce2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce30:	b672      	cpsid	i
    return(int_posture);
 800ce32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800ce34:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d112      	bne.n	800ce64 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce42:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800ce44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d008      	beq.n	800ce5c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800ce4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce50:	d004      	beq.n	800ce5c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	334c      	adds	r3, #76	@ 0x4c
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fa40 	bl	800d2dc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	4a72      	ldr	r2, [pc, #456]	@ (800d02c <_tx_thread_system_suspend+0x214>)
 800ce62:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800ce64:	4b72      	ldr	r3, [pc, #456]	@ (800d030 <_tx_thread_system_suspend+0x218>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	4a71      	ldr	r2, [pc, #452]	@ (800d030 <_tx_thread_system_suspend+0x218>)
 800ce6c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	f040 80a6 	bne.w	800cfc4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce82:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800ce8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d015      	beq.n	800cebe <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce96:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800ce98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce9c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800ce9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cea0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cea2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800cea4:	4a63      	ldr	r2, [pc, #396]	@ (800d034 <_tx_thread_system_suspend+0x21c>)
 800cea6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	429a      	cmp	r2, r3
 800ceb0:	d157      	bne.n	800cf62 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800ceb2:	4960      	ldr	r1, [pc, #384]	@ (800d034 <_tx_thread_system_suspend+0x21c>)
 800ceb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ceb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ceb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cebc:	e051      	b.n	800cf62 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800cebe:	4a5d      	ldr	r2, [pc, #372]	@ (800d034 <_tx_thread_system_suspend+0x21c>)
 800cec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cec2:	2100      	movs	r1, #0
 800cec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800cec8:	2201      	movs	r2, #1
 800ceca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cecc:	fa02 f303 	lsl.w	r3, r2, r3
 800ced0:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800ced2:	4b59      	ldr	r3, [pc, #356]	@ (800d038 <_tx_thread_system_suspend+0x220>)
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ced8:	43db      	mvns	r3, r3
 800ceda:	4013      	ands	r3, r2
 800cedc:	4a56      	ldr	r2, [pc, #344]	@ (800d038 <_tx_thread_system_suspend+0x220>)
 800cede:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800cee0:	2300      	movs	r3, #0
 800cee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800cee4:	4b54      	ldr	r3, [pc, #336]	@ (800d038 <_tx_thread_system_suspend+0x220>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800ceea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d12b      	bne.n	800cf48 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cef0:	4b52      	ldr	r3, [pc, #328]	@ (800d03c <_tx_thread_system_suspend+0x224>)
 800cef2:	2220      	movs	r2, #32
 800cef4:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800cef6:	4b52      	ldr	r3, [pc, #328]	@ (800d040 <_tx_thread_system_suspend+0x228>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	601a      	str	r2, [r3, #0]
 800cefc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cefe:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf02:	f383 8810 	msr	PRIMASK, r3
}
 800cf06:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cf08:	4b49      	ldr	r3, [pc, #292]	@ (800d030 <_tx_thread_system_suspend+0x218>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800cf0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f040 8081 	bne.w	800d018 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cf16:	4b4b      	ldr	r3, [pc, #300]	@ (800d044 <_tx_thread_system_suspend+0x22c>)
 800cf18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf1c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf1e:	f3ef 8305 	mrs	r3, IPSR
 800cf22:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800cf24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10c      	bne.n	800cf44 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf2a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800cf30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800cf32:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cf34:	b662      	cpsie	i
}
 800cf36:	bf00      	nop
 800cf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3a:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3e:	f383 8810 	msr	PRIMASK, r3
}
 800cf42:	bf00      	nop
}
 800cf44:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800cf46:	e067      	b.n	800d018 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800cf48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf4a:	fa93 f3a3 	rbit	r3, r3
 800cf4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf52:	fab3 f383 	clz	r3, r3
 800cf56:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800cf58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cf5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf5c:	4413      	add	r3, r2
 800cf5e:	4a37      	ldr	r2, [pc, #220]	@ (800d03c <_tx_thread_system_suspend+0x224>)
 800cf60:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800cf62:	4b37      	ldr	r3, [pc, #220]	@ (800d040 <_tx_thread_system_suspend+0x228>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d12b      	bne.n	800cfc4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800cf6c:	4b33      	ldr	r3, [pc, #204]	@ (800d03c <_tx_thread_system_suspend+0x224>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	4a30      	ldr	r2, [pc, #192]	@ (800d034 <_tx_thread_system_suspend+0x21c>)
 800cf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf76:	4a32      	ldr	r2, [pc, #200]	@ (800d040 <_tx_thread_system_suspend+0x228>)
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf7c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f383 8810 	msr	PRIMASK, r3
}
 800cf84:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cf86:	4b2a      	ldr	r3, [pc, #168]	@ (800d030 <_tx_thread_system_suspend+0x218>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800cf8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d144      	bne.n	800d01c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cf92:	4b2c      	ldr	r3, [pc, #176]	@ (800d044 <_tx_thread_system_suspend+0x22c>)
 800cf94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf98:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf9a:	f3ef 8305 	mrs	r3, IPSR
 800cf9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800cfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10c      	bne.n	800cfc0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800cfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800cfae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cfb0:	b662      	cpsie	i
}
 800cfb2:	bf00      	nop
 800cfb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	f383 8810 	msr	PRIMASK, r3
}
 800cfbe:	bf00      	nop
}
 800cfc0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800cfc2:	e02b      	b.n	800d01c <_tx_thread_system_suspend+0x204>
 800cfc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	f383 8810 	msr	PRIMASK, r3
}
 800cfce:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800cfd0:	4b1b      	ldr	r3, [pc, #108]	@ (800d040 <_tx_thread_system_suspend+0x228>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d022      	beq.n	800d020 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cfda:	4b15      	ldr	r3, [pc, #84]	@ (800d030 <_tx_thread_system_suspend+0x218>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800cfe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d11c      	bne.n	800d020 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cfe6:	4b17      	ldr	r3, [pc, #92]	@ (800d044 <_tx_thread_system_suspend+0x22c>)
 800cfe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfee:	f3ef 8305 	mrs	r3, IPSR
 800cff2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cff4:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10c      	bne.n	800d014 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cffa:	f3ef 8310 	mrs	r3, PRIMASK
 800cffe:	617b      	str	r3, [r7, #20]
    return(posture);
 800d000:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d002:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d004:	b662      	cpsie	i
}
 800d006:	bf00      	nop
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f383 8810 	msr	PRIMASK, r3
}
 800d012:	bf00      	nop
}
 800d014:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d016:	e003      	b.n	800d020 <_tx_thread_system_suspend+0x208>
                return;
 800d018:	bf00      	nop
 800d01a:	e002      	b.n	800d022 <_tx_thread_system_suspend+0x20a>
            return;
 800d01c:	bf00      	nop
 800d01e:	e000      	b.n	800d022 <_tx_thread_system_suspend+0x20a>
    return;
 800d020:	bf00      	nop
}
 800d022:	3778      	adds	r7, #120	@ 0x78
 800d024:	46bd      	mov	sp, r7
 800d026:	bd80      	pop	{r7, pc}
 800d028:	200046e4 	.word	0x200046e4
 800d02c:	20004ce8 	.word	0x20004ce8
 800d030:	2000477c 	.word	0x2000477c
 800d034:	200046fc 	.word	0x200046fc
 800d038:	200046f4 	.word	0x200046f4
 800d03c:	200046f8 	.word	0x200046f8
 800d040:	200046e8 	.word	0x200046e8
 800d044:	e000ed04 	.word	0xe000ed04

0800d048 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d04e:	4b21      	ldr	r3, [pc, #132]	@ (800d0d4 <_tx_thread_time_slice+0x8c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d054:	f3ef 8310 	mrs	r3, PRIMASK
 800d058:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d05a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d05c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d05e:	b672      	cpsid	i
    return(int_posture);
 800d060:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d062:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d064:	4b1c      	ldr	r3, [pc, #112]	@ (800d0d8 <_tx_thread_time_slice+0x90>)
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d024      	beq.n	800d0ba <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d074:	2b00      	cmp	r3, #0
 800d076:	d120      	bne.n	800d0ba <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	69da      	ldr	r2, [r3, #28]
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	4a15      	ldr	r2, [pc, #84]	@ (800d0dc <_tx_thread_time_slice+0x94>)
 800d086:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	6a1b      	ldr	r3, [r3, #32]
 800d08c:	697a      	ldr	r2, [r7, #20]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d013      	beq.n	800d0ba <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d10d      	bne.n	800d0ba <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0a2:	697a      	ldr	r2, [r7, #20]
 800d0a4:	6a12      	ldr	r2, [r2, #32]
 800d0a6:	490e      	ldr	r1, [pc, #56]	@ (800d0e0 <_tx_thread_time_slice+0x98>)
 800d0a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800d0e4 <_tx_thread_time_slice+0x9c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a0b      	ldr	r2, [pc, #44]	@ (800d0e0 <_tx_thread_time_slice+0x98>)
 800d0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b6:	4a0c      	ldr	r2, [pc, #48]	@ (800d0e8 <_tx_thread_time_slice+0xa0>)
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f383 8810 	msr	PRIMASK, r3
}
 800d0c4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d0c6:	bf00      	nop
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	200046e4 	.word	0x200046e4
 800d0d8:	2000478c 	.word	0x2000478c
 800d0dc:	20004ce8 	.word	0x20004ce8
 800d0e0:	200046fc 	.word	0x200046fc
 800d0e4:	200046f8 	.word	0x200046f8
 800d0e8:	200046e8 	.word	0x200046e8

0800d0ec <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	@ 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0fc:	617b      	str	r3, [r7, #20]
    return(posture);
 800d0fe:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d100:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d102:	b672      	cpsid	i
    return(int_posture);
 800d104:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d106:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d10c:	2b04      	cmp	r3, #4
 800d10e:	d10e      	bne.n	800d12e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d110:	4b13      	ldr	r3, [pc, #76]	@ (800d160 <_tx_thread_timeout+0x74>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	4a12      	ldr	r2, [pc, #72]	@ (800d160 <_tx_thread_timeout+0x74>)
 800d118:	6013      	str	r3, [r2, #0]
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f383 8810 	msr	PRIMASK, r3
}
 800d124:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d126:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d128:	f7ff fd76 	bl	800cc18 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d12c:	e013      	b.n	800d156 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d132:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800d13a:	61bb      	str	r3, [r7, #24]
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f383 8810 	msr	PRIMASK, r3
}
 800d146:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d003      	beq.n	800d156 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	69b9      	ldr	r1, [r7, #24]
 800d152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d154:	4798      	blx	r3
}
 800d156:	bf00      	nop
 800d158:	3728      	adds	r7, #40	@ 0x28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	2000477c 	.word	0x2000477c

0800d164 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
 800d16e:	60bb      	str	r3, [r7, #8]
    return(posture);
 800d170:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800d172:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d174:	b672      	cpsid	i
    return(int_posture);
 800d176:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 800d178:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 800d17a:	4b08      	ldr	r3, [pc, #32]	@ (800d19c <_tx_time_get+0x38>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	613b      	str	r3, [r7, #16]
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f383 8810 	msr	PRIMASK, r3
}
 800d18a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 800d18c:	693b      	ldr	r3, [r7, #16]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	20004788 	.word	0x20004788

0800d1a0 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1a6:	f3ef 8310 	mrs	r3, PRIMASK
 800d1aa:	607b      	str	r3, [r7, #4]
    return(posture);
 800d1ac:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d1ae:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d1b0:	b672      	cpsid	i
    return(int_posture);
 800d1b2:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d1b4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d1b6:	4b09      	ldr	r3, [pc, #36]	@ (800d1dc <_tx_timer_expiration_process+0x3c>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	4a07      	ldr	r2, [pc, #28]	@ (800d1dc <_tx_timer_expiration_process+0x3c>)
 800d1be:	6013      	str	r3, [r2, #0]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f383 8810 	msr	PRIMASK, r3
}
 800d1ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d1cc:	4804      	ldr	r0, [pc, #16]	@ (800d1e0 <_tx_timer_expiration_process+0x40>)
 800d1ce:	f7ff fd23 	bl	800cc18 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d1d2:	bf00      	nop
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	2000477c 	.word	0x2000477c
 800d1e0:	2000482c 	.word	0x2000482c

0800d1e4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d1e4:	b590      	push	{r4, r7, lr}
 800d1e6:	b089      	sub	sp, #36	@ 0x24
 800d1e8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d1ea:	4b28      	ldr	r3, [pc, #160]	@ (800d28c <_tx_timer_initialize+0xa8>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d1f0:	4b27      	ldr	r3, [pc, #156]	@ (800d290 <_tx_timer_initialize+0xac>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d1f6:	4b27      	ldr	r3, [pc, #156]	@ (800d294 <_tx_timer_initialize+0xb0>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d1fc:	4b26      	ldr	r3, [pc, #152]	@ (800d298 <_tx_timer_initialize+0xb4>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d202:	4b26      	ldr	r3, [pc, #152]	@ (800d29c <_tx_timer_initialize+0xb8>)
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d208:	2280      	movs	r2, #128	@ 0x80
 800d20a:	2100      	movs	r1, #0
 800d20c:	4824      	ldr	r0, [pc, #144]	@ (800d2a0 <_tx_timer_initialize+0xbc>)
 800d20e:	f001 fb82 	bl	800e916 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d212:	4b24      	ldr	r3, [pc, #144]	@ (800d2a4 <_tx_timer_initialize+0xc0>)
 800d214:	4a22      	ldr	r2, [pc, #136]	@ (800d2a0 <_tx_timer_initialize+0xbc>)
 800d216:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d218:	4b23      	ldr	r3, [pc, #140]	@ (800d2a8 <_tx_timer_initialize+0xc4>)
 800d21a:	4a21      	ldr	r2, [pc, #132]	@ (800d2a0 <_tx_timer_initialize+0xbc>)
 800d21c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d21e:	4b23      	ldr	r3, [pc, #140]	@ (800d2ac <_tx_timer_initialize+0xc8>)
 800d220:	4a23      	ldr	r2, [pc, #140]	@ (800d2b0 <_tx_timer_initialize+0xcc>)
 800d222:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d224:	4b21      	ldr	r3, [pc, #132]	@ (800d2ac <_tx_timer_initialize+0xc8>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3304      	adds	r3, #4
 800d22a:	4a20      	ldr	r2, [pc, #128]	@ (800d2ac <_tx_timer_initialize+0xc8>)
 800d22c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d22e:	4b21      	ldr	r3, [pc, #132]	@ (800d2b4 <_tx_timer_initialize+0xd0>)
 800d230:	4a21      	ldr	r2, [pc, #132]	@ (800d2b8 <_tx_timer_initialize+0xd4>)
 800d232:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d234:	4b21      	ldr	r3, [pc, #132]	@ (800d2bc <_tx_timer_initialize+0xd8>)
 800d236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d23a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d23c:	4b20      	ldr	r3, [pc, #128]	@ (800d2c0 <_tx_timer_initialize+0xdc>)
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d242:	4b1c      	ldr	r3, [pc, #112]	@ (800d2b4 <_tx_timer_initialize+0xd0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a1d      	ldr	r2, [pc, #116]	@ (800d2bc <_tx_timer_initialize+0xd8>)
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	491d      	ldr	r1, [pc, #116]	@ (800d2c0 <_tx_timer_initialize+0xdc>)
 800d24c:	6809      	ldr	r1, [r1, #0]
 800d24e:	481c      	ldr	r0, [pc, #112]	@ (800d2c0 <_tx_timer_initialize+0xdc>)
 800d250:	6800      	ldr	r0, [r0, #0]
 800d252:	2400      	movs	r4, #0
 800d254:	9405      	str	r4, [sp, #20]
 800d256:	2400      	movs	r4, #0
 800d258:	9404      	str	r4, [sp, #16]
 800d25a:	9003      	str	r0, [sp, #12]
 800d25c:	9102      	str	r1, [sp, #8]
 800d25e:	9201      	str	r2, [sp, #4]
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	4b18      	ldr	r3, [pc, #96]	@ (800d2c4 <_tx_timer_initialize+0xe0>)
 800d264:	4a18      	ldr	r2, [pc, #96]	@ (800d2c8 <_tx_timer_initialize+0xe4>)
 800d266:	4919      	ldr	r1, [pc, #100]	@ (800d2cc <_tx_timer_initialize+0xe8>)
 800d268:	4819      	ldr	r0, [pc, #100]	@ (800d2d0 <_tx_timer_initialize+0xec>)
 800d26a:	f7ff fa37 	bl	800c6dc <_tx_thread_create>
 800d26e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e5      	bne.n	800d242 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d276:	4b17      	ldr	r3, [pc, #92]	@ (800d2d4 <_tx_timer_initialize+0xf0>)
 800d278:	2200      	movs	r2, #0
 800d27a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d27c:	4b16      	ldr	r3, [pc, #88]	@ (800d2d8 <_tx_timer_initialize+0xf4>)
 800d27e:	2200      	movs	r2, #0
 800d280:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	bd90      	pop	{r4, r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20004788 	.word	0x20004788
 800d290:	20004ce8 	.word	0x20004ce8
 800d294:	2000478c 	.word	0x2000478c
 800d298:	2000481c 	.word	0x2000481c
 800d29c:	20004828 	.word	0x20004828
 800d2a0:	20004790 	.word	0x20004790
 800d2a4:	20004810 	.word	0x20004810
 800d2a8:	20004818 	.word	0x20004818
 800d2ac:	20004814 	.word	0x20004814
 800d2b0:	2000480c 	.word	0x2000480c
 800d2b4:	200048dc 	.word	0x200048dc
 800d2b8:	200048e8 	.word	0x200048e8
 800d2bc:	200048e0 	.word	0x200048e0
 800d2c0:	200048e4 	.word	0x200048e4
 800d2c4:	4154494d 	.word	0x4154494d
 800d2c8:	0800d411 	.word	0x0800d411
 800d2cc:	080122e4 	.word	0x080122e4
 800d2d0:	2000482c 	.word	0x2000482c
 800d2d4:	20004820 	.word	0x20004820
 800d2d8:	20004824 	.word	0x20004824

0800d2dc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b089      	sub	sp, #36	@ 0x24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d04a      	beq.n	800d386 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f6:	d046      	beq.n	800d386 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d142      	bne.n	800d386 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	2b20      	cmp	r3, #32
 800d304:	d902      	bls.n	800d30c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800d306:	231f      	movs	r3, #31
 800d308:	61bb      	str	r3, [r7, #24]
 800d30a:	e002      	b.n	800d312 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	3b01      	subs	r3, #1
 800d310:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800d312:	4b20      	ldr	r3, [pc, #128]	@ (800d394 <_tx_timer_system_activate+0xb8>)
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d31e:	4b1e      	ldr	r3, [pc, #120]	@ (800d398 <_tx_timer_system_activate+0xbc>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69fa      	ldr	r2, [r7, #28]
 800d324:	429a      	cmp	r2, r3
 800d326:	d30b      	bcc.n	800d340 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800d328:	4b1b      	ldr	r3, [pc, #108]	@ (800d398 <_tx_timer_system_activate+0xbc>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	69fa      	ldr	r2, [r7, #28]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	109b      	asrs	r3, r3, #2
 800d332:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800d334:	4b19      	ldr	r3, [pc, #100]	@ (800d39c <_tx_timer_system_activate+0xc0>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800d340:	69fb      	ldr	r3, [r7, #28]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d109      	bne.n	800d35c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	e011      	b.n	800d380 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	69fa      	ldr	r2, [r7, #28]
 800d384:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800d386:	bf00      	nop
 800d388:	3724      	adds	r7, #36	@ 0x24
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr
 800d392:	bf00      	nop
 800d394:	20004818 	.word	0x20004818
 800d398:	20004814 	.word	0x20004814
 800d39c:	20004810 	.word	0x20004810

0800d3a0 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d026      	beq.n	800d402 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	691b      	ldr	r3, [r3, #16]
 800d3b8:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d108      	bne.n	800d3d4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d117      	bne.n	800d3fc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	e013      	b.n	800d3fc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	695b      	ldr	r3, [r3, #20]
 800d3d8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	693a      	ldr	r2, [r7, #16]
 800d3e4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d105      	bne.n	800d3fc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	619a      	str	r2, [r3, #24]
    }
}
 800d402:	bf00      	nop
 800d404:	371c      	adds	r7, #28
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
	...

0800d410 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b098      	sub	sp, #96	@ 0x60
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800d418:	2300      	movs	r3, #0
 800d41a:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a73      	ldr	r2, [pc, #460]	@ (800d5ec <_tx_timer_thread_entry+0x1dc>)
 800d420:	4293      	cmp	r3, r2
 800d422:	f040 80de 	bne.w	800d5e2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d426:	f3ef 8310 	mrs	r3, PRIMASK
 800d42a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800d42c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800d42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d430:	b672      	cpsid	i
    return(int_posture);
 800d432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800d434:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800d436:	4b6e      	ldr	r3, [pc, #440]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f107 020c 	add.w	r2, r7, #12
 800d44a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800d44c:	4b68      	ldr	r3, [pc, #416]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800d454:	4b66      	ldr	r3, [pc, #408]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	3304      	adds	r3, #4
 800d45a:	4a65      	ldr	r2, [pc, #404]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d45c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800d45e:	4b64      	ldr	r3, [pc, #400]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b64      	ldr	r3, [pc, #400]	@ (800d5f4 <_tx_timer_thread_entry+0x1e4>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	429a      	cmp	r2, r3
 800d468:	d103      	bne.n	800d472 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800d46a:	4b63      	ldr	r3, [pc, #396]	@ (800d5f8 <_tx_timer_thread_entry+0x1e8>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a60      	ldr	r2, [pc, #384]	@ (800d5f0 <_tx_timer_thread_entry+0x1e0>)
 800d470:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800d472:	4b62      	ldr	r3, [pc, #392]	@ (800d5fc <_tx_timer_thread_entry+0x1ec>)
 800d474:	2200      	movs	r2, #0
 800d476:	601a      	str	r2, [r3, #0]
 800d478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d47a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f383 8810 	msr	PRIMASK, r3
}
 800d482:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d484:	f3ef 8310 	mrs	r3, PRIMASK
 800d488:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800d48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800d48c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800d48e:	b672      	cpsid	i
    return(int_posture);
 800d490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800d492:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800d494:	e07f      	b.n	800d596 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800d4a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d102      	bne.n	800d4b2 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	e00e      	b.n	800d4d0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800d4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d4b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4bc:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4c2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800d4c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4c6:	f107 020c 	add.w	r2, r7, #12
 800d4ca:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800d4cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4ce:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d4d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b20      	cmp	r3, #32
 800d4d6:	d911      	bls.n	800d4fc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800d4d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ea:	f107 0208 	add.w	r2, r7, #8
 800d4ee:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800d4f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4f4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800d4f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4f8:	60bb      	str	r3, [r7, #8]
 800d4fa:	e01a      	b.n	800d532 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800d4fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800d502:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800d508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d50e:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800d510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d009      	beq.n	800d52c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d51a:	f107 0208 	add.w	r2, r7, #8
 800d51e:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800d520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d522:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d524:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800d526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d528:	60bb      	str	r3, [r7, #8]
 800d52a:	e002      	b.n	800d532 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800d52c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d52e:	2200      	movs	r2, #0
 800d530:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800d532:	4a33      	ldr	r2, [pc, #204]	@ (800d600 <_tx_timer_thread_entry+0x1f0>)
 800d534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d536:	6013      	str	r3, [r2, #0]
 800d538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53e:	f383 8810 	msr	PRIMASK, r3
}
 800d542:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800d544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d546:	2b00      	cmp	r3, #0
 800d548:	d002      	beq.n	800d550 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800d54a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d54c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d54e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d550:	f3ef 8310 	mrs	r3, PRIMASK
 800d554:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800d558:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d55a:	b672      	cpsid	i
    return(int_posture);
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d55e:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800d560:	4b27      	ldr	r3, [pc, #156]	@ (800d600 <_tx_timer_thread_entry+0x1f0>)
 800d562:	2200      	movs	r2, #0
 800d564:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d105      	bne.n	800d57a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800d56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d570:	2200      	movs	r2, #0
 800d572:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800d574:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800d576:	f7ff feb1 	bl	800d2dc <_tx_timer_system_activate>
 800d57a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d57c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	f383 8810 	msr	PRIMASK, r3
}
 800d584:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d586:	f3ef 8310 	mrs	r3, PRIMASK
 800d58a:	623b      	str	r3, [r7, #32]
    return(posture);
 800d58c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d58e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d590:	b672      	cpsid	i
    return(int_posture);
 800d592:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d594:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f47f af7c 	bne.w	800d496 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800d59e:	4b17      	ldr	r3, [pc, #92]	@ (800d5fc <_tx_timer_thread_entry+0x1ec>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d116      	bne.n	800d5d4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800d5a6:	4b17      	ldr	r3, [pc, #92]	@ (800d604 <_tx_timer_thread_entry+0x1f4>)
 800d5a8:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800d5aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ac:	2203      	movs	r2, #3
 800d5ae:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800d5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800d5b6:	4b14      	ldr	r3, [pc, #80]	@ (800d608 <_tx_timer_thread_entry+0x1f8>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	4a12      	ldr	r2, [pc, #72]	@ (800d608 <_tx_timer_thread_entry+0x1f8>)
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	f383 8810 	msr	PRIMASK, r3
}
 800d5ca:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800d5cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d5ce:	f7ff fc23 	bl	800ce18 <_tx_thread_system_suspend>
 800d5d2:	e728      	b.n	800d426 <_tx_timer_thread_entry+0x16>
 800d5d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5d6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f383 8810 	msr	PRIMASK, r3
}
 800d5de:	bf00      	nop
            TX_DISABLE
 800d5e0:	e721      	b.n	800d426 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800d5e2:	bf00      	nop
 800d5e4:	3760      	adds	r7, #96	@ 0x60
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	4154494d 	.word	0x4154494d
 800d5f0:	20004818 	.word	0x20004818
 800d5f4:	20004814 	.word	0x20004814
 800d5f8:	20004810 	.word	0x20004810
 800d5fc:	2000481c 	.word	0x2000481c
 800d600:	20004828 	.word	0x20004828
 800d604:	2000482c 	.word	0x2000482c
 800d608:	2000477c 	.word	0x2000477c

0800d60c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b092      	sub	sp, #72	@ 0x48
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	607a      	str	r2, [r7, #4]
 800d618:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d61a:	2300      	movs	r3, #0
 800d61c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d102      	bne.n	800d62a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d624:	2302      	movs	r3, #2
 800d626:	647b      	str	r3, [r7, #68]	@ 0x44
 800d628:	e075      	b.n	800d716 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800d62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d62c:	2b34      	cmp	r3, #52	@ 0x34
 800d62e:	d002      	beq.n	800d636 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800d630:	2302      	movs	r3, #2
 800d632:	647b      	str	r3, [r7, #68]	@ 0x44
 800d634:	e06f      	b.n	800d716 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d636:	f3ef 8310 	mrs	r3, PRIMASK
 800d63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800d63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800d63e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d640:	b672      	cpsid	i
    return(int_posture);
 800d642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d644:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d646:	4b3b      	ldr	r3, [pc, #236]	@ (800d734 <_txe_byte_pool_create+0x128>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3301      	adds	r3, #1
 800d64c:	4a39      	ldr	r2, [pc, #228]	@ (800d734 <_txe_byte_pool_create+0x128>)
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d652:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d656:	f383 8810 	msr	PRIMASK, r3
}
 800d65a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800d65c:	4b36      	ldr	r3, [pc, #216]	@ (800d738 <_txe_byte_pool_create+0x12c>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d662:	2300      	movs	r3, #0
 800d664:	643b      	str	r3, [r7, #64]	@ 0x40
 800d666:	e009      	b.n	800d67c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d00b      	beq.n	800d688 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800d670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800d676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d678:	3301      	adds	r3, #1
 800d67a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d67c:	4b2f      	ldr	r3, [pc, #188]	@ (800d73c <_txe_byte_pool_create+0x130>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d682:	429a      	cmp	r2, r3
 800d684:	d3f0      	bcc.n	800d668 <_txe_byte_pool_create+0x5c>
 800d686:	e000      	b.n	800d68a <_txe_byte_pool_create+0x7e>
                break;
 800d688:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d68a:	f3ef 8310 	mrs	r3, PRIMASK
 800d68e:	623b      	str	r3, [r7, #32]
    return(posture);
 800d690:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800d692:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d694:	b672      	cpsid	i
    return(int_posture);
 800d696:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d698:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d69a:	4b26      	ldr	r3, [pc, #152]	@ (800d734 <_txe_byte_pool_create+0x128>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	3b01      	subs	r3, #1
 800d6a0:	4a24      	ldr	r2, [pc, #144]	@ (800d734 <_txe_byte_pool_create+0x128>)
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6aa:	f383 8810 	msr	PRIMASK, r3
}
 800d6ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d6b0:	f7ff fa78 	bl	800cba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d102      	bne.n	800d6c2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800d6bc:	2302      	movs	r3, #2
 800d6be:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6c0:	e029      	b.n	800d716 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6cc:	e023      	b.n	800d716 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	2b63      	cmp	r3, #99	@ 0x63
 800d6d2:	d802      	bhi.n	800d6da <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800d6d4:	2305      	movs	r3, #5
 800d6d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6d8:	e01d      	b.n	800d716 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800d6da:	4b19      	ldr	r3, [pc, #100]	@ (800d740 <_txe_byte_pool_create+0x134>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e2:	4a18      	ldr	r2, [pc, #96]	@ (800d744 <_txe_byte_pool_create+0x138>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d101      	bne.n	800d6ec <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d6e8:	2313      	movs	r3, #19
 800d6ea:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6ec:	f3ef 8305 	mrs	r3, IPSR
 800d6f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d6f2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d6f4:	4b14      	ldr	r3, [pc, #80]	@ (800d748 <_txe_byte_pool_create+0x13c>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00b      	beq.n	800d716 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d6fe:	f3ef 8305 	mrs	r3, IPSR
 800d702:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d704:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d706:	4b10      	ldr	r3, [pc, #64]	@ (800d748 <_txe_byte_pool_create+0x13c>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4313      	orrs	r3, r2
 800d70c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d710:	d201      	bcs.n	800d716 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d712:	2313      	movs	r3, #19
 800d714:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	68b9      	ldr	r1, [r7, #8]
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f7fe fed6 	bl	800c4d4 <_tx_byte_pool_create>
 800d728:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800d72a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3748      	adds	r7, #72	@ 0x48
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	2000477c 	.word	0x2000477c
 800d738:	200046d4 	.word	0x200046d4
 800d73c:	200046d8 	.word	0x200046d8
 800d740:	200046e4 	.word	0x200046e4
 800d744:	2000482c 	.word	0x2000482c
 800d748:	20000014 	.word	0x20000014

0800d74c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b09a      	sub	sp, #104	@ 0x68
 800d750:	af06      	add	r7, sp, #24
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800d75a:	2300      	movs	r3, #0
 800d75c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d764:	230e      	movs	r3, #14
 800d766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d768:	e0bb      	b.n	800d8e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800d76a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d76c:	2bb0      	cmp	r3, #176	@ 0xb0
 800d76e:	d002      	beq.n	800d776 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800d770:	230e      	movs	r3, #14
 800d772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d774:	e0b5      	b.n	800d8e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d776:	f3ef 8310 	mrs	r3, PRIMASK
 800d77a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800d77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800d77e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d780:	b672      	cpsid	i
    return(int_posture);
 800d782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800d784:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800d786:	4b64      	ldr	r3, [pc, #400]	@ (800d918 <_txe_thread_create+0x1cc>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3301      	adds	r3, #1
 800d78c:	4a62      	ldr	r2, [pc, #392]	@ (800d918 <_txe_thread_create+0x1cc>)
 800d78e:	6013      	str	r3, [r2, #0]
 800d790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d796:	f383 8810 	msr	PRIMASK, r3
}
 800d79a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800d79c:	2300      	movs	r3, #0
 800d79e:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800d7a0:	4b5e      	ldr	r3, [pc, #376]	@ (800d91c <_txe_thread_create+0x1d0>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800d7a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800d7aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7b0:	4413      	add	r3, r2
 800d7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7bc:	e02b      	b.n	800d816 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d101      	bne.n	800d7ca <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800d7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d028      	beq.n	800d822 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800d7d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d308      	bcc.n	800d7ec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800d7da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d203      	bcs.n	800d7ec <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800d7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7f2:	429a      	cmp	r2, r3
 800d7f4:	d308      	bcc.n	800d808 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800d7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d7f8:	691b      	ldr	r3, [r3, #16]
 800d7fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d203      	bcs.n	800d808 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800d804:	2301      	movs	r3, #1
 800d806:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800d808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d80e:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800d810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d812:	3301      	adds	r3, #1
 800d814:	647b      	str	r3, [r7, #68]	@ 0x44
 800d816:	4b42      	ldr	r3, [pc, #264]	@ (800d920 <_txe_thread_create+0x1d4>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d3ce      	bcc.n	800d7be <_txe_thread_create+0x72>
 800d820:	e000      	b.n	800d824 <_txe_thread_create+0xd8>
                break;
 800d822:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d824:	f3ef 8310 	mrs	r3, PRIMASK
 800d828:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d82a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d82c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d82e:	b672      	cpsid	i
    return(int_posture);
 800d830:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800d832:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800d834:	4b38      	ldr	r3, [pc, #224]	@ (800d918 <_txe_thread_create+0x1cc>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3b01      	subs	r3, #1
 800d83a:	4a37      	ldr	r2, [pc, #220]	@ (800d918 <_txe_thread_create+0x1cc>)
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d840:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	f383 8810 	msr	PRIMASK, r3
}
 800d848:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800d84a:	f7ff f9ab 	bl	800cba4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800d84e:	68fa      	ldr	r2, [r7, #12]
 800d850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d852:	429a      	cmp	r2, r3
 800d854:	d102      	bne.n	800d85c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800d856:	230e      	movs	r3, #14
 800d858:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d85a:	e042      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800d85c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d102      	bne.n	800d868 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d862:	2303      	movs	r3, #3
 800d864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d866:	e03c      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800d86e:	2303      	movs	r3, #3
 800d870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d872:	e036      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800d874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d876:	2bc7      	cmp	r3, #199	@ 0xc7
 800d878:	d802      	bhi.n	800d880 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800d87a:	2305      	movs	r3, #5
 800d87c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d87e:	e030      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800d880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d882:	2b1f      	cmp	r3, #31
 800d884:	d902      	bls.n	800d88c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800d886:	230f      	movs	r3, #15
 800d888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d88a:	e02a      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800d88c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d88e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d890:	429a      	cmp	r2, r3
 800d892:	d902      	bls.n	800d89a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800d894:	2318      	movs	r3, #24
 800d896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d898:	e023      	b.n	800d8e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800d89a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d902      	bls.n	800d8a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800d8a0:	2310      	movs	r3, #16
 800d8a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8a4:	e01d      	b.n	800d8e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800d8a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d924 <_txe_thread_create+0x1d8>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800d8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ae:	4a1e      	ldr	r2, [pc, #120]	@ (800d928 <_txe_thread_create+0x1dc>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d101      	bne.n	800d8b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800d8b4:	2313      	movs	r3, #19
 800d8b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8b8:	f3ef 8305 	mrs	r3, IPSR
 800d8bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d8be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800d8c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d92c <_txe_thread_create+0x1e0>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00b      	beq.n	800d8e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d8ca:	f3ef 8305 	mrs	r3, IPSR
 800d8ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800d8d0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800d8d2:	4b16      	ldr	r3, [pc, #88]	@ (800d92c <_txe_thread_create+0x1e0>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4313      	orrs	r3, r2
 800d8d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800d8dc:	d201      	bcs.n	800d8e2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800d8de:	2313      	movs	r3, #19
 800d8e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800d8e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d112      	bne.n	800d90e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800d8e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8ea:	9305      	str	r3, [sp, #20]
 800d8ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d8f2:	9303      	str	r3, [sp, #12]
 800d8f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d8f6:	9302      	str	r3, [sp, #8]
 800d8f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8fa:	9301      	str	r3, [sp, #4]
 800d8fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	68b9      	ldr	r1, [r7, #8]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7fe fee8 	bl	800c6dc <_tx_thread_create>
 800d90c:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800d90e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800d910:	4618      	mov	r0, r3
 800d912:	3750      	adds	r7, #80	@ 0x50
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	2000477c 	.word	0x2000477c
 800d91c:	200046ec 	.word	0x200046ec
 800d920:	200046f0 	.word	0x200046f0
 800d924:	200046e4 	.word	0x200046e4
 800d928:	2000482c 	.word	0x2000482c
 800d92c:	20000014 	.word	0x20000014

0800d930 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d936:	4b0a      	ldr	r3, [pc, #40]	@ (800d960 <_txe_thread_relinquish+0x30>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d942:	f3ef 8305 	mrs	r3, IPSR
 800d946:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 800d948:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 800d94a:	4b06      	ldr	r3, [pc, #24]	@ (800d964 <_txe_thread_relinquish+0x34>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4313      	orrs	r3, r2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 800d954:	f7fe fff4 	bl	800c940 <_tx_thread_relinquish>
        }
    }
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	200046e4 	.word	0x200046e4
 800d964:	20000014 	.word	0x20000014

0800d968 <__cvt>:
 800d968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d96c:	ec57 6b10 	vmov	r6, r7, d0
 800d970:	2f00      	cmp	r7, #0
 800d972:	460c      	mov	r4, r1
 800d974:	4619      	mov	r1, r3
 800d976:	463b      	mov	r3, r7
 800d978:	bfb4      	ite	lt
 800d97a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d97e:	2300      	movge	r3, #0
 800d980:	4691      	mov	r9, r2
 800d982:	bfbf      	itttt	lt
 800d984:	4632      	movlt	r2, r6
 800d986:	461f      	movlt	r7, r3
 800d988:	232d      	movlt	r3, #45	@ 0x2d
 800d98a:	4616      	movlt	r6, r2
 800d98c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d990:	700b      	strb	r3, [r1, #0]
 800d992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d994:	f023 0820 	bic.w	r8, r3, #32
 800d998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d99c:	d005      	beq.n	800d9aa <__cvt+0x42>
 800d99e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d9a2:	d100      	bne.n	800d9a6 <__cvt+0x3e>
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	2102      	movs	r1, #2
 800d9a8:	e000      	b.n	800d9ac <__cvt+0x44>
 800d9aa:	2103      	movs	r1, #3
 800d9ac:	ab03      	add	r3, sp, #12
 800d9ae:	4622      	mov	r2, r4
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	ab02      	add	r3, sp, #8
 800d9b4:	ec47 6b10 	vmov	d0, r6, r7
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	4653      	mov	r3, sl
 800d9bc:	f001 f8d0 	bl	800eb60 <_dtoa_r>
 800d9c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	d119      	bne.n	800d9fc <__cvt+0x94>
 800d9c8:	f019 0f01 	tst.w	r9, #1
 800d9cc:	d00e      	beq.n	800d9ec <__cvt+0x84>
 800d9ce:	eb00 0904 	add.w	r9, r0, r4
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4630      	mov	r0, r6
 800d9d8:	4639      	mov	r1, r7
 800d9da:	f7f3 f9a7 	bl	8000d2c <__aeabi_dcmpeq>
 800d9de:	b108      	cbz	r0, 800d9e4 <__cvt+0x7c>
 800d9e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9e4:	2230      	movs	r2, #48	@ 0x30
 800d9e6:	9b03      	ldr	r3, [sp, #12]
 800d9e8:	454b      	cmp	r3, r9
 800d9ea:	d31e      	bcc.n	800da2a <__cvt+0xc2>
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9f2:	1b5b      	subs	r3, r3, r5
 800d9f4:	6013      	str	r3, [r2, #0]
 800d9f6:	b004      	add	sp, #16
 800d9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800da00:	eb00 0904 	add.w	r9, r0, r4
 800da04:	d1e5      	bne.n	800d9d2 <__cvt+0x6a>
 800da06:	7803      	ldrb	r3, [r0, #0]
 800da08:	2b30      	cmp	r3, #48	@ 0x30
 800da0a:	d10a      	bne.n	800da22 <__cvt+0xba>
 800da0c:	2200      	movs	r2, #0
 800da0e:	2300      	movs	r3, #0
 800da10:	4630      	mov	r0, r6
 800da12:	4639      	mov	r1, r7
 800da14:	f7f3 f98a 	bl	8000d2c <__aeabi_dcmpeq>
 800da18:	b918      	cbnz	r0, 800da22 <__cvt+0xba>
 800da1a:	f1c4 0401 	rsb	r4, r4, #1
 800da1e:	f8ca 4000 	str.w	r4, [sl]
 800da22:	f8da 3000 	ldr.w	r3, [sl]
 800da26:	4499      	add	r9, r3
 800da28:	e7d3      	b.n	800d9d2 <__cvt+0x6a>
 800da2a:	1c59      	adds	r1, r3, #1
 800da2c:	9103      	str	r1, [sp, #12]
 800da2e:	701a      	strb	r2, [r3, #0]
 800da30:	e7d9      	b.n	800d9e6 <__cvt+0x7e>

0800da32 <__exponent>:
 800da32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da34:	2900      	cmp	r1, #0
 800da36:	7002      	strb	r2, [r0, #0]
 800da38:	bfba      	itte	lt
 800da3a:	4249      	neglt	r1, r1
 800da3c:	232d      	movlt	r3, #45	@ 0x2d
 800da3e:	232b      	movge	r3, #43	@ 0x2b
 800da40:	2909      	cmp	r1, #9
 800da42:	7043      	strb	r3, [r0, #1]
 800da44:	dd28      	ble.n	800da98 <__exponent+0x66>
 800da46:	f10d 0307 	add.w	r3, sp, #7
 800da4a:	270a      	movs	r7, #10
 800da4c:	461d      	mov	r5, r3
 800da4e:	461a      	mov	r2, r3
 800da50:	3b01      	subs	r3, #1
 800da52:	fbb1 f6f7 	udiv	r6, r1, r7
 800da56:	fb07 1416 	mls	r4, r7, r6, r1
 800da5a:	3430      	adds	r4, #48	@ 0x30
 800da5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800da60:	460c      	mov	r4, r1
 800da62:	4631      	mov	r1, r6
 800da64:	2c63      	cmp	r4, #99	@ 0x63
 800da66:	dcf2      	bgt.n	800da4e <__exponent+0x1c>
 800da68:	3130      	adds	r1, #48	@ 0x30
 800da6a:	1e94      	subs	r4, r2, #2
 800da6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800da70:	1c41      	adds	r1, r0, #1
 800da72:	4623      	mov	r3, r4
 800da74:	42ab      	cmp	r3, r5
 800da76:	d30a      	bcc.n	800da8e <__exponent+0x5c>
 800da78:	f10d 0309 	add.w	r3, sp, #9
 800da7c:	1a9b      	subs	r3, r3, r2
 800da7e:	42ac      	cmp	r4, r5
 800da80:	bf88      	it	hi
 800da82:	2300      	movhi	r3, #0
 800da84:	3302      	adds	r3, #2
 800da86:	4403      	add	r3, r0
 800da88:	1a18      	subs	r0, r3, r0
 800da8a:	b003      	add	sp, #12
 800da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800da92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800da96:	e7ed      	b.n	800da74 <__exponent+0x42>
 800da98:	2330      	movs	r3, #48	@ 0x30
 800da9a:	3130      	adds	r1, #48	@ 0x30
 800da9c:	7083      	strb	r3, [r0, #2]
 800da9e:	1d03      	adds	r3, r0, #4
 800daa0:	70c1      	strb	r1, [r0, #3]
 800daa2:	e7f1      	b.n	800da88 <__exponent+0x56>

0800daa4 <_printf_float>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	b08d      	sub	sp, #52	@ 0x34
 800daaa:	460c      	mov	r4, r1
 800daac:	4616      	mov	r6, r2
 800daae:	461f      	mov	r7, r3
 800dab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800dab4:	4605      	mov	r5, r0
 800dab6:	f000 ff37 	bl	800e928 <_localeconv_r>
 800daba:	6803      	ldr	r3, [r0, #0]
 800dabc:	4618      	mov	r0, r3
 800dabe:	9304      	str	r3, [sp, #16]
 800dac0:	f7f2 fd08 	bl	80004d4 <strlen>
 800dac4:	2300      	movs	r3, #0
 800dac6:	9005      	str	r0, [sp, #20]
 800dac8:	930a      	str	r3, [sp, #40]	@ 0x28
 800daca:	f8d8 3000 	ldr.w	r3, [r8]
 800dace:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dad2:	3307      	adds	r3, #7
 800dad4:	f8d4 b000 	ldr.w	fp, [r4]
 800dad8:	f023 0307 	bic.w	r3, r3, #7
 800dadc:	f103 0208 	add.w	r2, r3, #8
 800dae0:	f8c8 2000 	str.w	r2, [r8]
 800dae4:	f04f 32ff 	mov.w	r2, #4294967295
 800dae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800daec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800daf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800daf4:	9307      	str	r3, [sp, #28]
 800daf6:	4b9d      	ldr	r3, [pc, #628]	@ (800dd6c <_printf_float+0x2c8>)
 800daf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dafc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800db00:	f7f3 f946 	bl	8000d90 <__aeabi_dcmpun>
 800db04:	bb70      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db06:	f04f 32ff 	mov.w	r2, #4294967295
 800db0a:	4b98      	ldr	r3, [pc, #608]	@ (800dd6c <_printf_float+0x2c8>)
 800db0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800db10:	f7f3 f920 	bl	8000d54 <__aeabi_dcmple>
 800db14:	bb30      	cbnz	r0, 800db64 <_printf_float+0xc0>
 800db16:	2200      	movs	r2, #0
 800db18:	2300      	movs	r3, #0
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f3 f90f 	bl	8000d40 <__aeabi_dcmplt>
 800db22:	b110      	cbz	r0, 800db2a <_printf_float+0x86>
 800db24:	232d      	movs	r3, #45	@ 0x2d
 800db26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db2a:	4a91      	ldr	r2, [pc, #580]	@ (800dd70 <_printf_float+0x2cc>)
 800db2c:	4b91      	ldr	r3, [pc, #580]	@ (800dd74 <_printf_float+0x2d0>)
 800db2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800db32:	bf94      	ite	ls
 800db34:	4690      	movls	r8, r2
 800db36:	4698      	movhi	r8, r3
 800db38:	2303      	movs	r3, #3
 800db3a:	f04f 0900 	mov.w	r9, #0
 800db3e:	6123      	str	r3, [r4, #16]
 800db40:	f02b 0304 	bic.w	r3, fp, #4
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	4633      	mov	r3, r6
 800db48:	aa0b      	add	r2, sp, #44	@ 0x2c
 800db4a:	4621      	mov	r1, r4
 800db4c:	4628      	mov	r0, r5
 800db4e:	9700      	str	r7, [sp, #0]
 800db50:	f000 f9d2 	bl	800def8 <_printf_common>
 800db54:	3001      	adds	r0, #1
 800db56:	f040 808d 	bne.w	800dc74 <_printf_float+0x1d0>
 800db5a:	f04f 30ff 	mov.w	r0, #4294967295
 800db5e:	b00d      	add	sp, #52	@ 0x34
 800db60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db64:	4642      	mov	r2, r8
 800db66:	464b      	mov	r3, r9
 800db68:	4640      	mov	r0, r8
 800db6a:	4649      	mov	r1, r9
 800db6c:	f7f3 f910 	bl	8000d90 <__aeabi_dcmpun>
 800db70:	b140      	cbz	r0, 800db84 <_printf_float+0xe0>
 800db72:	464b      	mov	r3, r9
 800db74:	4a80      	ldr	r2, [pc, #512]	@ (800dd78 <_printf_float+0x2d4>)
 800db76:	2b00      	cmp	r3, #0
 800db78:	bfbc      	itt	lt
 800db7a:	232d      	movlt	r3, #45	@ 0x2d
 800db7c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800db80:	4b7e      	ldr	r3, [pc, #504]	@ (800dd7c <_printf_float+0x2d8>)
 800db82:	e7d4      	b.n	800db2e <_printf_float+0x8a>
 800db84:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800db88:	6863      	ldr	r3, [r4, #4]
 800db8a:	9206      	str	r2, [sp, #24]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	d13b      	bne.n	800dc08 <_printf_float+0x164>
 800db90:	2306      	movs	r3, #6
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800db98:	2300      	movs	r3, #0
 800db9a:	4628      	mov	r0, r5
 800db9c:	6022      	str	r2, [r4, #0]
 800db9e:	9303      	str	r3, [sp, #12]
 800dba0:	ab0a      	add	r3, sp, #40	@ 0x28
 800dba2:	e9cd a301 	strd	sl, r3, [sp, #4]
 800dba6:	ab09      	add	r3, sp, #36	@ 0x24
 800dba8:	ec49 8b10 	vmov	d0, r8, r9
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800dbb2:	6861      	ldr	r1, [r4, #4]
 800dbb4:	f7ff fed8 	bl	800d968 <__cvt>
 800dbb8:	9b06      	ldr	r3, [sp, #24]
 800dbba:	4680      	mov	r8, r0
 800dbbc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbbe:	2b47      	cmp	r3, #71	@ 0x47
 800dbc0:	d129      	bne.n	800dc16 <_printf_float+0x172>
 800dbc2:	1cc8      	adds	r0, r1, #3
 800dbc4:	db02      	blt.n	800dbcc <_printf_float+0x128>
 800dbc6:	6863      	ldr	r3, [r4, #4]
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	dd41      	ble.n	800dc50 <_printf_float+0x1ac>
 800dbcc:	f1aa 0a02 	sub.w	sl, sl, #2
 800dbd0:	fa5f fa8a 	uxtb.w	sl, sl
 800dbd4:	3901      	subs	r1, #1
 800dbd6:	4652      	mov	r2, sl
 800dbd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dbdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800dbde:	f7ff ff28 	bl	800da32 <__exponent>
 800dbe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbe4:	4681      	mov	r9, r0
 800dbe6:	1813      	adds	r3, r2, r0
 800dbe8:	2a01      	cmp	r2, #1
 800dbea:	6123      	str	r3, [r4, #16]
 800dbec:	dc02      	bgt.n	800dbf4 <_printf_float+0x150>
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	07d2      	lsls	r2, r2, #31
 800dbf2:	d501      	bpl.n	800dbf8 <_printf_float+0x154>
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0a2      	beq.n	800db46 <_printf_float+0xa2>
 800dc00:	232d      	movs	r3, #45	@ 0x2d
 800dc02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc06:	e79e      	b.n	800db46 <_printf_float+0xa2>
 800dc08:	9a06      	ldr	r2, [sp, #24]
 800dc0a:	2a47      	cmp	r2, #71	@ 0x47
 800dc0c:	d1c2      	bne.n	800db94 <_printf_float+0xf0>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1c0      	bne.n	800db94 <_printf_float+0xf0>
 800dc12:	2301      	movs	r3, #1
 800dc14:	e7bd      	b.n	800db92 <_printf_float+0xee>
 800dc16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc1a:	d9db      	bls.n	800dbd4 <_printf_float+0x130>
 800dc1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dc20:	d118      	bne.n	800dc54 <_printf_float+0x1b0>
 800dc22:	2900      	cmp	r1, #0
 800dc24:	6863      	ldr	r3, [r4, #4]
 800dc26:	dd0b      	ble.n	800dc40 <_printf_float+0x19c>
 800dc28:	6121      	str	r1, [r4, #16]
 800dc2a:	b913      	cbnz	r3, 800dc32 <_printf_float+0x18e>
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	07d0      	lsls	r0, r2, #31
 800dc30:	d502      	bpl.n	800dc38 <_printf_float+0x194>
 800dc32:	3301      	adds	r3, #1
 800dc34:	440b      	add	r3, r1
 800dc36:	6123      	str	r3, [r4, #16]
 800dc38:	f04f 0900 	mov.w	r9, #0
 800dc3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dc3e:	e7db      	b.n	800dbf8 <_printf_float+0x154>
 800dc40:	b913      	cbnz	r3, 800dc48 <_printf_float+0x1a4>
 800dc42:	6822      	ldr	r2, [r4, #0]
 800dc44:	07d2      	lsls	r2, r2, #31
 800dc46:	d501      	bpl.n	800dc4c <_printf_float+0x1a8>
 800dc48:	3302      	adds	r3, #2
 800dc4a:	e7f4      	b.n	800dc36 <_printf_float+0x192>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e7f2      	b.n	800dc36 <_printf_float+0x192>
 800dc50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dc54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc56:	4299      	cmp	r1, r3
 800dc58:	db05      	blt.n	800dc66 <_printf_float+0x1c2>
 800dc5a:	6823      	ldr	r3, [r4, #0]
 800dc5c:	6121      	str	r1, [r4, #16]
 800dc5e:	07d8      	lsls	r0, r3, #31
 800dc60:	d5ea      	bpl.n	800dc38 <_printf_float+0x194>
 800dc62:	1c4b      	adds	r3, r1, #1
 800dc64:	e7e7      	b.n	800dc36 <_printf_float+0x192>
 800dc66:	2900      	cmp	r1, #0
 800dc68:	bfd4      	ite	le
 800dc6a:	f1c1 0202 	rsble	r2, r1, #2
 800dc6e:	2201      	movgt	r2, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	e7e0      	b.n	800dc36 <_printf_float+0x192>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	055a      	lsls	r2, r3, #21
 800dc78:	d407      	bmi.n	800dc8a <_printf_float+0x1e6>
 800dc7a:	6923      	ldr	r3, [r4, #16]
 800dc7c:	4642      	mov	r2, r8
 800dc7e:	4631      	mov	r1, r6
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b8      	blx	r7
 800dc84:	3001      	adds	r0, #1
 800dc86:	d12b      	bne.n	800dce0 <_printf_float+0x23c>
 800dc88:	e767      	b.n	800db5a <_printf_float+0xb6>
 800dc8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dc8e:	f240 80dd 	bls.w	800de4c <_printf_float+0x3a8>
 800dc92:	2200      	movs	r2, #0
 800dc94:	2300      	movs	r3, #0
 800dc96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dc9a:	f7f3 f847 	bl	8000d2c <__aeabi_dcmpeq>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d033      	beq.n	800dd0a <_printf_float+0x266>
 800dca2:	2301      	movs	r3, #1
 800dca4:	4a36      	ldr	r2, [pc, #216]	@ (800dd80 <_printf_float+0x2dc>)
 800dca6:	4631      	mov	r1, r6
 800dca8:	4628      	mov	r0, r5
 800dcaa:	47b8      	blx	r7
 800dcac:	3001      	adds	r0, #1
 800dcae:	f43f af54 	beq.w	800db5a <_printf_float+0xb6>
 800dcb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800dcb6:	4543      	cmp	r3, r8
 800dcb8:	db02      	blt.n	800dcc0 <_printf_float+0x21c>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	07d8      	lsls	r0, r3, #31
 800dcbe:	d50f      	bpl.n	800dce0 <_printf_float+0x23c>
 800dcc0:	4631      	mov	r1, r6
 800dcc2:	4628      	mov	r0, r5
 800dcc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc8:	47b8      	blx	r7
 800dcca:	3001      	adds	r0, #1
 800dccc:	f43f af45 	beq.w	800db5a <_printf_float+0xb6>
 800dcd0:	f04f 0900 	mov.w	r9, #0
 800dcd4:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcd8:	f104 0a1a 	add.w	sl, r4, #26
 800dcdc:	45c8      	cmp	r8, r9
 800dcde:	dc09      	bgt.n	800dcf4 <_printf_float+0x250>
 800dce0:	6823      	ldr	r3, [r4, #0]
 800dce2:	079b      	lsls	r3, r3, #30
 800dce4:	f100 8103 	bmi.w	800deee <_printf_float+0x44a>
 800dce8:	68e0      	ldr	r0, [r4, #12]
 800dcea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcec:	4298      	cmp	r0, r3
 800dcee:	bfb8      	it	lt
 800dcf0:	4618      	movlt	r0, r3
 800dcf2:	e734      	b.n	800db5e <_printf_float+0xba>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	4652      	mov	r2, sl
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b8      	blx	r7
 800dcfe:	3001      	adds	r0, #1
 800dd00:	f43f af2b 	beq.w	800db5a <_printf_float+0xb6>
 800dd04:	f109 0901 	add.w	r9, r9, #1
 800dd08:	e7e8      	b.n	800dcdc <_printf_float+0x238>
 800dd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	dc39      	bgt.n	800dd84 <_printf_float+0x2e0>
 800dd10:	2301      	movs	r3, #1
 800dd12:	4a1b      	ldr	r2, [pc, #108]	@ (800dd80 <_printf_float+0x2dc>)
 800dd14:	4631      	mov	r1, r6
 800dd16:	4628      	mov	r0, r5
 800dd18:	47b8      	blx	r7
 800dd1a:	3001      	adds	r0, #1
 800dd1c:	f43f af1d 	beq.w	800db5a <_printf_float+0xb6>
 800dd20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dd24:	ea59 0303 	orrs.w	r3, r9, r3
 800dd28:	d102      	bne.n	800dd30 <_printf_float+0x28c>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	07d9      	lsls	r1, r3, #31
 800dd2e:	d5d7      	bpl.n	800dce0 <_printf_float+0x23c>
 800dd30:	4631      	mov	r1, r6
 800dd32:	4628      	mov	r0, r5
 800dd34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd38:	47b8      	blx	r7
 800dd3a:	3001      	adds	r0, #1
 800dd3c:	f43f af0d 	beq.w	800db5a <_printf_float+0xb6>
 800dd40:	f04f 0a00 	mov.w	sl, #0
 800dd44:	f104 0b1a 	add.w	fp, r4, #26
 800dd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd4a:	425b      	negs	r3, r3
 800dd4c:	4553      	cmp	r3, sl
 800dd4e:	dc01      	bgt.n	800dd54 <_printf_float+0x2b0>
 800dd50:	464b      	mov	r3, r9
 800dd52:	e793      	b.n	800dc7c <_printf_float+0x1d8>
 800dd54:	2301      	movs	r3, #1
 800dd56:	465a      	mov	r2, fp
 800dd58:	4631      	mov	r1, r6
 800dd5a:	4628      	mov	r0, r5
 800dd5c:	47b8      	blx	r7
 800dd5e:	3001      	adds	r0, #1
 800dd60:	f43f aefb 	beq.w	800db5a <_printf_float+0xb6>
 800dd64:	f10a 0a01 	add.w	sl, sl, #1
 800dd68:	e7ee      	b.n	800dd48 <_printf_float+0x2a4>
 800dd6a:	bf00      	nop
 800dd6c:	7fefffff 	.word	0x7fefffff
 800dd70:	08012338 	.word	0x08012338
 800dd74:	0801233c 	.word	0x0801233c
 800dd78:	08012340 	.word	0x08012340
 800dd7c:	08012344 	.word	0x08012344
 800dd80:	08012348 	.word	0x08012348
 800dd84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dd86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dd8a:	4553      	cmp	r3, sl
 800dd8c:	bfa8      	it	ge
 800dd8e:	4653      	movge	r3, sl
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	4699      	mov	r9, r3
 800dd94:	dc36      	bgt.n	800de04 <_printf_float+0x360>
 800dd96:	f04f 0b00 	mov.w	fp, #0
 800dd9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd9e:	f104 021a 	add.w	r2, r4, #26
 800dda2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dda4:	9306      	str	r3, [sp, #24]
 800dda6:	eba3 0309 	sub.w	r3, r3, r9
 800ddaa:	455b      	cmp	r3, fp
 800ddac:	dc31      	bgt.n	800de12 <_printf_float+0x36e>
 800ddae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddb0:	459a      	cmp	sl, r3
 800ddb2:	dc3a      	bgt.n	800de2a <_printf_float+0x386>
 800ddb4:	6823      	ldr	r3, [r4, #0]
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d437      	bmi.n	800de2a <_printf_float+0x386>
 800ddba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddbc:	ebaa 0903 	sub.w	r9, sl, r3
 800ddc0:	9b06      	ldr	r3, [sp, #24]
 800ddc2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddc6:	4599      	cmp	r9, r3
 800ddc8:	bfa8      	it	ge
 800ddca:	4699      	movge	r9, r3
 800ddcc:	f1b9 0f00 	cmp.w	r9, #0
 800ddd0:	dc33      	bgt.n	800de3a <_printf_float+0x396>
 800ddd2:	f04f 0800 	mov.w	r8, #0
 800ddd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ddda:	f104 0b1a 	add.w	fp, r4, #26
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	ebaa 0303 	sub.w	r3, sl, r3
 800dde4:	eba3 0309 	sub.w	r3, r3, r9
 800dde8:	4543      	cmp	r3, r8
 800ddea:	f77f af79 	ble.w	800dce0 <_printf_float+0x23c>
 800ddee:	2301      	movs	r3, #1
 800ddf0:	465a      	mov	r2, fp
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b8      	blx	r7
 800ddf8:	3001      	adds	r0, #1
 800ddfa:	f43f aeae 	beq.w	800db5a <_printf_float+0xb6>
 800ddfe:	f108 0801 	add.w	r8, r8, #1
 800de02:	e7ec      	b.n	800ddde <_printf_float+0x33a>
 800de04:	4642      	mov	r2, r8
 800de06:	4631      	mov	r1, r6
 800de08:	4628      	mov	r0, r5
 800de0a:	47b8      	blx	r7
 800de0c:	3001      	adds	r0, #1
 800de0e:	d1c2      	bne.n	800dd96 <_printf_float+0x2f2>
 800de10:	e6a3      	b.n	800db5a <_printf_float+0xb6>
 800de12:	2301      	movs	r3, #1
 800de14:	4631      	mov	r1, r6
 800de16:	4628      	mov	r0, r5
 800de18:	9206      	str	r2, [sp, #24]
 800de1a:	47b8      	blx	r7
 800de1c:	3001      	adds	r0, #1
 800de1e:	f43f ae9c 	beq.w	800db5a <_printf_float+0xb6>
 800de22:	f10b 0b01 	add.w	fp, fp, #1
 800de26:	9a06      	ldr	r2, [sp, #24]
 800de28:	e7bb      	b.n	800dda2 <_printf_float+0x2fe>
 800de2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	d1c0      	bne.n	800ddba <_printf_float+0x316>
 800de38:	e68f      	b.n	800db5a <_printf_float+0xb6>
 800de3a:	9a06      	ldr	r2, [sp, #24]
 800de3c:	464b      	mov	r3, r9
 800de3e:	4631      	mov	r1, r6
 800de40:	4628      	mov	r0, r5
 800de42:	4442      	add	r2, r8
 800de44:	47b8      	blx	r7
 800de46:	3001      	adds	r0, #1
 800de48:	d1c3      	bne.n	800ddd2 <_printf_float+0x32e>
 800de4a:	e686      	b.n	800db5a <_printf_float+0xb6>
 800de4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800de50:	f1ba 0f01 	cmp.w	sl, #1
 800de54:	dc01      	bgt.n	800de5a <_printf_float+0x3b6>
 800de56:	07db      	lsls	r3, r3, #31
 800de58:	d536      	bpl.n	800dec8 <_printf_float+0x424>
 800de5a:	2301      	movs	r3, #1
 800de5c:	4642      	mov	r2, r8
 800de5e:	4631      	mov	r1, r6
 800de60:	4628      	mov	r0, r5
 800de62:	47b8      	blx	r7
 800de64:	3001      	adds	r0, #1
 800de66:	f43f ae78 	beq.w	800db5a <_printf_float+0xb6>
 800de6a:	4631      	mov	r1, r6
 800de6c:	4628      	mov	r0, r5
 800de6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de72:	47b8      	blx	r7
 800de74:	3001      	adds	r0, #1
 800de76:	f43f ae70 	beq.w	800db5a <_printf_float+0xb6>
 800de7a:	2200      	movs	r2, #0
 800de7c:	2300      	movs	r3, #0
 800de7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800de86:	f7f2 ff51 	bl	8000d2c <__aeabi_dcmpeq>
 800de8a:	b9c0      	cbnz	r0, 800debe <_printf_float+0x41a>
 800de8c:	4653      	mov	r3, sl
 800de8e:	f108 0201 	add.w	r2, r8, #1
 800de92:	4631      	mov	r1, r6
 800de94:	4628      	mov	r0, r5
 800de96:	47b8      	blx	r7
 800de98:	3001      	adds	r0, #1
 800de9a:	d10c      	bne.n	800deb6 <_printf_float+0x412>
 800de9c:	e65d      	b.n	800db5a <_printf_float+0xb6>
 800de9e:	2301      	movs	r3, #1
 800dea0:	465a      	mov	r2, fp
 800dea2:	4631      	mov	r1, r6
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	f43f ae56 	beq.w	800db5a <_printf_float+0xb6>
 800deae:	f108 0801 	add.w	r8, r8, #1
 800deb2:	45d0      	cmp	r8, sl
 800deb4:	dbf3      	blt.n	800de9e <_printf_float+0x3fa>
 800deb6:	464b      	mov	r3, r9
 800deb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800debc:	e6df      	b.n	800dc7e <_printf_float+0x1da>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	f104 0b1a 	add.w	fp, r4, #26
 800dec6:	e7f4      	b.n	800deb2 <_printf_float+0x40e>
 800dec8:	2301      	movs	r3, #1
 800deca:	4642      	mov	r2, r8
 800decc:	e7e1      	b.n	800de92 <_printf_float+0x3ee>
 800dece:	2301      	movs	r3, #1
 800ded0:	464a      	mov	r2, r9
 800ded2:	4631      	mov	r1, r6
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b8      	blx	r7
 800ded8:	3001      	adds	r0, #1
 800deda:	f43f ae3e 	beq.w	800db5a <_printf_float+0xb6>
 800dede:	f108 0801 	add.w	r8, r8, #1
 800dee2:	68e3      	ldr	r3, [r4, #12]
 800dee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dee6:	1a5b      	subs	r3, r3, r1
 800dee8:	4543      	cmp	r3, r8
 800deea:	dcf0      	bgt.n	800dece <_printf_float+0x42a>
 800deec:	e6fc      	b.n	800dce8 <_printf_float+0x244>
 800deee:	f04f 0800 	mov.w	r8, #0
 800def2:	f104 0919 	add.w	r9, r4, #25
 800def6:	e7f4      	b.n	800dee2 <_printf_float+0x43e>

0800def8 <_printf_common>:
 800def8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defc:	4616      	mov	r6, r2
 800defe:	4698      	mov	r8, r3
 800df00:	688a      	ldr	r2, [r1, #8]
 800df02:	4607      	mov	r7, r0
 800df04:	690b      	ldr	r3, [r1, #16]
 800df06:	460c      	mov	r4, r1
 800df08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800df0c:	4293      	cmp	r3, r2
 800df0e:	bfb8      	it	lt
 800df10:	4613      	movlt	r3, r2
 800df12:	6033      	str	r3, [r6, #0]
 800df14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df18:	b10a      	cbz	r2, 800df1e <_printf_common+0x26>
 800df1a:	3301      	adds	r3, #1
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	6823      	ldr	r3, [r4, #0]
 800df20:	0699      	lsls	r1, r3, #26
 800df22:	bf42      	ittt	mi
 800df24:	6833      	ldrmi	r3, [r6, #0]
 800df26:	3302      	addmi	r3, #2
 800df28:	6033      	strmi	r3, [r6, #0]
 800df2a:	6825      	ldr	r5, [r4, #0]
 800df2c:	f015 0506 	ands.w	r5, r5, #6
 800df30:	d106      	bne.n	800df40 <_printf_common+0x48>
 800df32:	f104 0a19 	add.w	sl, r4, #25
 800df36:	68e3      	ldr	r3, [r4, #12]
 800df38:	6832      	ldr	r2, [r6, #0]
 800df3a:	1a9b      	subs	r3, r3, r2
 800df3c:	42ab      	cmp	r3, r5
 800df3e:	dc2b      	bgt.n	800df98 <_printf_common+0xa0>
 800df40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df44:	6822      	ldr	r2, [r4, #0]
 800df46:	3b00      	subs	r3, #0
 800df48:	bf18      	it	ne
 800df4a:	2301      	movne	r3, #1
 800df4c:	0692      	lsls	r2, r2, #26
 800df4e:	d430      	bmi.n	800dfb2 <_printf_common+0xba>
 800df50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df54:	4641      	mov	r1, r8
 800df56:	4638      	mov	r0, r7
 800df58:	47c8      	blx	r9
 800df5a:	3001      	adds	r0, #1
 800df5c:	d023      	beq.n	800dfa6 <_printf_common+0xae>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	341a      	adds	r4, #26
 800df62:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800df66:	f003 0306 	and.w	r3, r3, #6
 800df6a:	2b04      	cmp	r3, #4
 800df6c:	bf0a      	itet	eq
 800df6e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800df72:	2500      	movne	r5, #0
 800df74:	6833      	ldreq	r3, [r6, #0]
 800df76:	f04f 0600 	mov.w	r6, #0
 800df7a:	bf08      	it	eq
 800df7c:	1aed      	subeq	r5, r5, r3
 800df7e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800df82:	bf08      	it	eq
 800df84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df88:	4293      	cmp	r3, r2
 800df8a:	bfc4      	itt	gt
 800df8c:	1a9b      	subgt	r3, r3, r2
 800df8e:	18ed      	addgt	r5, r5, r3
 800df90:	42b5      	cmp	r5, r6
 800df92:	d11a      	bne.n	800dfca <_printf_common+0xd2>
 800df94:	2000      	movs	r0, #0
 800df96:	e008      	b.n	800dfaa <_printf_common+0xb2>
 800df98:	2301      	movs	r3, #1
 800df9a:	4652      	mov	r2, sl
 800df9c:	4641      	mov	r1, r8
 800df9e:	4638      	mov	r0, r7
 800dfa0:	47c8      	blx	r9
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	d103      	bne.n	800dfae <_printf_common+0xb6>
 800dfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfae:	3501      	adds	r5, #1
 800dfb0:	e7c1      	b.n	800df36 <_printf_common+0x3e>
 800dfb2:	18e1      	adds	r1, r4, r3
 800dfb4:	1c5a      	adds	r2, r3, #1
 800dfb6:	2030      	movs	r0, #48	@ 0x30
 800dfb8:	3302      	adds	r3, #2
 800dfba:	4422      	add	r2, r4
 800dfbc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dfc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfc8:	e7c2      	b.n	800df50 <_printf_common+0x58>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4641      	mov	r1, r8
 800dfd0:	4638      	mov	r0, r7
 800dfd2:	47c8      	blx	r9
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	d0e6      	beq.n	800dfa6 <_printf_common+0xae>
 800dfd8:	3601      	adds	r6, #1
 800dfda:	e7d9      	b.n	800df90 <_printf_common+0x98>

0800dfdc <_printf_i>:
 800dfdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfe0:	7e0f      	ldrb	r7, [r1, #24]
 800dfe2:	4691      	mov	r9, r2
 800dfe4:	4680      	mov	r8, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	2f78      	cmp	r7, #120	@ 0x78
 800dfea:	469a      	mov	sl, r3
 800dfec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dff2:	d807      	bhi.n	800e004 <_printf_i+0x28>
 800dff4:	2f62      	cmp	r7, #98	@ 0x62
 800dff6:	d80a      	bhi.n	800e00e <_printf_i+0x32>
 800dff8:	2f00      	cmp	r7, #0
 800dffa:	f000 80d2 	beq.w	800e1a2 <_printf_i+0x1c6>
 800dffe:	2f58      	cmp	r7, #88	@ 0x58
 800e000:	f000 80b9 	beq.w	800e176 <_printf_i+0x19a>
 800e004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e00c:	e03a      	b.n	800e084 <_printf_i+0xa8>
 800e00e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e012:	2b15      	cmp	r3, #21
 800e014:	d8f6      	bhi.n	800e004 <_printf_i+0x28>
 800e016:	a101      	add	r1, pc, #4	@ (adr r1, 800e01c <_printf_i+0x40>)
 800e018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e01c:	0800e075 	.word	0x0800e075
 800e020:	0800e089 	.word	0x0800e089
 800e024:	0800e005 	.word	0x0800e005
 800e028:	0800e005 	.word	0x0800e005
 800e02c:	0800e005 	.word	0x0800e005
 800e030:	0800e005 	.word	0x0800e005
 800e034:	0800e089 	.word	0x0800e089
 800e038:	0800e005 	.word	0x0800e005
 800e03c:	0800e005 	.word	0x0800e005
 800e040:	0800e005 	.word	0x0800e005
 800e044:	0800e005 	.word	0x0800e005
 800e048:	0800e189 	.word	0x0800e189
 800e04c:	0800e0b3 	.word	0x0800e0b3
 800e050:	0800e143 	.word	0x0800e143
 800e054:	0800e005 	.word	0x0800e005
 800e058:	0800e005 	.word	0x0800e005
 800e05c:	0800e1ab 	.word	0x0800e1ab
 800e060:	0800e005 	.word	0x0800e005
 800e064:	0800e0b3 	.word	0x0800e0b3
 800e068:	0800e005 	.word	0x0800e005
 800e06c:	0800e005 	.word	0x0800e005
 800e070:	0800e14b 	.word	0x0800e14b
 800e074:	6833      	ldr	r3, [r6, #0]
 800e076:	1d1a      	adds	r2, r3, #4
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	6032      	str	r2, [r6, #0]
 800e07c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e084:	2301      	movs	r3, #1
 800e086:	e09d      	b.n	800e1c4 <_printf_i+0x1e8>
 800e088:	6833      	ldr	r3, [r6, #0]
 800e08a:	6820      	ldr	r0, [r4, #0]
 800e08c:	1d19      	adds	r1, r3, #4
 800e08e:	6031      	str	r1, [r6, #0]
 800e090:	0606      	lsls	r6, r0, #24
 800e092:	d501      	bpl.n	800e098 <_printf_i+0xbc>
 800e094:	681d      	ldr	r5, [r3, #0]
 800e096:	e003      	b.n	800e0a0 <_printf_i+0xc4>
 800e098:	0645      	lsls	r5, r0, #25
 800e09a:	d5fb      	bpl.n	800e094 <_printf_i+0xb8>
 800e09c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e0a0:	2d00      	cmp	r5, #0
 800e0a2:	da03      	bge.n	800e0ac <_printf_i+0xd0>
 800e0a4:	232d      	movs	r3, #45	@ 0x2d
 800e0a6:	426d      	negs	r5, r5
 800e0a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e0ac:	4859      	ldr	r0, [pc, #356]	@ (800e214 <_printf_i+0x238>)
 800e0ae:	230a      	movs	r3, #10
 800e0b0:	e011      	b.n	800e0d6 <_printf_i+0xfa>
 800e0b2:	6821      	ldr	r1, [r4, #0]
 800e0b4:	6833      	ldr	r3, [r6, #0]
 800e0b6:	0608      	lsls	r0, r1, #24
 800e0b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0bc:	d402      	bmi.n	800e0c4 <_printf_i+0xe8>
 800e0be:	0649      	lsls	r1, r1, #25
 800e0c0:	bf48      	it	mi
 800e0c2:	b2ad      	uxthmi	r5, r5
 800e0c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0c6:	6033      	str	r3, [r6, #0]
 800e0c8:	4852      	ldr	r0, [pc, #328]	@ (800e214 <_printf_i+0x238>)
 800e0ca:	bf14      	ite	ne
 800e0cc:	230a      	movne	r3, #10
 800e0ce:	2308      	moveq	r3, #8
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0d6:	6866      	ldr	r6, [r4, #4]
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	60a6      	str	r6, [r4, #8]
 800e0dc:	bfa2      	ittt	ge
 800e0de:	6821      	ldrge	r1, [r4, #0]
 800e0e0:	f021 0104 	bicge.w	r1, r1, #4
 800e0e4:	6021      	strge	r1, [r4, #0]
 800e0e6:	b90d      	cbnz	r5, 800e0ec <_printf_i+0x110>
 800e0e8:	2e00      	cmp	r6, #0
 800e0ea:	d04b      	beq.n	800e184 <_printf_i+0x1a8>
 800e0ec:	4616      	mov	r6, r2
 800e0ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0f2:	fb03 5711 	mls	r7, r3, r1, r5
 800e0f6:	5dc7      	ldrb	r7, [r0, r7]
 800e0f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0fc:	462f      	mov	r7, r5
 800e0fe:	460d      	mov	r5, r1
 800e100:	42bb      	cmp	r3, r7
 800e102:	d9f4      	bls.n	800e0ee <_printf_i+0x112>
 800e104:	2b08      	cmp	r3, #8
 800e106:	d10b      	bne.n	800e120 <_printf_i+0x144>
 800e108:	6823      	ldr	r3, [r4, #0]
 800e10a:	07df      	lsls	r7, r3, #31
 800e10c:	d508      	bpl.n	800e120 <_printf_i+0x144>
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	6861      	ldr	r1, [r4, #4]
 800e112:	4299      	cmp	r1, r3
 800e114:	bfde      	ittt	le
 800e116:	2330      	movle	r3, #48	@ 0x30
 800e118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e11c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e120:	1b92      	subs	r2, r2, r6
 800e122:	6122      	str	r2, [r4, #16]
 800e124:	464b      	mov	r3, r9
 800e126:	aa03      	add	r2, sp, #12
 800e128:	4621      	mov	r1, r4
 800e12a:	4640      	mov	r0, r8
 800e12c:	f8cd a000 	str.w	sl, [sp]
 800e130:	f7ff fee2 	bl	800def8 <_printf_common>
 800e134:	3001      	adds	r0, #1
 800e136:	d14a      	bne.n	800e1ce <_printf_i+0x1f2>
 800e138:	f04f 30ff 	mov.w	r0, #4294967295
 800e13c:	b004      	add	sp, #16
 800e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e142:	6823      	ldr	r3, [r4, #0]
 800e144:	f043 0320 	orr.w	r3, r3, #32
 800e148:	6023      	str	r3, [r4, #0]
 800e14a:	2778      	movs	r7, #120	@ 0x78
 800e14c:	4832      	ldr	r0, [pc, #200]	@ (800e218 <_printf_i+0x23c>)
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e154:	061f      	lsls	r7, r3, #24
 800e156:	6831      	ldr	r1, [r6, #0]
 800e158:	f851 5b04 	ldr.w	r5, [r1], #4
 800e15c:	d402      	bmi.n	800e164 <_printf_i+0x188>
 800e15e:	065f      	lsls	r7, r3, #25
 800e160:	bf48      	it	mi
 800e162:	b2ad      	uxthmi	r5, r5
 800e164:	6031      	str	r1, [r6, #0]
 800e166:	07d9      	lsls	r1, r3, #31
 800e168:	bf44      	itt	mi
 800e16a:	f043 0320 	orrmi.w	r3, r3, #32
 800e16e:	6023      	strmi	r3, [r4, #0]
 800e170:	b11d      	cbz	r5, 800e17a <_printf_i+0x19e>
 800e172:	2310      	movs	r3, #16
 800e174:	e7ac      	b.n	800e0d0 <_printf_i+0xf4>
 800e176:	4827      	ldr	r0, [pc, #156]	@ (800e214 <_printf_i+0x238>)
 800e178:	e7e9      	b.n	800e14e <_printf_i+0x172>
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	f023 0320 	bic.w	r3, r3, #32
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	e7f6      	b.n	800e172 <_printf_i+0x196>
 800e184:	4616      	mov	r6, r2
 800e186:	e7bd      	b.n	800e104 <_printf_i+0x128>
 800e188:	6833      	ldr	r3, [r6, #0]
 800e18a:	6825      	ldr	r5, [r4, #0]
 800e18c:	1d18      	adds	r0, r3, #4
 800e18e:	6961      	ldr	r1, [r4, #20]
 800e190:	6030      	str	r0, [r6, #0]
 800e192:	062e      	lsls	r6, r5, #24
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	d501      	bpl.n	800e19c <_printf_i+0x1c0>
 800e198:	6019      	str	r1, [r3, #0]
 800e19a:	e002      	b.n	800e1a2 <_printf_i+0x1c6>
 800e19c:	0668      	lsls	r0, r5, #25
 800e19e:	d5fb      	bpl.n	800e198 <_printf_i+0x1bc>
 800e1a0:	8019      	strh	r1, [r3, #0]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4616      	mov	r6, r2
 800e1a6:	6123      	str	r3, [r4, #16]
 800e1a8:	e7bc      	b.n	800e124 <_printf_i+0x148>
 800e1aa:	6833      	ldr	r3, [r6, #0]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	1d1a      	adds	r2, r3, #4
 800e1b0:	6032      	str	r2, [r6, #0]
 800e1b2:	681e      	ldr	r6, [r3, #0]
 800e1b4:	6862      	ldr	r2, [r4, #4]
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f000 fc2d 	bl	800ea16 <memchr>
 800e1bc:	b108      	cbz	r0, 800e1c2 <_printf_i+0x1e6>
 800e1be:	1b80      	subs	r0, r0, r6
 800e1c0:	6060      	str	r0, [r4, #4]
 800e1c2:	6863      	ldr	r3, [r4, #4]
 800e1c4:	6123      	str	r3, [r4, #16]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1cc:	e7aa      	b.n	800e124 <_printf_i+0x148>
 800e1ce:	6923      	ldr	r3, [r4, #16]
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	4649      	mov	r1, r9
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	47d0      	blx	sl
 800e1d8:	3001      	adds	r0, #1
 800e1da:	d0ad      	beq.n	800e138 <_printf_i+0x15c>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	079b      	lsls	r3, r3, #30
 800e1e0:	d413      	bmi.n	800e20a <_printf_i+0x22e>
 800e1e2:	68e0      	ldr	r0, [r4, #12]
 800e1e4:	9b03      	ldr	r3, [sp, #12]
 800e1e6:	4298      	cmp	r0, r3
 800e1e8:	bfb8      	it	lt
 800e1ea:	4618      	movlt	r0, r3
 800e1ec:	e7a6      	b.n	800e13c <_printf_i+0x160>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	4632      	mov	r2, r6
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	4640      	mov	r0, r8
 800e1f6:	47d0      	blx	sl
 800e1f8:	3001      	adds	r0, #1
 800e1fa:	d09d      	beq.n	800e138 <_printf_i+0x15c>
 800e1fc:	3501      	adds	r5, #1
 800e1fe:	68e3      	ldr	r3, [r4, #12]
 800e200:	9903      	ldr	r1, [sp, #12]
 800e202:	1a5b      	subs	r3, r3, r1
 800e204:	42ab      	cmp	r3, r5
 800e206:	dcf2      	bgt.n	800e1ee <_printf_i+0x212>
 800e208:	e7eb      	b.n	800e1e2 <_printf_i+0x206>
 800e20a:	2500      	movs	r5, #0
 800e20c:	f104 0619 	add.w	r6, r4, #25
 800e210:	e7f5      	b.n	800e1fe <_printf_i+0x222>
 800e212:	bf00      	nop
 800e214:	0801234a 	.word	0x0801234a
 800e218:	0801235b 	.word	0x0801235b

0800e21c <_scanf_float>:
 800e21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e220:	b087      	sub	sp, #28
 800e222:	4617      	mov	r7, r2
 800e224:	4680      	mov	r8, r0
 800e226:	460c      	mov	r4, r1
 800e228:	9303      	str	r3, [sp, #12]
 800e22a:	688b      	ldr	r3, [r1, #8]
 800e22c:	1e5a      	subs	r2, r3, #1
 800e22e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e232:	460a      	mov	r2, r1
 800e234:	bf89      	itett	hi
 800e236:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e23a:	f04f 0b00 	movls.w	fp, #0
 800e23e:	eb03 0b05 	addhi.w	fp, r3, r5
 800e242:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e246:	f04f 0500 	mov.w	r5, #0
 800e24a:	bf88      	it	hi
 800e24c:	608b      	strhi	r3, [r1, #8]
 800e24e:	680b      	ldr	r3, [r1, #0]
 800e250:	46aa      	mov	sl, r5
 800e252:	46a9      	mov	r9, r5
 800e254:	9502      	str	r5, [sp, #8]
 800e256:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e25a:	f842 3b1c 	str.w	r3, [r2], #28
 800e25e:	4616      	mov	r6, r2
 800e260:	9201      	str	r2, [sp, #4]
 800e262:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e266:	68a2      	ldr	r2, [r4, #8]
 800e268:	b152      	cbz	r2, 800e280 <_scanf_float+0x64>
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	2b4e      	cmp	r3, #78	@ 0x4e
 800e270:	d864      	bhi.n	800e33c <_scanf_float+0x120>
 800e272:	2b40      	cmp	r3, #64	@ 0x40
 800e274:	d83c      	bhi.n	800e2f0 <_scanf_float+0xd4>
 800e276:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e27a:	b2c8      	uxtb	r0, r1
 800e27c:	280e      	cmp	r0, #14
 800e27e:	d93a      	bls.n	800e2f6 <_scanf_float+0xda>
 800e280:	f1b9 0f00 	cmp.w	r9, #0
 800e284:	d003      	beq.n	800e28e <_scanf_float+0x72>
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e292:	f1ba 0f01 	cmp.w	sl, #1
 800e296:	f200 8117 	bhi.w	800e4c8 <_scanf_float+0x2ac>
 800e29a:	9b01      	ldr	r3, [sp, #4]
 800e29c:	429e      	cmp	r6, r3
 800e29e:	f200 8108 	bhi.w	800e4b2 <_scanf_float+0x296>
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	b007      	add	sp, #28
 800e2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2aa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e2ae:	2a0d      	cmp	r2, #13
 800e2b0:	d8e6      	bhi.n	800e280 <_scanf_float+0x64>
 800e2b2:	a101      	add	r1, pc, #4	@ (adr r1, 800e2b8 <_scanf_float+0x9c>)
 800e2b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e2b8:	0800e3ff 	.word	0x0800e3ff
 800e2bc:	0800e281 	.word	0x0800e281
 800e2c0:	0800e281 	.word	0x0800e281
 800e2c4:	0800e281 	.word	0x0800e281
 800e2c8:	0800e45f 	.word	0x0800e45f
 800e2cc:	0800e437 	.word	0x0800e437
 800e2d0:	0800e281 	.word	0x0800e281
 800e2d4:	0800e281 	.word	0x0800e281
 800e2d8:	0800e40d 	.word	0x0800e40d
 800e2dc:	0800e281 	.word	0x0800e281
 800e2e0:	0800e281 	.word	0x0800e281
 800e2e4:	0800e281 	.word	0x0800e281
 800e2e8:	0800e281 	.word	0x0800e281
 800e2ec:	0800e3c5 	.word	0x0800e3c5
 800e2f0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e2f4:	e7db      	b.n	800e2ae <_scanf_float+0x92>
 800e2f6:	290e      	cmp	r1, #14
 800e2f8:	d8c2      	bhi.n	800e280 <_scanf_float+0x64>
 800e2fa:	a001      	add	r0, pc, #4	@ (adr r0, 800e300 <_scanf_float+0xe4>)
 800e2fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e300:	0800e3b5 	.word	0x0800e3b5
 800e304:	0800e281 	.word	0x0800e281
 800e308:	0800e3b5 	.word	0x0800e3b5
 800e30c:	0800e44b 	.word	0x0800e44b
 800e310:	0800e281 	.word	0x0800e281
 800e314:	0800e35d 	.word	0x0800e35d
 800e318:	0800e39b 	.word	0x0800e39b
 800e31c:	0800e39b 	.word	0x0800e39b
 800e320:	0800e39b 	.word	0x0800e39b
 800e324:	0800e39b 	.word	0x0800e39b
 800e328:	0800e39b 	.word	0x0800e39b
 800e32c:	0800e39b 	.word	0x0800e39b
 800e330:	0800e39b 	.word	0x0800e39b
 800e334:	0800e39b 	.word	0x0800e39b
 800e338:	0800e39b 	.word	0x0800e39b
 800e33c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e33e:	d809      	bhi.n	800e354 <_scanf_float+0x138>
 800e340:	2b60      	cmp	r3, #96	@ 0x60
 800e342:	d8b2      	bhi.n	800e2aa <_scanf_float+0x8e>
 800e344:	2b54      	cmp	r3, #84	@ 0x54
 800e346:	d07b      	beq.n	800e440 <_scanf_float+0x224>
 800e348:	2b59      	cmp	r3, #89	@ 0x59
 800e34a:	d199      	bne.n	800e280 <_scanf_float+0x64>
 800e34c:	2d07      	cmp	r5, #7
 800e34e:	d197      	bne.n	800e280 <_scanf_float+0x64>
 800e350:	2508      	movs	r5, #8
 800e352:	e02c      	b.n	800e3ae <_scanf_float+0x192>
 800e354:	2b74      	cmp	r3, #116	@ 0x74
 800e356:	d073      	beq.n	800e440 <_scanf_float+0x224>
 800e358:	2b79      	cmp	r3, #121	@ 0x79
 800e35a:	e7f6      	b.n	800e34a <_scanf_float+0x12e>
 800e35c:	6821      	ldr	r1, [r4, #0]
 800e35e:	05c8      	lsls	r0, r1, #23
 800e360:	d51b      	bpl.n	800e39a <_scanf_float+0x17e>
 800e362:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e366:	f109 0901 	add.w	r9, r9, #1
 800e36a:	6021      	str	r1, [r4, #0]
 800e36c:	f1bb 0f00 	cmp.w	fp, #0
 800e370:	d003      	beq.n	800e37a <_scanf_float+0x15e>
 800e372:	3201      	adds	r2, #1
 800e374:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e378:	60a2      	str	r2, [r4, #8]
 800e37a:	68a3      	ldr	r3, [r4, #8]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	60a3      	str	r3, [r4, #8]
 800e380:	6923      	ldr	r3, [r4, #16]
 800e382:	3301      	adds	r3, #1
 800e384:	6123      	str	r3, [r4, #16]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3b01      	subs	r3, #1
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	607b      	str	r3, [r7, #4]
 800e38e:	f340 8087 	ble.w	800e4a0 <_scanf_float+0x284>
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	e765      	b.n	800e266 <_scanf_float+0x4a>
 800e39a:	eb1a 0105 	adds.w	r1, sl, r5
 800e39e:	f47f af6f 	bne.w	800e280 <_scanf_float+0x64>
 800e3a2:	6822      	ldr	r2, [r4, #0]
 800e3a4:	460d      	mov	r5, r1
 800e3a6:	468a      	mov	sl, r1
 800e3a8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e3ac:	6022      	str	r2, [r4, #0]
 800e3ae:	f806 3b01 	strb.w	r3, [r6], #1
 800e3b2:	e7e2      	b.n	800e37a <_scanf_float+0x15e>
 800e3b4:	6822      	ldr	r2, [r4, #0]
 800e3b6:	0610      	lsls	r0, r2, #24
 800e3b8:	f57f af62 	bpl.w	800e280 <_scanf_float+0x64>
 800e3bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e3c0:	6022      	str	r2, [r4, #0]
 800e3c2:	e7f4      	b.n	800e3ae <_scanf_float+0x192>
 800e3c4:	f1ba 0f00 	cmp.w	sl, #0
 800e3c8:	d10e      	bne.n	800e3e8 <_scanf_float+0x1cc>
 800e3ca:	f1b9 0f00 	cmp.w	r9, #0
 800e3ce:	d10e      	bne.n	800e3ee <_scanf_float+0x1d2>
 800e3d0:	6822      	ldr	r2, [r4, #0]
 800e3d2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e3d6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e3da:	d108      	bne.n	800e3ee <_scanf_float+0x1d2>
 800e3dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e3e0:	f04f 0a01 	mov.w	sl, #1
 800e3e4:	6022      	str	r2, [r4, #0]
 800e3e6:	e7e2      	b.n	800e3ae <_scanf_float+0x192>
 800e3e8:	f1ba 0f02 	cmp.w	sl, #2
 800e3ec:	d055      	beq.n	800e49a <_scanf_float+0x27e>
 800e3ee:	2d01      	cmp	r5, #1
 800e3f0:	d002      	beq.n	800e3f8 <_scanf_float+0x1dc>
 800e3f2:	2d04      	cmp	r5, #4
 800e3f4:	f47f af44 	bne.w	800e280 <_scanf_float+0x64>
 800e3f8:	3501      	adds	r5, #1
 800e3fa:	b2ed      	uxtb	r5, r5
 800e3fc:	e7d7      	b.n	800e3ae <_scanf_float+0x192>
 800e3fe:	f1ba 0f01 	cmp.w	sl, #1
 800e402:	f47f af3d 	bne.w	800e280 <_scanf_float+0x64>
 800e406:	f04f 0a02 	mov.w	sl, #2
 800e40a:	e7d0      	b.n	800e3ae <_scanf_float+0x192>
 800e40c:	b97d      	cbnz	r5, 800e42e <_scanf_float+0x212>
 800e40e:	f1b9 0f00 	cmp.w	r9, #0
 800e412:	f47f af38 	bne.w	800e286 <_scanf_float+0x6a>
 800e416:	6822      	ldr	r2, [r4, #0]
 800e418:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e41c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e420:	f040 8107 	bne.w	800e632 <_scanf_float+0x416>
 800e424:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e428:	2501      	movs	r5, #1
 800e42a:	6022      	str	r2, [r4, #0]
 800e42c:	e7bf      	b.n	800e3ae <_scanf_float+0x192>
 800e42e:	2d03      	cmp	r5, #3
 800e430:	d0e2      	beq.n	800e3f8 <_scanf_float+0x1dc>
 800e432:	2d05      	cmp	r5, #5
 800e434:	e7de      	b.n	800e3f4 <_scanf_float+0x1d8>
 800e436:	2d02      	cmp	r5, #2
 800e438:	f47f af22 	bne.w	800e280 <_scanf_float+0x64>
 800e43c:	2503      	movs	r5, #3
 800e43e:	e7b6      	b.n	800e3ae <_scanf_float+0x192>
 800e440:	2d06      	cmp	r5, #6
 800e442:	f47f af1d 	bne.w	800e280 <_scanf_float+0x64>
 800e446:	2507      	movs	r5, #7
 800e448:	e7b1      	b.n	800e3ae <_scanf_float+0x192>
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	0591      	lsls	r1, r2, #22
 800e44e:	f57f af17 	bpl.w	800e280 <_scanf_float+0x64>
 800e452:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e456:	f8cd 9008 	str.w	r9, [sp, #8]
 800e45a:	6022      	str	r2, [r4, #0]
 800e45c:	e7a7      	b.n	800e3ae <_scanf_float+0x192>
 800e45e:	6822      	ldr	r2, [r4, #0]
 800e460:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e464:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e468:	d006      	beq.n	800e478 <_scanf_float+0x25c>
 800e46a:	0550      	lsls	r0, r2, #21
 800e46c:	f57f af08 	bpl.w	800e280 <_scanf_float+0x64>
 800e470:	f1b9 0f00 	cmp.w	r9, #0
 800e474:	f000 80dd 	beq.w	800e632 <_scanf_float+0x416>
 800e478:	0591      	lsls	r1, r2, #22
 800e47a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e47e:	bf58      	it	pl
 800e480:	9902      	ldrpl	r1, [sp, #8]
 800e482:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e486:	bf58      	it	pl
 800e488:	eba9 0101 	subpl.w	r1, r9, r1
 800e48c:	6022      	str	r2, [r4, #0]
 800e48e:	f04f 0900 	mov.w	r9, #0
 800e492:	bf58      	it	pl
 800e494:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e498:	e789      	b.n	800e3ae <_scanf_float+0x192>
 800e49a:	f04f 0a03 	mov.w	sl, #3
 800e49e:	e786      	b.n	800e3ae <_scanf_float+0x192>
 800e4a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e4a4:	4639      	mov	r1, r7
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	4798      	blx	r3
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	f43f aedb 	beq.w	800e266 <_scanf_float+0x4a>
 800e4b0:	e6e6      	b.n	800e280 <_scanf_float+0x64>
 800e4b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4b6:	463a      	mov	r2, r7
 800e4b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4bc:	4640      	mov	r0, r8
 800e4be:	4798      	blx	r3
 800e4c0:	6923      	ldr	r3, [r4, #16]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	6123      	str	r3, [r4, #16]
 800e4c6:	e6e8      	b.n	800e29a <_scanf_float+0x7e>
 800e4c8:	1e6b      	subs	r3, r5, #1
 800e4ca:	2b06      	cmp	r3, #6
 800e4cc:	d824      	bhi.n	800e518 <_scanf_float+0x2fc>
 800e4ce:	2d02      	cmp	r5, #2
 800e4d0:	d836      	bhi.n	800e540 <_scanf_float+0x324>
 800e4d2:	9b01      	ldr	r3, [sp, #4]
 800e4d4:	429e      	cmp	r6, r3
 800e4d6:	f67f aee4 	bls.w	800e2a2 <_scanf_float+0x86>
 800e4da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4de:	463a      	mov	r2, r7
 800e4e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	4798      	blx	r3
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	e7f0      	b.n	800e4d2 <_scanf_float+0x2b6>
 800e4f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e4f4:	463a      	mov	r2, r7
 800e4f6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	4798      	blx	r3
 800e4fe:	6923      	ldr	r3, [r4, #16]
 800e500:	3b01      	subs	r3, #1
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e508:	fa5f fa8a 	uxtb.w	sl, sl
 800e50c:	f1ba 0f02 	cmp.w	sl, #2
 800e510:	d1ee      	bne.n	800e4f0 <_scanf_float+0x2d4>
 800e512:	3d03      	subs	r5, #3
 800e514:	b2ed      	uxtb	r5, r5
 800e516:	1b76      	subs	r6, r6, r5
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	05da      	lsls	r2, r3, #23
 800e51c:	d52f      	bpl.n	800e57e <_scanf_float+0x362>
 800e51e:	055b      	lsls	r3, r3, #21
 800e520:	d511      	bpl.n	800e546 <_scanf_float+0x32a>
 800e522:	9b01      	ldr	r3, [sp, #4]
 800e524:	429e      	cmp	r6, r3
 800e526:	f67f aebc 	bls.w	800e2a2 <_scanf_float+0x86>
 800e52a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e52e:	463a      	mov	r2, r7
 800e530:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e534:	4640      	mov	r0, r8
 800e536:	4798      	blx	r3
 800e538:	6923      	ldr	r3, [r4, #16]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	6123      	str	r3, [r4, #16]
 800e53e:	e7f0      	b.n	800e522 <_scanf_float+0x306>
 800e540:	46aa      	mov	sl, r5
 800e542:	46b3      	mov	fp, r6
 800e544:	e7de      	b.n	800e504 <_scanf_float+0x2e8>
 800e546:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e54a:	1e75      	subs	r5, r6, #1
 800e54c:	6923      	ldr	r3, [r4, #16]
 800e54e:	2965      	cmp	r1, #101	@ 0x65
 800e550:	f103 33ff 	add.w	r3, r3, #4294967295
 800e554:	6123      	str	r3, [r4, #16]
 800e556:	d00c      	beq.n	800e572 <_scanf_float+0x356>
 800e558:	2945      	cmp	r1, #69	@ 0x45
 800e55a:	d00a      	beq.n	800e572 <_scanf_float+0x356>
 800e55c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e560:	463a      	mov	r2, r7
 800e562:	4640      	mov	r0, r8
 800e564:	1eb5      	subs	r5, r6, #2
 800e566:	4798      	blx	r3
 800e568:	6923      	ldr	r3, [r4, #16]
 800e56a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e56e:	3b01      	subs	r3, #1
 800e570:	6123      	str	r3, [r4, #16]
 800e572:	462e      	mov	r6, r5
 800e574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e578:	463a      	mov	r2, r7
 800e57a:	4640      	mov	r0, r8
 800e57c:	4798      	blx	r3
 800e57e:	6822      	ldr	r2, [r4, #0]
 800e580:	f012 0210 	ands.w	r2, r2, #16
 800e584:	d001      	beq.n	800e58a <_scanf_float+0x36e>
 800e586:	2000      	movs	r0, #0
 800e588:	e68c      	b.n	800e2a4 <_scanf_float+0x88>
 800e58a:	7032      	strb	r2, [r6, #0]
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e596:	d11c      	bne.n	800e5d2 <_scanf_float+0x3b6>
 800e598:	9b02      	ldr	r3, [sp, #8]
 800e59a:	454b      	cmp	r3, r9
 800e59c:	eba3 0209 	sub.w	r2, r3, r9
 800e5a0:	d123      	bne.n	800e5ea <_scanf_float+0x3ce>
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	9901      	ldr	r1, [sp, #4]
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	f002 fc5e 	bl	8010e68 <_strtod_r>
 800e5ac:	6821      	ldr	r1, [r4, #0]
 800e5ae:	9b03      	ldr	r3, [sp, #12]
 800e5b0:	f011 0f02 	tst.w	r1, #2
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	ec57 6b10 	vmov	r6, r7, d0
 800e5ba:	f103 0204 	add.w	r2, r3, #4
 800e5be:	d01f      	beq.n	800e600 <_scanf_float+0x3e4>
 800e5c0:	9903      	ldr	r1, [sp, #12]
 800e5c2:	600a      	str	r2, [r1, #0]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	e9c3 6700 	strd	r6, r7, [r3]
 800e5ca:	68e3      	ldr	r3, [r4, #12]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	60e3      	str	r3, [r4, #12]
 800e5d0:	e7d9      	b.n	800e586 <_scanf_float+0x36a>
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0e4      	beq.n	800e5a2 <_scanf_float+0x386>
 800e5d8:	9905      	ldr	r1, [sp, #20]
 800e5da:	230a      	movs	r3, #10
 800e5dc:	4640      	mov	r0, r8
 800e5de:	3101      	adds	r1, #1
 800e5e0:	f002 fcc2 	bl	8010f68 <_strtol_r>
 800e5e4:	9b04      	ldr	r3, [sp, #16]
 800e5e6:	9e05      	ldr	r6, [sp, #20]
 800e5e8:	1ac2      	subs	r2, r0, r3
 800e5ea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e5ee:	4912      	ldr	r1, [pc, #72]	@ (800e638 <_scanf_float+0x41c>)
 800e5f0:	429e      	cmp	r6, r3
 800e5f2:	bf28      	it	cs
 800e5f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f000 f929 	bl	800e850 <siprintf>
 800e5fe:	e7d0      	b.n	800e5a2 <_scanf_float+0x386>
 800e600:	f011 0f04 	tst.w	r1, #4
 800e604:	9903      	ldr	r1, [sp, #12]
 800e606:	600a      	str	r2, [r1, #0]
 800e608:	d1dc      	bne.n	800e5c4 <_scanf_float+0x3a8>
 800e60a:	681d      	ldr	r5, [r3, #0]
 800e60c:	4632      	mov	r2, r6
 800e60e:	463b      	mov	r3, r7
 800e610:	4630      	mov	r0, r6
 800e612:	4639      	mov	r1, r7
 800e614:	f7f2 fbbc 	bl	8000d90 <__aeabi_dcmpun>
 800e618:	b128      	cbz	r0, 800e626 <_scanf_float+0x40a>
 800e61a:	4808      	ldr	r0, [pc, #32]	@ (800e63c <_scanf_float+0x420>)
 800e61c:	f000 fa0a 	bl	800ea34 <nanf>
 800e620:	ed85 0a00 	vstr	s0, [r5]
 800e624:	e7d1      	b.n	800e5ca <_scanf_float+0x3ae>
 800e626:	4630      	mov	r0, r6
 800e628:	4639      	mov	r1, r7
 800e62a:	f7f2 fc0f 	bl	8000e4c <__aeabi_d2f>
 800e62e:	6028      	str	r0, [r5, #0]
 800e630:	e7cb      	b.n	800e5ca <_scanf_float+0x3ae>
 800e632:	f04f 0900 	mov.w	r9, #0
 800e636:	e62a      	b.n	800e28e <_scanf_float+0x72>
 800e638:	0801236c 	.word	0x0801236c
 800e63c:	08012705 	.word	0x08012705

0800e640 <std>:
 800e640:	2300      	movs	r3, #0
 800e642:	b510      	push	{r4, lr}
 800e644:	4604      	mov	r4, r0
 800e646:	6083      	str	r3, [r0, #8]
 800e648:	8181      	strh	r1, [r0, #12]
 800e64a:	4619      	mov	r1, r3
 800e64c:	6643      	str	r3, [r0, #100]	@ 0x64
 800e64e:	81c2      	strh	r2, [r0, #14]
 800e650:	2208      	movs	r2, #8
 800e652:	6183      	str	r3, [r0, #24]
 800e654:	e9c0 3300 	strd	r3, r3, [r0]
 800e658:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e65c:	305c      	adds	r0, #92	@ 0x5c
 800e65e:	f000 f95a 	bl	800e916 <memset>
 800e662:	4b0d      	ldr	r3, [pc, #52]	@ (800e698 <std+0x58>)
 800e664:	6224      	str	r4, [r4, #32]
 800e666:	6263      	str	r3, [r4, #36]	@ 0x24
 800e668:	4b0c      	ldr	r3, [pc, #48]	@ (800e69c <std+0x5c>)
 800e66a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e66c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a0 <std+0x60>)
 800e66e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e670:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a4 <std+0x64>)
 800e672:	6323      	str	r3, [r4, #48]	@ 0x30
 800e674:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a8 <std+0x68>)
 800e676:	429c      	cmp	r4, r3
 800e678:	d006      	beq.n	800e688 <std+0x48>
 800e67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e67e:	4294      	cmp	r4, r2
 800e680:	d002      	beq.n	800e688 <std+0x48>
 800e682:	33d0      	adds	r3, #208	@ 0xd0
 800e684:	429c      	cmp	r4, r3
 800e686:	d105      	bne.n	800e694 <std+0x54>
 800e688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e690:	f000 b9be 	b.w	800ea10 <__retarget_lock_init_recursive>
 800e694:	bd10      	pop	{r4, pc}
 800e696:	bf00      	nop
 800e698:	0800e891 	.word	0x0800e891
 800e69c:	0800e8b3 	.word	0x0800e8b3
 800e6a0:	0800e8eb 	.word	0x0800e8eb
 800e6a4:	0800e90f 	.word	0x0800e90f
 800e6a8:	20004cec 	.word	0x20004cec

0800e6ac <stdio_exit_handler>:
 800e6ac:	4a02      	ldr	r2, [pc, #8]	@ (800e6b8 <stdio_exit_handler+0xc>)
 800e6ae:	4903      	ldr	r1, [pc, #12]	@ (800e6bc <stdio_exit_handler+0x10>)
 800e6b0:	4803      	ldr	r0, [pc, #12]	@ (800e6c0 <stdio_exit_handler+0x14>)
 800e6b2:	f000 b869 	b.w	800e788 <_fwalk_sglue>
 800e6b6:	bf00      	nop
 800e6b8:	20000018 	.word	0x20000018
 800e6bc:	080115a9 	.word	0x080115a9
 800e6c0:	20000028 	.word	0x20000028

0800e6c4 <cleanup_stdio>:
 800e6c4:	6841      	ldr	r1, [r0, #4]
 800e6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e6f8 <cleanup_stdio+0x34>)
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	b510      	push	{r4, lr}
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	d001      	beq.n	800e6d4 <cleanup_stdio+0x10>
 800e6d0:	f002 ff6a 	bl	80115a8 <_fflush_r>
 800e6d4:	68a1      	ldr	r1, [r4, #8]
 800e6d6:	4b09      	ldr	r3, [pc, #36]	@ (800e6fc <cleanup_stdio+0x38>)
 800e6d8:	4299      	cmp	r1, r3
 800e6da:	d002      	beq.n	800e6e2 <cleanup_stdio+0x1e>
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f002 ff63 	bl	80115a8 <_fflush_r>
 800e6e2:	68e1      	ldr	r1, [r4, #12]
 800e6e4:	4b06      	ldr	r3, [pc, #24]	@ (800e700 <cleanup_stdio+0x3c>)
 800e6e6:	4299      	cmp	r1, r3
 800e6e8:	d004      	beq.n	800e6f4 <cleanup_stdio+0x30>
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6f0:	f002 bf5a 	b.w	80115a8 <_fflush_r>
 800e6f4:	bd10      	pop	{r4, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20004cec 	.word	0x20004cec
 800e6fc:	20004d54 	.word	0x20004d54
 800e700:	20004dbc 	.word	0x20004dbc

0800e704 <global_stdio_init.part.0>:
 800e704:	b510      	push	{r4, lr}
 800e706:	4b0b      	ldr	r3, [pc, #44]	@ (800e734 <global_stdio_init.part.0+0x30>)
 800e708:	2104      	movs	r1, #4
 800e70a:	4c0b      	ldr	r4, [pc, #44]	@ (800e738 <global_stdio_init.part.0+0x34>)
 800e70c:	4a0b      	ldr	r2, [pc, #44]	@ (800e73c <global_stdio_init.part.0+0x38>)
 800e70e:	4620      	mov	r0, r4
 800e710:	601a      	str	r2, [r3, #0]
 800e712:	2200      	movs	r2, #0
 800e714:	f7ff ff94 	bl	800e640 <std>
 800e718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e71c:	2201      	movs	r2, #1
 800e71e:	2109      	movs	r1, #9
 800e720:	f7ff ff8e 	bl	800e640 <std>
 800e724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e728:	2202      	movs	r2, #2
 800e72a:	2112      	movs	r1, #18
 800e72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e730:	f7ff bf86 	b.w	800e640 <std>
 800e734:	20004e24 	.word	0x20004e24
 800e738:	20004cec 	.word	0x20004cec
 800e73c:	0800e6ad 	.word	0x0800e6ad

0800e740 <__sfp_lock_acquire>:
 800e740:	4801      	ldr	r0, [pc, #4]	@ (800e748 <__sfp_lock_acquire+0x8>)
 800e742:	f000 b966 	b.w	800ea12 <__retarget_lock_acquire_recursive>
 800e746:	bf00      	nop
 800e748:	20004e2d 	.word	0x20004e2d

0800e74c <__sfp_lock_release>:
 800e74c:	4801      	ldr	r0, [pc, #4]	@ (800e754 <__sfp_lock_release+0x8>)
 800e74e:	f000 b961 	b.w	800ea14 <__retarget_lock_release_recursive>
 800e752:	bf00      	nop
 800e754:	20004e2d 	.word	0x20004e2d

0800e758 <__sinit>:
 800e758:	b510      	push	{r4, lr}
 800e75a:	4604      	mov	r4, r0
 800e75c:	f7ff fff0 	bl	800e740 <__sfp_lock_acquire>
 800e760:	6a23      	ldr	r3, [r4, #32]
 800e762:	b11b      	cbz	r3, 800e76c <__sinit+0x14>
 800e764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e768:	f7ff bff0 	b.w	800e74c <__sfp_lock_release>
 800e76c:	4b04      	ldr	r3, [pc, #16]	@ (800e780 <__sinit+0x28>)
 800e76e:	6223      	str	r3, [r4, #32]
 800e770:	4b04      	ldr	r3, [pc, #16]	@ (800e784 <__sinit+0x2c>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f5      	bne.n	800e764 <__sinit+0xc>
 800e778:	f7ff ffc4 	bl	800e704 <global_stdio_init.part.0>
 800e77c:	e7f2      	b.n	800e764 <__sinit+0xc>
 800e77e:	bf00      	nop
 800e780:	0800e6c5 	.word	0x0800e6c5
 800e784:	20004e24 	.word	0x20004e24

0800e788 <_fwalk_sglue>:
 800e788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e78c:	4607      	mov	r7, r0
 800e78e:	4688      	mov	r8, r1
 800e790:	4614      	mov	r4, r2
 800e792:	2600      	movs	r6, #0
 800e794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e798:	f1b9 0901 	subs.w	r9, r9, #1
 800e79c:	d505      	bpl.n	800e7aa <_fwalk_sglue+0x22>
 800e79e:	6824      	ldr	r4, [r4, #0]
 800e7a0:	2c00      	cmp	r4, #0
 800e7a2:	d1f7      	bne.n	800e794 <_fwalk_sglue+0xc>
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d907      	bls.n	800e7c0 <_fwalk_sglue+0x38>
 800e7b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	d003      	beq.n	800e7c0 <_fwalk_sglue+0x38>
 800e7b8:	4629      	mov	r1, r5
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	47c0      	blx	r8
 800e7be:	4306      	orrs	r6, r0
 800e7c0:	3568      	adds	r5, #104	@ 0x68
 800e7c2:	e7e9      	b.n	800e798 <_fwalk_sglue+0x10>

0800e7c4 <iprintf>:
 800e7c4:	b40f      	push	{r0, r1, r2, r3}
 800e7c6:	b507      	push	{r0, r1, r2, lr}
 800e7c8:	4906      	ldr	r1, [pc, #24]	@ (800e7e4 <iprintf+0x20>)
 800e7ca:	ab04      	add	r3, sp, #16
 800e7cc:	6808      	ldr	r0, [r1, #0]
 800e7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d2:	6881      	ldr	r1, [r0, #8]
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	f002 fd4b 	bl	8011270 <_vfiprintf_r>
 800e7da:	b003      	add	sp, #12
 800e7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7e0:	b004      	add	sp, #16
 800e7e2:	4770      	bx	lr
 800e7e4:	20000024 	.word	0x20000024

0800e7e8 <sniprintf>:
 800e7e8:	b40c      	push	{r2, r3}
 800e7ea:	4b18      	ldr	r3, [pc, #96]	@ (800e84c <sniprintf+0x64>)
 800e7ec:	b530      	push	{r4, r5, lr}
 800e7ee:	1e0c      	subs	r4, r1, #0
 800e7f0:	b09d      	sub	sp, #116	@ 0x74
 800e7f2:	681d      	ldr	r5, [r3, #0]
 800e7f4:	da08      	bge.n	800e808 <sniprintf+0x20>
 800e7f6:	238b      	movs	r3, #139	@ 0x8b
 800e7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fc:	602b      	str	r3, [r5, #0]
 800e7fe:	b01d      	add	sp, #116	@ 0x74
 800e800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e804:	b002      	add	sp, #8
 800e806:	4770      	bx	lr
 800e808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e80c:	9002      	str	r0, [sp, #8]
 800e80e:	9006      	str	r0, [sp, #24]
 800e810:	a902      	add	r1, sp, #8
 800e812:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e816:	bf14      	ite	ne
 800e818:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e81c:	4623      	moveq	r3, r4
 800e81e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e820:	4628      	mov	r0, r5
 800e822:	9304      	str	r3, [sp, #16]
 800e824:	9307      	str	r3, [sp, #28]
 800e826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e82a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e82e:	ab21      	add	r3, sp, #132	@ 0x84
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	f002 fbf7 	bl	8011024 <_svfiprintf_r>
 800e836:	1c43      	adds	r3, r0, #1
 800e838:	bfbc      	itt	lt
 800e83a:	238b      	movlt	r3, #139	@ 0x8b
 800e83c:	602b      	strlt	r3, [r5, #0]
 800e83e:	2c00      	cmp	r4, #0
 800e840:	d0dd      	beq.n	800e7fe <sniprintf+0x16>
 800e842:	9b02      	ldr	r3, [sp, #8]
 800e844:	2200      	movs	r2, #0
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	e7d9      	b.n	800e7fe <sniprintf+0x16>
 800e84a:	bf00      	nop
 800e84c:	20000024 	.word	0x20000024

0800e850 <siprintf>:
 800e850:	b40e      	push	{r1, r2, r3}
 800e852:	b500      	push	{lr}
 800e854:	b09c      	sub	sp, #112	@ 0x70
 800e856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e85a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e85c:	9002      	str	r0, [sp, #8]
 800e85e:	9006      	str	r0, [sp, #24]
 800e860:	9107      	str	r1, [sp, #28]
 800e862:	9104      	str	r1, [sp, #16]
 800e864:	4808      	ldr	r0, [pc, #32]	@ (800e888 <siprintf+0x38>)
 800e866:	4909      	ldr	r1, [pc, #36]	@ (800e88c <siprintf+0x3c>)
 800e868:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86c:	9105      	str	r1, [sp, #20]
 800e86e:	a902      	add	r1, sp, #8
 800e870:	6800      	ldr	r0, [r0, #0]
 800e872:	9301      	str	r3, [sp, #4]
 800e874:	f002 fbd6 	bl	8011024 <_svfiprintf_r>
 800e878:	9b02      	ldr	r3, [sp, #8]
 800e87a:	2200      	movs	r2, #0
 800e87c:	701a      	strb	r2, [r3, #0]
 800e87e:	b01c      	add	sp, #112	@ 0x70
 800e880:	f85d eb04 	ldr.w	lr, [sp], #4
 800e884:	b003      	add	sp, #12
 800e886:	4770      	bx	lr
 800e888:	20000024 	.word	0x20000024
 800e88c:	ffff0208 	.word	0xffff0208

0800e890 <__sread>:
 800e890:	b510      	push	{r4, lr}
 800e892:	460c      	mov	r4, r1
 800e894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e898:	f000 f86c 	bl	800e974 <_read_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	bfab      	itete	ge
 800e8a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e8a4:	181b      	addge	r3, r3, r0
 800e8a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e8aa:	bfac      	ite	ge
 800e8ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e8ae:	81a3      	strhlt	r3, [r4, #12]
 800e8b0:	bd10      	pop	{r4, pc}

0800e8b2 <__swrite>:
 800e8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b6:	461f      	mov	r7, r3
 800e8b8:	898b      	ldrh	r3, [r1, #12]
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	460c      	mov	r4, r1
 800e8be:	05db      	lsls	r3, r3, #23
 800e8c0:	4616      	mov	r6, r2
 800e8c2:	d505      	bpl.n	800e8d0 <__swrite+0x1e>
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8cc:	f000 f840 	bl	800e950 <_lseek_r>
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e8de:	81a3      	strh	r3, [r4, #12]
 800e8e0:	463b      	mov	r3, r7
 800e8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e6:	f000 b857 	b.w	800e998 <_write_r>

0800e8ea <__sseek>:
 800e8ea:	b510      	push	{r4, lr}
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f2:	f000 f82d 	bl	800e950 <_lseek_r>
 800e8f6:	1c43      	adds	r3, r0, #1
 800e8f8:	89a3      	ldrh	r3, [r4, #12]
 800e8fa:	bf15      	itete	ne
 800e8fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e8fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e906:	81a3      	strheq	r3, [r4, #12]
 800e908:	bf18      	it	ne
 800e90a:	81a3      	strhne	r3, [r4, #12]
 800e90c:	bd10      	pop	{r4, pc}

0800e90e <__sclose>:
 800e90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e912:	f000 b80d 	b.w	800e930 <_close_r>

0800e916 <memset>:
 800e916:	4402      	add	r2, r0
 800e918:	4603      	mov	r3, r0
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d100      	bne.n	800e920 <memset+0xa>
 800e91e:	4770      	bx	lr
 800e920:	f803 1b01 	strb.w	r1, [r3], #1
 800e924:	e7f9      	b.n	800e91a <memset+0x4>
	...

0800e928 <_localeconv_r>:
 800e928:	4800      	ldr	r0, [pc, #0]	@ (800e92c <_localeconv_r+0x4>)
 800e92a:	4770      	bx	lr
 800e92c:	20000164 	.word	0x20000164

0800e930 <_close_r>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	2300      	movs	r3, #0
 800e934:	4d05      	ldr	r5, [pc, #20]	@ (800e94c <_close_r+0x1c>)
 800e936:	4604      	mov	r4, r0
 800e938:	4608      	mov	r0, r1
 800e93a:	602b      	str	r3, [r5, #0]
 800e93c:	f7f4 fc46 	bl	80031cc <_close>
 800e940:	1c43      	adds	r3, r0, #1
 800e942:	d102      	bne.n	800e94a <_close_r+0x1a>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	b103      	cbz	r3, 800e94a <_close_r+0x1a>
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
 800e94c:	20004e28 	.word	0x20004e28

0800e950 <_lseek_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	4d06      	ldr	r5, [pc, #24]	@ (800e970 <_lseek_r+0x20>)
 800e956:	4608      	mov	r0, r1
 800e958:	4611      	mov	r1, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	602a      	str	r2, [r5, #0]
 800e95e:	461a      	mov	r2, r3
 800e960:	f7f4 fc5b 	bl	800321a <_lseek>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_lseek_r+0x1e>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_lseek_r+0x1e>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	20004e28 	.word	0x20004e28

0800e974 <_read_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4604      	mov	r4, r0
 800e978:	4d06      	ldr	r5, [pc, #24]	@ (800e994 <_read_r+0x20>)
 800e97a:	4608      	mov	r0, r1
 800e97c:	4611      	mov	r1, r2
 800e97e:	2200      	movs	r2, #0
 800e980:	602a      	str	r2, [r5, #0]
 800e982:	461a      	mov	r2, r3
 800e984:	f7f4 fbe9 	bl	800315a <_read>
 800e988:	1c43      	adds	r3, r0, #1
 800e98a:	d102      	bne.n	800e992 <_read_r+0x1e>
 800e98c:	682b      	ldr	r3, [r5, #0]
 800e98e:	b103      	cbz	r3, 800e992 <_read_r+0x1e>
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	bd38      	pop	{r3, r4, r5, pc}
 800e994:	20004e28 	.word	0x20004e28

0800e998 <_write_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4604      	mov	r4, r0
 800e99c:	4d06      	ldr	r5, [pc, #24]	@ (800e9b8 <_write_r+0x20>)
 800e99e:	4608      	mov	r0, r1
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	602a      	str	r2, [r5, #0]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	f7f4 fbf4 	bl	8003194 <_write>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d102      	bne.n	800e9b6 <_write_r+0x1e>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	b103      	cbz	r3, 800e9b6 <_write_r+0x1e>
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
 800e9b8:	20004e28 	.word	0x20004e28

0800e9bc <__errno>:
 800e9bc:	4b01      	ldr	r3, [pc, #4]	@ (800e9c4 <__errno+0x8>)
 800e9be:	6818      	ldr	r0, [r3, #0]
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	20000024 	.word	0x20000024

0800e9c8 <__libc_init_array>:
 800e9c8:	b570      	push	{r4, r5, r6, lr}
 800e9ca:	4d0d      	ldr	r5, [pc, #52]	@ (800ea00 <__libc_init_array+0x38>)
 800e9cc:	2600      	movs	r6, #0
 800e9ce:	4c0d      	ldr	r4, [pc, #52]	@ (800ea04 <__libc_init_array+0x3c>)
 800e9d0:	1b64      	subs	r4, r4, r5
 800e9d2:	10a4      	asrs	r4, r4, #2
 800e9d4:	42a6      	cmp	r6, r4
 800e9d6:	d109      	bne.n	800e9ec <__libc_init_array+0x24>
 800e9d8:	4d0b      	ldr	r5, [pc, #44]	@ (800ea08 <__libc_init_array+0x40>)
 800e9da:	2600      	movs	r6, #0
 800e9dc:	4c0b      	ldr	r4, [pc, #44]	@ (800ea0c <__libc_init_array+0x44>)
 800e9de:	f003 fbd7 	bl	8012190 <_init>
 800e9e2:	1b64      	subs	r4, r4, r5
 800e9e4:	10a4      	asrs	r4, r4, #2
 800e9e6:	42a6      	cmp	r6, r4
 800e9e8:	d105      	bne.n	800e9f6 <__libc_init_array+0x2e>
 800e9ea:	bd70      	pop	{r4, r5, r6, pc}
 800e9ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9f0:	3601      	adds	r6, #1
 800e9f2:	4798      	blx	r3
 800e9f4:	e7ee      	b.n	800e9d4 <__libc_init_array+0xc>
 800e9f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9fa:	3601      	adds	r6, #1
 800e9fc:	4798      	blx	r3
 800e9fe:	e7f2      	b.n	800e9e6 <__libc_init_array+0x1e>
 800ea00:	08012770 	.word	0x08012770
 800ea04:	08012770 	.word	0x08012770
 800ea08:	08012770 	.word	0x08012770
 800ea0c:	08012774 	.word	0x08012774

0800ea10 <__retarget_lock_init_recursive>:
 800ea10:	4770      	bx	lr

0800ea12 <__retarget_lock_acquire_recursive>:
 800ea12:	4770      	bx	lr

0800ea14 <__retarget_lock_release_recursive>:
 800ea14:	4770      	bx	lr

0800ea16 <memchr>:
 800ea16:	b2c9      	uxtb	r1, r1
 800ea18:	4603      	mov	r3, r0
 800ea1a:	4402      	add	r2, r0
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	d101      	bne.n	800ea28 <memchr+0x12>
 800ea24:	2000      	movs	r0, #0
 800ea26:	e003      	b.n	800ea30 <memchr+0x1a>
 800ea28:	7804      	ldrb	r4, [r0, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	428c      	cmp	r4, r1
 800ea2e:	d1f6      	bne.n	800ea1e <memchr+0x8>
 800ea30:	bd10      	pop	{r4, pc}
	...

0800ea34 <nanf>:
 800ea34:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ea3c <nanf+0x8>
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	7fc00000 	.word	0x7fc00000

0800ea40 <quorem>:
 800ea40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	6903      	ldr	r3, [r0, #16]
 800ea46:	4607      	mov	r7, r0
 800ea48:	690c      	ldr	r4, [r1, #16]
 800ea4a:	42a3      	cmp	r3, r4
 800ea4c:	f2c0 8083 	blt.w	800eb56 <quorem+0x116>
 800ea50:	3c01      	subs	r4, #1
 800ea52:	f100 0514 	add.w	r5, r0, #20
 800ea56:	f101 0814 	add.w	r8, r1, #20
 800ea5a:	00a3      	lsls	r3, r4, #2
 800ea5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea6a:	9301      	str	r3, [sp, #4]
 800ea6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea70:	3301      	adds	r3, #1
 800ea72:	429a      	cmp	r2, r3
 800ea74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea78:	d331      	bcc.n	800eade <quorem+0x9e>
 800ea7a:	f04f 0a00 	mov.w	sl, #0
 800ea7e:	46c4      	mov	ip, r8
 800ea80:	46ae      	mov	lr, r5
 800ea82:	46d3      	mov	fp, sl
 800ea84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea88:	b298      	uxth	r0, r3
 800ea8a:	45e1      	cmp	r9, ip
 800ea8c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ea90:	fb06 a000 	mla	r0, r6, r0, sl
 800ea94:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ea98:	b280      	uxth	r0, r0
 800ea9a:	fb06 2303 	mla	r3, r6, r3, r2
 800ea9e:	f8de 2000 	ldr.w	r2, [lr]
 800eaa2:	b292      	uxth	r2, r2
 800eaa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eaa8:	eba2 0200 	sub.w	r2, r2, r0
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	f8de 0000 	ldr.w	r0, [lr]
 800eab2:	445a      	add	r2, fp
 800eab4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eab8:	b292      	uxth	r2, r2
 800eaba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eabe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eac2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eac6:	f84e 2b04 	str.w	r2, [lr], #4
 800eaca:	d2db      	bcs.n	800ea84 <quorem+0x44>
 800eacc:	9b00      	ldr	r3, [sp, #0]
 800eace:	58eb      	ldr	r3, [r5, r3]
 800ead0:	b92b      	cbnz	r3, 800eade <quorem+0x9e>
 800ead2:	9b01      	ldr	r3, [sp, #4]
 800ead4:	3b04      	subs	r3, #4
 800ead6:	429d      	cmp	r5, r3
 800ead8:	461a      	mov	r2, r3
 800eada:	d330      	bcc.n	800eb3e <quorem+0xfe>
 800eadc:	613c      	str	r4, [r7, #16]
 800eade:	4638      	mov	r0, r7
 800eae0:	f001 f9c8 	bl	800fe74 <__mcmp>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	db26      	blt.n	800eb36 <quorem+0xf6>
 800eae8:	4629      	mov	r1, r5
 800eaea:	2000      	movs	r0, #0
 800eaec:	f858 2b04 	ldr.w	r2, [r8], #4
 800eaf0:	f8d1 c000 	ldr.w	ip, [r1]
 800eaf4:	fa1f fe82 	uxth.w	lr, r2
 800eaf8:	45c1      	cmp	r9, r8
 800eafa:	fa1f f38c 	uxth.w	r3, ip
 800eafe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800eb02:	eba3 030e 	sub.w	r3, r3, lr
 800eb06:	4403      	add	r3, r0
 800eb08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eb1a:	f841 3b04 	str.w	r3, [r1], #4
 800eb1e:	d2e5      	bcs.n	800eaec <quorem+0xac>
 800eb20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb28:	b922      	cbnz	r2, 800eb34 <quorem+0xf4>
 800eb2a:	3b04      	subs	r3, #4
 800eb2c:	429d      	cmp	r5, r3
 800eb2e:	461a      	mov	r2, r3
 800eb30:	d30b      	bcc.n	800eb4a <quorem+0x10a>
 800eb32:	613c      	str	r4, [r7, #16]
 800eb34:	3601      	adds	r6, #1
 800eb36:	4630      	mov	r0, r6
 800eb38:	b003      	add	sp, #12
 800eb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3e:	6812      	ldr	r2, [r2, #0]
 800eb40:	3b04      	subs	r3, #4
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	d1ca      	bne.n	800eadc <quorem+0x9c>
 800eb46:	3c01      	subs	r4, #1
 800eb48:	e7c5      	b.n	800ead6 <quorem+0x96>
 800eb4a:	6812      	ldr	r2, [r2, #0]
 800eb4c:	3b04      	subs	r3, #4
 800eb4e:	2a00      	cmp	r2, #0
 800eb50:	d1ef      	bne.n	800eb32 <quorem+0xf2>
 800eb52:	3c01      	subs	r4, #1
 800eb54:	e7ea      	b.n	800eb2c <quorem+0xec>
 800eb56:	2000      	movs	r0, #0
 800eb58:	e7ee      	b.n	800eb38 <quorem+0xf8>
 800eb5a:	0000      	movs	r0, r0
 800eb5c:	0000      	movs	r0, r0
	...

0800eb60 <_dtoa_r>:
 800eb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb64:	69c7      	ldr	r7, [r0, #28]
 800eb66:	b099      	sub	sp, #100	@ 0x64
 800eb68:	4683      	mov	fp, r0
 800eb6a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800eb6c:	9109      	str	r1, [sp, #36]	@ 0x24
 800eb6e:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb70:	9313      	str	r3, [sp, #76]	@ 0x4c
 800eb72:	ec55 4b10 	vmov	r4, r5, d0
 800eb76:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eb7a:	b97f      	cbnz	r7, 800eb9c <_dtoa_r+0x3c>
 800eb7c:	2010      	movs	r0, #16
 800eb7e:	f000 fdfd 	bl	800f77c <malloc>
 800eb82:	4602      	mov	r2, r0
 800eb84:	f8cb 001c 	str.w	r0, [fp, #28]
 800eb88:	b920      	cbnz	r0, 800eb94 <_dtoa_r+0x34>
 800eb8a:	4ba7      	ldr	r3, [pc, #668]	@ (800ee28 <_dtoa_r+0x2c8>)
 800eb8c:	21ef      	movs	r1, #239	@ 0xef
 800eb8e:	48a7      	ldr	r0, [pc, #668]	@ (800ee2c <_dtoa_r+0x2cc>)
 800eb90:	f002 fe1a 	bl	80117c8 <__assert_func>
 800eb94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eb98:	6007      	str	r7, [r0, #0]
 800eb9a:	60c7      	str	r7, [r0, #12]
 800eb9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	b159      	cbz	r1, 800ebbc <_dtoa_r+0x5c>
 800eba4:	685a      	ldr	r2, [r3, #4]
 800eba6:	2301      	movs	r3, #1
 800eba8:	4658      	mov	r0, fp
 800ebaa:	4093      	lsls	r3, r2
 800ebac:	604a      	str	r2, [r1, #4]
 800ebae:	608b      	str	r3, [r1, #8]
 800ebb0:	f000 feda 	bl	800f968 <_Bfree>
 800ebb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	601a      	str	r2, [r3, #0]
 800ebbc:	1e2b      	subs	r3, r5, #0
 800ebbe:	bfb7      	itett	lt
 800ebc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ebc4:	2300      	movge	r3, #0
 800ebc6:	2201      	movlt	r2, #1
 800ebc8:	9303      	strlt	r3, [sp, #12]
 800ebca:	bfa8      	it	ge
 800ebcc:	6033      	strge	r3, [r6, #0]
 800ebce:	9f03      	ldr	r7, [sp, #12]
 800ebd0:	4b97      	ldr	r3, [pc, #604]	@ (800ee30 <_dtoa_r+0x2d0>)
 800ebd2:	bfb8      	it	lt
 800ebd4:	6032      	strlt	r2, [r6, #0]
 800ebd6:	43bb      	bics	r3, r7
 800ebd8:	d112      	bne.n	800ec00 <_dtoa_r+0xa0>
 800ebda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ebde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebe6:	4323      	orrs	r3, r4
 800ebe8:	f000 854c 	beq.w	800f684 <_dtoa_r+0xb24>
 800ebec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ebee:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ee44 <_dtoa_r+0x2e4>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	f000 854e 	beq.w	800f694 <_dtoa_r+0xb34>
 800ebf8:	f10a 0303 	add.w	r3, sl, #3
 800ebfc:	f000 bd48 	b.w	800f690 <_dtoa_r+0xb30>
 800ec00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec04:	2200      	movs	r2, #0
 800ec06:	2300      	movs	r3, #0
 800ec08:	ec51 0b17 	vmov	r0, r1, d7
 800ec0c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ec10:	f7f2 f88c 	bl	8000d2c <__aeabi_dcmpeq>
 800ec14:	4680      	mov	r8, r0
 800ec16:	b158      	cbz	r0, 800ec30 <_dtoa_r+0xd0>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ec1c:	6013      	str	r3, [r2, #0]
 800ec1e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ec20:	b113      	cbz	r3, 800ec28 <_dtoa_r+0xc8>
 800ec22:	4b84      	ldr	r3, [pc, #528]	@ (800ee34 <_dtoa_r+0x2d4>)
 800ec24:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ee48 <_dtoa_r+0x2e8>
 800ec2c:	f000 bd32 	b.w	800f694 <_dtoa_r+0xb34>
 800ec30:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ec34:	aa16      	add	r2, sp, #88	@ 0x58
 800ec36:	a917      	add	r1, sp, #92	@ 0x5c
 800ec38:	4658      	mov	r0, fp
 800ec3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ec3e:	f001 fa41 	bl	80100c4 <__d2b>
 800ec42:	4681      	mov	r9, r0
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d075      	beq.n	800ed34 <_dtoa_r+0x1d4>
 800ec48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec4a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ec4e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ec52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec56:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ec5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec5e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ec62:	4619      	mov	r1, r3
 800ec64:	2200      	movs	r2, #0
 800ec66:	4b74      	ldr	r3, [pc, #464]	@ (800ee38 <_dtoa_r+0x2d8>)
 800ec68:	f7f1 fc40 	bl	80004ec <__aeabi_dsub>
 800ec6c:	a368      	add	r3, pc, #416	@ (adr r3, 800ee10 <_dtoa_r+0x2b0>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f7f1 fdf3 	bl	800085c <__aeabi_dmul>
 800ec76:	a368      	add	r3, pc, #416	@ (adr r3, 800ee18 <_dtoa_r+0x2b8>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	f7f1 fc38 	bl	80004f0 <__adddf3>
 800ec80:	4604      	mov	r4, r0
 800ec82:	460d      	mov	r5, r1
 800ec84:	4630      	mov	r0, r6
 800ec86:	f7f1 fd7f 	bl	8000788 <__aeabi_i2d>
 800ec8a:	a365      	add	r3, pc, #404	@ (adr r3, 800ee20 <_dtoa_r+0x2c0>)
 800ec8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec90:	f7f1 fde4 	bl	800085c <__aeabi_dmul>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	4620      	mov	r0, r4
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f7f1 fc28 	bl	80004f0 <__adddf3>
 800eca0:	4604      	mov	r4, r0
 800eca2:	460d      	mov	r5, r1
 800eca4:	f7f2 f88a 	bl	8000dbc <__aeabi_d2iz>
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4607      	mov	r7, r0
 800ecac:	2300      	movs	r3, #0
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f2 f845 	bl	8000d40 <__aeabi_dcmplt>
 800ecb6:	b140      	cbz	r0, 800ecca <_dtoa_r+0x16a>
 800ecb8:	4638      	mov	r0, r7
 800ecba:	f7f1 fd65 	bl	8000788 <__aeabi_i2d>
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	462b      	mov	r3, r5
 800ecc2:	f7f2 f833 	bl	8000d2c <__aeabi_dcmpeq>
 800ecc6:	b900      	cbnz	r0, 800ecca <_dtoa_r+0x16a>
 800ecc8:	3f01      	subs	r7, #1
 800ecca:	2f16      	cmp	r7, #22
 800eccc:	d851      	bhi.n	800ed72 <_dtoa_r+0x212>
 800ecce:	4b5b      	ldr	r3, [pc, #364]	@ (800ee3c <_dtoa_r+0x2dc>)
 800ecd0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ecd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ecd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecdc:	f7f2 f830 	bl	8000d40 <__aeabi_dcmplt>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d048      	beq.n	800ed76 <_dtoa_r+0x216>
 800ece4:	3f01      	subs	r7, #1
 800ece6:	2300      	movs	r3, #0
 800ece8:	9312      	str	r3, [sp, #72]	@ 0x48
 800ecea:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ecec:	1b9b      	subs	r3, r3, r6
 800ecee:	1e5a      	subs	r2, r3, #1
 800ecf0:	bf46      	itte	mi
 800ecf2:	f1c3 0801 	rsbmi	r8, r3, #1
 800ecf6:	2300      	movmi	r3, #0
 800ecf8:	f04f 0800 	movpl.w	r8, #0
 800ecfc:	9208      	str	r2, [sp, #32]
 800ecfe:	bf48      	it	mi
 800ed00:	9308      	strmi	r3, [sp, #32]
 800ed02:	2f00      	cmp	r7, #0
 800ed04:	db39      	blt.n	800ed7a <_dtoa_r+0x21a>
 800ed06:	9b08      	ldr	r3, [sp, #32]
 800ed08:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ed0a:	443b      	add	r3, r7
 800ed0c:	9308      	str	r3, [sp, #32]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed14:	2b09      	cmp	r3, #9
 800ed16:	d864      	bhi.n	800ede2 <_dtoa_r+0x282>
 800ed18:	2b05      	cmp	r3, #5
 800ed1a:	bfc5      	ittet	gt
 800ed1c:	3b04      	subgt	r3, #4
 800ed1e:	2400      	movgt	r4, #0
 800ed20:	2401      	movle	r4, #1
 800ed22:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ed24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed26:	3b02      	subs	r3, #2
 800ed28:	2b03      	cmp	r3, #3
 800ed2a:	d865      	bhi.n	800edf8 <_dtoa_r+0x298>
 800ed2c:	e8df f003 	tbb	[pc, r3]
 800ed30:	5737392c 	.word	0x5737392c
 800ed34:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ed38:	441e      	add	r6, r3
 800ed3a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ed3e:	2b20      	cmp	r3, #32
 800ed40:	bfc9      	itett	gt
 800ed42:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ed46:	f1c3 0320 	rsble	r3, r3, #32
 800ed4a:	409f      	lslgt	r7, r3
 800ed4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ed50:	bfd8      	it	le
 800ed52:	fa04 f003 	lslle.w	r0, r4, r3
 800ed56:	f106 36ff 	add.w	r6, r6, #4294967295
 800ed5a:	bfc4      	itt	gt
 800ed5c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ed60:	ea47 0003 	orrgt.w	r0, r7, r3
 800ed64:	f7f1 fd00 	bl	8000768 <__aeabi_ui2d>
 800ed68:	2201      	movs	r2, #1
 800ed6a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ed6e:	9214      	str	r2, [sp, #80]	@ 0x50
 800ed70:	e777      	b.n	800ec62 <_dtoa_r+0x102>
 800ed72:	2301      	movs	r3, #1
 800ed74:	e7b8      	b.n	800ece8 <_dtoa_r+0x188>
 800ed76:	9012      	str	r0, [sp, #72]	@ 0x48
 800ed78:	e7b7      	b.n	800ecea <_dtoa_r+0x18a>
 800ed7a:	427b      	negs	r3, r7
 800ed7c:	eba8 0807 	sub.w	r8, r8, r7
 800ed80:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed82:	2300      	movs	r3, #0
 800ed84:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed86:	e7c4      	b.n	800ed12 <_dtoa_r+0x1b2>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	dc35      	bgt.n	800edfe <_dtoa_r+0x29e>
 800ed92:	2301      	movs	r3, #1
 800ed94:	461a      	mov	r2, r3
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	9307      	str	r3, [sp, #28]
 800ed9a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed9c:	e00b      	b.n	800edb6 <_dtoa_r+0x256>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e7f3      	b.n	800ed8a <_dtoa_r+0x22a>
 800eda2:	2300      	movs	r3, #0
 800eda4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eda8:	18fb      	adds	r3, r7, r3
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	3301      	adds	r3, #1
 800edae:	2b01      	cmp	r3, #1
 800edb0:	9307      	str	r3, [sp, #28]
 800edb2:	bfb8      	it	lt
 800edb4:	2301      	movlt	r3, #1
 800edb6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800edba:	2100      	movs	r1, #0
 800edbc:	2204      	movs	r2, #4
 800edbe:	f102 0514 	add.w	r5, r2, #20
 800edc2:	429d      	cmp	r5, r3
 800edc4:	d91f      	bls.n	800ee06 <_dtoa_r+0x2a6>
 800edc6:	6041      	str	r1, [r0, #4]
 800edc8:	4658      	mov	r0, fp
 800edca:	f000 fd8d 	bl	800f8e8 <_Balloc>
 800edce:	4682      	mov	sl, r0
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d13b      	bne.n	800ee4c <_dtoa_r+0x2ec>
 800edd4:	4b1a      	ldr	r3, [pc, #104]	@ (800ee40 <_dtoa_r+0x2e0>)
 800edd6:	4602      	mov	r2, r0
 800edd8:	f240 11af 	movw	r1, #431	@ 0x1af
 800eddc:	e6d7      	b.n	800eb8e <_dtoa_r+0x2e>
 800edde:	2301      	movs	r3, #1
 800ede0:	e7e0      	b.n	800eda4 <_dtoa_r+0x244>
 800ede2:	2401      	movs	r4, #1
 800ede4:	2300      	movs	r3, #0
 800ede6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ede8:	9309      	str	r3, [sp, #36]	@ 0x24
 800edea:	f04f 33ff 	mov.w	r3, #4294967295
 800edee:	2200      	movs	r2, #0
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	9307      	str	r3, [sp, #28]
 800edf4:	2312      	movs	r3, #18
 800edf6:	e7d0      	b.n	800ed9a <_dtoa_r+0x23a>
 800edf8:	2301      	movs	r3, #1
 800edfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800edfc:	e7f5      	b.n	800edea <_dtoa_r+0x28a>
 800edfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	9307      	str	r3, [sp, #28]
 800ee04:	e7d7      	b.n	800edb6 <_dtoa_r+0x256>
 800ee06:	3101      	adds	r1, #1
 800ee08:	0052      	lsls	r2, r2, #1
 800ee0a:	e7d8      	b.n	800edbe <_dtoa_r+0x25e>
 800ee0c:	f3af 8000 	nop.w
 800ee10:	636f4361 	.word	0x636f4361
 800ee14:	3fd287a7 	.word	0x3fd287a7
 800ee18:	8b60c8b3 	.word	0x8b60c8b3
 800ee1c:	3fc68a28 	.word	0x3fc68a28
 800ee20:	509f79fb 	.word	0x509f79fb
 800ee24:	3fd34413 	.word	0x3fd34413
 800ee28:	0801237e 	.word	0x0801237e
 800ee2c:	08012395 	.word	0x08012395
 800ee30:	7ff00000 	.word	0x7ff00000
 800ee34:	08012349 	.word	0x08012349
 800ee38:	3ff80000 	.word	0x3ff80000
 800ee3c:	08012490 	.word	0x08012490
 800ee40:	080123ed 	.word	0x080123ed
 800ee44:	0801237a 	.word	0x0801237a
 800ee48:	08012348 	.word	0x08012348
 800ee4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ee50:	6018      	str	r0, [r3, #0]
 800ee52:	9b07      	ldr	r3, [sp, #28]
 800ee54:	2b0e      	cmp	r3, #14
 800ee56:	f200 80a4 	bhi.w	800efa2 <_dtoa_r+0x442>
 800ee5a:	2c00      	cmp	r4, #0
 800ee5c:	f000 80a1 	beq.w	800efa2 <_dtoa_r+0x442>
 800ee60:	2f00      	cmp	r7, #0
 800ee62:	dd33      	ble.n	800eecc <_dtoa_r+0x36c>
 800ee64:	f007 020f 	and.w	r2, r7, #15
 800ee68:	4bac      	ldr	r3, [pc, #688]	@ (800f11c <_dtoa_r+0x5bc>)
 800ee6a:	05f8      	lsls	r0, r7, #23
 800ee6c:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ee70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee74:	ed93 7b00 	vldr	d7, [r3]
 800ee78:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ee7c:	d516      	bpl.n	800eeac <_dtoa_r+0x34c>
 800ee7e:	4ba8      	ldr	r3, [pc, #672]	@ (800f120 <_dtoa_r+0x5c0>)
 800ee80:	f004 040f 	and.w	r4, r4, #15
 800ee84:	2603      	movs	r6, #3
 800ee86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee8e:	f7f1 fe0f 	bl	8000ab0 <__aeabi_ddiv>
 800ee92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee96:	4da2      	ldr	r5, [pc, #648]	@ (800f120 <_dtoa_r+0x5c0>)
 800ee98:	b954      	cbnz	r4, 800eeb0 <_dtoa_r+0x350>
 800ee9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eea2:	f7f1 fe05 	bl	8000ab0 <__aeabi_ddiv>
 800eea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeaa:	e028      	b.n	800eefe <_dtoa_r+0x39e>
 800eeac:	2602      	movs	r6, #2
 800eeae:	e7f2      	b.n	800ee96 <_dtoa_r+0x336>
 800eeb0:	07e1      	lsls	r1, r4, #31
 800eeb2:	d508      	bpl.n	800eec6 <_dtoa_r+0x366>
 800eeb4:	3601      	adds	r6, #1
 800eeb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eeba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eebe:	f7f1 fccd 	bl	800085c <__aeabi_dmul>
 800eec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eec6:	1064      	asrs	r4, r4, #1
 800eec8:	3508      	adds	r5, #8
 800eeca:	e7e5      	b.n	800ee98 <_dtoa_r+0x338>
 800eecc:	f000 80d2 	beq.w	800f074 <_dtoa_r+0x514>
 800eed0:	427c      	negs	r4, r7
 800eed2:	4b92      	ldr	r3, [pc, #584]	@ (800f11c <_dtoa_r+0x5bc>)
 800eed4:	4d92      	ldr	r5, [pc, #584]	@ (800f120 <_dtoa_r+0x5c0>)
 800eed6:	2602      	movs	r6, #2
 800eed8:	f004 020f 	and.w	r2, r4, #15
 800eedc:	1124      	asrs	r4, r4, #4
 800eede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eee2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeea:	f7f1 fcb7 	bl	800085c <__aeabi_dmul>
 800eeee:	2300      	movs	r3, #0
 800eef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	f040 80b2 	bne.w	800f05e <_dtoa_r+0x4fe>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d1d3      	bne.n	800eea6 <_dtoa_r+0x346>
 800eefe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 80b7 	beq.w	800f078 <_dtoa_r+0x518>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	4b85      	ldr	r3, [pc, #532]	@ (800f124 <_dtoa_r+0x5c4>)
 800ef0e:	4620      	mov	r0, r4
 800ef10:	4629      	mov	r1, r5
 800ef12:	f7f1 ff15 	bl	8000d40 <__aeabi_dcmplt>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f000 80ae 	beq.w	800f078 <_dtoa_r+0x518>
 800ef1c:	9b07      	ldr	r3, [sp, #28]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	f000 80aa 	beq.w	800f078 <_dtoa_r+0x518>
 800ef24:	9b00      	ldr	r3, [sp, #0]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	dd37      	ble.n	800ef9a <_dtoa_r+0x43a>
 800ef2a:	1e7b      	subs	r3, r7, #1
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	2200      	movs	r2, #0
 800ef30:	4629      	mov	r1, r5
 800ef32:	9304      	str	r3, [sp, #16]
 800ef34:	3601      	adds	r6, #1
 800ef36:	4b7c      	ldr	r3, [pc, #496]	@ (800f128 <_dtoa_r+0x5c8>)
 800ef38:	f7f1 fc90 	bl	800085c <__aeabi_dmul>
 800ef3c:	9c00      	ldr	r4, [sp, #0]
 800ef3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef42:	4630      	mov	r0, r6
 800ef44:	f7f1 fc20 	bl	8000788 <__aeabi_i2d>
 800ef48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef4c:	f7f1 fc86 	bl	800085c <__aeabi_dmul>
 800ef50:	2200      	movs	r2, #0
 800ef52:	4b76      	ldr	r3, [pc, #472]	@ (800f12c <_dtoa_r+0x5cc>)
 800ef54:	f7f1 facc 	bl	80004f0 <__adddf3>
 800ef58:	4605      	mov	r5, r0
 800ef5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ef5e:	2c00      	cmp	r4, #0
 800ef60:	f040 808d 	bne.w	800f07e <_dtoa_r+0x51e>
 800ef64:	2200      	movs	r2, #0
 800ef66:	4b72      	ldr	r3, [pc, #456]	@ (800f130 <_dtoa_r+0x5d0>)
 800ef68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef6c:	f7f1 fabe 	bl	80004ec <__aeabi_dsub>
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef78:	462a      	mov	r2, r5
 800ef7a:	4633      	mov	r3, r6
 800ef7c:	f7f1 fefe 	bl	8000d7c <__aeabi_dcmpgt>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	f040 828b 	bne.w	800f49c <_dtoa_r+0x93c>
 800ef86:	462a      	mov	r2, r5
 800ef88:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ef8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef90:	f7f1 fed6 	bl	8000d40 <__aeabi_dcmplt>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	f040 8128 	bne.w	800f1ea <_dtoa_r+0x68a>
 800ef9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ef9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800efa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f2c0 815a 	blt.w	800f25e <_dtoa_r+0x6fe>
 800efaa:	2f0e      	cmp	r7, #14
 800efac:	f300 8157 	bgt.w	800f25e <_dtoa_r+0x6fe>
 800efb0:	4b5a      	ldr	r3, [pc, #360]	@ (800f11c <_dtoa_r+0x5bc>)
 800efb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800efb6:	ed93 7b00 	vldr	d7, [r3]
 800efba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	ed8d 7b00 	vstr	d7, [sp]
 800efc2:	da03      	bge.n	800efcc <_dtoa_r+0x46c>
 800efc4:	9b07      	ldr	r3, [sp, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f340 8101 	ble.w	800f1ce <_dtoa_r+0x66e>
 800efcc:	4656      	mov	r6, sl
 800efce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800efd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efd6:	4620      	mov	r0, r4
 800efd8:	4629      	mov	r1, r5
 800efda:	f7f1 fd69 	bl	8000ab0 <__aeabi_ddiv>
 800efde:	f7f1 feed 	bl	8000dbc <__aeabi_d2iz>
 800efe2:	4680      	mov	r8, r0
 800efe4:	f7f1 fbd0 	bl	8000788 <__aeabi_i2d>
 800efe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efec:	f7f1 fc36 	bl	800085c <__aeabi_dmul>
 800eff0:	4602      	mov	r2, r0
 800eff2:	4620      	mov	r0, r4
 800eff4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eff8:	460b      	mov	r3, r1
 800effa:	4629      	mov	r1, r5
 800effc:	f7f1 fa76 	bl	80004ec <__aeabi_dsub>
 800f000:	9d07      	ldr	r5, [sp, #28]
 800f002:	f806 4b01 	strb.w	r4, [r6], #1
 800f006:	eba6 040a 	sub.w	r4, r6, sl
 800f00a:	4602      	mov	r2, r0
 800f00c:	460b      	mov	r3, r1
 800f00e:	42a5      	cmp	r5, r4
 800f010:	f040 8117 	bne.w	800f242 <_dtoa_r+0x6e2>
 800f014:	f7f1 fa6c 	bl	80004f0 <__adddf3>
 800f018:	4604      	mov	r4, r0
 800f01a:	460d      	mov	r5, r1
 800f01c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f020:	f7f1 feac 	bl	8000d7c <__aeabi_dcmpgt>
 800f024:	2800      	cmp	r0, #0
 800f026:	f040 80f9 	bne.w	800f21c <_dtoa_r+0x6bc>
 800f02a:	4620      	mov	r0, r4
 800f02c:	4629      	mov	r1, r5
 800f02e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f032:	f7f1 fe7b 	bl	8000d2c <__aeabi_dcmpeq>
 800f036:	b118      	cbz	r0, 800f040 <_dtoa_r+0x4e0>
 800f038:	f018 0f01 	tst.w	r8, #1
 800f03c:	f040 80ee 	bne.w	800f21c <_dtoa_r+0x6bc>
 800f040:	4649      	mov	r1, r9
 800f042:	4658      	mov	r0, fp
 800f044:	f000 fc90 	bl	800f968 <_Bfree>
 800f048:	2300      	movs	r3, #0
 800f04a:	3701      	adds	r7, #1
 800f04c:	7033      	strb	r3, [r6, #0]
 800f04e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f050:	601f      	str	r7, [r3, #0]
 800f052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f054:	2b00      	cmp	r3, #0
 800f056:	f000 831d 	beq.w	800f694 <_dtoa_r+0xb34>
 800f05a:	601e      	str	r6, [r3, #0]
 800f05c:	e31a      	b.n	800f694 <_dtoa_r+0xb34>
 800f05e:	07e2      	lsls	r2, r4, #31
 800f060:	d505      	bpl.n	800f06e <_dtoa_r+0x50e>
 800f062:	3601      	adds	r6, #1
 800f064:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f068:	f7f1 fbf8 	bl	800085c <__aeabi_dmul>
 800f06c:	2301      	movs	r3, #1
 800f06e:	1064      	asrs	r4, r4, #1
 800f070:	3508      	adds	r5, #8
 800f072:	e73f      	b.n	800eef4 <_dtoa_r+0x394>
 800f074:	2602      	movs	r6, #2
 800f076:	e742      	b.n	800eefe <_dtoa_r+0x39e>
 800f078:	9c07      	ldr	r4, [sp, #28]
 800f07a:	9704      	str	r7, [sp, #16]
 800f07c:	e761      	b.n	800ef42 <_dtoa_r+0x3e2>
 800f07e:	4b27      	ldr	r3, [pc, #156]	@ (800f11c <_dtoa_r+0x5bc>)
 800f080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f086:	4454      	add	r4, sl
 800f088:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f08c:	2900      	cmp	r1, #0
 800f08e:	d053      	beq.n	800f138 <_dtoa_r+0x5d8>
 800f090:	2000      	movs	r0, #0
 800f092:	4928      	ldr	r1, [pc, #160]	@ (800f134 <_dtoa_r+0x5d4>)
 800f094:	f7f1 fd0c 	bl	8000ab0 <__aeabi_ddiv>
 800f098:	4633      	mov	r3, r6
 800f09a:	4656      	mov	r6, sl
 800f09c:	462a      	mov	r2, r5
 800f09e:	f7f1 fa25 	bl	80004ec <__aeabi_dsub>
 800f0a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0aa:	f7f1 fe87 	bl	8000dbc <__aeabi_d2iz>
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	f7f1 fb6a 	bl	8000788 <__aeabi_i2d>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	3530      	adds	r5, #48	@ 0x30
 800f0ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0be:	f7f1 fa15 	bl	80004ec <__aeabi_dsub>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	f806 5b01 	strb.w	r5, [r6], #1
 800f0ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f0ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f0d2:	f7f1 fe35 	bl	8000d40 <__aeabi_dcmplt>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d171      	bne.n	800f1be <_dtoa_r+0x65e>
 800f0da:	2000      	movs	r0, #0
 800f0dc:	4911      	ldr	r1, [pc, #68]	@ (800f124 <_dtoa_r+0x5c4>)
 800f0de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0e2:	f7f1 fa03 	bl	80004ec <__aeabi_dsub>
 800f0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f0ea:	f7f1 fe29 	bl	8000d40 <__aeabi_dcmplt>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f040 8095 	bne.w	800f21e <_dtoa_r+0x6be>
 800f0f4:	42a6      	cmp	r6, r4
 800f0f6:	f43f af50 	beq.w	800ef9a <_dtoa_r+0x43a>
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f128 <_dtoa_r+0x5c8>)
 800f0fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f102:	f7f1 fbab 	bl	800085c <__aeabi_dmul>
 800f106:	2200      	movs	r2, #0
 800f108:	4b07      	ldr	r3, [pc, #28]	@ (800f128 <_dtoa_r+0x5c8>)
 800f10a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f112:	f7f1 fba3 	bl	800085c <__aeabi_dmul>
 800f116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f11a:	e7c4      	b.n	800f0a6 <_dtoa_r+0x546>
 800f11c:	08012490 	.word	0x08012490
 800f120:	08012468 	.word	0x08012468
 800f124:	3ff00000 	.word	0x3ff00000
 800f128:	40240000 	.word	0x40240000
 800f12c:	401c0000 	.word	0x401c0000
 800f130:	40140000 	.word	0x40140000
 800f134:	3fe00000 	.word	0x3fe00000
 800f138:	4631      	mov	r1, r6
 800f13a:	4656      	mov	r6, sl
 800f13c:	4628      	mov	r0, r5
 800f13e:	f7f1 fb8d 	bl	800085c <__aeabi_dmul>
 800f142:	9415      	str	r4, [sp, #84]	@ 0x54
 800f144:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f14c:	f7f1 fe36 	bl	8000dbc <__aeabi_d2iz>
 800f150:	4605      	mov	r5, r0
 800f152:	f7f1 fb19 	bl	8000788 <__aeabi_i2d>
 800f156:	4602      	mov	r2, r0
 800f158:	3530      	adds	r5, #48	@ 0x30
 800f15a:	460b      	mov	r3, r1
 800f15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f160:	f7f1 f9c4 	bl	80004ec <__aeabi_dsub>
 800f164:	f806 5b01 	strb.w	r5, [r6], #1
 800f168:	4602      	mov	r2, r0
 800f16a:	460b      	mov	r3, r1
 800f16c:	42a6      	cmp	r6, r4
 800f16e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f172:	f04f 0200 	mov.w	r2, #0
 800f176:	d124      	bne.n	800f1c2 <_dtoa_r+0x662>
 800f178:	4bac      	ldr	r3, [pc, #688]	@ (800f42c <_dtoa_r+0x8cc>)
 800f17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f17e:	f7f1 f9b7 	bl	80004f0 <__adddf3>
 800f182:	4602      	mov	r2, r0
 800f184:	460b      	mov	r3, r1
 800f186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f18a:	f7f1 fdf7 	bl	8000d7c <__aeabi_dcmpgt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	d145      	bne.n	800f21e <_dtoa_r+0x6be>
 800f192:	2000      	movs	r0, #0
 800f194:	49a5      	ldr	r1, [pc, #660]	@ (800f42c <_dtoa_r+0x8cc>)
 800f196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f19a:	f7f1 f9a7 	bl	80004ec <__aeabi_dsub>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1a6:	f7f1 fdcb 	bl	8000d40 <__aeabi_dcmplt>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	f43f aef5 	beq.w	800ef9a <_dtoa_r+0x43a>
 800f1b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f1b2:	1e73      	subs	r3, r6, #1
 800f1b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f1b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f1ba:	2b30      	cmp	r3, #48	@ 0x30
 800f1bc:	d0f8      	beq.n	800f1b0 <_dtoa_r+0x650>
 800f1be:	9f04      	ldr	r7, [sp, #16]
 800f1c0:	e73e      	b.n	800f040 <_dtoa_r+0x4e0>
 800f1c2:	4b9b      	ldr	r3, [pc, #620]	@ (800f430 <_dtoa_r+0x8d0>)
 800f1c4:	f7f1 fb4a 	bl	800085c <__aeabi_dmul>
 800f1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f1cc:	e7bc      	b.n	800f148 <_dtoa_r+0x5e8>
 800f1ce:	d10c      	bne.n	800f1ea <_dtoa_r+0x68a>
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4b98      	ldr	r3, [pc, #608]	@ (800f434 <_dtoa_r+0x8d4>)
 800f1d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1d8:	f7f1 fb40 	bl	800085c <__aeabi_dmul>
 800f1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f1e0:	f7f1 fdc2 	bl	8000d68 <__aeabi_dcmpge>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	f000 8157 	beq.w	800f498 <_dtoa_r+0x938>
 800f1ea:	2400      	movs	r4, #0
 800f1ec:	4625      	mov	r5, r4
 800f1ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1f0:	4656      	mov	r6, sl
 800f1f2:	43db      	mvns	r3, r3
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	2700      	movs	r7, #0
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4658      	mov	r0, fp
 800f1fc:	f000 fbb4 	bl	800f968 <_Bfree>
 800f200:	2d00      	cmp	r5, #0
 800f202:	d0dc      	beq.n	800f1be <_dtoa_r+0x65e>
 800f204:	b12f      	cbz	r7, 800f212 <_dtoa_r+0x6b2>
 800f206:	42af      	cmp	r7, r5
 800f208:	d003      	beq.n	800f212 <_dtoa_r+0x6b2>
 800f20a:	4639      	mov	r1, r7
 800f20c:	4658      	mov	r0, fp
 800f20e:	f000 fbab 	bl	800f968 <_Bfree>
 800f212:	4629      	mov	r1, r5
 800f214:	4658      	mov	r0, fp
 800f216:	f000 fba7 	bl	800f968 <_Bfree>
 800f21a:	e7d0      	b.n	800f1be <_dtoa_r+0x65e>
 800f21c:	9704      	str	r7, [sp, #16]
 800f21e:	4633      	mov	r3, r6
 800f220:	461e      	mov	r6, r3
 800f222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f226:	2a39      	cmp	r2, #57	@ 0x39
 800f228:	d107      	bne.n	800f23a <_dtoa_r+0x6da>
 800f22a:	459a      	cmp	sl, r3
 800f22c:	d1f8      	bne.n	800f220 <_dtoa_r+0x6c0>
 800f22e:	9a04      	ldr	r2, [sp, #16]
 800f230:	3201      	adds	r2, #1
 800f232:	9204      	str	r2, [sp, #16]
 800f234:	2230      	movs	r2, #48	@ 0x30
 800f236:	f88a 2000 	strb.w	r2, [sl]
 800f23a:	781a      	ldrb	r2, [r3, #0]
 800f23c:	3201      	adds	r2, #1
 800f23e:	701a      	strb	r2, [r3, #0]
 800f240:	e7bd      	b.n	800f1be <_dtoa_r+0x65e>
 800f242:	2200      	movs	r2, #0
 800f244:	4b7a      	ldr	r3, [pc, #488]	@ (800f430 <_dtoa_r+0x8d0>)
 800f246:	f7f1 fb09 	bl	800085c <__aeabi_dmul>
 800f24a:	2200      	movs	r2, #0
 800f24c:	2300      	movs	r3, #0
 800f24e:	4604      	mov	r4, r0
 800f250:	460d      	mov	r5, r1
 800f252:	f7f1 fd6b 	bl	8000d2c <__aeabi_dcmpeq>
 800f256:	2800      	cmp	r0, #0
 800f258:	f43f aebb 	beq.w	800efd2 <_dtoa_r+0x472>
 800f25c:	e6f0      	b.n	800f040 <_dtoa_r+0x4e0>
 800f25e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f260:	2a00      	cmp	r2, #0
 800f262:	f000 80db 	beq.w	800f41c <_dtoa_r+0x8bc>
 800f266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f268:	2a01      	cmp	r2, #1
 800f26a:	f300 80bf 	bgt.w	800f3ec <_dtoa_r+0x88c>
 800f26e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f270:	2a00      	cmp	r2, #0
 800f272:	f000 80b7 	beq.w	800f3e4 <_dtoa_r+0x884>
 800f276:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f27a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f27c:	4646      	mov	r6, r8
 800f27e:	9a08      	ldr	r2, [sp, #32]
 800f280:	2101      	movs	r1, #1
 800f282:	4658      	mov	r0, fp
 800f284:	4498      	add	r8, r3
 800f286:	441a      	add	r2, r3
 800f288:	9208      	str	r2, [sp, #32]
 800f28a:	f000 fc6d 	bl	800fb68 <__i2b>
 800f28e:	4605      	mov	r5, r0
 800f290:	b15e      	cbz	r6, 800f2aa <_dtoa_r+0x74a>
 800f292:	9b08      	ldr	r3, [sp, #32]
 800f294:	2b00      	cmp	r3, #0
 800f296:	dd08      	ble.n	800f2aa <_dtoa_r+0x74a>
 800f298:	42b3      	cmp	r3, r6
 800f29a:	9a08      	ldr	r2, [sp, #32]
 800f29c:	bfa8      	it	ge
 800f29e:	4633      	movge	r3, r6
 800f2a0:	eba8 0803 	sub.w	r8, r8, r3
 800f2a4:	1af6      	subs	r6, r6, r3
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	9308      	str	r3, [sp, #32]
 800f2aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2ac:	b1f3      	cbz	r3, 800f2ec <_dtoa_r+0x78c>
 800f2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 80b7 	beq.w	800f424 <_dtoa_r+0x8c4>
 800f2b6:	b18c      	cbz	r4, 800f2dc <_dtoa_r+0x77c>
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	4658      	mov	r0, fp
 800f2be:	f000 fd13 	bl	800fce8 <__pow5mult>
 800f2c2:	464a      	mov	r2, r9
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	4658      	mov	r0, fp
 800f2ca:	f000 fc63 	bl	800fb94 <__multiply>
 800f2ce:	4649      	mov	r1, r9
 800f2d0:	9004      	str	r0, [sp, #16]
 800f2d2:	4658      	mov	r0, fp
 800f2d4:	f000 fb48 	bl	800f968 <_Bfree>
 800f2d8:	9b04      	ldr	r3, [sp, #16]
 800f2da:	4699      	mov	r9, r3
 800f2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2de:	1b1a      	subs	r2, r3, r4
 800f2e0:	d004      	beq.n	800f2ec <_dtoa_r+0x78c>
 800f2e2:	4649      	mov	r1, r9
 800f2e4:	4658      	mov	r0, fp
 800f2e6:	f000 fcff 	bl	800fce8 <__pow5mult>
 800f2ea:	4681      	mov	r9, r0
 800f2ec:	2101      	movs	r1, #1
 800f2ee:	4658      	mov	r0, fp
 800f2f0:	f000 fc3a 	bl	800fb68 <__i2b>
 800f2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 81cf 	beq.w	800f69c <_dtoa_r+0xb3c>
 800f2fe:	461a      	mov	r2, r3
 800f300:	4601      	mov	r1, r0
 800f302:	4658      	mov	r0, fp
 800f304:	f000 fcf0 	bl	800fce8 <__pow5mult>
 800f308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f30a:	4604      	mov	r4, r0
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	f300 8095 	bgt.w	800f43c <_dtoa_r+0x8dc>
 800f312:	9b02      	ldr	r3, [sp, #8]
 800f314:	2b00      	cmp	r3, #0
 800f316:	f040 8087 	bne.w	800f428 <_dtoa_r+0x8c8>
 800f31a:	9b03      	ldr	r3, [sp, #12]
 800f31c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f320:	2b00      	cmp	r3, #0
 800f322:	f040 8089 	bne.w	800f438 <_dtoa_r+0x8d8>
 800f326:	9b03      	ldr	r3, [sp, #12]
 800f328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f32c:	0d1b      	lsrs	r3, r3, #20
 800f32e:	051b      	lsls	r3, r3, #20
 800f330:	b12b      	cbz	r3, 800f33e <_dtoa_r+0x7de>
 800f332:	9b08      	ldr	r3, [sp, #32]
 800f334:	f108 0801 	add.w	r8, r8, #1
 800f338:	3301      	adds	r3, #1
 800f33a:	9308      	str	r3, [sp, #32]
 800f33c:	2301      	movs	r3, #1
 800f33e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f342:	2b00      	cmp	r3, #0
 800f344:	f000 81b0 	beq.w	800f6a8 <_dtoa_r+0xb48>
 800f348:	6923      	ldr	r3, [r4, #16]
 800f34a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f34e:	6918      	ldr	r0, [r3, #16]
 800f350:	f000 fbbe 	bl	800fad0 <__hi0bits>
 800f354:	f1c0 0020 	rsb	r0, r0, #32
 800f358:	9b08      	ldr	r3, [sp, #32]
 800f35a:	4418      	add	r0, r3
 800f35c:	f010 001f 	ands.w	r0, r0, #31
 800f360:	d077      	beq.n	800f452 <_dtoa_r+0x8f2>
 800f362:	f1c0 0320 	rsb	r3, r0, #32
 800f366:	2b04      	cmp	r3, #4
 800f368:	dd6b      	ble.n	800f442 <_dtoa_r+0x8e2>
 800f36a:	f1c0 001c 	rsb	r0, r0, #28
 800f36e:	9b08      	ldr	r3, [sp, #32]
 800f370:	4480      	add	r8, r0
 800f372:	4403      	add	r3, r0
 800f374:	4406      	add	r6, r0
 800f376:	9308      	str	r3, [sp, #32]
 800f378:	f1b8 0f00 	cmp.w	r8, #0
 800f37c:	dd05      	ble.n	800f38a <_dtoa_r+0x82a>
 800f37e:	4649      	mov	r1, r9
 800f380:	4642      	mov	r2, r8
 800f382:	4658      	mov	r0, fp
 800f384:	f000 fd0a 	bl	800fd9c <__lshift>
 800f388:	4681      	mov	r9, r0
 800f38a:	9b08      	ldr	r3, [sp, #32]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dd05      	ble.n	800f39c <_dtoa_r+0x83c>
 800f390:	4621      	mov	r1, r4
 800f392:	461a      	mov	r2, r3
 800f394:	4658      	mov	r0, fp
 800f396:	f000 fd01 	bl	800fd9c <__lshift>
 800f39a:	4604      	mov	r4, r0
 800f39c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d059      	beq.n	800f456 <_dtoa_r+0x8f6>
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	4648      	mov	r0, r9
 800f3a6:	f000 fd65 	bl	800fe74 <__mcmp>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	da53      	bge.n	800f456 <_dtoa_r+0x8f6>
 800f3ae:	1e7b      	subs	r3, r7, #1
 800f3b0:	4649      	mov	r1, r9
 800f3b2:	220a      	movs	r2, #10
 800f3b4:	4658      	mov	r0, fp
 800f3b6:	9304      	str	r3, [sp, #16]
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f000 faf7 	bl	800f9ac <__multadd>
 800f3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f3c0:	4681      	mov	r9, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 8172 	beq.w	800f6ac <_dtoa_r+0xb4c>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	220a      	movs	r2, #10
 800f3ce:	4658      	mov	r0, fp
 800f3d0:	f000 faec 	bl	800f9ac <__multadd>
 800f3d4:	9b00      	ldr	r3, [sp, #0]
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	dc67      	bgt.n	800f4ac <_dtoa_r+0x94c>
 800f3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3de:	2b02      	cmp	r3, #2
 800f3e0:	dc41      	bgt.n	800f466 <_dtoa_r+0x906>
 800f3e2:	e063      	b.n	800f4ac <_dtoa_r+0x94c>
 800f3e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f3e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f3ea:	e746      	b.n	800f27a <_dtoa_r+0x71a>
 800f3ec:	9b07      	ldr	r3, [sp, #28]
 800f3ee:	1e5c      	subs	r4, r3, #1
 800f3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3f2:	42a3      	cmp	r3, r4
 800f3f4:	bfb7      	itett	lt
 800f3f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f3f8:	1b1c      	subge	r4, r3, r4
 800f3fa:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f3fc:	1ae3      	sublt	r3, r4, r3
 800f3fe:	bfbe      	ittt	lt
 800f400:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f402:	2400      	movlt	r4, #0
 800f404:	18d2      	addlt	r2, r2, r3
 800f406:	9b07      	ldr	r3, [sp, #28]
 800f408:	bfb8      	it	lt
 800f40a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bfb5      	itete	lt
 800f410:	eba8 0603 	sublt.w	r6, r8, r3
 800f414:	4646      	movge	r6, r8
 800f416:	2300      	movlt	r3, #0
 800f418:	9b07      	ldrge	r3, [sp, #28]
 800f41a:	e730      	b.n	800f27e <_dtoa_r+0x71e>
 800f41c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f41e:	4646      	mov	r6, r8
 800f420:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f422:	e735      	b.n	800f290 <_dtoa_r+0x730>
 800f424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f426:	e75c      	b.n	800f2e2 <_dtoa_r+0x782>
 800f428:	2300      	movs	r3, #0
 800f42a:	e788      	b.n	800f33e <_dtoa_r+0x7de>
 800f42c:	3fe00000 	.word	0x3fe00000
 800f430:	40240000 	.word	0x40240000
 800f434:	40140000 	.word	0x40140000
 800f438:	9b02      	ldr	r3, [sp, #8]
 800f43a:	e780      	b.n	800f33e <_dtoa_r+0x7de>
 800f43c:	2300      	movs	r3, #0
 800f43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f440:	e782      	b.n	800f348 <_dtoa_r+0x7e8>
 800f442:	d099      	beq.n	800f378 <_dtoa_r+0x818>
 800f444:	331c      	adds	r3, #28
 800f446:	9a08      	ldr	r2, [sp, #32]
 800f448:	441a      	add	r2, r3
 800f44a:	4498      	add	r8, r3
 800f44c:	441e      	add	r6, r3
 800f44e:	9208      	str	r2, [sp, #32]
 800f450:	e792      	b.n	800f378 <_dtoa_r+0x818>
 800f452:	4603      	mov	r3, r0
 800f454:	e7f6      	b.n	800f444 <_dtoa_r+0x8e4>
 800f456:	9b07      	ldr	r3, [sp, #28]
 800f458:	9704      	str	r7, [sp, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	dc20      	bgt.n	800f4a0 <_dtoa_r+0x940>
 800f45e:	9300      	str	r3, [sp, #0]
 800f460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f462:	2b02      	cmp	r3, #2
 800f464:	dd1e      	ble.n	800f4a4 <_dtoa_r+0x944>
 800f466:	9b00      	ldr	r3, [sp, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f47f aec0 	bne.w	800f1ee <_dtoa_r+0x68e>
 800f46e:	4621      	mov	r1, r4
 800f470:	2205      	movs	r2, #5
 800f472:	4658      	mov	r0, fp
 800f474:	f000 fa9a 	bl	800f9ac <__multadd>
 800f478:	4601      	mov	r1, r0
 800f47a:	4604      	mov	r4, r0
 800f47c:	4648      	mov	r0, r9
 800f47e:	f000 fcf9 	bl	800fe74 <__mcmp>
 800f482:	2800      	cmp	r0, #0
 800f484:	f77f aeb3 	ble.w	800f1ee <_dtoa_r+0x68e>
 800f488:	2331      	movs	r3, #49	@ 0x31
 800f48a:	4656      	mov	r6, sl
 800f48c:	f806 3b01 	strb.w	r3, [r6], #1
 800f490:	9b04      	ldr	r3, [sp, #16]
 800f492:	3301      	adds	r3, #1
 800f494:	9304      	str	r3, [sp, #16]
 800f496:	e6ae      	b.n	800f1f6 <_dtoa_r+0x696>
 800f498:	9c07      	ldr	r4, [sp, #28]
 800f49a:	9704      	str	r7, [sp, #16]
 800f49c:	4625      	mov	r5, r4
 800f49e:	e7f3      	b.n	800f488 <_dtoa_r+0x928>
 800f4a0:	9b07      	ldr	r3, [sp, #28]
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 8104 	beq.w	800f6b4 <_dtoa_r+0xb54>
 800f4ac:	2e00      	cmp	r6, #0
 800f4ae:	dd05      	ble.n	800f4bc <_dtoa_r+0x95c>
 800f4b0:	4629      	mov	r1, r5
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	4658      	mov	r0, fp
 800f4b6:	f000 fc71 	bl	800fd9c <__lshift>
 800f4ba:	4605      	mov	r5, r0
 800f4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d05a      	beq.n	800f578 <_dtoa_r+0xa18>
 800f4c2:	6869      	ldr	r1, [r5, #4]
 800f4c4:	4658      	mov	r0, fp
 800f4c6:	f000 fa0f 	bl	800f8e8 <_Balloc>
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	b928      	cbnz	r0, 800f4da <_dtoa_r+0x97a>
 800f4ce:	4b84      	ldr	r3, [pc, #528]	@ (800f6e0 <_dtoa_r+0xb80>)
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f4d6:	f7ff bb5a 	b.w	800eb8e <_dtoa_r+0x2e>
 800f4da:	692a      	ldr	r2, [r5, #16]
 800f4dc:	f105 010c 	add.w	r1, r5, #12
 800f4e0:	300c      	adds	r0, #12
 800f4e2:	3202      	adds	r2, #2
 800f4e4:	0092      	lsls	r2, r2, #2
 800f4e6:	f002 f957 	bl	8011798 <memcpy>
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	4658      	mov	r0, fp
 800f4f0:	f000 fc54 	bl	800fd9c <__lshift>
 800f4f4:	f10a 0301 	add.w	r3, sl, #1
 800f4f8:	462f      	mov	r7, r5
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	9307      	str	r3, [sp, #28]
 800f4fe:	9b00      	ldr	r3, [sp, #0]
 800f500:	4453      	add	r3, sl
 800f502:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f504:	9b02      	ldr	r3, [sp, #8]
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f50c:	9b07      	ldr	r3, [sp, #28]
 800f50e:	4621      	mov	r1, r4
 800f510:	4648      	mov	r0, r9
 800f512:	3b01      	subs	r3, #1
 800f514:	9300      	str	r3, [sp, #0]
 800f516:	f7ff fa93 	bl	800ea40 <quorem>
 800f51a:	4639      	mov	r1, r7
 800f51c:	9002      	str	r0, [sp, #8]
 800f51e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f522:	4648      	mov	r0, r9
 800f524:	f000 fca6 	bl	800fe74 <__mcmp>
 800f528:	462a      	mov	r2, r5
 800f52a:	9008      	str	r0, [sp, #32]
 800f52c:	4621      	mov	r1, r4
 800f52e:	4658      	mov	r0, fp
 800f530:	f000 fcbc 	bl	800feac <__mdiff>
 800f534:	68c2      	ldr	r2, [r0, #12]
 800f536:	4606      	mov	r6, r0
 800f538:	bb02      	cbnz	r2, 800f57c <_dtoa_r+0xa1c>
 800f53a:	4601      	mov	r1, r0
 800f53c:	4648      	mov	r0, r9
 800f53e:	f000 fc99 	bl	800fe74 <__mcmp>
 800f542:	4602      	mov	r2, r0
 800f544:	4631      	mov	r1, r6
 800f546:	4658      	mov	r0, fp
 800f548:	920e      	str	r2, [sp, #56]	@ 0x38
 800f54a:	f000 fa0d 	bl	800f968 <_Bfree>
 800f54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f552:	9e07      	ldr	r6, [sp, #28]
 800f554:	ea43 0102 	orr.w	r1, r3, r2
 800f558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f55a:	4319      	orrs	r1, r3
 800f55c:	d110      	bne.n	800f580 <_dtoa_r+0xa20>
 800f55e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f562:	d029      	beq.n	800f5b8 <_dtoa_r+0xa58>
 800f564:	9b08      	ldr	r3, [sp, #32]
 800f566:	2b00      	cmp	r3, #0
 800f568:	dd02      	ble.n	800f570 <_dtoa_r+0xa10>
 800f56a:	9b02      	ldr	r3, [sp, #8]
 800f56c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f570:	9b00      	ldr	r3, [sp, #0]
 800f572:	f883 8000 	strb.w	r8, [r3]
 800f576:	e63f      	b.n	800f1f8 <_dtoa_r+0x698>
 800f578:	4628      	mov	r0, r5
 800f57a:	e7bb      	b.n	800f4f4 <_dtoa_r+0x994>
 800f57c:	2201      	movs	r2, #1
 800f57e:	e7e1      	b.n	800f544 <_dtoa_r+0x9e4>
 800f580:	9b08      	ldr	r3, [sp, #32]
 800f582:	2b00      	cmp	r3, #0
 800f584:	db04      	blt.n	800f590 <_dtoa_r+0xa30>
 800f586:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f588:	430b      	orrs	r3, r1
 800f58a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f58c:	430b      	orrs	r3, r1
 800f58e:	d120      	bne.n	800f5d2 <_dtoa_r+0xa72>
 800f590:	2a00      	cmp	r2, #0
 800f592:	dded      	ble.n	800f570 <_dtoa_r+0xa10>
 800f594:	4649      	mov	r1, r9
 800f596:	2201      	movs	r2, #1
 800f598:	4658      	mov	r0, fp
 800f59a:	f000 fbff 	bl	800fd9c <__lshift>
 800f59e:	4621      	mov	r1, r4
 800f5a0:	4681      	mov	r9, r0
 800f5a2:	f000 fc67 	bl	800fe74 <__mcmp>
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	dc03      	bgt.n	800f5b2 <_dtoa_r+0xa52>
 800f5aa:	d1e1      	bne.n	800f570 <_dtoa_r+0xa10>
 800f5ac:	f018 0f01 	tst.w	r8, #1
 800f5b0:	d0de      	beq.n	800f570 <_dtoa_r+0xa10>
 800f5b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f5b6:	d1d8      	bne.n	800f56a <_dtoa_r+0xa0a>
 800f5b8:	2339      	movs	r3, #57	@ 0x39
 800f5ba:	9a00      	ldr	r2, [sp, #0]
 800f5bc:	7013      	strb	r3, [r2, #0]
 800f5be:	4633      	mov	r3, r6
 800f5c0:	461e      	mov	r6, r3
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f5c8:	2a39      	cmp	r2, #57	@ 0x39
 800f5ca:	d052      	beq.n	800f672 <_dtoa_r+0xb12>
 800f5cc:	3201      	adds	r2, #1
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	e612      	b.n	800f1f8 <_dtoa_r+0x698>
 800f5d2:	2a00      	cmp	r2, #0
 800f5d4:	dd07      	ble.n	800f5e6 <_dtoa_r+0xa86>
 800f5d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f5da:	d0ed      	beq.n	800f5b8 <_dtoa_r+0xa58>
 800f5dc:	f108 0301 	add.w	r3, r8, #1
 800f5e0:	9a00      	ldr	r2, [sp, #0]
 800f5e2:	7013      	strb	r3, [r2, #0]
 800f5e4:	e608      	b.n	800f1f8 <_dtoa_r+0x698>
 800f5e6:	9b07      	ldr	r3, [sp, #28]
 800f5e8:	9a07      	ldr	r2, [sp, #28]
 800f5ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d028      	beq.n	800f646 <_dtoa_r+0xae6>
 800f5f4:	4649      	mov	r1, r9
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	220a      	movs	r2, #10
 800f5fa:	4658      	mov	r0, fp
 800f5fc:	f000 f9d6 	bl	800f9ac <__multadd>
 800f600:	42af      	cmp	r7, r5
 800f602:	4681      	mov	r9, r0
 800f604:	f04f 0300 	mov.w	r3, #0
 800f608:	f04f 020a 	mov.w	r2, #10
 800f60c:	4639      	mov	r1, r7
 800f60e:	4658      	mov	r0, fp
 800f610:	d107      	bne.n	800f622 <_dtoa_r+0xac2>
 800f612:	f000 f9cb 	bl	800f9ac <__multadd>
 800f616:	4607      	mov	r7, r0
 800f618:	4605      	mov	r5, r0
 800f61a:	9b07      	ldr	r3, [sp, #28]
 800f61c:	3301      	adds	r3, #1
 800f61e:	9307      	str	r3, [sp, #28]
 800f620:	e774      	b.n	800f50c <_dtoa_r+0x9ac>
 800f622:	f000 f9c3 	bl	800f9ac <__multadd>
 800f626:	4629      	mov	r1, r5
 800f628:	4607      	mov	r7, r0
 800f62a:	2300      	movs	r3, #0
 800f62c:	220a      	movs	r2, #10
 800f62e:	4658      	mov	r0, fp
 800f630:	f000 f9bc 	bl	800f9ac <__multadd>
 800f634:	4605      	mov	r5, r0
 800f636:	e7f0      	b.n	800f61a <_dtoa_r+0xaba>
 800f638:	9b00      	ldr	r3, [sp, #0]
 800f63a:	2700      	movs	r7, #0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	bfcc      	ite	gt
 800f640:	461e      	movgt	r6, r3
 800f642:	2601      	movle	r6, #1
 800f644:	4456      	add	r6, sl
 800f646:	4649      	mov	r1, r9
 800f648:	2201      	movs	r2, #1
 800f64a:	4658      	mov	r0, fp
 800f64c:	f000 fba6 	bl	800fd9c <__lshift>
 800f650:	4621      	mov	r1, r4
 800f652:	4681      	mov	r9, r0
 800f654:	f000 fc0e 	bl	800fe74 <__mcmp>
 800f658:	2800      	cmp	r0, #0
 800f65a:	dcb0      	bgt.n	800f5be <_dtoa_r+0xa5e>
 800f65c:	d102      	bne.n	800f664 <_dtoa_r+0xb04>
 800f65e:	f018 0f01 	tst.w	r8, #1
 800f662:	d1ac      	bne.n	800f5be <_dtoa_r+0xa5e>
 800f664:	4633      	mov	r3, r6
 800f666:	461e      	mov	r6, r3
 800f668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f66c:	2a30      	cmp	r2, #48	@ 0x30
 800f66e:	d0fa      	beq.n	800f666 <_dtoa_r+0xb06>
 800f670:	e5c2      	b.n	800f1f8 <_dtoa_r+0x698>
 800f672:	459a      	cmp	sl, r3
 800f674:	d1a4      	bne.n	800f5c0 <_dtoa_r+0xa60>
 800f676:	9b04      	ldr	r3, [sp, #16]
 800f678:	3301      	adds	r3, #1
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	2331      	movs	r3, #49	@ 0x31
 800f67e:	f88a 3000 	strb.w	r3, [sl]
 800f682:	e5b9      	b.n	800f1f8 <_dtoa_r+0x698>
 800f684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f686:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f6e4 <_dtoa_r+0xb84>
 800f68a:	b11b      	cbz	r3, 800f694 <_dtoa_r+0xb34>
 800f68c:	f10a 0308 	add.w	r3, sl, #8
 800f690:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f692:	6013      	str	r3, [r2, #0]
 800f694:	4650      	mov	r0, sl
 800f696:	b019      	add	sp, #100	@ 0x64
 800f698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	f77f ae37 	ble.w	800f312 <_dtoa_r+0x7b2>
 800f6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6a8:	2001      	movs	r0, #1
 800f6aa:	e655      	b.n	800f358 <_dtoa_r+0x7f8>
 800f6ac:	9b00      	ldr	r3, [sp, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f77f aed6 	ble.w	800f460 <_dtoa_r+0x900>
 800f6b4:	4656      	mov	r6, sl
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	4648      	mov	r0, r9
 800f6ba:	f7ff f9c1 	bl	800ea40 <quorem>
 800f6be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	f806 8b01 	strb.w	r8, [r6], #1
 800f6c8:	eba6 020a 	sub.w	r2, r6, sl
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	ddb3      	ble.n	800f638 <_dtoa_r+0xad8>
 800f6d0:	4649      	mov	r1, r9
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	220a      	movs	r2, #10
 800f6d6:	4658      	mov	r0, fp
 800f6d8:	f000 f968 	bl	800f9ac <__multadd>
 800f6dc:	4681      	mov	r9, r0
 800f6de:	e7ea      	b.n	800f6b6 <_dtoa_r+0xb56>
 800f6e0:	080123ed 	.word	0x080123ed
 800f6e4:	08012371 	.word	0x08012371

0800f6e8 <_free_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	2900      	cmp	r1, #0
 800f6ee:	d041      	beq.n	800f774 <_free_r+0x8c>
 800f6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6f4:	1f0c      	subs	r4, r1, #4
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	bfb8      	it	lt
 800f6fa:	18e4      	addlt	r4, r4, r3
 800f6fc:	f000 f8e8 	bl	800f8d0 <__malloc_lock>
 800f700:	4a1d      	ldr	r2, [pc, #116]	@ (800f778 <_free_r+0x90>)
 800f702:	6813      	ldr	r3, [r2, #0]
 800f704:	b933      	cbnz	r3, 800f714 <_free_r+0x2c>
 800f706:	6063      	str	r3, [r4, #4]
 800f708:	6014      	str	r4, [r2, #0]
 800f70a:	4628      	mov	r0, r5
 800f70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f710:	f000 b8e4 	b.w	800f8dc <__malloc_unlock>
 800f714:	42a3      	cmp	r3, r4
 800f716:	d908      	bls.n	800f72a <_free_r+0x42>
 800f718:	6820      	ldr	r0, [r4, #0]
 800f71a:	1821      	adds	r1, r4, r0
 800f71c:	428b      	cmp	r3, r1
 800f71e:	bf01      	itttt	eq
 800f720:	6819      	ldreq	r1, [r3, #0]
 800f722:	685b      	ldreq	r3, [r3, #4]
 800f724:	1809      	addeq	r1, r1, r0
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	e7ed      	b.n	800f706 <_free_r+0x1e>
 800f72a:	461a      	mov	r2, r3
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	b10b      	cbz	r3, 800f734 <_free_r+0x4c>
 800f730:	42a3      	cmp	r3, r4
 800f732:	d9fa      	bls.n	800f72a <_free_r+0x42>
 800f734:	6811      	ldr	r1, [r2, #0]
 800f736:	1850      	adds	r0, r2, r1
 800f738:	42a0      	cmp	r0, r4
 800f73a:	d10b      	bne.n	800f754 <_free_r+0x6c>
 800f73c:	6820      	ldr	r0, [r4, #0]
 800f73e:	4401      	add	r1, r0
 800f740:	1850      	adds	r0, r2, r1
 800f742:	6011      	str	r1, [r2, #0]
 800f744:	4283      	cmp	r3, r0
 800f746:	d1e0      	bne.n	800f70a <_free_r+0x22>
 800f748:	6818      	ldr	r0, [r3, #0]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	4408      	add	r0, r1
 800f74e:	6053      	str	r3, [r2, #4]
 800f750:	6010      	str	r0, [r2, #0]
 800f752:	e7da      	b.n	800f70a <_free_r+0x22>
 800f754:	d902      	bls.n	800f75c <_free_r+0x74>
 800f756:	230c      	movs	r3, #12
 800f758:	602b      	str	r3, [r5, #0]
 800f75a:	e7d6      	b.n	800f70a <_free_r+0x22>
 800f75c:	6820      	ldr	r0, [r4, #0]
 800f75e:	1821      	adds	r1, r4, r0
 800f760:	428b      	cmp	r3, r1
 800f762:	bf02      	ittt	eq
 800f764:	6819      	ldreq	r1, [r3, #0]
 800f766:	685b      	ldreq	r3, [r3, #4]
 800f768:	1809      	addeq	r1, r1, r0
 800f76a:	6063      	str	r3, [r4, #4]
 800f76c:	bf08      	it	eq
 800f76e:	6021      	streq	r1, [r4, #0]
 800f770:	6054      	str	r4, [r2, #4]
 800f772:	e7ca      	b.n	800f70a <_free_r+0x22>
 800f774:	bd38      	pop	{r3, r4, r5, pc}
 800f776:	bf00      	nop
 800f778:	20004e34 	.word	0x20004e34

0800f77c <malloc>:
 800f77c:	4b02      	ldr	r3, [pc, #8]	@ (800f788 <malloc+0xc>)
 800f77e:	4601      	mov	r1, r0
 800f780:	6818      	ldr	r0, [r3, #0]
 800f782:	f000 b825 	b.w	800f7d0 <_malloc_r>
 800f786:	bf00      	nop
 800f788:	20000024 	.word	0x20000024

0800f78c <sbrk_aligned>:
 800f78c:	b570      	push	{r4, r5, r6, lr}
 800f78e:	4e0f      	ldr	r6, [pc, #60]	@ (800f7cc <sbrk_aligned+0x40>)
 800f790:	460c      	mov	r4, r1
 800f792:	4605      	mov	r5, r0
 800f794:	6831      	ldr	r1, [r6, #0]
 800f796:	b911      	cbnz	r1, 800f79e <sbrk_aligned+0x12>
 800f798:	f001 ffee 	bl	8011778 <_sbrk_r>
 800f79c:	6030      	str	r0, [r6, #0]
 800f79e:	4621      	mov	r1, r4
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	f001 ffe9 	bl	8011778 <_sbrk_r>
 800f7a6:	1c43      	adds	r3, r0, #1
 800f7a8:	d103      	bne.n	800f7b2 <sbrk_aligned+0x26>
 800f7aa:	f04f 34ff 	mov.w	r4, #4294967295
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
 800f7b2:	1cc4      	adds	r4, r0, #3
 800f7b4:	f024 0403 	bic.w	r4, r4, #3
 800f7b8:	42a0      	cmp	r0, r4
 800f7ba:	d0f8      	beq.n	800f7ae <sbrk_aligned+0x22>
 800f7bc:	1a21      	subs	r1, r4, r0
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f001 ffda 	bl	8011778 <_sbrk_r>
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d1f2      	bne.n	800f7ae <sbrk_aligned+0x22>
 800f7c8:	e7ef      	b.n	800f7aa <sbrk_aligned+0x1e>
 800f7ca:	bf00      	nop
 800f7cc:	20004e30 	.word	0x20004e30

0800f7d0 <_malloc_r>:
 800f7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d4:	1ccd      	adds	r5, r1, #3
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	f025 0503 	bic.w	r5, r5, #3
 800f7dc:	3508      	adds	r5, #8
 800f7de:	2d0c      	cmp	r5, #12
 800f7e0:	bf38      	it	cc
 800f7e2:	250c      	movcc	r5, #12
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	db01      	blt.n	800f7ec <_malloc_r+0x1c>
 800f7e8:	42a9      	cmp	r1, r5
 800f7ea:	d904      	bls.n	800f7f6 <_malloc_r+0x26>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	6033      	str	r3, [r6, #0]
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f8cc <_malloc_r+0xfc>
 800f7fa:	f000 f869 	bl	800f8d0 <__malloc_lock>
 800f7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800f802:	461c      	mov	r4, r3
 800f804:	bb44      	cbnz	r4, 800f858 <_malloc_r+0x88>
 800f806:	4629      	mov	r1, r5
 800f808:	4630      	mov	r0, r6
 800f80a:	f7ff ffbf 	bl	800f78c <sbrk_aligned>
 800f80e:	1c43      	adds	r3, r0, #1
 800f810:	4604      	mov	r4, r0
 800f812:	d158      	bne.n	800f8c6 <_malloc_r+0xf6>
 800f814:	f8d8 4000 	ldr.w	r4, [r8]
 800f818:	4627      	mov	r7, r4
 800f81a:	2f00      	cmp	r7, #0
 800f81c:	d143      	bne.n	800f8a6 <_malloc_r+0xd6>
 800f81e:	2c00      	cmp	r4, #0
 800f820:	d04b      	beq.n	800f8ba <_malloc_r+0xea>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	4639      	mov	r1, r7
 800f826:	4630      	mov	r0, r6
 800f828:	eb04 0903 	add.w	r9, r4, r3
 800f82c:	f001 ffa4 	bl	8011778 <_sbrk_r>
 800f830:	4581      	cmp	r9, r0
 800f832:	d142      	bne.n	800f8ba <_malloc_r+0xea>
 800f834:	6821      	ldr	r1, [r4, #0]
 800f836:	4630      	mov	r0, r6
 800f838:	1a6d      	subs	r5, r5, r1
 800f83a:	4629      	mov	r1, r5
 800f83c:	f7ff ffa6 	bl	800f78c <sbrk_aligned>
 800f840:	3001      	adds	r0, #1
 800f842:	d03a      	beq.n	800f8ba <_malloc_r+0xea>
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	442b      	add	r3, r5
 800f848:	6023      	str	r3, [r4, #0]
 800f84a:	f8d8 3000 	ldr.w	r3, [r8]
 800f84e:	685a      	ldr	r2, [r3, #4]
 800f850:	bb62      	cbnz	r2, 800f8ac <_malloc_r+0xdc>
 800f852:	f8c8 7000 	str.w	r7, [r8]
 800f856:	e00f      	b.n	800f878 <_malloc_r+0xa8>
 800f858:	6822      	ldr	r2, [r4, #0]
 800f85a:	1b52      	subs	r2, r2, r5
 800f85c:	d420      	bmi.n	800f8a0 <_malloc_r+0xd0>
 800f85e:	2a0b      	cmp	r2, #11
 800f860:	d917      	bls.n	800f892 <_malloc_r+0xc2>
 800f862:	1961      	adds	r1, r4, r5
 800f864:	42a3      	cmp	r3, r4
 800f866:	6025      	str	r5, [r4, #0]
 800f868:	bf18      	it	ne
 800f86a:	6059      	strne	r1, [r3, #4]
 800f86c:	6863      	ldr	r3, [r4, #4]
 800f86e:	bf08      	it	eq
 800f870:	f8c8 1000 	streq.w	r1, [r8]
 800f874:	5162      	str	r2, [r4, r5]
 800f876:	604b      	str	r3, [r1, #4]
 800f878:	4630      	mov	r0, r6
 800f87a:	f000 f82f 	bl	800f8dc <__malloc_unlock>
 800f87e:	f104 000b 	add.w	r0, r4, #11
 800f882:	1d23      	adds	r3, r4, #4
 800f884:	f020 0007 	bic.w	r0, r0, #7
 800f888:	1ac2      	subs	r2, r0, r3
 800f88a:	bf1c      	itt	ne
 800f88c:	1a1b      	subne	r3, r3, r0
 800f88e:	50a3      	strne	r3, [r4, r2]
 800f890:	e7af      	b.n	800f7f2 <_malloc_r+0x22>
 800f892:	6862      	ldr	r2, [r4, #4]
 800f894:	42a3      	cmp	r3, r4
 800f896:	bf0c      	ite	eq
 800f898:	f8c8 2000 	streq.w	r2, [r8]
 800f89c:	605a      	strne	r2, [r3, #4]
 800f89e:	e7eb      	b.n	800f878 <_malloc_r+0xa8>
 800f8a0:	4623      	mov	r3, r4
 800f8a2:	6864      	ldr	r4, [r4, #4]
 800f8a4:	e7ae      	b.n	800f804 <_malloc_r+0x34>
 800f8a6:	463c      	mov	r4, r7
 800f8a8:	687f      	ldr	r7, [r7, #4]
 800f8aa:	e7b6      	b.n	800f81a <_malloc_r+0x4a>
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	d1fb      	bne.n	800f8ac <_malloc_r+0xdc>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	6053      	str	r3, [r2, #4]
 800f8b8:	e7de      	b.n	800f878 <_malloc_r+0xa8>
 800f8ba:	230c      	movs	r3, #12
 800f8bc:	4630      	mov	r0, r6
 800f8be:	6033      	str	r3, [r6, #0]
 800f8c0:	f000 f80c 	bl	800f8dc <__malloc_unlock>
 800f8c4:	e794      	b.n	800f7f0 <_malloc_r+0x20>
 800f8c6:	6005      	str	r5, [r0, #0]
 800f8c8:	e7d6      	b.n	800f878 <_malloc_r+0xa8>
 800f8ca:	bf00      	nop
 800f8cc:	20004e34 	.word	0x20004e34

0800f8d0 <__malloc_lock>:
 800f8d0:	4801      	ldr	r0, [pc, #4]	@ (800f8d8 <__malloc_lock+0x8>)
 800f8d2:	f7ff b89e 	b.w	800ea12 <__retarget_lock_acquire_recursive>
 800f8d6:	bf00      	nop
 800f8d8:	20004e2c 	.word	0x20004e2c

0800f8dc <__malloc_unlock>:
 800f8dc:	4801      	ldr	r0, [pc, #4]	@ (800f8e4 <__malloc_unlock+0x8>)
 800f8de:	f7ff b899 	b.w	800ea14 <__retarget_lock_release_recursive>
 800f8e2:	bf00      	nop
 800f8e4:	20004e2c 	.word	0x20004e2c

0800f8e8 <_Balloc>:
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	69c6      	ldr	r6, [r0, #28]
 800f8ec:	4604      	mov	r4, r0
 800f8ee:	460d      	mov	r5, r1
 800f8f0:	b976      	cbnz	r6, 800f910 <_Balloc+0x28>
 800f8f2:	2010      	movs	r0, #16
 800f8f4:	f7ff ff42 	bl	800f77c <malloc>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	61e0      	str	r0, [r4, #28]
 800f8fc:	b920      	cbnz	r0, 800f908 <_Balloc+0x20>
 800f8fe:	4b18      	ldr	r3, [pc, #96]	@ (800f960 <_Balloc+0x78>)
 800f900:	216b      	movs	r1, #107	@ 0x6b
 800f902:	4818      	ldr	r0, [pc, #96]	@ (800f964 <_Balloc+0x7c>)
 800f904:	f001 ff60 	bl	80117c8 <__assert_func>
 800f908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f90c:	6006      	str	r6, [r0, #0]
 800f90e:	60c6      	str	r6, [r0, #12]
 800f910:	69e6      	ldr	r6, [r4, #28]
 800f912:	68f3      	ldr	r3, [r6, #12]
 800f914:	b183      	cbz	r3, 800f938 <_Balloc+0x50>
 800f916:	69e3      	ldr	r3, [r4, #28]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f91e:	b9b8      	cbnz	r0, 800f950 <_Balloc+0x68>
 800f920:	2101      	movs	r1, #1
 800f922:	4620      	mov	r0, r4
 800f924:	fa01 f605 	lsl.w	r6, r1, r5
 800f928:	1d72      	adds	r2, r6, #5
 800f92a:	0092      	lsls	r2, r2, #2
 800f92c:	f001 ff6a 	bl	8011804 <_calloc_r>
 800f930:	b160      	cbz	r0, 800f94c <_Balloc+0x64>
 800f932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f936:	e00e      	b.n	800f956 <_Balloc+0x6e>
 800f938:	2221      	movs	r2, #33	@ 0x21
 800f93a:	2104      	movs	r1, #4
 800f93c:	4620      	mov	r0, r4
 800f93e:	f001 ff61 	bl	8011804 <_calloc_r>
 800f942:	69e3      	ldr	r3, [r4, #28]
 800f944:	60f0      	str	r0, [r6, #12]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d1e4      	bne.n	800f916 <_Balloc+0x2e>
 800f94c:	2000      	movs	r0, #0
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	6802      	ldr	r2, [r0, #0]
 800f952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f956:	2300      	movs	r3, #0
 800f958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f95c:	e7f7      	b.n	800f94e <_Balloc+0x66>
 800f95e:	bf00      	nop
 800f960:	0801237e 	.word	0x0801237e
 800f964:	080123fe 	.word	0x080123fe

0800f968 <_Bfree>:
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	69c6      	ldr	r6, [r0, #28]
 800f96c:	4605      	mov	r5, r0
 800f96e:	460c      	mov	r4, r1
 800f970:	b976      	cbnz	r6, 800f990 <_Bfree+0x28>
 800f972:	2010      	movs	r0, #16
 800f974:	f7ff ff02 	bl	800f77c <malloc>
 800f978:	4602      	mov	r2, r0
 800f97a:	61e8      	str	r0, [r5, #28]
 800f97c:	b920      	cbnz	r0, 800f988 <_Bfree+0x20>
 800f97e:	4b09      	ldr	r3, [pc, #36]	@ (800f9a4 <_Bfree+0x3c>)
 800f980:	218f      	movs	r1, #143	@ 0x8f
 800f982:	4809      	ldr	r0, [pc, #36]	@ (800f9a8 <_Bfree+0x40>)
 800f984:	f001 ff20 	bl	80117c8 <__assert_func>
 800f988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f98c:	6006      	str	r6, [r0, #0]
 800f98e:	60c6      	str	r6, [r0, #12]
 800f990:	b13c      	cbz	r4, 800f9a2 <_Bfree+0x3a>
 800f992:	69eb      	ldr	r3, [r5, #28]
 800f994:	6862      	ldr	r2, [r4, #4]
 800f996:	68db      	ldr	r3, [r3, #12]
 800f998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f99c:	6021      	str	r1, [r4, #0]
 800f99e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f9a2:	bd70      	pop	{r4, r5, r6, pc}
 800f9a4:	0801237e 	.word	0x0801237e
 800f9a8:	080123fe 	.word	0x080123fe

0800f9ac <__multadd>:
 800f9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b0:	f101 0c14 	add.w	ip, r1, #20
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	460c      	mov	r4, r1
 800f9b8:	461e      	mov	r6, r3
 800f9ba:	690d      	ldr	r5, [r1, #16]
 800f9bc:	2000      	movs	r0, #0
 800f9be:	f8dc 3000 	ldr.w	r3, [ip]
 800f9c2:	3001      	adds	r0, #1
 800f9c4:	b299      	uxth	r1, r3
 800f9c6:	4285      	cmp	r5, r0
 800f9c8:	fb02 6101 	mla	r1, r2, r1, r6
 800f9cc:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9d0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f9d4:	b289      	uxth	r1, r1
 800f9d6:	fb02 3306 	mla	r3, r2, r6, r3
 800f9da:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9e2:	f84c 1b04 	str.w	r1, [ip], #4
 800f9e6:	dcea      	bgt.n	800f9be <__multadd+0x12>
 800f9e8:	b30e      	cbz	r6, 800fa2e <__multadd+0x82>
 800f9ea:	68a3      	ldr	r3, [r4, #8]
 800f9ec:	42ab      	cmp	r3, r5
 800f9ee:	dc19      	bgt.n	800fa24 <__multadd+0x78>
 800f9f0:	6861      	ldr	r1, [r4, #4]
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	3101      	adds	r1, #1
 800f9f6:	f7ff ff77 	bl	800f8e8 <_Balloc>
 800f9fa:	4680      	mov	r8, r0
 800f9fc:	b928      	cbnz	r0, 800fa0a <__multadd+0x5e>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	4b0c      	ldr	r3, [pc, #48]	@ (800fa34 <__multadd+0x88>)
 800fa02:	21ba      	movs	r1, #186	@ 0xba
 800fa04:	480c      	ldr	r0, [pc, #48]	@ (800fa38 <__multadd+0x8c>)
 800fa06:	f001 fedf 	bl	80117c8 <__assert_func>
 800fa0a:	6922      	ldr	r2, [r4, #16]
 800fa0c:	f104 010c 	add.w	r1, r4, #12
 800fa10:	300c      	adds	r0, #12
 800fa12:	3202      	adds	r2, #2
 800fa14:	0092      	lsls	r2, r2, #2
 800fa16:	f001 febf 	bl	8011798 <memcpy>
 800fa1a:	4621      	mov	r1, r4
 800fa1c:	4644      	mov	r4, r8
 800fa1e:	4638      	mov	r0, r7
 800fa20:	f7ff ffa2 	bl	800f968 <_Bfree>
 800fa24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa28:	3501      	adds	r5, #1
 800fa2a:	615e      	str	r6, [r3, #20]
 800fa2c:	6125      	str	r5, [r4, #16]
 800fa2e:	4620      	mov	r0, r4
 800fa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa34:	080123ed 	.word	0x080123ed
 800fa38:	080123fe 	.word	0x080123fe

0800fa3c <__s2b>:
 800fa3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa40:	4615      	mov	r5, r2
 800fa42:	461f      	mov	r7, r3
 800fa44:	2209      	movs	r2, #9
 800fa46:	3308      	adds	r3, #8
 800fa48:	460c      	mov	r4, r1
 800fa4a:	4606      	mov	r6, r0
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa52:	2201      	movs	r2, #1
 800fa54:	429a      	cmp	r2, r3
 800fa56:	db09      	blt.n	800fa6c <__s2b+0x30>
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f7ff ff45 	bl	800f8e8 <_Balloc>
 800fa5e:	b940      	cbnz	r0, 800fa72 <__s2b+0x36>
 800fa60:	4602      	mov	r2, r0
 800fa62:	4b19      	ldr	r3, [pc, #100]	@ (800fac8 <__s2b+0x8c>)
 800fa64:	21d3      	movs	r1, #211	@ 0xd3
 800fa66:	4819      	ldr	r0, [pc, #100]	@ (800facc <__s2b+0x90>)
 800fa68:	f001 feae 	bl	80117c8 <__assert_func>
 800fa6c:	0052      	lsls	r2, r2, #1
 800fa6e:	3101      	adds	r1, #1
 800fa70:	e7f0      	b.n	800fa54 <__s2b+0x18>
 800fa72:	9b08      	ldr	r3, [sp, #32]
 800fa74:	2d09      	cmp	r5, #9
 800fa76:	6143      	str	r3, [r0, #20]
 800fa78:	f04f 0301 	mov.w	r3, #1
 800fa7c:	6103      	str	r3, [r0, #16]
 800fa7e:	dd16      	ble.n	800faae <__s2b+0x72>
 800fa80:	f104 0909 	add.w	r9, r4, #9
 800fa84:	442c      	add	r4, r5
 800fa86:	46c8      	mov	r8, r9
 800fa88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	220a      	movs	r2, #10
 800fa90:	4630      	mov	r0, r6
 800fa92:	3b30      	subs	r3, #48	@ 0x30
 800fa94:	f7ff ff8a 	bl	800f9ac <__multadd>
 800fa98:	45a0      	cmp	r8, r4
 800fa9a:	d1f5      	bne.n	800fa88 <__s2b+0x4c>
 800fa9c:	f1a5 0408 	sub.w	r4, r5, #8
 800faa0:	444c      	add	r4, r9
 800faa2:	1b2d      	subs	r5, r5, r4
 800faa4:	1963      	adds	r3, r4, r5
 800faa6:	42bb      	cmp	r3, r7
 800faa8:	db04      	blt.n	800fab4 <__s2b+0x78>
 800faaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faae:	340a      	adds	r4, #10
 800fab0:	2509      	movs	r5, #9
 800fab2:	e7f6      	b.n	800faa2 <__s2b+0x66>
 800fab4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fab8:	4601      	mov	r1, r0
 800faba:	220a      	movs	r2, #10
 800fabc:	4630      	mov	r0, r6
 800fabe:	3b30      	subs	r3, #48	@ 0x30
 800fac0:	f7ff ff74 	bl	800f9ac <__multadd>
 800fac4:	e7ee      	b.n	800faa4 <__s2b+0x68>
 800fac6:	bf00      	nop
 800fac8:	080123ed 	.word	0x080123ed
 800facc:	080123fe 	.word	0x080123fe

0800fad0 <__hi0bits>:
 800fad0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fad4:	4603      	mov	r3, r0
 800fad6:	bf36      	itet	cc
 800fad8:	0403      	lslcc	r3, r0, #16
 800fada:	2000      	movcs	r0, #0
 800fadc:	2010      	movcc	r0, #16
 800fade:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fae2:	bf3c      	itt	cc
 800fae4:	021b      	lslcc	r3, r3, #8
 800fae6:	3008      	addcc	r0, #8
 800fae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800faec:	bf3c      	itt	cc
 800faee:	011b      	lslcc	r3, r3, #4
 800faf0:	3004      	addcc	r0, #4
 800faf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800faf6:	bf3c      	itt	cc
 800faf8:	009b      	lslcc	r3, r3, #2
 800fafa:	3002      	addcc	r0, #2
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	db05      	blt.n	800fb0c <__hi0bits+0x3c>
 800fb00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fb04:	f100 0001 	add.w	r0, r0, #1
 800fb08:	bf08      	it	eq
 800fb0a:	2020      	moveq	r0, #32
 800fb0c:	4770      	bx	lr

0800fb0e <__lo0bits>:
 800fb0e:	6803      	ldr	r3, [r0, #0]
 800fb10:	4602      	mov	r2, r0
 800fb12:	f013 0007 	ands.w	r0, r3, #7
 800fb16:	d00b      	beq.n	800fb30 <__lo0bits+0x22>
 800fb18:	07d9      	lsls	r1, r3, #31
 800fb1a:	d421      	bmi.n	800fb60 <__lo0bits+0x52>
 800fb1c:	0798      	lsls	r0, r3, #30
 800fb1e:	bf47      	ittee	mi
 800fb20:	085b      	lsrmi	r3, r3, #1
 800fb22:	2001      	movmi	r0, #1
 800fb24:	089b      	lsrpl	r3, r3, #2
 800fb26:	2002      	movpl	r0, #2
 800fb28:	bf4c      	ite	mi
 800fb2a:	6013      	strmi	r3, [r2, #0]
 800fb2c:	6013      	strpl	r3, [r2, #0]
 800fb2e:	4770      	bx	lr
 800fb30:	b299      	uxth	r1, r3
 800fb32:	b909      	cbnz	r1, 800fb38 <__lo0bits+0x2a>
 800fb34:	0c1b      	lsrs	r3, r3, #16
 800fb36:	2010      	movs	r0, #16
 800fb38:	b2d9      	uxtb	r1, r3
 800fb3a:	b909      	cbnz	r1, 800fb40 <__lo0bits+0x32>
 800fb3c:	3008      	adds	r0, #8
 800fb3e:	0a1b      	lsrs	r3, r3, #8
 800fb40:	0719      	lsls	r1, r3, #28
 800fb42:	bf04      	itt	eq
 800fb44:	091b      	lsreq	r3, r3, #4
 800fb46:	3004      	addeq	r0, #4
 800fb48:	0799      	lsls	r1, r3, #30
 800fb4a:	bf04      	itt	eq
 800fb4c:	089b      	lsreq	r3, r3, #2
 800fb4e:	3002      	addeq	r0, #2
 800fb50:	07d9      	lsls	r1, r3, #31
 800fb52:	d403      	bmi.n	800fb5c <__lo0bits+0x4e>
 800fb54:	085b      	lsrs	r3, r3, #1
 800fb56:	f100 0001 	add.w	r0, r0, #1
 800fb5a:	d003      	beq.n	800fb64 <__lo0bits+0x56>
 800fb5c:	6013      	str	r3, [r2, #0]
 800fb5e:	4770      	bx	lr
 800fb60:	2000      	movs	r0, #0
 800fb62:	4770      	bx	lr
 800fb64:	2020      	movs	r0, #32
 800fb66:	4770      	bx	lr

0800fb68 <__i2b>:
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	460c      	mov	r4, r1
 800fb6c:	2101      	movs	r1, #1
 800fb6e:	f7ff febb 	bl	800f8e8 <_Balloc>
 800fb72:	4602      	mov	r2, r0
 800fb74:	b928      	cbnz	r0, 800fb82 <__i2b+0x1a>
 800fb76:	4b05      	ldr	r3, [pc, #20]	@ (800fb8c <__i2b+0x24>)
 800fb78:	f240 1145 	movw	r1, #325	@ 0x145
 800fb7c:	4804      	ldr	r0, [pc, #16]	@ (800fb90 <__i2b+0x28>)
 800fb7e:	f001 fe23 	bl	80117c8 <__assert_func>
 800fb82:	2301      	movs	r3, #1
 800fb84:	6144      	str	r4, [r0, #20]
 800fb86:	6103      	str	r3, [r0, #16]
 800fb88:	bd10      	pop	{r4, pc}
 800fb8a:	bf00      	nop
 800fb8c:	080123ed 	.word	0x080123ed
 800fb90:	080123fe 	.word	0x080123fe

0800fb94 <__multiply>:
 800fb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb98:	4614      	mov	r4, r2
 800fb9a:	690a      	ldr	r2, [r1, #16]
 800fb9c:	460f      	mov	r7, r1
 800fb9e:	b085      	sub	sp, #20
 800fba0:	6923      	ldr	r3, [r4, #16]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	bfa2      	ittt	ge
 800fba6:	4623      	movge	r3, r4
 800fba8:	460c      	movge	r4, r1
 800fbaa:	461f      	movge	r7, r3
 800fbac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fbb6:	6861      	ldr	r1, [r4, #4]
 800fbb8:	eb0a 0609 	add.w	r6, sl, r9
 800fbbc:	42b3      	cmp	r3, r6
 800fbbe:	bfb8      	it	lt
 800fbc0:	3101      	addlt	r1, #1
 800fbc2:	f7ff fe91 	bl	800f8e8 <_Balloc>
 800fbc6:	b930      	cbnz	r0, 800fbd6 <__multiply+0x42>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	4b45      	ldr	r3, [pc, #276]	@ (800fce0 <__multiply+0x14c>)
 800fbcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fbd0:	4844      	ldr	r0, [pc, #272]	@ (800fce4 <__multiply+0x150>)
 800fbd2:	f001 fdf9 	bl	80117c8 <__assert_func>
 800fbd6:	f100 0514 	add.w	r5, r0, #20
 800fbda:	2200      	movs	r2, #0
 800fbdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbe0:	462b      	mov	r3, r5
 800fbe2:	4543      	cmp	r3, r8
 800fbe4:	d321      	bcc.n	800fc2a <__multiply+0x96>
 800fbe6:	f107 0114 	add.w	r1, r7, #20
 800fbea:	f104 0214 	add.w	r2, r4, #20
 800fbee:	f104 0715 	add.w	r7, r4, #21
 800fbf2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fbf6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fbfa:	9302      	str	r3, [sp, #8]
 800fbfc:	1b13      	subs	r3, r2, r4
 800fbfe:	3b15      	subs	r3, #21
 800fc00:	f023 0303 	bic.w	r3, r3, #3
 800fc04:	3304      	adds	r3, #4
 800fc06:	42ba      	cmp	r2, r7
 800fc08:	bf38      	it	cc
 800fc0a:	2304      	movcc	r3, #4
 800fc0c:	9301      	str	r3, [sp, #4]
 800fc0e:	9b02      	ldr	r3, [sp, #8]
 800fc10:	9103      	str	r1, [sp, #12]
 800fc12:	428b      	cmp	r3, r1
 800fc14:	d80c      	bhi.n	800fc30 <__multiply+0x9c>
 800fc16:	2e00      	cmp	r6, #0
 800fc18:	dd03      	ble.n	800fc22 <__multiply+0x8e>
 800fc1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d05b      	beq.n	800fcda <__multiply+0x146>
 800fc22:	6106      	str	r6, [r0, #16]
 800fc24:	b005      	add	sp, #20
 800fc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2a:	f843 2b04 	str.w	r2, [r3], #4
 800fc2e:	e7d8      	b.n	800fbe2 <__multiply+0x4e>
 800fc30:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc34:	f1ba 0f00 	cmp.w	sl, #0
 800fc38:	d024      	beq.n	800fc84 <__multiply+0xf0>
 800fc3a:	f104 0e14 	add.w	lr, r4, #20
 800fc3e:	46a9      	mov	r9, r5
 800fc40:	f04f 0c00 	mov.w	ip, #0
 800fc44:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc48:	f8d9 3000 	ldr.w	r3, [r9]
 800fc4c:	fa1f fb87 	uxth.w	fp, r7
 800fc50:	4572      	cmp	r2, lr
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	fb0a 330b 	mla	r3, sl, fp, r3
 800fc58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fc5c:	f8d9 7000 	ldr.w	r7, [r9]
 800fc60:	4463      	add	r3, ip
 800fc62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc66:	fb0a c70b 	mla	r7, sl, fp, ip
 800fc6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc78:	f849 3b04 	str.w	r3, [r9], #4
 800fc7c:	d8e2      	bhi.n	800fc44 <__multiply+0xb0>
 800fc7e:	9b01      	ldr	r3, [sp, #4]
 800fc80:	f845 c003 	str.w	ip, [r5, r3]
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	3104      	adds	r1, #4
 800fc88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc8c:	f1b9 0f00 	cmp.w	r9, #0
 800fc90:	d021      	beq.n	800fcd6 <__multiply+0x142>
 800fc92:	682b      	ldr	r3, [r5, #0]
 800fc94:	f104 0c14 	add.w	ip, r4, #20
 800fc98:	46ae      	mov	lr, r5
 800fc9a:	f04f 0a00 	mov.w	sl, #0
 800fc9e:	f8bc b000 	ldrh.w	fp, [ip]
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fca8:	fb09 770b 	mla	r7, r9, fp, r7
 800fcac:	4457      	add	r7, sl
 800fcae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcb2:	f84e 3b04 	str.w	r3, [lr], #4
 800fcb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fcba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcbe:	f8be 3000 	ldrh.w	r3, [lr]
 800fcc2:	4562      	cmp	r2, ip
 800fcc4:	fb09 330a 	mla	r3, r9, sl, r3
 800fcc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcd0:	d8e5      	bhi.n	800fc9e <__multiply+0x10a>
 800fcd2:	9f01      	ldr	r7, [sp, #4]
 800fcd4:	51eb      	str	r3, [r5, r7]
 800fcd6:	3504      	adds	r5, #4
 800fcd8:	e799      	b.n	800fc0e <__multiply+0x7a>
 800fcda:	3e01      	subs	r6, #1
 800fcdc:	e79b      	b.n	800fc16 <__multiply+0x82>
 800fcde:	bf00      	nop
 800fce0:	080123ed 	.word	0x080123ed
 800fce4:	080123fe 	.word	0x080123fe

0800fce8 <__pow5mult>:
 800fce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcec:	4615      	mov	r5, r2
 800fcee:	f012 0203 	ands.w	r2, r2, #3
 800fcf2:	4607      	mov	r7, r0
 800fcf4:	460e      	mov	r6, r1
 800fcf6:	d007      	beq.n	800fd08 <__pow5mult+0x20>
 800fcf8:	3a01      	subs	r2, #1
 800fcfa:	4c25      	ldr	r4, [pc, #148]	@ (800fd90 <__pow5mult+0xa8>)
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd02:	f7ff fe53 	bl	800f9ac <__multadd>
 800fd06:	4606      	mov	r6, r0
 800fd08:	10ad      	asrs	r5, r5, #2
 800fd0a:	d03d      	beq.n	800fd88 <__pow5mult+0xa0>
 800fd0c:	69fc      	ldr	r4, [r7, #28]
 800fd0e:	b97c      	cbnz	r4, 800fd30 <__pow5mult+0x48>
 800fd10:	2010      	movs	r0, #16
 800fd12:	f7ff fd33 	bl	800f77c <malloc>
 800fd16:	4602      	mov	r2, r0
 800fd18:	61f8      	str	r0, [r7, #28]
 800fd1a:	b928      	cbnz	r0, 800fd28 <__pow5mult+0x40>
 800fd1c:	4b1d      	ldr	r3, [pc, #116]	@ (800fd94 <__pow5mult+0xac>)
 800fd1e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fd22:	481d      	ldr	r0, [pc, #116]	@ (800fd98 <__pow5mult+0xb0>)
 800fd24:	f001 fd50 	bl	80117c8 <__assert_func>
 800fd28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd2c:	6004      	str	r4, [r0, #0]
 800fd2e:	60c4      	str	r4, [r0, #12]
 800fd30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd38:	b94c      	cbnz	r4, 800fd4e <__pow5mult+0x66>
 800fd3a:	f240 2171 	movw	r1, #625	@ 0x271
 800fd3e:	4638      	mov	r0, r7
 800fd40:	f7ff ff12 	bl	800fb68 <__i2b>
 800fd44:	2300      	movs	r3, #0
 800fd46:	4604      	mov	r4, r0
 800fd48:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd4c:	6003      	str	r3, [r0, #0]
 800fd4e:	f04f 0900 	mov.w	r9, #0
 800fd52:	07eb      	lsls	r3, r5, #31
 800fd54:	d50a      	bpl.n	800fd6c <__pow5mult+0x84>
 800fd56:	4631      	mov	r1, r6
 800fd58:	4622      	mov	r2, r4
 800fd5a:	4638      	mov	r0, r7
 800fd5c:	f7ff ff1a 	bl	800fb94 <__multiply>
 800fd60:	4680      	mov	r8, r0
 800fd62:	4631      	mov	r1, r6
 800fd64:	4638      	mov	r0, r7
 800fd66:	4646      	mov	r6, r8
 800fd68:	f7ff fdfe 	bl	800f968 <_Bfree>
 800fd6c:	106d      	asrs	r5, r5, #1
 800fd6e:	d00b      	beq.n	800fd88 <__pow5mult+0xa0>
 800fd70:	6820      	ldr	r0, [r4, #0]
 800fd72:	b938      	cbnz	r0, 800fd84 <__pow5mult+0x9c>
 800fd74:	4622      	mov	r2, r4
 800fd76:	4621      	mov	r1, r4
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f7ff ff0b 	bl	800fb94 <__multiply>
 800fd7e:	6020      	str	r0, [r4, #0]
 800fd80:	f8c0 9000 	str.w	r9, [r0]
 800fd84:	4604      	mov	r4, r0
 800fd86:	e7e4      	b.n	800fd52 <__pow5mult+0x6a>
 800fd88:	4630      	mov	r0, r6
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	bf00      	nop
 800fd90:	08012458 	.word	0x08012458
 800fd94:	0801237e 	.word	0x0801237e
 800fd98:	080123fe 	.word	0x080123fe

0800fd9c <__lshift>:
 800fd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fda0:	460c      	mov	r4, r1
 800fda2:	4607      	mov	r7, r0
 800fda4:	4691      	mov	r9, r2
 800fda6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdaa:	6923      	ldr	r3, [r4, #16]
 800fdac:	6849      	ldr	r1, [r1, #4]
 800fdae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdb2:	68a3      	ldr	r3, [r4, #8]
 800fdb4:	f108 0601 	add.w	r6, r8, #1
 800fdb8:	42b3      	cmp	r3, r6
 800fdba:	db0b      	blt.n	800fdd4 <__lshift+0x38>
 800fdbc:	4638      	mov	r0, r7
 800fdbe:	f7ff fd93 	bl	800f8e8 <_Balloc>
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	b948      	cbnz	r0, 800fdda <__lshift+0x3e>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	4b28      	ldr	r3, [pc, #160]	@ (800fe6c <__lshift+0xd0>)
 800fdca:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fdce:	4828      	ldr	r0, [pc, #160]	@ (800fe70 <__lshift+0xd4>)
 800fdd0:	f001 fcfa 	bl	80117c8 <__assert_func>
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	005b      	lsls	r3, r3, #1
 800fdd8:	e7ee      	b.n	800fdb8 <__lshift+0x1c>
 800fdda:	2300      	movs	r3, #0
 800fddc:	f100 0114 	add.w	r1, r0, #20
 800fde0:	f100 0210 	add.w	r2, r0, #16
 800fde4:	4618      	mov	r0, r3
 800fde6:	4553      	cmp	r3, sl
 800fde8:	db33      	blt.n	800fe52 <__lshift+0xb6>
 800fdea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdee:	f104 0314 	add.w	r3, r4, #20
 800fdf2:	6920      	ldr	r0, [r4, #16]
 800fdf4:	f019 091f 	ands.w	r9, r9, #31
 800fdf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe00:	d02b      	beq.n	800fe5a <__lshift+0xbe>
 800fe02:	f1c9 0e20 	rsb	lr, r9, #32
 800fe06:	468a      	mov	sl, r1
 800fe08:	2200      	movs	r2, #0
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	fa00 f009 	lsl.w	r0, r0, r9
 800fe10:	4310      	orrs	r0, r2
 800fe12:	f84a 0b04 	str.w	r0, [sl], #4
 800fe16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe1a:	459c      	cmp	ip, r3
 800fe1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe20:	d8f3      	bhi.n	800fe0a <__lshift+0x6e>
 800fe22:	ebac 0304 	sub.w	r3, ip, r4
 800fe26:	f104 0015 	add.w	r0, r4, #21
 800fe2a:	3b15      	subs	r3, #21
 800fe2c:	f023 0303 	bic.w	r3, r3, #3
 800fe30:	3304      	adds	r3, #4
 800fe32:	4584      	cmp	ip, r0
 800fe34:	bf38      	it	cc
 800fe36:	2304      	movcc	r3, #4
 800fe38:	50ca      	str	r2, [r1, r3]
 800fe3a:	b10a      	cbz	r2, 800fe40 <__lshift+0xa4>
 800fe3c:	f108 0602 	add.w	r6, r8, #2
 800fe40:	3e01      	subs	r6, #1
 800fe42:	4638      	mov	r0, r7
 800fe44:	4621      	mov	r1, r4
 800fe46:	612e      	str	r6, [r5, #16]
 800fe48:	f7ff fd8e 	bl	800f968 <_Bfree>
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe52:	3301      	adds	r3, #1
 800fe54:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe58:	e7c5      	b.n	800fde6 <__lshift+0x4a>
 800fe5a:	3904      	subs	r1, #4
 800fe5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe60:	459c      	cmp	ip, r3
 800fe62:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe66:	d8f9      	bhi.n	800fe5c <__lshift+0xc0>
 800fe68:	e7ea      	b.n	800fe40 <__lshift+0xa4>
 800fe6a:	bf00      	nop
 800fe6c:	080123ed 	.word	0x080123ed
 800fe70:	080123fe 	.word	0x080123fe

0800fe74 <__mcmp>:
 800fe74:	4603      	mov	r3, r0
 800fe76:	690a      	ldr	r2, [r1, #16]
 800fe78:	6900      	ldr	r0, [r0, #16]
 800fe7a:	1a80      	subs	r0, r0, r2
 800fe7c:	b530      	push	{r4, r5, lr}
 800fe7e:	d10e      	bne.n	800fe9e <__mcmp+0x2a>
 800fe80:	3314      	adds	r3, #20
 800fe82:	3114      	adds	r1, #20
 800fe84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe94:	4295      	cmp	r5, r2
 800fe96:	d003      	beq.n	800fea0 <__mcmp+0x2c>
 800fe98:	d205      	bcs.n	800fea6 <__mcmp+0x32>
 800fe9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9e:	bd30      	pop	{r4, r5, pc}
 800fea0:	42a3      	cmp	r3, r4
 800fea2:	d3f3      	bcc.n	800fe8c <__mcmp+0x18>
 800fea4:	e7fb      	b.n	800fe9e <__mcmp+0x2a>
 800fea6:	2001      	movs	r0, #1
 800fea8:	e7f9      	b.n	800fe9e <__mcmp+0x2a>
	...

0800feac <__mdiff>:
 800feac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb0:	4689      	mov	r9, r1
 800feb2:	4606      	mov	r6, r0
 800feb4:	4611      	mov	r1, r2
 800feb6:	4614      	mov	r4, r2
 800feb8:	4648      	mov	r0, r9
 800feba:	f7ff ffdb 	bl	800fe74 <__mcmp>
 800febe:	1e05      	subs	r5, r0, #0
 800fec0:	d112      	bne.n	800fee8 <__mdiff+0x3c>
 800fec2:	4629      	mov	r1, r5
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7ff fd0f 	bl	800f8e8 <_Balloc>
 800feca:	4602      	mov	r2, r0
 800fecc:	b928      	cbnz	r0, 800feda <__mdiff+0x2e>
 800fece:	4b41      	ldr	r3, [pc, #260]	@ (800ffd4 <__mdiff+0x128>)
 800fed0:	f240 2137 	movw	r1, #567	@ 0x237
 800fed4:	4840      	ldr	r0, [pc, #256]	@ (800ffd8 <__mdiff+0x12c>)
 800fed6:	f001 fc77 	bl	80117c8 <__assert_func>
 800feda:	2301      	movs	r3, #1
 800fedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fee0:	4610      	mov	r0, r2
 800fee2:	b003      	add	sp, #12
 800fee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee8:	bfbc      	itt	lt
 800feea:	464b      	movlt	r3, r9
 800feec:	46a1      	movlt	r9, r4
 800feee:	4630      	mov	r0, r6
 800fef0:	bfb8      	it	lt
 800fef2:	2501      	movlt	r5, #1
 800fef4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fef8:	bfb4      	ite	lt
 800fefa:	461c      	movlt	r4, r3
 800fefc:	2500      	movge	r5, #0
 800fefe:	f7ff fcf3 	bl	800f8e8 <_Balloc>
 800ff02:	4602      	mov	r2, r0
 800ff04:	b918      	cbnz	r0, 800ff0e <__mdiff+0x62>
 800ff06:	4b33      	ldr	r3, [pc, #204]	@ (800ffd4 <__mdiff+0x128>)
 800ff08:	f240 2145 	movw	r1, #581	@ 0x245
 800ff0c:	e7e2      	b.n	800fed4 <__mdiff+0x28>
 800ff0e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ff12:	f104 0e14 	add.w	lr, r4, #20
 800ff16:	6926      	ldr	r6, [r4, #16]
 800ff18:	f100 0b14 	add.w	fp, r0, #20
 800ff1c:	60c5      	str	r5, [r0, #12]
 800ff1e:	f109 0514 	add.w	r5, r9, #20
 800ff22:	f109 0310 	add.w	r3, r9, #16
 800ff26:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff2e:	46d9      	mov	r9, fp
 800ff30:	f04f 0c00 	mov.w	ip, #0
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	9b01      	ldr	r3, [sp, #4]
 800ff38:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff3c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff40:	4576      	cmp	r6, lr
 800ff42:	9301      	str	r3, [sp, #4]
 800ff44:	fa1f f38a 	uxth.w	r3, sl
 800ff48:	4619      	mov	r1, r3
 800ff4a:	b283      	uxth	r3, r0
 800ff4c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800ff50:	eba1 0303 	sub.w	r3, r1, r3
 800ff54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ff58:	4463      	add	r3, ip
 800ff5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff64:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ff68:	f849 3b04 	str.w	r3, [r9], #4
 800ff6c:	d8e3      	bhi.n	800ff36 <__mdiff+0x8a>
 800ff6e:	1b33      	subs	r3, r6, r4
 800ff70:	3415      	adds	r4, #21
 800ff72:	3b15      	subs	r3, #21
 800ff74:	f023 0303 	bic.w	r3, r3, #3
 800ff78:	3304      	adds	r3, #4
 800ff7a:	42a6      	cmp	r6, r4
 800ff7c:	bf38      	it	cc
 800ff7e:	2304      	movcc	r3, #4
 800ff80:	441d      	add	r5, r3
 800ff82:	445b      	add	r3, fp
 800ff84:	462c      	mov	r4, r5
 800ff86:	461e      	mov	r6, r3
 800ff88:	4544      	cmp	r4, r8
 800ff8a:	d30e      	bcc.n	800ffaa <__mdiff+0xfe>
 800ff8c:	f108 0103 	add.w	r1, r8, #3
 800ff90:	1b49      	subs	r1, r1, r5
 800ff92:	3d03      	subs	r5, #3
 800ff94:	f021 0103 	bic.w	r1, r1, #3
 800ff98:	45a8      	cmp	r8, r5
 800ff9a:	bf38      	it	cc
 800ff9c:	2100      	movcc	r1, #0
 800ff9e:	440b      	add	r3, r1
 800ffa0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffa4:	b199      	cbz	r1, 800ffce <__mdiff+0x122>
 800ffa6:	6117      	str	r7, [r2, #16]
 800ffa8:	e79a      	b.n	800fee0 <__mdiff+0x34>
 800ffaa:	f854 1b04 	ldr.w	r1, [r4], #4
 800ffae:	46e6      	mov	lr, ip
 800ffb0:	fa1f fc81 	uxth.w	ip, r1
 800ffb4:	0c08      	lsrs	r0, r1, #16
 800ffb6:	4471      	add	r1, lr
 800ffb8:	44f4      	add	ip, lr
 800ffba:	b289      	uxth	r1, r1
 800ffbc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ffc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ffc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ffc8:	f846 1b04 	str.w	r1, [r6], #4
 800ffcc:	e7dc      	b.n	800ff88 <__mdiff+0xdc>
 800ffce:	3f01      	subs	r7, #1
 800ffd0:	e7e6      	b.n	800ffa0 <__mdiff+0xf4>
 800ffd2:	bf00      	nop
 800ffd4:	080123ed 	.word	0x080123ed
 800ffd8:	080123fe 	.word	0x080123fe

0800ffdc <__ulp>:
 800ffdc:	b082      	sub	sp, #8
 800ffde:	4b11      	ldr	r3, [pc, #68]	@ (8010024 <__ulp+0x48>)
 800ffe0:	ed8d 0b00 	vstr	d0, [sp]
 800ffe4:	9a01      	ldr	r2, [sp, #4]
 800ffe6:	4013      	ands	r3, r2
 800ffe8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	dc08      	bgt.n	8010002 <__ulp+0x26>
 800fff0:	425b      	negs	r3, r3
 800fff2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800fff6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fffa:	da04      	bge.n	8010006 <__ulp+0x2a>
 800fffc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010000:	4113      	asrs	r3, r2
 8010002:	2200      	movs	r2, #0
 8010004:	e008      	b.n	8010018 <__ulp+0x3c>
 8010006:	f1a2 0314 	sub.w	r3, r2, #20
 801000a:	2b1e      	cmp	r3, #30
 801000c:	bfd6      	itet	le
 801000e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010012:	2201      	movgt	r2, #1
 8010014:	40da      	lsrle	r2, r3
 8010016:	2300      	movs	r3, #0
 8010018:	4619      	mov	r1, r3
 801001a:	4610      	mov	r0, r2
 801001c:	ec41 0b10 	vmov	d0, r0, r1
 8010020:	b002      	add	sp, #8
 8010022:	4770      	bx	lr
 8010024:	7ff00000 	.word	0x7ff00000

08010028 <__b2d>:
 8010028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	6906      	ldr	r6, [r0, #16]
 801002e:	f100 0814 	add.w	r8, r0, #20
 8010032:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010036:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801003a:	1f37      	subs	r7, r6, #4
 801003c:	4610      	mov	r0, r2
 801003e:	f7ff fd47 	bl	800fad0 <__hi0bits>
 8010042:	f1c0 0320 	rsb	r3, r0, #32
 8010046:	280a      	cmp	r0, #10
 8010048:	600b      	str	r3, [r1, #0]
 801004a:	491d      	ldr	r1, [pc, #116]	@ (80100c0 <__b2d+0x98>)
 801004c:	dc16      	bgt.n	801007c <__b2d+0x54>
 801004e:	f1c0 0c0b 	rsb	ip, r0, #11
 8010052:	45b8      	cmp	r8, r7
 8010054:	f100 0015 	add.w	r0, r0, #21
 8010058:	fa22 f30c 	lsr.w	r3, r2, ip
 801005c:	fa02 f000 	lsl.w	r0, r2, r0
 8010060:	ea43 0501 	orr.w	r5, r3, r1
 8010064:	bf34      	ite	cc
 8010066:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801006a:	2300      	movcs	r3, #0
 801006c:	fa23 f30c 	lsr.w	r3, r3, ip
 8010070:	4303      	orrs	r3, r0
 8010072:	461c      	mov	r4, r3
 8010074:	ec45 4b10 	vmov	d0, r4, r5
 8010078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007c:	45b8      	cmp	r8, r7
 801007e:	bf3a      	itte	cc
 8010080:	f1a6 0708 	subcc.w	r7, r6, #8
 8010084:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010088:	2300      	movcs	r3, #0
 801008a:	380b      	subs	r0, #11
 801008c:	d014      	beq.n	80100b8 <__b2d+0x90>
 801008e:	f1c0 0120 	rsb	r1, r0, #32
 8010092:	4082      	lsls	r2, r0
 8010094:	4547      	cmp	r7, r8
 8010096:	fa23 f401 	lsr.w	r4, r3, r1
 801009a:	fa03 f300 	lsl.w	r3, r3, r0
 801009e:	ea42 0204 	orr.w	r2, r2, r4
 80100a2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80100a6:	bf8c      	ite	hi
 80100a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80100ac:	2200      	movls	r2, #0
 80100ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80100b2:	40ca      	lsrs	r2, r1
 80100b4:	4313      	orrs	r3, r2
 80100b6:	e7dc      	b.n	8010072 <__b2d+0x4a>
 80100b8:	ea42 0501 	orr.w	r5, r2, r1
 80100bc:	e7d9      	b.n	8010072 <__b2d+0x4a>
 80100be:	bf00      	nop
 80100c0:	3ff00000 	.word	0x3ff00000

080100c4 <__d2b>:
 80100c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100c8:	460f      	mov	r7, r1
 80100ca:	2101      	movs	r1, #1
 80100cc:	4616      	mov	r6, r2
 80100ce:	ec59 8b10 	vmov	r8, r9, d0
 80100d2:	f7ff fc09 	bl	800f8e8 <_Balloc>
 80100d6:	4604      	mov	r4, r0
 80100d8:	b930      	cbnz	r0, 80100e8 <__d2b+0x24>
 80100da:	4602      	mov	r2, r0
 80100dc:	4b23      	ldr	r3, [pc, #140]	@ (801016c <__d2b+0xa8>)
 80100de:	f240 310f 	movw	r1, #783	@ 0x30f
 80100e2:	4823      	ldr	r0, [pc, #140]	@ (8010170 <__d2b+0xac>)
 80100e4:	f001 fb70 	bl	80117c8 <__assert_func>
 80100e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80100ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80100f0:	b10d      	cbz	r5, 80100f6 <__d2b+0x32>
 80100f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	f1b8 0300 	subs.w	r3, r8, #0
 80100fc:	d023      	beq.n	8010146 <__d2b+0x82>
 80100fe:	4668      	mov	r0, sp
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	f7ff fd04 	bl	800fb0e <__lo0bits>
 8010106:	e9dd 1200 	ldrd	r1, r2, [sp]
 801010a:	b1d0      	cbz	r0, 8010142 <__d2b+0x7e>
 801010c:	f1c0 0320 	rsb	r3, r0, #32
 8010110:	fa02 f303 	lsl.w	r3, r2, r3
 8010114:	40c2      	lsrs	r2, r0
 8010116:	430b      	orrs	r3, r1
 8010118:	9201      	str	r2, [sp, #4]
 801011a:	6163      	str	r3, [r4, #20]
 801011c:	9b01      	ldr	r3, [sp, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	61a3      	str	r3, [r4, #24]
 8010122:	bf0c      	ite	eq
 8010124:	2201      	moveq	r2, #1
 8010126:	2202      	movne	r2, #2
 8010128:	6122      	str	r2, [r4, #16]
 801012a:	b1a5      	cbz	r5, 8010156 <__d2b+0x92>
 801012c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010130:	4405      	add	r5, r0
 8010132:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010136:	603d      	str	r5, [r7, #0]
 8010138:	6030      	str	r0, [r6, #0]
 801013a:	4620      	mov	r0, r4
 801013c:	b003      	add	sp, #12
 801013e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010142:	6161      	str	r1, [r4, #20]
 8010144:	e7ea      	b.n	801011c <__d2b+0x58>
 8010146:	a801      	add	r0, sp, #4
 8010148:	f7ff fce1 	bl	800fb0e <__lo0bits>
 801014c:	9b01      	ldr	r3, [sp, #4]
 801014e:	3020      	adds	r0, #32
 8010150:	2201      	movs	r2, #1
 8010152:	6163      	str	r3, [r4, #20]
 8010154:	e7e8      	b.n	8010128 <__d2b+0x64>
 8010156:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801015a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801015e:	6038      	str	r0, [r7, #0]
 8010160:	6918      	ldr	r0, [r3, #16]
 8010162:	f7ff fcb5 	bl	800fad0 <__hi0bits>
 8010166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801016a:	e7e5      	b.n	8010138 <__d2b+0x74>
 801016c:	080123ed 	.word	0x080123ed
 8010170:	080123fe 	.word	0x080123fe

08010174 <__ratio>:
 8010174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010178:	b085      	sub	sp, #20
 801017a:	e9cd 1000 	strd	r1, r0, [sp]
 801017e:	a902      	add	r1, sp, #8
 8010180:	f7ff ff52 	bl	8010028 <__b2d>
 8010184:	a903      	add	r1, sp, #12
 8010186:	9800      	ldr	r0, [sp, #0]
 8010188:	ec55 4b10 	vmov	r4, r5, d0
 801018c:	f7ff ff4c 	bl	8010028 <__b2d>
 8010190:	9b01      	ldr	r3, [sp, #4]
 8010192:	462f      	mov	r7, r5
 8010194:	4620      	mov	r0, r4
 8010196:	6919      	ldr	r1, [r3, #16]
 8010198:	9b00      	ldr	r3, [sp, #0]
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	1ac9      	subs	r1, r1, r3
 801019e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80101a2:	ec5b ab10 	vmov	sl, fp, d0
 80101a6:	1a9b      	subs	r3, r3, r2
 80101a8:	46d9      	mov	r9, fp
 80101aa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	bfcd      	iteet	gt
 80101b2:	462a      	movgt	r2, r5
 80101b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80101b8:	465a      	movle	r2, fp
 80101ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80101be:	bfd8      	it	le
 80101c0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80101c4:	4652      	mov	r2, sl
 80101c6:	4639      	mov	r1, r7
 80101c8:	464b      	mov	r3, r9
 80101ca:	f7f0 fc71 	bl	8000ab0 <__aeabi_ddiv>
 80101ce:	ec41 0b10 	vmov	d0, r0, r1
 80101d2:	b005      	add	sp, #20
 80101d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101d8 <__copybits>:
 80101d8:	3901      	subs	r1, #1
 80101da:	f102 0314 	add.w	r3, r2, #20
 80101de:	1149      	asrs	r1, r1, #5
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	3101      	adds	r1, #1
 80101e4:	6914      	ldr	r4, [r2, #16]
 80101e6:	1f05      	subs	r5, r0, #4
 80101e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80101ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101f0:	42a3      	cmp	r3, r4
 80101f2:	d30c      	bcc.n	801020e <__copybits+0x36>
 80101f4:	1aa3      	subs	r3, r4, r2
 80101f6:	3211      	adds	r2, #17
 80101f8:	3b11      	subs	r3, #17
 80101fa:	f023 0303 	bic.w	r3, r3, #3
 80101fe:	42a2      	cmp	r2, r4
 8010200:	bf88      	it	hi
 8010202:	2300      	movhi	r3, #0
 8010204:	4418      	add	r0, r3
 8010206:	2300      	movs	r3, #0
 8010208:	4288      	cmp	r0, r1
 801020a:	d305      	bcc.n	8010218 <__copybits+0x40>
 801020c:	bd70      	pop	{r4, r5, r6, pc}
 801020e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010212:	f845 6f04 	str.w	r6, [r5, #4]!
 8010216:	e7eb      	b.n	80101f0 <__copybits+0x18>
 8010218:	f840 3b04 	str.w	r3, [r0], #4
 801021c:	e7f4      	b.n	8010208 <__copybits+0x30>

0801021e <__any_on>:
 801021e:	f100 0214 	add.w	r2, r0, #20
 8010222:	114b      	asrs	r3, r1, #5
 8010224:	6900      	ldr	r0, [r0, #16]
 8010226:	4298      	cmp	r0, r3
 8010228:	b510      	push	{r4, lr}
 801022a:	db11      	blt.n	8010250 <__any_on+0x32>
 801022c:	dd0a      	ble.n	8010244 <__any_on+0x26>
 801022e:	f011 011f 	ands.w	r1, r1, #31
 8010232:	d007      	beq.n	8010244 <__any_on+0x26>
 8010234:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010238:	fa24 f001 	lsr.w	r0, r4, r1
 801023c:	fa00 f101 	lsl.w	r1, r0, r1
 8010240:	428c      	cmp	r4, r1
 8010242:	d10b      	bne.n	801025c <__any_on+0x3e>
 8010244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010248:	4293      	cmp	r3, r2
 801024a:	d803      	bhi.n	8010254 <__any_on+0x36>
 801024c:	2000      	movs	r0, #0
 801024e:	bd10      	pop	{r4, pc}
 8010250:	4603      	mov	r3, r0
 8010252:	e7f7      	b.n	8010244 <__any_on+0x26>
 8010254:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010258:	2900      	cmp	r1, #0
 801025a:	d0f5      	beq.n	8010248 <__any_on+0x2a>
 801025c:	2001      	movs	r0, #1
 801025e:	e7f6      	b.n	801024e <__any_on+0x30>

08010260 <sulp>:
 8010260:	b570      	push	{r4, r5, r6, lr}
 8010262:	4604      	mov	r4, r0
 8010264:	460d      	mov	r5, r1
 8010266:	4616      	mov	r6, r2
 8010268:	ec45 4b10 	vmov	d0, r4, r5
 801026c:	f7ff feb6 	bl	800ffdc <__ulp>
 8010270:	ec51 0b10 	vmov	r0, r1, d0
 8010274:	b17e      	cbz	r6, 8010296 <sulp+0x36>
 8010276:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801027a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801027e:	2b00      	cmp	r3, #0
 8010280:	dd09      	ble.n	8010296 <sulp+0x36>
 8010282:	051b      	lsls	r3, r3, #20
 8010284:	2400      	movs	r4, #0
 8010286:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801028a:	4622      	mov	r2, r4
 801028c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010290:	462b      	mov	r3, r5
 8010292:	f7f0 fae3 	bl	800085c <__aeabi_dmul>
 8010296:	ec41 0b10 	vmov	d0, r0, r1
 801029a:	bd70      	pop	{r4, r5, r6, pc}
 801029c:	0000      	movs	r0, r0
	...

080102a0 <_strtod_l>:
 80102a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a4:	b09f      	sub	sp, #124	@ 0x7c
 80102a6:	460c      	mov	r4, r1
 80102a8:	f04f 0a00 	mov.w	sl, #0
 80102ac:	f04f 0b00 	mov.w	fp, #0
 80102b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80102b2:	2200      	movs	r2, #0
 80102b4:	9005      	str	r0, [sp, #20]
 80102b6:	921a      	str	r2, [sp, #104]	@ 0x68
 80102b8:	460a      	mov	r2, r1
 80102ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80102bc:	7811      	ldrb	r1, [r2, #0]
 80102be:	292b      	cmp	r1, #43	@ 0x2b
 80102c0:	d04a      	beq.n	8010358 <_strtod_l+0xb8>
 80102c2:	d838      	bhi.n	8010336 <_strtod_l+0x96>
 80102c4:	290d      	cmp	r1, #13
 80102c6:	d832      	bhi.n	801032e <_strtod_l+0x8e>
 80102c8:	2908      	cmp	r1, #8
 80102ca:	d832      	bhi.n	8010332 <_strtod_l+0x92>
 80102cc:	2900      	cmp	r1, #0
 80102ce:	d03b      	beq.n	8010348 <_strtod_l+0xa8>
 80102d0:	2200      	movs	r2, #0
 80102d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80102d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80102d6:	782a      	ldrb	r2, [r5, #0]
 80102d8:	2a30      	cmp	r2, #48	@ 0x30
 80102da:	f040 80b3 	bne.w	8010444 <_strtod_l+0x1a4>
 80102de:	786a      	ldrb	r2, [r5, #1]
 80102e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80102e4:	2a58      	cmp	r2, #88	@ 0x58
 80102e6:	d16e      	bne.n	80103c6 <_strtod_l+0x126>
 80102e8:	9302      	str	r3, [sp, #8]
 80102ea:	a919      	add	r1, sp, #100	@ 0x64
 80102ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80102ee:	4a90      	ldr	r2, [pc, #576]	@ (8010530 <_strtod_l+0x290>)
 80102f0:	9301      	str	r3, [sp, #4]
 80102f2:	ab1a      	add	r3, sp, #104	@ 0x68
 80102f4:	9805      	ldr	r0, [sp, #20]
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80102fa:	f001 fafd 	bl	80118f8 <__gethex>
 80102fe:	f010 060f 	ands.w	r6, r0, #15
 8010302:	4604      	mov	r4, r0
 8010304:	d005      	beq.n	8010312 <_strtod_l+0x72>
 8010306:	2e06      	cmp	r6, #6
 8010308:	d128      	bne.n	801035c <_strtod_l+0xbc>
 801030a:	3501      	adds	r5, #1
 801030c:	2300      	movs	r3, #0
 801030e:	9519      	str	r5, [sp, #100]	@ 0x64
 8010310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010314:	2b00      	cmp	r3, #0
 8010316:	f040 858e 	bne.w	8010e36 <_strtod_l+0xb96>
 801031a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801031c:	b1cb      	cbz	r3, 8010352 <_strtod_l+0xb2>
 801031e:	4652      	mov	r2, sl
 8010320:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010324:	ec43 2b10 	vmov	d0, r2, r3
 8010328:	b01f      	add	sp, #124	@ 0x7c
 801032a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801032e:	2920      	cmp	r1, #32
 8010330:	d1ce      	bne.n	80102d0 <_strtod_l+0x30>
 8010332:	3201      	adds	r2, #1
 8010334:	e7c1      	b.n	80102ba <_strtod_l+0x1a>
 8010336:	292d      	cmp	r1, #45	@ 0x2d
 8010338:	d1ca      	bne.n	80102d0 <_strtod_l+0x30>
 801033a:	2101      	movs	r1, #1
 801033c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801033e:	1c51      	adds	r1, r2, #1
 8010340:	9119      	str	r1, [sp, #100]	@ 0x64
 8010342:	7852      	ldrb	r2, [r2, #1]
 8010344:	2a00      	cmp	r2, #0
 8010346:	d1c5      	bne.n	80102d4 <_strtod_l+0x34>
 8010348:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801034a:	9419      	str	r4, [sp, #100]	@ 0x64
 801034c:	2b00      	cmp	r3, #0
 801034e:	f040 8570 	bne.w	8010e32 <_strtod_l+0xb92>
 8010352:	4652      	mov	r2, sl
 8010354:	465b      	mov	r3, fp
 8010356:	e7e5      	b.n	8010324 <_strtod_l+0x84>
 8010358:	2100      	movs	r1, #0
 801035a:	e7ef      	b.n	801033c <_strtod_l+0x9c>
 801035c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801035e:	b13a      	cbz	r2, 8010370 <_strtod_l+0xd0>
 8010360:	2135      	movs	r1, #53	@ 0x35
 8010362:	a81c      	add	r0, sp, #112	@ 0x70
 8010364:	f7ff ff38 	bl	80101d8 <__copybits>
 8010368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801036a:	9805      	ldr	r0, [sp, #20]
 801036c:	f7ff fafc 	bl	800f968 <_Bfree>
 8010370:	3e01      	subs	r6, #1
 8010372:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010374:	2e04      	cmp	r6, #4
 8010376:	d806      	bhi.n	8010386 <_strtod_l+0xe6>
 8010378:	e8df f006 	tbb	[pc, r6]
 801037c:	201d0314 	.word	0x201d0314
 8010380:	14          	.byte	0x14
 8010381:	00          	.byte	0x00
 8010382:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010386:	05e1      	lsls	r1, r4, #23
 8010388:	bf48      	it	mi
 801038a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801038e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010392:	0d1b      	lsrs	r3, r3, #20
 8010394:	051b      	lsls	r3, r3, #20
 8010396:	2b00      	cmp	r3, #0
 8010398:	d1bb      	bne.n	8010312 <_strtod_l+0x72>
 801039a:	f7fe fb0f 	bl	800e9bc <__errno>
 801039e:	2322      	movs	r3, #34	@ 0x22
 80103a0:	6003      	str	r3, [r0, #0]
 80103a2:	e7b6      	b.n	8010312 <_strtod_l+0x72>
 80103a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80103a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80103ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80103b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80103b4:	e7e7      	b.n	8010386 <_strtod_l+0xe6>
 80103b6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010538 <_strtod_l+0x298>
 80103ba:	e7e4      	b.n	8010386 <_strtod_l+0xe6>
 80103bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80103c0:	f04f 3aff 	mov.w	sl, #4294967295
 80103c4:	e7df      	b.n	8010386 <_strtod_l+0xe6>
 80103c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103c8:	1c5a      	adds	r2, r3, #1
 80103ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80103cc:	785b      	ldrb	r3, [r3, #1]
 80103ce:	2b30      	cmp	r3, #48	@ 0x30
 80103d0:	d0f9      	beq.n	80103c6 <_strtod_l+0x126>
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d09d      	beq.n	8010312 <_strtod_l+0x72>
 80103d6:	2301      	movs	r3, #1
 80103d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80103da:	220a      	movs	r2, #10
 80103dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80103de:	930c      	str	r3, [sp, #48]	@ 0x30
 80103e0:	2300      	movs	r3, #0
 80103e2:	461f      	mov	r7, r3
 80103e4:	9308      	str	r3, [sp, #32]
 80103e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80103ea:	7805      	ldrb	r5, [r0, #0]
 80103ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80103f0:	b2d9      	uxtb	r1, r3
 80103f2:	2909      	cmp	r1, #9
 80103f4:	d928      	bls.n	8010448 <_strtod_l+0x1a8>
 80103f6:	2201      	movs	r2, #1
 80103f8:	494e      	ldr	r1, [pc, #312]	@ (8010534 <_strtod_l+0x294>)
 80103fa:	f001 f9ab 	bl	8011754 <strncmp>
 80103fe:	2800      	cmp	r0, #0
 8010400:	d033      	beq.n	801046a <_strtod_l+0x1ca>
 8010402:	2000      	movs	r0, #0
 8010404:	462a      	mov	r2, r5
 8010406:	463d      	mov	r5, r7
 8010408:	4681      	mov	r9, r0
 801040a:	4603      	mov	r3, r0
 801040c:	2a65      	cmp	r2, #101	@ 0x65
 801040e:	d001      	beq.n	8010414 <_strtod_l+0x174>
 8010410:	2a45      	cmp	r2, #69	@ 0x45
 8010412:	d114      	bne.n	801043e <_strtod_l+0x19e>
 8010414:	b91d      	cbnz	r5, 801041e <_strtod_l+0x17e>
 8010416:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010418:	4302      	orrs	r2, r0
 801041a:	d095      	beq.n	8010348 <_strtod_l+0xa8>
 801041c:	2500      	movs	r5, #0
 801041e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010420:	1c62      	adds	r2, r4, #1
 8010422:	9219      	str	r2, [sp, #100]	@ 0x64
 8010424:	7862      	ldrb	r2, [r4, #1]
 8010426:	2a2b      	cmp	r2, #43	@ 0x2b
 8010428:	d078      	beq.n	801051c <_strtod_l+0x27c>
 801042a:	2a2d      	cmp	r2, #45	@ 0x2d
 801042c:	d07c      	beq.n	8010528 <_strtod_l+0x288>
 801042e:	f04f 0c00 	mov.w	ip, #0
 8010432:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010436:	2909      	cmp	r1, #9
 8010438:	f240 8084 	bls.w	8010544 <_strtod_l+0x2a4>
 801043c:	9419      	str	r4, [sp, #100]	@ 0x64
 801043e:	f04f 0800 	mov.w	r8, #0
 8010442:	e0a4      	b.n	801058e <_strtod_l+0x2ee>
 8010444:	2300      	movs	r3, #0
 8010446:	e7c7      	b.n	80103d8 <_strtod_l+0x138>
 8010448:	2f08      	cmp	r7, #8
 801044a:	f100 0001 	add.w	r0, r0, #1
 801044e:	f107 0701 	add.w	r7, r7, #1
 8010452:	bfd5      	itete	le
 8010454:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8010456:	9908      	ldrgt	r1, [sp, #32]
 8010458:	fb02 3301 	mlale	r3, r2, r1, r3
 801045c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8010460:	bfd4      	ite	le
 8010462:	930a      	strle	r3, [sp, #40]	@ 0x28
 8010464:	9308      	strgt	r3, [sp, #32]
 8010466:	9019      	str	r0, [sp, #100]	@ 0x64
 8010468:	e7be      	b.n	80103e8 <_strtod_l+0x148>
 801046a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801046c:	1c5a      	adds	r2, r3, #1
 801046e:	9219      	str	r2, [sp, #100]	@ 0x64
 8010470:	785a      	ldrb	r2, [r3, #1]
 8010472:	b37f      	cbz	r7, 80104d4 <_strtod_l+0x234>
 8010474:	4681      	mov	r9, r0
 8010476:	463d      	mov	r5, r7
 8010478:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801047c:	2b09      	cmp	r3, #9
 801047e:	d912      	bls.n	80104a6 <_strtod_l+0x206>
 8010480:	2301      	movs	r3, #1
 8010482:	e7c3      	b.n	801040c <_strtod_l+0x16c>
 8010484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010486:	3001      	adds	r0, #1
 8010488:	1c5a      	adds	r2, r3, #1
 801048a:	9219      	str	r2, [sp, #100]	@ 0x64
 801048c:	785a      	ldrb	r2, [r3, #1]
 801048e:	2a30      	cmp	r2, #48	@ 0x30
 8010490:	d0f8      	beq.n	8010484 <_strtod_l+0x1e4>
 8010492:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010496:	2b08      	cmp	r3, #8
 8010498:	f200 84d2 	bhi.w	8010e40 <_strtod_l+0xba0>
 801049c:	4681      	mov	r9, r0
 801049e:	2000      	movs	r0, #0
 80104a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80104a2:	4605      	mov	r5, r0
 80104a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80104a6:	3a30      	subs	r2, #48	@ 0x30
 80104a8:	f100 0301 	add.w	r3, r0, #1
 80104ac:	d02a      	beq.n	8010504 <_strtod_l+0x264>
 80104ae:	4499      	add	r9, r3
 80104b0:	eb00 0c05 	add.w	ip, r0, r5
 80104b4:	462b      	mov	r3, r5
 80104b6:	210a      	movs	r1, #10
 80104b8:	4563      	cmp	r3, ip
 80104ba:	d10d      	bne.n	80104d8 <_strtod_l+0x238>
 80104bc:	1c69      	adds	r1, r5, #1
 80104be:	4401      	add	r1, r0
 80104c0:	4428      	add	r0, r5
 80104c2:	2808      	cmp	r0, #8
 80104c4:	dc16      	bgt.n	80104f4 <_strtod_l+0x254>
 80104c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104c8:	230a      	movs	r3, #10
 80104ca:	fb03 2300 	mla	r3, r3, r0, r2
 80104ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d0:	2300      	movs	r3, #0
 80104d2:	e018      	b.n	8010506 <_strtod_l+0x266>
 80104d4:	4638      	mov	r0, r7
 80104d6:	e7da      	b.n	801048e <_strtod_l+0x1ee>
 80104d8:	2b08      	cmp	r3, #8
 80104da:	f103 0301 	add.w	r3, r3, #1
 80104de:	dc03      	bgt.n	80104e8 <_strtod_l+0x248>
 80104e0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80104e2:	434e      	muls	r6, r1
 80104e4:	960a      	str	r6, [sp, #40]	@ 0x28
 80104e6:	e7e7      	b.n	80104b8 <_strtod_l+0x218>
 80104e8:	2b10      	cmp	r3, #16
 80104ea:	bfde      	ittt	le
 80104ec:	9e08      	ldrle	r6, [sp, #32]
 80104ee:	434e      	mulle	r6, r1
 80104f0:	9608      	strle	r6, [sp, #32]
 80104f2:	e7e1      	b.n	80104b8 <_strtod_l+0x218>
 80104f4:	280f      	cmp	r0, #15
 80104f6:	dceb      	bgt.n	80104d0 <_strtod_l+0x230>
 80104f8:	9808      	ldr	r0, [sp, #32]
 80104fa:	230a      	movs	r3, #10
 80104fc:	fb03 2300 	mla	r3, r3, r0, r2
 8010500:	9308      	str	r3, [sp, #32]
 8010502:	e7e5      	b.n	80104d0 <_strtod_l+0x230>
 8010504:	4629      	mov	r1, r5
 8010506:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010508:	460d      	mov	r5, r1
 801050a:	1c50      	adds	r0, r2, #1
 801050c:	9019      	str	r0, [sp, #100]	@ 0x64
 801050e:	4618      	mov	r0, r3
 8010510:	7852      	ldrb	r2, [r2, #1]
 8010512:	e7b1      	b.n	8010478 <_strtod_l+0x1d8>
 8010514:	f04f 0900 	mov.w	r9, #0
 8010518:	2301      	movs	r3, #1
 801051a:	e77c      	b.n	8010416 <_strtod_l+0x176>
 801051c:	f04f 0c00 	mov.w	ip, #0
 8010520:	1ca2      	adds	r2, r4, #2
 8010522:	9219      	str	r2, [sp, #100]	@ 0x64
 8010524:	78a2      	ldrb	r2, [r4, #2]
 8010526:	e784      	b.n	8010432 <_strtod_l+0x192>
 8010528:	f04f 0c01 	mov.w	ip, #1
 801052c:	e7f8      	b.n	8010520 <_strtod_l+0x280>
 801052e:	bf00      	nop
 8010530:	08012570 	.word	0x08012570
 8010534:	08012558 	.word	0x08012558
 8010538:	7ff00000 	.word	0x7ff00000
 801053c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801053e:	1c51      	adds	r1, r2, #1
 8010540:	9119      	str	r1, [sp, #100]	@ 0x64
 8010542:	7852      	ldrb	r2, [r2, #1]
 8010544:	2a30      	cmp	r2, #48	@ 0x30
 8010546:	d0f9      	beq.n	801053c <_strtod_l+0x29c>
 8010548:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801054c:	2908      	cmp	r1, #8
 801054e:	f63f af76 	bhi.w	801043e <_strtod_l+0x19e>
 8010552:	3a30      	subs	r2, #48	@ 0x30
 8010554:	f04f 080a 	mov.w	r8, #10
 8010558:	920e      	str	r2, [sp, #56]	@ 0x38
 801055a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801055c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801055e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010560:	1c56      	adds	r6, r2, #1
 8010562:	9619      	str	r6, [sp, #100]	@ 0x64
 8010564:	7852      	ldrb	r2, [r2, #1]
 8010566:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801056a:	f1be 0f09 	cmp.w	lr, #9
 801056e:	d939      	bls.n	80105e4 <_strtod_l+0x344>
 8010570:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010572:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010576:	1a76      	subs	r6, r6, r1
 8010578:	2e08      	cmp	r6, #8
 801057a:	dc03      	bgt.n	8010584 <_strtod_l+0x2e4>
 801057c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801057e:	4588      	cmp	r8, r1
 8010580:	bfa8      	it	ge
 8010582:	4688      	movge	r8, r1
 8010584:	f1bc 0f00 	cmp.w	ip, #0
 8010588:	d001      	beq.n	801058e <_strtod_l+0x2ee>
 801058a:	f1c8 0800 	rsb	r8, r8, #0
 801058e:	2d00      	cmp	r5, #0
 8010590:	d14e      	bne.n	8010630 <_strtod_l+0x390>
 8010592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010594:	4308      	orrs	r0, r1
 8010596:	f47f aebc 	bne.w	8010312 <_strtod_l+0x72>
 801059a:	2b00      	cmp	r3, #0
 801059c:	f47f aed4 	bne.w	8010348 <_strtod_l+0xa8>
 80105a0:	2a69      	cmp	r2, #105	@ 0x69
 80105a2:	d028      	beq.n	80105f6 <_strtod_l+0x356>
 80105a4:	dc25      	bgt.n	80105f2 <_strtod_l+0x352>
 80105a6:	2a49      	cmp	r2, #73	@ 0x49
 80105a8:	d025      	beq.n	80105f6 <_strtod_l+0x356>
 80105aa:	2a4e      	cmp	r2, #78	@ 0x4e
 80105ac:	f47f aecc 	bne.w	8010348 <_strtod_l+0xa8>
 80105b0:	499b      	ldr	r1, [pc, #620]	@ (8010820 <_strtod_l+0x580>)
 80105b2:	a819      	add	r0, sp, #100	@ 0x64
 80105b4:	f001 fbc0 	bl	8011d38 <__match>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	f43f aec5 	beq.w	8010348 <_strtod_l+0xa8>
 80105be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b28      	cmp	r3, #40	@ 0x28
 80105c4:	d12e      	bne.n	8010624 <_strtod_l+0x384>
 80105c6:	aa1c      	add	r2, sp, #112	@ 0x70
 80105c8:	4996      	ldr	r1, [pc, #600]	@ (8010824 <_strtod_l+0x584>)
 80105ca:	a819      	add	r0, sp, #100	@ 0x64
 80105cc:	f001 fbc8 	bl	8011d60 <__hexnan>
 80105d0:	2805      	cmp	r0, #5
 80105d2:	d127      	bne.n	8010624 <_strtod_l+0x384>
 80105d4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80105d6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80105da:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80105de:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80105e2:	e696      	b.n	8010312 <_strtod_l+0x72>
 80105e4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80105e6:	fb08 2101 	mla	r1, r8, r1, r2
 80105ea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80105ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80105f0:	e7b5      	b.n	801055e <_strtod_l+0x2be>
 80105f2:	2a6e      	cmp	r2, #110	@ 0x6e
 80105f4:	e7da      	b.n	80105ac <_strtod_l+0x30c>
 80105f6:	498c      	ldr	r1, [pc, #560]	@ (8010828 <_strtod_l+0x588>)
 80105f8:	a819      	add	r0, sp, #100	@ 0x64
 80105fa:	f001 fb9d 	bl	8011d38 <__match>
 80105fe:	2800      	cmp	r0, #0
 8010600:	f43f aea2 	beq.w	8010348 <_strtod_l+0xa8>
 8010604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010606:	a819      	add	r0, sp, #100	@ 0x64
 8010608:	4988      	ldr	r1, [pc, #544]	@ (801082c <_strtod_l+0x58c>)
 801060a:	3b01      	subs	r3, #1
 801060c:	9319      	str	r3, [sp, #100]	@ 0x64
 801060e:	f001 fb93 	bl	8011d38 <__match>
 8010612:	b910      	cbnz	r0, 801061a <_strtod_l+0x37a>
 8010614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010616:	3301      	adds	r3, #1
 8010618:	9319      	str	r3, [sp, #100]	@ 0x64
 801061a:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801083c <_strtod_l+0x59c>
 801061e:	f04f 0a00 	mov.w	sl, #0
 8010622:	e676      	b.n	8010312 <_strtod_l+0x72>
 8010624:	4882      	ldr	r0, [pc, #520]	@ (8010830 <_strtod_l+0x590>)
 8010626:	f001 f8c7 	bl	80117b8 <nan>
 801062a:	ec5b ab10 	vmov	sl, fp, d0
 801062e:	e670      	b.n	8010312 <_strtod_l+0x72>
 8010630:	eba8 0309 	sub.w	r3, r8, r9
 8010634:	2f00      	cmp	r7, #0
 8010636:	bf08      	it	eq
 8010638:	462f      	moveq	r7, r5
 801063a:	2d10      	cmp	r5, #16
 801063c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801063e:	462c      	mov	r4, r5
 8010640:	9309      	str	r3, [sp, #36]	@ 0x24
 8010642:	bfa8      	it	ge
 8010644:	2410      	movge	r4, #16
 8010646:	f7f0 f88f 	bl	8000768 <__aeabi_ui2d>
 801064a:	2d09      	cmp	r5, #9
 801064c:	4682      	mov	sl, r0
 801064e:	468b      	mov	fp, r1
 8010650:	dc13      	bgt.n	801067a <_strtod_l+0x3da>
 8010652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010654:	2b00      	cmp	r3, #0
 8010656:	f43f ae5c 	beq.w	8010312 <_strtod_l+0x72>
 801065a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801065c:	dd78      	ble.n	8010750 <_strtod_l+0x4b0>
 801065e:	2b16      	cmp	r3, #22
 8010660:	dc5f      	bgt.n	8010722 <_strtod_l+0x482>
 8010662:	4974      	ldr	r1, [pc, #464]	@ (8010834 <_strtod_l+0x594>)
 8010664:	4652      	mov	r2, sl
 8010666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801066a:	465b      	mov	r3, fp
 801066c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010670:	f7f0 f8f4 	bl	800085c <__aeabi_dmul>
 8010674:	4682      	mov	sl, r0
 8010676:	468b      	mov	fp, r1
 8010678:	e64b      	b.n	8010312 <_strtod_l+0x72>
 801067a:	4b6e      	ldr	r3, [pc, #440]	@ (8010834 <_strtod_l+0x594>)
 801067c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010680:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010684:	f7f0 f8ea 	bl	800085c <__aeabi_dmul>
 8010688:	4682      	mov	sl, r0
 801068a:	468b      	mov	fp, r1
 801068c:	9808      	ldr	r0, [sp, #32]
 801068e:	f7f0 f86b 	bl	8000768 <__aeabi_ui2d>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	4650      	mov	r0, sl
 8010698:	4659      	mov	r1, fp
 801069a:	f7ef ff29 	bl	80004f0 <__adddf3>
 801069e:	2d0f      	cmp	r5, #15
 80106a0:	4682      	mov	sl, r0
 80106a2:	468b      	mov	fp, r1
 80106a4:	ddd5      	ble.n	8010652 <_strtod_l+0x3b2>
 80106a6:	1b2c      	subs	r4, r5, r4
 80106a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106aa:	441c      	add	r4, r3
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	f340 8096 	ble.w	80107de <_strtod_l+0x53e>
 80106b2:	f014 030f 	ands.w	r3, r4, #15
 80106b6:	d00a      	beq.n	80106ce <_strtod_l+0x42e>
 80106b8:	495e      	ldr	r1, [pc, #376]	@ (8010834 <_strtod_l+0x594>)
 80106ba:	4652      	mov	r2, sl
 80106bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106c0:	465b      	mov	r3, fp
 80106c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c6:	f7f0 f8c9 	bl	800085c <__aeabi_dmul>
 80106ca:	4682      	mov	sl, r0
 80106cc:	468b      	mov	fp, r1
 80106ce:	f034 040f 	bics.w	r4, r4, #15
 80106d2:	d073      	beq.n	80107bc <_strtod_l+0x51c>
 80106d4:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80106d8:	dd48      	ble.n	801076c <_strtod_l+0x4cc>
 80106da:	2400      	movs	r4, #0
 80106dc:	46a0      	mov	r8, r4
 80106de:	46a1      	mov	r9, r4
 80106e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80106e2:	2322      	movs	r3, #34	@ 0x22
 80106e4:	9a05      	ldr	r2, [sp, #20]
 80106e6:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801083c <_strtod_l+0x59c>
 80106ea:	f04f 0a00 	mov.w	sl, #0
 80106ee:	6013      	str	r3, [r2, #0]
 80106f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	f43f ae0d 	beq.w	8010312 <_strtod_l+0x72>
 80106f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80106fa:	9805      	ldr	r0, [sp, #20]
 80106fc:	f7ff f934 	bl	800f968 <_Bfree>
 8010700:	4649      	mov	r1, r9
 8010702:	9805      	ldr	r0, [sp, #20]
 8010704:	f7ff f930 	bl	800f968 <_Bfree>
 8010708:	4641      	mov	r1, r8
 801070a:	9805      	ldr	r0, [sp, #20]
 801070c:	f7ff f92c 	bl	800f968 <_Bfree>
 8010710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010712:	9805      	ldr	r0, [sp, #20]
 8010714:	f7ff f928 	bl	800f968 <_Bfree>
 8010718:	4621      	mov	r1, r4
 801071a:	9805      	ldr	r0, [sp, #20]
 801071c:	f7ff f924 	bl	800f968 <_Bfree>
 8010720:	e5f7      	b.n	8010312 <_strtod_l+0x72>
 8010722:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010728:	4293      	cmp	r3, r2
 801072a:	dbbc      	blt.n	80106a6 <_strtod_l+0x406>
 801072c:	f1c5 050f 	rsb	r5, r5, #15
 8010730:	4c40      	ldr	r4, [pc, #256]	@ (8010834 <_strtod_l+0x594>)
 8010732:	4652      	mov	r2, sl
 8010734:	465b      	mov	r3, fp
 8010736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801073a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801073e:	f7f0 f88d 	bl	800085c <__aeabi_dmul>
 8010742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010744:	1b5d      	subs	r5, r3, r5
 8010746:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801074a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801074e:	e78f      	b.n	8010670 <_strtod_l+0x3d0>
 8010750:	3316      	adds	r3, #22
 8010752:	dba8      	blt.n	80106a6 <_strtod_l+0x406>
 8010754:	eba9 0808 	sub.w	r8, r9, r8
 8010758:	4b36      	ldr	r3, [pc, #216]	@ (8010834 <_strtod_l+0x594>)
 801075a:	4650      	mov	r0, sl
 801075c:	4659      	mov	r1, fp
 801075e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010762:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010766:	f7f0 f9a3 	bl	8000ab0 <__aeabi_ddiv>
 801076a:	e783      	b.n	8010674 <_strtod_l+0x3d4>
 801076c:	4b32      	ldr	r3, [pc, #200]	@ (8010838 <_strtod_l+0x598>)
 801076e:	1124      	asrs	r4, r4, #4
 8010770:	4650      	mov	r0, sl
 8010772:	4659      	mov	r1, fp
 8010774:	9308      	str	r3, [sp, #32]
 8010776:	2300      	movs	r3, #0
 8010778:	461e      	mov	r6, r3
 801077a:	2c01      	cmp	r4, #1
 801077c:	dc21      	bgt.n	80107c2 <_strtod_l+0x522>
 801077e:	b10b      	cbz	r3, 8010784 <_strtod_l+0x4e4>
 8010780:	4682      	mov	sl, r0
 8010782:	468b      	mov	fp, r1
 8010784:	492c      	ldr	r1, [pc, #176]	@ (8010838 <_strtod_l+0x598>)
 8010786:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801078a:	4652      	mov	r2, sl
 801078c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010790:	465b      	mov	r3, fp
 8010792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010796:	f7f0 f861 	bl	800085c <__aeabi_dmul>
 801079a:	4b28      	ldr	r3, [pc, #160]	@ (801083c <_strtod_l+0x59c>)
 801079c:	460a      	mov	r2, r1
 801079e:	4682      	mov	sl, r0
 80107a0:	400b      	ands	r3, r1
 80107a2:	4927      	ldr	r1, [pc, #156]	@ (8010840 <_strtod_l+0x5a0>)
 80107a4:	428b      	cmp	r3, r1
 80107a6:	d898      	bhi.n	80106da <_strtod_l+0x43a>
 80107a8:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80107ac:	428b      	cmp	r3, r1
 80107ae:	bf86      	itte	hi
 80107b0:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010844 <_strtod_l+0x5a4>
 80107b4:	f04f 3aff 	movhi.w	sl, #4294967295
 80107b8:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80107bc:	2300      	movs	r3, #0
 80107be:	9308      	str	r3, [sp, #32]
 80107c0:	e07a      	b.n	80108b8 <_strtod_l+0x618>
 80107c2:	07e2      	lsls	r2, r4, #31
 80107c4:	d505      	bpl.n	80107d2 <_strtod_l+0x532>
 80107c6:	9b08      	ldr	r3, [sp, #32]
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	f7f0 f846 	bl	800085c <__aeabi_dmul>
 80107d0:	2301      	movs	r3, #1
 80107d2:	9a08      	ldr	r2, [sp, #32]
 80107d4:	3601      	adds	r6, #1
 80107d6:	1064      	asrs	r4, r4, #1
 80107d8:	3208      	adds	r2, #8
 80107da:	9208      	str	r2, [sp, #32]
 80107dc:	e7cd      	b.n	801077a <_strtod_l+0x4da>
 80107de:	d0ed      	beq.n	80107bc <_strtod_l+0x51c>
 80107e0:	4264      	negs	r4, r4
 80107e2:	f014 020f 	ands.w	r2, r4, #15
 80107e6:	d00a      	beq.n	80107fe <_strtod_l+0x55e>
 80107e8:	4b12      	ldr	r3, [pc, #72]	@ (8010834 <_strtod_l+0x594>)
 80107ea:	4650      	mov	r0, sl
 80107ec:	4659      	mov	r1, fp
 80107ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80107f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f6:	f7f0 f95b 	bl	8000ab0 <__aeabi_ddiv>
 80107fa:	4682      	mov	sl, r0
 80107fc:	468b      	mov	fp, r1
 80107fe:	1124      	asrs	r4, r4, #4
 8010800:	d0dc      	beq.n	80107bc <_strtod_l+0x51c>
 8010802:	2c1f      	cmp	r4, #31
 8010804:	dd20      	ble.n	8010848 <_strtod_l+0x5a8>
 8010806:	2400      	movs	r4, #0
 8010808:	46a0      	mov	r8, r4
 801080a:	46a1      	mov	r9, r4
 801080c:	940a      	str	r4, [sp, #40]	@ 0x28
 801080e:	2322      	movs	r3, #34	@ 0x22
 8010810:	9a05      	ldr	r2, [sp, #20]
 8010812:	f04f 0a00 	mov.w	sl, #0
 8010816:	f04f 0b00 	mov.w	fp, #0
 801081a:	6013      	str	r3, [r2, #0]
 801081c:	e768      	b.n	80106f0 <_strtod_l+0x450>
 801081e:	bf00      	nop
 8010820:	08012345 	.word	0x08012345
 8010824:	0801255c 	.word	0x0801255c
 8010828:	0801233d 	.word	0x0801233d
 801082c:	08012374 	.word	0x08012374
 8010830:	08012705 	.word	0x08012705
 8010834:	08012490 	.word	0x08012490
 8010838:	08012468 	.word	0x08012468
 801083c:	7ff00000 	.word	0x7ff00000
 8010840:	7ca00000 	.word	0x7ca00000
 8010844:	7fefffff 	.word	0x7fefffff
 8010848:	f014 0310 	ands.w	r3, r4, #16
 801084c:	4650      	mov	r0, sl
 801084e:	4659      	mov	r1, fp
 8010850:	4ea9      	ldr	r6, [pc, #676]	@ (8010af8 <_strtod_l+0x858>)
 8010852:	bf18      	it	ne
 8010854:	236a      	movne	r3, #106	@ 0x6a
 8010856:	9308      	str	r3, [sp, #32]
 8010858:	2300      	movs	r3, #0
 801085a:	07e2      	lsls	r2, r4, #31
 801085c:	d504      	bpl.n	8010868 <_strtod_l+0x5c8>
 801085e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010862:	f7ef fffb 	bl	800085c <__aeabi_dmul>
 8010866:	2301      	movs	r3, #1
 8010868:	1064      	asrs	r4, r4, #1
 801086a:	f106 0608 	add.w	r6, r6, #8
 801086e:	d1f4      	bne.n	801085a <_strtod_l+0x5ba>
 8010870:	b10b      	cbz	r3, 8010876 <_strtod_l+0x5d6>
 8010872:	4682      	mov	sl, r0
 8010874:	468b      	mov	fp, r1
 8010876:	9b08      	ldr	r3, [sp, #32]
 8010878:	b1b3      	cbz	r3, 80108a8 <_strtod_l+0x608>
 801087a:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801087e:	4659      	mov	r1, fp
 8010880:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010884:	2b00      	cmp	r3, #0
 8010886:	dd0f      	ble.n	80108a8 <_strtod_l+0x608>
 8010888:	2b1f      	cmp	r3, #31
 801088a:	dd55      	ble.n	8010938 <_strtod_l+0x698>
 801088c:	2b34      	cmp	r3, #52	@ 0x34
 801088e:	f04f 0a00 	mov.w	sl, #0
 8010892:	bfdb      	ittet	le
 8010894:	f04f 33ff 	movle.w	r3, #4294967295
 8010898:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801089c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80108a0:	4093      	lslle	r3, r2
 80108a2:	bfd8      	it	le
 80108a4:	ea03 0b01 	andle.w	fp, r3, r1
 80108a8:	2200      	movs	r2, #0
 80108aa:	2300      	movs	r3, #0
 80108ac:	4650      	mov	r0, sl
 80108ae:	4659      	mov	r1, fp
 80108b0:	f7f0 fa3c 	bl	8000d2c <__aeabi_dcmpeq>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d1a6      	bne.n	8010806 <_strtod_l+0x566>
 80108b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108ba:	463a      	mov	r2, r7
 80108bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	462b      	mov	r3, r5
 80108c2:	9805      	ldr	r0, [sp, #20]
 80108c4:	f7ff f8ba 	bl	800fa3c <__s2b>
 80108c8:	900a      	str	r0, [sp, #40]	@ 0x28
 80108ca:	2800      	cmp	r0, #0
 80108cc:	f43f af05 	beq.w	80106da <_strtod_l+0x43a>
 80108d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108d2:	eba9 0308 	sub.w	r3, r9, r8
 80108d6:	2400      	movs	r4, #0
 80108d8:	2a00      	cmp	r2, #0
 80108da:	46a0      	mov	r8, r4
 80108dc:	bfa8      	it	ge
 80108de:	2300      	movge	r3, #0
 80108e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80108e2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80108e6:	9316      	str	r3, [sp, #88]	@ 0x58
 80108e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108ea:	9805      	ldr	r0, [sp, #20]
 80108ec:	6859      	ldr	r1, [r3, #4]
 80108ee:	f7fe fffb 	bl	800f8e8 <_Balloc>
 80108f2:	4681      	mov	r9, r0
 80108f4:	2800      	cmp	r0, #0
 80108f6:	f43f aef4 	beq.w	80106e2 <_strtod_l+0x442>
 80108fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108fc:	300c      	adds	r0, #12
 80108fe:	691a      	ldr	r2, [r3, #16]
 8010900:	f103 010c 	add.w	r1, r3, #12
 8010904:	3202      	adds	r2, #2
 8010906:	0092      	lsls	r2, r2, #2
 8010908:	f000 ff46 	bl	8011798 <memcpy>
 801090c:	aa1c      	add	r2, sp, #112	@ 0x70
 801090e:	a91b      	add	r1, sp, #108	@ 0x6c
 8010910:	9805      	ldr	r0, [sp, #20]
 8010912:	ec4b ab10 	vmov	d0, sl, fp
 8010916:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801091a:	f7ff fbd3 	bl	80100c4 <__d2b>
 801091e:	901a      	str	r0, [sp, #104]	@ 0x68
 8010920:	2800      	cmp	r0, #0
 8010922:	f43f aede 	beq.w	80106e2 <_strtod_l+0x442>
 8010926:	2101      	movs	r1, #1
 8010928:	9805      	ldr	r0, [sp, #20]
 801092a:	f7ff f91d 	bl	800fb68 <__i2b>
 801092e:	4680      	mov	r8, r0
 8010930:	b948      	cbnz	r0, 8010946 <_strtod_l+0x6a6>
 8010932:	f04f 0800 	mov.w	r8, #0
 8010936:	e6d4      	b.n	80106e2 <_strtod_l+0x442>
 8010938:	f04f 32ff 	mov.w	r2, #4294967295
 801093c:	fa02 f303 	lsl.w	r3, r2, r3
 8010940:	ea03 0a0a 	and.w	sl, r3, sl
 8010944:	e7b0      	b.n	80108a8 <_strtod_l+0x608>
 8010946:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010948:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801094a:	2d00      	cmp	r5, #0
 801094c:	bfa9      	itett	ge
 801094e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010950:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010952:	18ef      	addge	r7, r5, r3
 8010954:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010956:	bfb8      	it	lt
 8010958:	1b5e      	sublt	r6, r3, r5
 801095a:	9b08      	ldr	r3, [sp, #32]
 801095c:	bfb8      	it	lt
 801095e:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010960:	1aed      	subs	r5, r5, r3
 8010962:	4b66      	ldr	r3, [pc, #408]	@ (8010afc <_strtod_l+0x85c>)
 8010964:	4415      	add	r5, r2
 8010966:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801096a:	3d01      	subs	r5, #1
 801096c:	429d      	cmp	r5, r3
 801096e:	da4f      	bge.n	8010a10 <_strtod_l+0x770>
 8010970:	1b5b      	subs	r3, r3, r5
 8010972:	2101      	movs	r1, #1
 8010974:	2b1f      	cmp	r3, #31
 8010976:	eba2 0203 	sub.w	r2, r2, r3
 801097a:	dc3d      	bgt.n	80109f8 <_strtod_l+0x758>
 801097c:	fa01 f303 	lsl.w	r3, r1, r3
 8010980:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010982:	2300      	movs	r3, #0
 8010984:	9310      	str	r3, [sp, #64]	@ 0x40
 8010986:	18bd      	adds	r5, r7, r2
 8010988:	9b08      	ldr	r3, [sp, #32]
 801098a:	4416      	add	r6, r2
 801098c:	42af      	cmp	r7, r5
 801098e:	441e      	add	r6, r3
 8010990:	463b      	mov	r3, r7
 8010992:	bfa8      	it	ge
 8010994:	462b      	movge	r3, r5
 8010996:	42b3      	cmp	r3, r6
 8010998:	bfa8      	it	ge
 801099a:	4633      	movge	r3, r6
 801099c:	2b00      	cmp	r3, #0
 801099e:	bfc2      	ittt	gt
 80109a0:	1aed      	subgt	r5, r5, r3
 80109a2:	1af6      	subgt	r6, r6, r3
 80109a4:	1aff      	subgt	r7, r7, r3
 80109a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	dd16      	ble.n	80109da <_strtod_l+0x73a>
 80109ac:	4641      	mov	r1, r8
 80109ae:	461a      	mov	r2, r3
 80109b0:	9805      	ldr	r0, [sp, #20]
 80109b2:	f7ff f999 	bl	800fce8 <__pow5mult>
 80109b6:	4680      	mov	r8, r0
 80109b8:	2800      	cmp	r0, #0
 80109ba:	d0ba      	beq.n	8010932 <_strtod_l+0x692>
 80109bc:	4601      	mov	r1, r0
 80109be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80109c0:	9805      	ldr	r0, [sp, #20]
 80109c2:	f7ff f8e7 	bl	800fb94 <__multiply>
 80109c6:	900e      	str	r0, [sp, #56]	@ 0x38
 80109c8:	2800      	cmp	r0, #0
 80109ca:	f43f ae8a 	beq.w	80106e2 <_strtod_l+0x442>
 80109ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80109d0:	9805      	ldr	r0, [sp, #20]
 80109d2:	f7fe ffc9 	bl	800f968 <_Bfree>
 80109d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80109da:	2d00      	cmp	r5, #0
 80109dc:	dc1d      	bgt.n	8010a1a <_strtod_l+0x77a>
 80109de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	dd23      	ble.n	8010a2c <_strtod_l+0x78c>
 80109e4:	4649      	mov	r1, r9
 80109e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80109e8:	9805      	ldr	r0, [sp, #20]
 80109ea:	f7ff f97d 	bl	800fce8 <__pow5mult>
 80109ee:	4681      	mov	r9, r0
 80109f0:	b9e0      	cbnz	r0, 8010a2c <_strtod_l+0x78c>
 80109f2:	f04f 0900 	mov.w	r9, #0
 80109f6:	e674      	b.n	80106e2 <_strtod_l+0x442>
 80109f8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80109fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80109fe:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010a02:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010a06:	35e2      	adds	r5, #226	@ 0xe2
 8010a08:	fa01 f305 	lsl.w	r3, r1, r5
 8010a0c:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a0e:	e7ba      	b.n	8010986 <_strtod_l+0x6e6>
 8010a10:	2300      	movs	r3, #0
 8010a12:	9310      	str	r3, [sp, #64]	@ 0x40
 8010a14:	2301      	movs	r3, #1
 8010a16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010a18:	e7b5      	b.n	8010986 <_strtod_l+0x6e6>
 8010a1a:	462a      	mov	r2, r5
 8010a1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a1e:	9805      	ldr	r0, [sp, #20]
 8010a20:	f7ff f9bc 	bl	800fd9c <__lshift>
 8010a24:	901a      	str	r0, [sp, #104]	@ 0x68
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d1d9      	bne.n	80109de <_strtod_l+0x73e>
 8010a2a:	e65a      	b.n	80106e2 <_strtod_l+0x442>
 8010a2c:	2e00      	cmp	r6, #0
 8010a2e:	dd07      	ble.n	8010a40 <_strtod_l+0x7a0>
 8010a30:	4649      	mov	r1, r9
 8010a32:	4632      	mov	r2, r6
 8010a34:	9805      	ldr	r0, [sp, #20]
 8010a36:	f7ff f9b1 	bl	800fd9c <__lshift>
 8010a3a:	4681      	mov	r9, r0
 8010a3c:	2800      	cmp	r0, #0
 8010a3e:	d0d8      	beq.n	80109f2 <_strtod_l+0x752>
 8010a40:	2f00      	cmp	r7, #0
 8010a42:	dd08      	ble.n	8010a56 <_strtod_l+0x7b6>
 8010a44:	4641      	mov	r1, r8
 8010a46:	463a      	mov	r2, r7
 8010a48:	9805      	ldr	r0, [sp, #20]
 8010a4a:	f7ff f9a7 	bl	800fd9c <__lshift>
 8010a4e:	4680      	mov	r8, r0
 8010a50:	2800      	cmp	r0, #0
 8010a52:	f43f ae46 	beq.w	80106e2 <_strtod_l+0x442>
 8010a56:	464a      	mov	r2, r9
 8010a58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010a5a:	9805      	ldr	r0, [sp, #20]
 8010a5c:	f7ff fa26 	bl	800feac <__mdiff>
 8010a60:	4604      	mov	r4, r0
 8010a62:	2800      	cmp	r0, #0
 8010a64:	f43f ae3d 	beq.w	80106e2 <_strtod_l+0x442>
 8010a68:	68c3      	ldr	r3, [r0, #12]
 8010a6a:	4641      	mov	r1, r8
 8010a6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60c3      	str	r3, [r0, #12]
 8010a72:	f7ff f9ff 	bl	800fe74 <__mcmp>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	da46      	bge.n	8010b08 <_strtod_l+0x868>
 8010a7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a7c:	ea53 030a 	orrs.w	r3, r3, sl
 8010a80:	d16c      	bne.n	8010b5c <_strtod_l+0x8bc>
 8010a82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d168      	bne.n	8010b5c <_strtod_l+0x8bc>
 8010a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010a8e:	0d1b      	lsrs	r3, r3, #20
 8010a90:	051b      	lsls	r3, r3, #20
 8010a92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010a96:	d961      	bls.n	8010b5c <_strtod_l+0x8bc>
 8010a98:	6963      	ldr	r3, [r4, #20]
 8010a9a:	b913      	cbnz	r3, 8010aa2 <_strtod_l+0x802>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	dd5c      	ble.n	8010b5c <_strtod_l+0x8bc>
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	9805      	ldr	r0, [sp, #20]
 8010aa8:	f7ff f978 	bl	800fd9c <__lshift>
 8010aac:	4641      	mov	r1, r8
 8010aae:	4604      	mov	r4, r0
 8010ab0:	f7ff f9e0 	bl	800fe74 <__mcmp>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	dd51      	ble.n	8010b5c <_strtod_l+0x8bc>
 8010ab8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010abc:	9a08      	ldr	r2, [sp, #32]
 8010abe:	0d1b      	lsrs	r3, r3, #20
 8010ac0:	051b      	lsls	r3, r3, #20
 8010ac2:	2a00      	cmp	r2, #0
 8010ac4:	d06b      	beq.n	8010b9e <_strtod_l+0x8fe>
 8010ac6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010aca:	d868      	bhi.n	8010b9e <_strtod_l+0x8fe>
 8010acc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010ad0:	f67f ae9d 	bls.w	801080e <_strtod_l+0x56e>
 8010ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8010b00 <_strtod_l+0x860>)
 8010ad6:	4650      	mov	r0, sl
 8010ad8:	4659      	mov	r1, fp
 8010ada:	2200      	movs	r2, #0
 8010adc:	f7ef febe 	bl	800085c <__aeabi_dmul>
 8010ae0:	4b08      	ldr	r3, [pc, #32]	@ (8010b04 <_strtod_l+0x864>)
 8010ae2:	4682      	mov	sl, r0
 8010ae4:	468b      	mov	fp, r1
 8010ae6:	400b      	ands	r3, r1
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	f47f ae05 	bne.w	80106f8 <_strtod_l+0x458>
 8010aee:	2322      	movs	r3, #34	@ 0x22
 8010af0:	9a05      	ldr	r2, [sp, #20]
 8010af2:	6013      	str	r3, [r2, #0]
 8010af4:	e600      	b.n	80106f8 <_strtod_l+0x458>
 8010af6:	bf00      	nop
 8010af8:	08012588 	.word	0x08012588
 8010afc:	fffffc02 	.word	0xfffffc02
 8010b00:	39500000 	.word	0x39500000
 8010b04:	7ff00000 	.word	0x7ff00000
 8010b08:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010b0c:	d165      	bne.n	8010bda <_strtod_l+0x93a>
 8010b0e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b14:	b35a      	cbz	r2, 8010b6e <_strtod_l+0x8ce>
 8010b16:	4a9e      	ldr	r2, [pc, #632]	@ (8010d90 <_strtod_l+0xaf0>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d12b      	bne.n	8010b74 <_strtod_l+0x8d4>
 8010b1c:	9b08      	ldr	r3, [sp, #32]
 8010b1e:	4651      	mov	r1, sl
 8010b20:	b303      	cbz	r3, 8010b64 <_strtod_l+0x8c4>
 8010b22:	465a      	mov	r2, fp
 8010b24:	4b9b      	ldr	r3, [pc, #620]	@ (8010d94 <_strtod_l+0xaf4>)
 8010b26:	4013      	ands	r3, r2
 8010b28:	f04f 32ff 	mov.w	r2, #4294967295
 8010b2c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8010b30:	d81b      	bhi.n	8010b6a <_strtod_l+0x8ca>
 8010b32:	0d1b      	lsrs	r3, r3, #20
 8010b34:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010b38:	fa02 f303 	lsl.w	r3, r2, r3
 8010b3c:	4299      	cmp	r1, r3
 8010b3e:	d119      	bne.n	8010b74 <_strtod_l+0x8d4>
 8010b40:	4b95      	ldr	r3, [pc, #596]	@ (8010d98 <_strtod_l+0xaf8>)
 8010b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d102      	bne.n	8010b4e <_strtod_l+0x8ae>
 8010b48:	3101      	adds	r1, #1
 8010b4a:	f43f adca 	beq.w	80106e2 <_strtod_l+0x442>
 8010b4e:	4b91      	ldr	r3, [pc, #580]	@ (8010d94 <_strtod_l+0xaf4>)
 8010b50:	f04f 0a00 	mov.w	sl, #0
 8010b54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b56:	401a      	ands	r2, r3
 8010b58:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010b5c:	9b08      	ldr	r3, [sp, #32]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1b8      	bne.n	8010ad4 <_strtod_l+0x834>
 8010b62:	e5c9      	b.n	80106f8 <_strtod_l+0x458>
 8010b64:	f04f 33ff 	mov.w	r3, #4294967295
 8010b68:	e7e8      	b.n	8010b3c <_strtod_l+0x89c>
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	e7e6      	b.n	8010b3c <_strtod_l+0x89c>
 8010b6e:	ea53 030a 	orrs.w	r3, r3, sl
 8010b72:	d0a1      	beq.n	8010ab8 <_strtod_l+0x818>
 8010b74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b76:	b1db      	cbz	r3, 8010bb0 <_strtod_l+0x910>
 8010b78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b7a:	4213      	tst	r3, r2
 8010b7c:	d0ee      	beq.n	8010b5c <_strtod_l+0x8bc>
 8010b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b80:	4650      	mov	r0, sl
 8010b82:	9a08      	ldr	r2, [sp, #32]
 8010b84:	4659      	mov	r1, fp
 8010b86:	b1bb      	cbz	r3, 8010bb8 <_strtod_l+0x918>
 8010b88:	f7ff fb6a 	bl	8010260 <sulp>
 8010b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010b90:	ec53 2b10 	vmov	r2, r3, d0
 8010b94:	f7ef fcac 	bl	80004f0 <__adddf3>
 8010b98:	4682      	mov	sl, r0
 8010b9a:	468b      	mov	fp, r1
 8010b9c:	e7de      	b.n	8010b5c <_strtod_l+0x8bc>
 8010b9e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8010ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8010ba6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010baa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010bae:	e7d5      	b.n	8010b5c <_strtod_l+0x8bc>
 8010bb0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010bb2:	ea13 0f0a 	tst.w	r3, sl
 8010bb6:	e7e1      	b.n	8010b7c <_strtod_l+0x8dc>
 8010bb8:	f7ff fb52 	bl	8010260 <sulp>
 8010bbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010bc0:	ec53 2b10 	vmov	r2, r3, d0
 8010bc4:	f7ef fc92 	bl	80004ec <__aeabi_dsub>
 8010bc8:	2200      	movs	r2, #0
 8010bca:	2300      	movs	r3, #0
 8010bcc:	4682      	mov	sl, r0
 8010bce:	468b      	mov	fp, r1
 8010bd0:	f7f0 f8ac 	bl	8000d2c <__aeabi_dcmpeq>
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d0c1      	beq.n	8010b5c <_strtod_l+0x8bc>
 8010bd8:	e619      	b.n	801080e <_strtod_l+0x56e>
 8010bda:	4641      	mov	r1, r8
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7ff fac9 	bl	8010174 <__ratio>
 8010be2:	2200      	movs	r2, #0
 8010be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010be8:	ec57 6b10 	vmov	r6, r7, d0
 8010bec:	4630      	mov	r0, r6
 8010bee:	4639      	mov	r1, r7
 8010bf0:	f7f0 f8b0 	bl	8000d54 <__aeabi_dcmple>
 8010bf4:	2800      	cmp	r0, #0
 8010bf6:	d06f      	beq.n	8010cd8 <_strtod_l+0xa38>
 8010bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d17a      	bne.n	8010cf4 <_strtod_l+0xa54>
 8010bfe:	f1ba 0f00 	cmp.w	sl, #0
 8010c02:	d158      	bne.n	8010cb6 <_strtod_l+0xa16>
 8010c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d15a      	bne.n	8010cc4 <_strtod_l+0xa24>
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4b62      	ldr	r3, [pc, #392]	@ (8010d9c <_strtod_l+0xafc>)
 8010c12:	4630      	mov	r0, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f7f0 f893 	bl	8000d40 <__aeabi_dcmplt>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	d159      	bne.n	8010cd2 <_strtod_l+0xa32>
 8010c1e:	4630      	mov	r0, r6
 8010c20:	4639      	mov	r1, r7
 8010c22:	2200      	movs	r2, #0
 8010c24:	4b5e      	ldr	r3, [pc, #376]	@ (8010da0 <_strtod_l+0xb00>)
 8010c26:	f7ef fe19 	bl	800085c <__aeabi_dmul>
 8010c2a:	4606      	mov	r6, r0
 8010c2c:	460f      	mov	r7, r1
 8010c2e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8010c32:	9606      	str	r6, [sp, #24]
 8010c34:	9307      	str	r3, [sp, #28]
 8010c36:	4d57      	ldr	r5, [pc, #348]	@ (8010d94 <_strtod_l+0xaf4>)
 8010c38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010c40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c42:	401d      	ands	r5, r3
 8010c44:	4b57      	ldr	r3, [pc, #348]	@ (8010da4 <_strtod_l+0xb04>)
 8010c46:	429d      	cmp	r5, r3
 8010c48:	f040 80b0 	bne.w	8010dac <_strtod_l+0xb0c>
 8010c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c4e:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8010c52:	ec4b ab10 	vmov	d0, sl, fp
 8010c56:	f7ff f9c1 	bl	800ffdc <__ulp>
 8010c5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c5e:	ec51 0b10 	vmov	r0, r1, d0
 8010c62:	f7ef fdfb 	bl	800085c <__aeabi_dmul>
 8010c66:	4652      	mov	r2, sl
 8010c68:	465b      	mov	r3, fp
 8010c6a:	f7ef fc41 	bl	80004f0 <__adddf3>
 8010c6e:	460b      	mov	r3, r1
 8010c70:	4948      	ldr	r1, [pc, #288]	@ (8010d94 <_strtod_l+0xaf4>)
 8010c72:	4682      	mov	sl, r0
 8010c74:	4a4c      	ldr	r2, [pc, #304]	@ (8010da8 <_strtod_l+0xb08>)
 8010c76:	4019      	ands	r1, r3
 8010c78:	4291      	cmp	r1, r2
 8010c7a:	d942      	bls.n	8010d02 <_strtod_l+0xa62>
 8010c7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010c7e:	4b46      	ldr	r3, [pc, #280]	@ (8010d98 <_strtod_l+0xaf8>)
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d103      	bne.n	8010c8c <_strtod_l+0x9ec>
 8010c84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c86:	3301      	adds	r3, #1
 8010c88:	f43f ad2b 	beq.w	80106e2 <_strtod_l+0x442>
 8010c8c:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8010d98 <_strtod_l+0xaf8>
 8010c90:	f04f 3aff 	mov.w	sl, #4294967295
 8010c94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010c96:	9805      	ldr	r0, [sp, #20]
 8010c98:	f7fe fe66 	bl	800f968 <_Bfree>
 8010c9c:	4649      	mov	r1, r9
 8010c9e:	9805      	ldr	r0, [sp, #20]
 8010ca0:	f7fe fe62 	bl	800f968 <_Bfree>
 8010ca4:	4641      	mov	r1, r8
 8010ca6:	9805      	ldr	r0, [sp, #20]
 8010ca8:	f7fe fe5e 	bl	800f968 <_Bfree>
 8010cac:	4621      	mov	r1, r4
 8010cae:	9805      	ldr	r0, [sp, #20]
 8010cb0:	f7fe fe5a 	bl	800f968 <_Bfree>
 8010cb4:	e618      	b.n	80108e8 <_strtod_l+0x648>
 8010cb6:	f1ba 0f01 	cmp.w	sl, #1
 8010cba:	d103      	bne.n	8010cc4 <_strtod_l+0xa24>
 8010cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f43f ada5 	beq.w	801080e <_strtod_l+0x56e>
 8010cc4:	2600      	movs	r6, #0
 8010cc6:	4f35      	ldr	r7, [pc, #212]	@ (8010d9c <_strtod_l+0xafc>)
 8010cc8:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8010d70 <_strtod_l+0xad0>
 8010ccc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010cd0:	e7b1      	b.n	8010c36 <_strtod_l+0x996>
 8010cd2:	2600      	movs	r6, #0
 8010cd4:	4f32      	ldr	r7, [pc, #200]	@ (8010da0 <_strtod_l+0xb00>)
 8010cd6:	e7aa      	b.n	8010c2e <_strtod_l+0x98e>
 8010cd8:	4b31      	ldr	r3, [pc, #196]	@ (8010da0 <_strtod_l+0xb00>)
 8010cda:	4630      	mov	r0, r6
 8010cdc:	4639      	mov	r1, r7
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f7ef fdbc 	bl	800085c <__aeabi_dmul>
 8010ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	460f      	mov	r7, r1
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d09f      	beq.n	8010c2e <_strtod_l+0x98e>
 8010cee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8010cf2:	e7a0      	b.n	8010c36 <_strtod_l+0x996>
 8010cf4:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8010d78 <_strtod_l+0xad8>
 8010cf8:	ec57 6b17 	vmov	r6, r7, d7
 8010cfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010d00:	e799      	b.n	8010c36 <_strtod_l+0x996>
 8010d02:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8010d06:	9b08      	ldr	r3, [sp, #32]
 8010d08:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d1c1      	bne.n	8010c94 <_strtod_l+0x9f4>
 8010d10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d14:	0d1b      	lsrs	r3, r3, #20
 8010d16:	051b      	lsls	r3, r3, #20
 8010d18:	429d      	cmp	r5, r3
 8010d1a:	d1bb      	bne.n	8010c94 <_strtod_l+0x9f4>
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	4639      	mov	r1, r7
 8010d20:	f7f0 f8fc 	bl	8000f1c <__aeabi_d2lz>
 8010d24:	f7ef fd6c 	bl	8000800 <__aeabi_l2d>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	4639      	mov	r1, r7
 8010d30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010d34:	f7ef fbda 	bl	80004ec <__aeabi_dsub>
 8010d38:	460b      	mov	r3, r1
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	ea46 060a 	orr.w	r6, r6, sl
 8010d40:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d46:	431e      	orrs	r6, r3
 8010d48:	d06d      	beq.n	8010e26 <_strtod_l+0xb86>
 8010d4a:	a30d      	add	r3, pc, #52	@ (adr r3, 8010d80 <_strtod_l+0xae0>)
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	f7ef fff6 	bl	8000d40 <__aeabi_dcmplt>
 8010d54:	2800      	cmp	r0, #0
 8010d56:	f47f accf 	bne.w	80106f8 <_strtod_l+0x458>
 8010d5a:	a30b      	add	r3, pc, #44	@ (adr r3, 8010d88 <_strtod_l+0xae8>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010d64:	f7f0 f80a 	bl	8000d7c <__aeabi_dcmpgt>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d093      	beq.n	8010c94 <_strtod_l+0x9f4>
 8010d6c:	e4c4      	b.n	80106f8 <_strtod_l+0x458>
 8010d6e:	bf00      	nop
 8010d70:	00000000 	.word	0x00000000
 8010d74:	bff00000 	.word	0xbff00000
 8010d78:	00000000 	.word	0x00000000
 8010d7c:	3ff00000 	.word	0x3ff00000
 8010d80:	94a03595 	.word	0x94a03595
 8010d84:	3fdfffff 	.word	0x3fdfffff
 8010d88:	35afe535 	.word	0x35afe535
 8010d8c:	3fe00000 	.word	0x3fe00000
 8010d90:	000fffff 	.word	0x000fffff
 8010d94:	7ff00000 	.word	0x7ff00000
 8010d98:	7fefffff 	.word	0x7fefffff
 8010d9c:	3ff00000 	.word	0x3ff00000
 8010da0:	3fe00000 	.word	0x3fe00000
 8010da4:	7fe00000 	.word	0x7fe00000
 8010da8:	7c9fffff 	.word	0x7c9fffff
 8010dac:	9b08      	ldr	r3, [sp, #32]
 8010dae:	b323      	cbz	r3, 8010dfa <_strtod_l+0xb5a>
 8010db0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010db4:	d821      	bhi.n	8010dfa <_strtod_l+0xb5a>
 8010db6:	4630      	mov	r0, r6
 8010db8:	4639      	mov	r1, r7
 8010dba:	a327      	add	r3, pc, #156	@ (adr r3, 8010e58 <_strtod_l+0xbb8>)
 8010dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc0:	f7ef ffc8 	bl	8000d54 <__aeabi_dcmple>
 8010dc4:	b1a0      	cbz	r0, 8010df0 <_strtod_l+0xb50>
 8010dc6:	4639      	mov	r1, r7
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7f0 f81f 	bl	8000e0c <__aeabi_d2uiz>
 8010dce:	2801      	cmp	r0, #1
 8010dd0:	bf38      	it	cc
 8010dd2:	2001      	movcc	r0, #1
 8010dd4:	f7ef fcc8 	bl	8000768 <__aeabi_ui2d>
 8010dd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dda:	4606      	mov	r6, r0
 8010ddc:	460f      	mov	r7, r1
 8010dde:	b9fb      	cbnz	r3, 8010e20 <_strtod_l+0xb80>
 8010de0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010de4:	9014      	str	r0, [sp, #80]	@ 0x50
 8010de6:	9315      	str	r3, [sp, #84]	@ 0x54
 8010de8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8010dec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8010df0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010df2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8010df6:	1b5b      	subs	r3, r3, r5
 8010df8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010dfa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8010dfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010e02:	f7ff f8eb 	bl	800ffdc <__ulp>
 8010e06:	4650      	mov	r0, sl
 8010e08:	4659      	mov	r1, fp
 8010e0a:	ec53 2b10 	vmov	r2, r3, d0
 8010e0e:	f7ef fd25 	bl	800085c <__aeabi_dmul>
 8010e12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010e16:	f7ef fb6b 	bl	80004f0 <__adddf3>
 8010e1a:	4682      	mov	sl, r0
 8010e1c:	468b      	mov	fp, r1
 8010e1e:	e772      	b.n	8010d06 <_strtod_l+0xa66>
 8010e20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8010e24:	e7e0      	b.n	8010de8 <_strtod_l+0xb48>
 8010e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8010e60 <_strtod_l+0xbc0>)
 8010e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2c:	f7ef ff88 	bl	8000d40 <__aeabi_dcmplt>
 8010e30:	e79a      	b.n	8010d68 <_strtod_l+0xac8>
 8010e32:	2300      	movs	r3, #0
 8010e34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e38:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010e3a:	6013      	str	r3, [r2, #0]
 8010e3c:	f7ff ba6d 	b.w	801031a <_strtod_l+0x7a>
 8010e40:	2a65      	cmp	r2, #101	@ 0x65
 8010e42:	f43f ab67 	beq.w	8010514 <_strtod_l+0x274>
 8010e46:	2a45      	cmp	r2, #69	@ 0x45
 8010e48:	f43f ab64 	beq.w	8010514 <_strtod_l+0x274>
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	f7ff bba0 	b.w	8010592 <_strtod_l+0x2f2>
 8010e52:	bf00      	nop
 8010e54:	f3af 8000 	nop.w
 8010e58:	ffc00000 	.word	0xffc00000
 8010e5c:	41dfffff 	.word	0x41dfffff
 8010e60:	94a03595 	.word	0x94a03595
 8010e64:	3fcfffff 	.word	0x3fcfffff

08010e68 <_strtod_r>:
 8010e68:	4b01      	ldr	r3, [pc, #4]	@ (8010e70 <_strtod_r+0x8>)
 8010e6a:	f7ff ba19 	b.w	80102a0 <_strtod_l>
 8010e6e:	bf00      	nop
 8010e70:	20000074 	.word	0x20000074

08010e74 <_strtol_l.constprop.0>:
 8010e74:	2b24      	cmp	r3, #36	@ 0x24
 8010e76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e7a:	4686      	mov	lr, r0
 8010e7c:	4690      	mov	r8, r2
 8010e7e:	d801      	bhi.n	8010e84 <_strtol_l.constprop.0+0x10>
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d106      	bne.n	8010e92 <_strtol_l.constprop.0+0x1e>
 8010e84:	f7fd fd9a 	bl	800e9bc <__errno>
 8010e88:	2316      	movs	r3, #22
 8010e8a:	6003      	str	r3, [r0, #0]
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e92:	460d      	mov	r5, r1
 8010e94:	4833      	ldr	r0, [pc, #204]	@ (8010f64 <_strtol_l.constprop.0+0xf0>)
 8010e96:	462a      	mov	r2, r5
 8010e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e9c:	5d06      	ldrb	r6, [r0, r4]
 8010e9e:	f016 0608 	ands.w	r6, r6, #8
 8010ea2:	d1f8      	bne.n	8010e96 <_strtol_l.constprop.0+0x22>
 8010ea4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ea6:	d12d      	bne.n	8010f04 <_strtol_l.constprop.0+0x90>
 8010ea8:	782c      	ldrb	r4, [r5, #0]
 8010eaa:	2601      	movs	r6, #1
 8010eac:	1c95      	adds	r5, r2, #2
 8010eae:	f033 0210 	bics.w	r2, r3, #16
 8010eb2:	d109      	bne.n	8010ec8 <_strtol_l.constprop.0+0x54>
 8010eb4:	2c30      	cmp	r4, #48	@ 0x30
 8010eb6:	d12a      	bne.n	8010f0e <_strtol_l.constprop.0+0x9a>
 8010eb8:	782a      	ldrb	r2, [r5, #0]
 8010eba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010ebe:	2a58      	cmp	r2, #88	@ 0x58
 8010ec0:	d125      	bne.n	8010f0e <_strtol_l.constprop.0+0x9a>
 8010ec2:	786c      	ldrb	r4, [r5, #1]
 8010ec4:	2310      	movs	r3, #16
 8010ec6:	3502      	adds	r5, #2
 8010ec8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010ecc:	2200      	movs	r2, #0
 8010ece:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ed2:	4610      	mov	r0, r2
 8010ed4:	fbbc f9f3 	udiv	r9, ip, r3
 8010ed8:	fb03 ca19 	mls	sl, r3, r9, ip
 8010edc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010ee0:	2f09      	cmp	r7, #9
 8010ee2:	d81b      	bhi.n	8010f1c <_strtol_l.constprop.0+0xa8>
 8010ee4:	463c      	mov	r4, r7
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	dd27      	ble.n	8010f3a <_strtol_l.constprop.0+0xc6>
 8010eea:	1c57      	adds	r7, r2, #1
 8010eec:	d007      	beq.n	8010efe <_strtol_l.constprop.0+0x8a>
 8010eee:	4581      	cmp	r9, r0
 8010ef0:	d320      	bcc.n	8010f34 <_strtol_l.constprop.0+0xc0>
 8010ef2:	d101      	bne.n	8010ef8 <_strtol_l.constprop.0+0x84>
 8010ef4:	45a2      	cmp	sl, r4
 8010ef6:	db1d      	blt.n	8010f34 <_strtol_l.constprop.0+0xc0>
 8010ef8:	fb00 4003 	mla	r0, r0, r3, r4
 8010efc:	2201      	movs	r2, #1
 8010efe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f02:	e7eb      	b.n	8010edc <_strtol_l.constprop.0+0x68>
 8010f04:	2c2b      	cmp	r4, #43	@ 0x2b
 8010f06:	bf04      	itt	eq
 8010f08:	782c      	ldrbeq	r4, [r5, #0]
 8010f0a:	1c95      	addeq	r5, r2, #2
 8010f0c:	e7cf      	b.n	8010eae <_strtol_l.constprop.0+0x3a>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d1da      	bne.n	8010ec8 <_strtol_l.constprop.0+0x54>
 8010f12:	2c30      	cmp	r4, #48	@ 0x30
 8010f14:	bf0c      	ite	eq
 8010f16:	2308      	moveq	r3, #8
 8010f18:	230a      	movne	r3, #10
 8010f1a:	e7d5      	b.n	8010ec8 <_strtol_l.constprop.0+0x54>
 8010f1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010f20:	2f19      	cmp	r7, #25
 8010f22:	d801      	bhi.n	8010f28 <_strtol_l.constprop.0+0xb4>
 8010f24:	3c37      	subs	r4, #55	@ 0x37
 8010f26:	e7de      	b.n	8010ee6 <_strtol_l.constprop.0+0x72>
 8010f28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010f2c:	2f19      	cmp	r7, #25
 8010f2e:	d804      	bhi.n	8010f3a <_strtol_l.constprop.0+0xc6>
 8010f30:	3c57      	subs	r4, #87	@ 0x57
 8010f32:	e7d8      	b.n	8010ee6 <_strtol_l.constprop.0+0x72>
 8010f34:	f04f 32ff 	mov.w	r2, #4294967295
 8010f38:	e7e1      	b.n	8010efe <_strtol_l.constprop.0+0x8a>
 8010f3a:	1c53      	adds	r3, r2, #1
 8010f3c:	d108      	bne.n	8010f50 <_strtol_l.constprop.0+0xdc>
 8010f3e:	2322      	movs	r3, #34	@ 0x22
 8010f40:	4660      	mov	r0, ip
 8010f42:	f8ce 3000 	str.w	r3, [lr]
 8010f46:	f1b8 0f00 	cmp.w	r8, #0
 8010f4a:	d0a0      	beq.n	8010e8e <_strtol_l.constprop.0+0x1a>
 8010f4c:	1e69      	subs	r1, r5, #1
 8010f4e:	e006      	b.n	8010f5e <_strtol_l.constprop.0+0xea>
 8010f50:	b106      	cbz	r6, 8010f54 <_strtol_l.constprop.0+0xe0>
 8010f52:	4240      	negs	r0, r0
 8010f54:	f1b8 0f00 	cmp.w	r8, #0
 8010f58:	d099      	beq.n	8010e8e <_strtol_l.constprop.0+0x1a>
 8010f5a:	2a00      	cmp	r2, #0
 8010f5c:	d1f6      	bne.n	8010f4c <_strtol_l.constprop.0+0xd8>
 8010f5e:	f8c8 1000 	str.w	r1, [r8]
 8010f62:	e794      	b.n	8010e8e <_strtol_l.constprop.0+0x1a>
 8010f64:	080125b1 	.word	0x080125b1

08010f68 <_strtol_r>:
 8010f68:	f7ff bf84 	b.w	8010e74 <_strtol_l.constprop.0>

08010f6c <__ssputs_r>:
 8010f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f70:	461f      	mov	r7, r3
 8010f72:	688e      	ldr	r6, [r1, #8]
 8010f74:	4682      	mov	sl, r0
 8010f76:	460c      	mov	r4, r1
 8010f78:	42be      	cmp	r6, r7
 8010f7a:	4690      	mov	r8, r2
 8010f7c:	680b      	ldr	r3, [r1, #0]
 8010f7e:	d82d      	bhi.n	8010fdc <__ssputs_r+0x70>
 8010f80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f88:	d026      	beq.n	8010fd8 <__ssputs_r+0x6c>
 8010f8a:	6965      	ldr	r5, [r4, #20]
 8010f8c:	6909      	ldr	r1, [r1, #16]
 8010f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f92:	eba3 0901 	sub.w	r9, r3, r1
 8010f96:	1c7b      	adds	r3, r7, #1
 8010f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f9c:	444b      	add	r3, r9
 8010f9e:	106d      	asrs	r5, r5, #1
 8010fa0:	429d      	cmp	r5, r3
 8010fa2:	bf38      	it	cc
 8010fa4:	461d      	movcc	r5, r3
 8010fa6:	0553      	lsls	r3, r2, #21
 8010fa8:	d527      	bpl.n	8010ffa <__ssputs_r+0x8e>
 8010faa:	4629      	mov	r1, r5
 8010fac:	f7fe fc10 	bl	800f7d0 <_malloc_r>
 8010fb0:	4606      	mov	r6, r0
 8010fb2:	b360      	cbz	r0, 801100e <__ssputs_r+0xa2>
 8010fb4:	464a      	mov	r2, r9
 8010fb6:	6921      	ldr	r1, [r4, #16]
 8010fb8:	f000 fbee 	bl	8011798 <memcpy>
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fc6:	81a3      	strh	r3, [r4, #12]
 8010fc8:	6126      	str	r6, [r4, #16]
 8010fca:	444e      	add	r6, r9
 8010fcc:	6165      	str	r5, [r4, #20]
 8010fce:	eba5 0509 	sub.w	r5, r5, r9
 8010fd2:	6026      	str	r6, [r4, #0]
 8010fd4:	463e      	mov	r6, r7
 8010fd6:	60a5      	str	r5, [r4, #8]
 8010fd8:	42be      	cmp	r6, r7
 8010fda:	d900      	bls.n	8010fde <__ssputs_r+0x72>
 8010fdc:	463e      	mov	r6, r7
 8010fde:	4632      	mov	r2, r6
 8010fe0:	4641      	mov	r1, r8
 8010fe2:	6820      	ldr	r0, [r4, #0]
 8010fe4:	f000 fb9c 	bl	8011720 <memmove>
 8010fe8:	68a3      	ldr	r3, [r4, #8]
 8010fea:	2000      	movs	r0, #0
 8010fec:	1b9b      	subs	r3, r3, r6
 8010fee:	60a3      	str	r3, [r4, #8]
 8010ff0:	6823      	ldr	r3, [r4, #0]
 8010ff2:	4433      	add	r3, r6
 8010ff4:	6023      	str	r3, [r4, #0]
 8010ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffa:	462a      	mov	r2, r5
 8010ffc:	f000 ff5d 	bl	8011eba <_realloc_r>
 8011000:	4606      	mov	r6, r0
 8011002:	2800      	cmp	r0, #0
 8011004:	d1e0      	bne.n	8010fc8 <__ssputs_r+0x5c>
 8011006:	6921      	ldr	r1, [r4, #16]
 8011008:	4650      	mov	r0, sl
 801100a:	f7fe fb6d 	bl	800f6e8 <_free_r>
 801100e:	230c      	movs	r3, #12
 8011010:	f04f 30ff 	mov.w	r0, #4294967295
 8011014:	f8ca 3000 	str.w	r3, [sl]
 8011018:	89a3      	ldrh	r3, [r4, #12]
 801101a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801101e:	81a3      	strh	r3, [r4, #12]
 8011020:	e7e9      	b.n	8010ff6 <__ssputs_r+0x8a>
	...

08011024 <_svfiprintf_r>:
 8011024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011028:	4698      	mov	r8, r3
 801102a:	898b      	ldrh	r3, [r1, #12]
 801102c:	b09d      	sub	sp, #116	@ 0x74
 801102e:	4607      	mov	r7, r0
 8011030:	061b      	lsls	r3, r3, #24
 8011032:	460d      	mov	r5, r1
 8011034:	4614      	mov	r4, r2
 8011036:	d510      	bpl.n	801105a <_svfiprintf_r+0x36>
 8011038:	690b      	ldr	r3, [r1, #16]
 801103a:	b973      	cbnz	r3, 801105a <_svfiprintf_r+0x36>
 801103c:	2140      	movs	r1, #64	@ 0x40
 801103e:	f7fe fbc7 	bl	800f7d0 <_malloc_r>
 8011042:	6028      	str	r0, [r5, #0]
 8011044:	6128      	str	r0, [r5, #16]
 8011046:	b930      	cbnz	r0, 8011056 <_svfiprintf_r+0x32>
 8011048:	230c      	movs	r3, #12
 801104a:	603b      	str	r3, [r7, #0]
 801104c:	f04f 30ff 	mov.w	r0, #4294967295
 8011050:	b01d      	add	sp, #116	@ 0x74
 8011052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011056:	2340      	movs	r3, #64	@ 0x40
 8011058:	616b      	str	r3, [r5, #20]
 801105a:	2300      	movs	r3, #0
 801105c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011060:	f04f 0901 	mov.w	r9, #1
 8011064:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8011208 <_svfiprintf_r+0x1e4>
 8011068:	9309      	str	r3, [sp, #36]	@ 0x24
 801106a:	2320      	movs	r3, #32
 801106c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011070:	2330      	movs	r3, #48	@ 0x30
 8011072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011076:	4623      	mov	r3, r4
 8011078:	469a      	mov	sl, r3
 801107a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801107e:	b10a      	cbz	r2, 8011084 <_svfiprintf_r+0x60>
 8011080:	2a25      	cmp	r2, #37	@ 0x25
 8011082:	d1f9      	bne.n	8011078 <_svfiprintf_r+0x54>
 8011084:	ebba 0b04 	subs.w	fp, sl, r4
 8011088:	d00b      	beq.n	80110a2 <_svfiprintf_r+0x7e>
 801108a:	465b      	mov	r3, fp
 801108c:	4622      	mov	r2, r4
 801108e:	4629      	mov	r1, r5
 8011090:	4638      	mov	r0, r7
 8011092:	f7ff ff6b 	bl	8010f6c <__ssputs_r>
 8011096:	3001      	adds	r0, #1
 8011098:	f000 80a7 	beq.w	80111ea <_svfiprintf_r+0x1c6>
 801109c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801109e:	445a      	add	r2, fp
 80110a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80110a2:	f89a 3000 	ldrb.w	r3, [sl]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	f000 809f 	beq.w	80111ea <_svfiprintf_r+0x1c6>
 80110ac:	2300      	movs	r3, #0
 80110ae:	f04f 32ff 	mov.w	r2, #4294967295
 80110b2:	f10a 0a01 	add.w	sl, sl, #1
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	9307      	str	r3, [sp, #28]
 80110ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110be:	931a      	str	r3, [sp, #104]	@ 0x68
 80110c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110c4:	4654      	mov	r4, sl
 80110c6:	2205      	movs	r2, #5
 80110c8:	484f      	ldr	r0, [pc, #316]	@ (8011208 <_svfiprintf_r+0x1e4>)
 80110ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110ce:	f7fd fca2 	bl	800ea16 <memchr>
 80110d2:	9a04      	ldr	r2, [sp, #16]
 80110d4:	b9d8      	cbnz	r0, 801110e <_svfiprintf_r+0xea>
 80110d6:	06d0      	lsls	r0, r2, #27
 80110d8:	bf44      	itt	mi
 80110da:	2320      	movmi	r3, #32
 80110dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110e0:	0711      	lsls	r1, r2, #28
 80110e2:	bf44      	itt	mi
 80110e4:	232b      	movmi	r3, #43	@ 0x2b
 80110e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80110ea:	f89a 3000 	ldrb.w	r3, [sl]
 80110ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80110f0:	d015      	beq.n	801111e <_svfiprintf_r+0xfa>
 80110f2:	9a07      	ldr	r2, [sp, #28]
 80110f4:	4654      	mov	r4, sl
 80110f6:	2000      	movs	r0, #0
 80110f8:	f04f 0c0a 	mov.w	ip, #10
 80110fc:	4621      	mov	r1, r4
 80110fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011102:	3b30      	subs	r3, #48	@ 0x30
 8011104:	2b09      	cmp	r3, #9
 8011106:	d94b      	bls.n	80111a0 <_svfiprintf_r+0x17c>
 8011108:	b1b0      	cbz	r0, 8011138 <_svfiprintf_r+0x114>
 801110a:	9207      	str	r2, [sp, #28]
 801110c:	e014      	b.n	8011138 <_svfiprintf_r+0x114>
 801110e:	eba0 0308 	sub.w	r3, r0, r8
 8011112:	46a2      	mov	sl, r4
 8011114:	fa09 f303 	lsl.w	r3, r9, r3
 8011118:	4313      	orrs	r3, r2
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	e7d2      	b.n	80110c4 <_svfiprintf_r+0xa0>
 801111e:	9b03      	ldr	r3, [sp, #12]
 8011120:	1d19      	adds	r1, r3, #4
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	9103      	str	r1, [sp, #12]
 8011128:	bfbb      	ittet	lt
 801112a:	425b      	neglt	r3, r3
 801112c:	f042 0202 	orrlt.w	r2, r2, #2
 8011130:	9307      	strge	r3, [sp, #28]
 8011132:	9307      	strlt	r3, [sp, #28]
 8011134:	bfb8      	it	lt
 8011136:	9204      	strlt	r2, [sp, #16]
 8011138:	7823      	ldrb	r3, [r4, #0]
 801113a:	2b2e      	cmp	r3, #46	@ 0x2e
 801113c:	d10a      	bne.n	8011154 <_svfiprintf_r+0x130>
 801113e:	7863      	ldrb	r3, [r4, #1]
 8011140:	2b2a      	cmp	r3, #42	@ 0x2a
 8011142:	d132      	bne.n	80111aa <_svfiprintf_r+0x186>
 8011144:	9b03      	ldr	r3, [sp, #12]
 8011146:	3402      	adds	r4, #2
 8011148:	1d1a      	adds	r2, r3, #4
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011150:	9203      	str	r2, [sp, #12]
 8011152:	9305      	str	r3, [sp, #20]
 8011154:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011218 <_svfiprintf_r+0x1f4>
 8011158:	2203      	movs	r2, #3
 801115a:	7821      	ldrb	r1, [r4, #0]
 801115c:	4650      	mov	r0, sl
 801115e:	f7fd fc5a 	bl	800ea16 <memchr>
 8011162:	b138      	cbz	r0, 8011174 <_svfiprintf_r+0x150>
 8011164:	eba0 000a 	sub.w	r0, r0, sl
 8011168:	2240      	movs	r2, #64	@ 0x40
 801116a:	9b04      	ldr	r3, [sp, #16]
 801116c:	3401      	adds	r4, #1
 801116e:	4082      	lsls	r2, r0
 8011170:	4313      	orrs	r3, r2
 8011172:	9304      	str	r3, [sp, #16]
 8011174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011178:	2206      	movs	r2, #6
 801117a:	4824      	ldr	r0, [pc, #144]	@ (801120c <_svfiprintf_r+0x1e8>)
 801117c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011180:	f7fd fc49 	bl	800ea16 <memchr>
 8011184:	2800      	cmp	r0, #0
 8011186:	d036      	beq.n	80111f6 <_svfiprintf_r+0x1d2>
 8011188:	4b21      	ldr	r3, [pc, #132]	@ (8011210 <_svfiprintf_r+0x1ec>)
 801118a:	bb1b      	cbnz	r3, 80111d4 <_svfiprintf_r+0x1b0>
 801118c:	9b03      	ldr	r3, [sp, #12]
 801118e:	3307      	adds	r3, #7
 8011190:	f023 0307 	bic.w	r3, r3, #7
 8011194:	3308      	adds	r3, #8
 8011196:	9303      	str	r3, [sp, #12]
 8011198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801119a:	4433      	add	r3, r6
 801119c:	9309      	str	r3, [sp, #36]	@ 0x24
 801119e:	e76a      	b.n	8011076 <_svfiprintf_r+0x52>
 80111a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80111a4:	460c      	mov	r4, r1
 80111a6:	2001      	movs	r0, #1
 80111a8:	e7a8      	b.n	80110fc <_svfiprintf_r+0xd8>
 80111aa:	2300      	movs	r3, #0
 80111ac:	3401      	adds	r4, #1
 80111ae:	f04f 0c0a 	mov.w	ip, #10
 80111b2:	4619      	mov	r1, r3
 80111b4:	9305      	str	r3, [sp, #20]
 80111b6:	4620      	mov	r0, r4
 80111b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111bc:	3a30      	subs	r2, #48	@ 0x30
 80111be:	2a09      	cmp	r2, #9
 80111c0:	d903      	bls.n	80111ca <_svfiprintf_r+0x1a6>
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d0c6      	beq.n	8011154 <_svfiprintf_r+0x130>
 80111c6:	9105      	str	r1, [sp, #20]
 80111c8:	e7c4      	b.n	8011154 <_svfiprintf_r+0x130>
 80111ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80111ce:	4604      	mov	r4, r0
 80111d0:	2301      	movs	r3, #1
 80111d2:	e7f0      	b.n	80111b6 <_svfiprintf_r+0x192>
 80111d4:	ab03      	add	r3, sp, #12
 80111d6:	462a      	mov	r2, r5
 80111d8:	a904      	add	r1, sp, #16
 80111da:	4638      	mov	r0, r7
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	4b0d      	ldr	r3, [pc, #52]	@ (8011214 <_svfiprintf_r+0x1f0>)
 80111e0:	f7fc fc60 	bl	800daa4 <_printf_float>
 80111e4:	1c42      	adds	r2, r0, #1
 80111e6:	4606      	mov	r6, r0
 80111e8:	d1d6      	bne.n	8011198 <_svfiprintf_r+0x174>
 80111ea:	89ab      	ldrh	r3, [r5, #12]
 80111ec:	065b      	lsls	r3, r3, #25
 80111ee:	f53f af2d 	bmi.w	801104c <_svfiprintf_r+0x28>
 80111f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111f4:	e72c      	b.n	8011050 <_svfiprintf_r+0x2c>
 80111f6:	ab03      	add	r3, sp, #12
 80111f8:	462a      	mov	r2, r5
 80111fa:	a904      	add	r1, sp, #16
 80111fc:	4638      	mov	r0, r7
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	4b04      	ldr	r3, [pc, #16]	@ (8011214 <_svfiprintf_r+0x1f0>)
 8011202:	f7fc feeb 	bl	800dfdc <_printf_i>
 8011206:	e7ed      	b.n	80111e4 <_svfiprintf_r+0x1c0>
 8011208:	080126b1 	.word	0x080126b1
 801120c:	080126bb 	.word	0x080126bb
 8011210:	0800daa5 	.word	0x0800daa5
 8011214:	08010f6d 	.word	0x08010f6d
 8011218:	080126b7 	.word	0x080126b7

0801121c <__sfputc_r>:
 801121c:	6893      	ldr	r3, [r2, #8]
 801121e:	3b01      	subs	r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	6093      	str	r3, [r2, #8]
 8011224:	b410      	push	{r4}
 8011226:	da08      	bge.n	801123a <__sfputc_r+0x1e>
 8011228:	6994      	ldr	r4, [r2, #24]
 801122a:	42a3      	cmp	r3, r4
 801122c:	db01      	blt.n	8011232 <__sfputc_r+0x16>
 801122e:	290a      	cmp	r1, #10
 8011230:	d103      	bne.n	801123a <__sfputc_r+0x1e>
 8011232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011236:	f000 b9df 	b.w	80115f8 <__swbuf_r>
 801123a:	6813      	ldr	r3, [r2, #0]
 801123c:	1c58      	adds	r0, r3, #1
 801123e:	6010      	str	r0, [r2, #0]
 8011240:	4608      	mov	r0, r1
 8011242:	7019      	strb	r1, [r3, #0]
 8011244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011248:	4770      	bx	lr

0801124a <__sfputs_r>:
 801124a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801124c:	4606      	mov	r6, r0
 801124e:	460f      	mov	r7, r1
 8011250:	4614      	mov	r4, r2
 8011252:	18d5      	adds	r5, r2, r3
 8011254:	42ac      	cmp	r4, r5
 8011256:	d101      	bne.n	801125c <__sfputs_r+0x12>
 8011258:	2000      	movs	r0, #0
 801125a:	e007      	b.n	801126c <__sfputs_r+0x22>
 801125c:	463a      	mov	r2, r7
 801125e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011262:	4630      	mov	r0, r6
 8011264:	f7ff ffda 	bl	801121c <__sfputc_r>
 8011268:	1c43      	adds	r3, r0, #1
 801126a:	d1f3      	bne.n	8011254 <__sfputs_r+0xa>
 801126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011270 <_vfiprintf_r>:
 8011270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	460d      	mov	r5, r1
 8011276:	b09d      	sub	sp, #116	@ 0x74
 8011278:	4614      	mov	r4, r2
 801127a:	4698      	mov	r8, r3
 801127c:	4606      	mov	r6, r0
 801127e:	b118      	cbz	r0, 8011288 <_vfiprintf_r+0x18>
 8011280:	6a03      	ldr	r3, [r0, #32]
 8011282:	b90b      	cbnz	r3, 8011288 <_vfiprintf_r+0x18>
 8011284:	f7fd fa68 	bl	800e758 <__sinit>
 8011288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801128a:	07d9      	lsls	r1, r3, #31
 801128c:	d405      	bmi.n	801129a <_vfiprintf_r+0x2a>
 801128e:	89ab      	ldrh	r3, [r5, #12]
 8011290:	059a      	lsls	r2, r3, #22
 8011292:	d402      	bmi.n	801129a <_vfiprintf_r+0x2a>
 8011294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011296:	f7fd fbbc 	bl	800ea12 <__retarget_lock_acquire_recursive>
 801129a:	89ab      	ldrh	r3, [r5, #12]
 801129c:	071b      	lsls	r3, r3, #28
 801129e:	d501      	bpl.n	80112a4 <_vfiprintf_r+0x34>
 80112a0:	692b      	ldr	r3, [r5, #16]
 80112a2:	b99b      	cbnz	r3, 80112cc <_vfiprintf_r+0x5c>
 80112a4:	4629      	mov	r1, r5
 80112a6:	4630      	mov	r0, r6
 80112a8:	f000 f9e4 	bl	8011674 <__swsetup_r>
 80112ac:	b170      	cbz	r0, 80112cc <_vfiprintf_r+0x5c>
 80112ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112b0:	07dc      	lsls	r4, r3, #31
 80112b2:	d504      	bpl.n	80112be <_vfiprintf_r+0x4e>
 80112b4:	f04f 30ff 	mov.w	r0, #4294967295
 80112b8:	b01d      	add	sp, #116	@ 0x74
 80112ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	0598      	lsls	r0, r3, #22
 80112c2:	d4f7      	bmi.n	80112b4 <_vfiprintf_r+0x44>
 80112c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112c6:	f7fd fba5 	bl	800ea14 <__retarget_lock_release_recursive>
 80112ca:	e7f3      	b.n	80112b4 <_vfiprintf_r+0x44>
 80112cc:	2300      	movs	r3, #0
 80112ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80112d2:	f04f 0901 	mov.w	r9, #1
 80112d6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 801148c <_vfiprintf_r+0x21c>
 80112da:	9309      	str	r3, [sp, #36]	@ 0x24
 80112dc:	2320      	movs	r3, #32
 80112de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112e2:	2330      	movs	r3, #48	@ 0x30
 80112e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112e8:	4623      	mov	r3, r4
 80112ea:	469a      	mov	sl, r3
 80112ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f0:	b10a      	cbz	r2, 80112f6 <_vfiprintf_r+0x86>
 80112f2:	2a25      	cmp	r2, #37	@ 0x25
 80112f4:	d1f9      	bne.n	80112ea <_vfiprintf_r+0x7a>
 80112f6:	ebba 0b04 	subs.w	fp, sl, r4
 80112fa:	d00b      	beq.n	8011314 <_vfiprintf_r+0xa4>
 80112fc:	465b      	mov	r3, fp
 80112fe:	4622      	mov	r2, r4
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ffa1 	bl	801124a <__sfputs_r>
 8011308:	3001      	adds	r0, #1
 801130a:	f000 80a7 	beq.w	801145c <_vfiprintf_r+0x1ec>
 801130e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011310:	445a      	add	r2, fp
 8011312:	9209      	str	r2, [sp, #36]	@ 0x24
 8011314:	f89a 3000 	ldrb.w	r3, [sl]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 809f 	beq.w	801145c <_vfiprintf_r+0x1ec>
 801131e:	2300      	movs	r3, #0
 8011320:	f04f 32ff 	mov.w	r2, #4294967295
 8011324:	f10a 0a01 	add.w	sl, sl, #1
 8011328:	9304      	str	r3, [sp, #16]
 801132a:	9307      	str	r3, [sp, #28]
 801132c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011330:	931a      	str	r3, [sp, #104]	@ 0x68
 8011332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011336:	4654      	mov	r4, sl
 8011338:	2205      	movs	r2, #5
 801133a:	4854      	ldr	r0, [pc, #336]	@ (801148c <_vfiprintf_r+0x21c>)
 801133c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011340:	f7fd fb69 	bl	800ea16 <memchr>
 8011344:	9a04      	ldr	r2, [sp, #16]
 8011346:	b9d8      	cbnz	r0, 8011380 <_vfiprintf_r+0x110>
 8011348:	06d1      	lsls	r1, r2, #27
 801134a:	bf44      	itt	mi
 801134c:	2320      	movmi	r3, #32
 801134e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011352:	0713      	lsls	r3, r2, #28
 8011354:	bf44      	itt	mi
 8011356:	232b      	movmi	r3, #43	@ 0x2b
 8011358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801135c:	f89a 3000 	ldrb.w	r3, [sl]
 8011360:	2b2a      	cmp	r3, #42	@ 0x2a
 8011362:	d015      	beq.n	8011390 <_vfiprintf_r+0x120>
 8011364:	9a07      	ldr	r2, [sp, #28]
 8011366:	4654      	mov	r4, sl
 8011368:	2000      	movs	r0, #0
 801136a:	f04f 0c0a 	mov.w	ip, #10
 801136e:	4621      	mov	r1, r4
 8011370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011374:	3b30      	subs	r3, #48	@ 0x30
 8011376:	2b09      	cmp	r3, #9
 8011378:	d94b      	bls.n	8011412 <_vfiprintf_r+0x1a2>
 801137a:	b1b0      	cbz	r0, 80113aa <_vfiprintf_r+0x13a>
 801137c:	9207      	str	r2, [sp, #28]
 801137e:	e014      	b.n	80113aa <_vfiprintf_r+0x13a>
 8011380:	eba0 0308 	sub.w	r3, r0, r8
 8011384:	46a2      	mov	sl, r4
 8011386:	fa09 f303 	lsl.w	r3, r9, r3
 801138a:	4313      	orrs	r3, r2
 801138c:	9304      	str	r3, [sp, #16]
 801138e:	e7d2      	b.n	8011336 <_vfiprintf_r+0xc6>
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	1d19      	adds	r1, r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	9103      	str	r1, [sp, #12]
 801139a:	bfbb      	ittet	lt
 801139c:	425b      	neglt	r3, r3
 801139e:	f042 0202 	orrlt.w	r2, r2, #2
 80113a2:	9307      	strge	r3, [sp, #28]
 80113a4:	9307      	strlt	r3, [sp, #28]
 80113a6:	bfb8      	it	lt
 80113a8:	9204      	strlt	r2, [sp, #16]
 80113aa:	7823      	ldrb	r3, [r4, #0]
 80113ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80113ae:	d10a      	bne.n	80113c6 <_vfiprintf_r+0x156>
 80113b0:	7863      	ldrb	r3, [r4, #1]
 80113b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80113b4:	d132      	bne.n	801141c <_vfiprintf_r+0x1ac>
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	3402      	adds	r4, #2
 80113ba:	1d1a      	adds	r2, r3, #4
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113c2:	9203      	str	r2, [sp, #12]
 80113c4:	9305      	str	r3, [sp, #20]
 80113c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801149c <_vfiprintf_r+0x22c>
 80113ca:	2203      	movs	r2, #3
 80113cc:	7821      	ldrb	r1, [r4, #0]
 80113ce:	4650      	mov	r0, sl
 80113d0:	f7fd fb21 	bl	800ea16 <memchr>
 80113d4:	b138      	cbz	r0, 80113e6 <_vfiprintf_r+0x176>
 80113d6:	eba0 000a 	sub.w	r0, r0, sl
 80113da:	2240      	movs	r2, #64	@ 0x40
 80113dc:	9b04      	ldr	r3, [sp, #16]
 80113de:	3401      	adds	r4, #1
 80113e0:	4082      	lsls	r2, r0
 80113e2:	4313      	orrs	r3, r2
 80113e4:	9304      	str	r3, [sp, #16]
 80113e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113ea:	2206      	movs	r2, #6
 80113ec:	4828      	ldr	r0, [pc, #160]	@ (8011490 <_vfiprintf_r+0x220>)
 80113ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113f2:	f7fd fb10 	bl	800ea16 <memchr>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d03f      	beq.n	801147a <_vfiprintf_r+0x20a>
 80113fa:	4b26      	ldr	r3, [pc, #152]	@ (8011494 <_vfiprintf_r+0x224>)
 80113fc:	bb1b      	cbnz	r3, 8011446 <_vfiprintf_r+0x1d6>
 80113fe:	9b03      	ldr	r3, [sp, #12]
 8011400:	3307      	adds	r3, #7
 8011402:	f023 0307 	bic.w	r3, r3, #7
 8011406:	3308      	adds	r3, #8
 8011408:	9303      	str	r3, [sp, #12]
 801140a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801140c:	443b      	add	r3, r7
 801140e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011410:	e76a      	b.n	80112e8 <_vfiprintf_r+0x78>
 8011412:	fb0c 3202 	mla	r2, ip, r2, r3
 8011416:	460c      	mov	r4, r1
 8011418:	2001      	movs	r0, #1
 801141a:	e7a8      	b.n	801136e <_vfiprintf_r+0xfe>
 801141c:	2300      	movs	r3, #0
 801141e:	3401      	adds	r4, #1
 8011420:	f04f 0c0a 	mov.w	ip, #10
 8011424:	4619      	mov	r1, r3
 8011426:	9305      	str	r3, [sp, #20]
 8011428:	4620      	mov	r0, r4
 801142a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801142e:	3a30      	subs	r2, #48	@ 0x30
 8011430:	2a09      	cmp	r2, #9
 8011432:	d903      	bls.n	801143c <_vfiprintf_r+0x1cc>
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0c6      	beq.n	80113c6 <_vfiprintf_r+0x156>
 8011438:	9105      	str	r1, [sp, #20]
 801143a:	e7c4      	b.n	80113c6 <_vfiprintf_r+0x156>
 801143c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011440:	4604      	mov	r4, r0
 8011442:	2301      	movs	r3, #1
 8011444:	e7f0      	b.n	8011428 <_vfiprintf_r+0x1b8>
 8011446:	ab03      	add	r3, sp, #12
 8011448:	462a      	mov	r2, r5
 801144a:	a904      	add	r1, sp, #16
 801144c:	4630      	mov	r0, r6
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	4b11      	ldr	r3, [pc, #68]	@ (8011498 <_vfiprintf_r+0x228>)
 8011452:	f7fc fb27 	bl	800daa4 <_printf_float>
 8011456:	4607      	mov	r7, r0
 8011458:	1c78      	adds	r0, r7, #1
 801145a:	d1d6      	bne.n	801140a <_vfiprintf_r+0x19a>
 801145c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801145e:	07d9      	lsls	r1, r3, #31
 8011460:	d405      	bmi.n	801146e <_vfiprintf_r+0x1fe>
 8011462:	89ab      	ldrh	r3, [r5, #12]
 8011464:	059a      	lsls	r2, r3, #22
 8011466:	d402      	bmi.n	801146e <_vfiprintf_r+0x1fe>
 8011468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801146a:	f7fd fad3 	bl	800ea14 <__retarget_lock_release_recursive>
 801146e:	89ab      	ldrh	r3, [r5, #12]
 8011470:	065b      	lsls	r3, r3, #25
 8011472:	f53f af1f 	bmi.w	80112b4 <_vfiprintf_r+0x44>
 8011476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011478:	e71e      	b.n	80112b8 <_vfiprintf_r+0x48>
 801147a:	ab03      	add	r3, sp, #12
 801147c:	462a      	mov	r2, r5
 801147e:	a904      	add	r1, sp, #16
 8011480:	4630      	mov	r0, r6
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	4b04      	ldr	r3, [pc, #16]	@ (8011498 <_vfiprintf_r+0x228>)
 8011486:	f7fc fda9 	bl	800dfdc <_printf_i>
 801148a:	e7e4      	b.n	8011456 <_vfiprintf_r+0x1e6>
 801148c:	080126b1 	.word	0x080126b1
 8011490:	080126bb 	.word	0x080126bb
 8011494:	0800daa5 	.word	0x0800daa5
 8011498:	0801124b 	.word	0x0801124b
 801149c:	080126b7 	.word	0x080126b7

080114a0 <__sflush_r>:
 80114a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114a8:	0716      	lsls	r6, r2, #28
 80114aa:	4605      	mov	r5, r0
 80114ac:	460c      	mov	r4, r1
 80114ae:	d454      	bmi.n	801155a <__sflush_r+0xba>
 80114b0:	684b      	ldr	r3, [r1, #4]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	dc02      	bgt.n	80114bc <__sflush_r+0x1c>
 80114b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dd48      	ble.n	801154e <__sflush_r+0xae>
 80114bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114be:	2e00      	cmp	r6, #0
 80114c0:	d045      	beq.n	801154e <__sflush_r+0xae>
 80114c2:	2300      	movs	r3, #0
 80114c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114c8:	682f      	ldr	r7, [r5, #0]
 80114ca:	6a21      	ldr	r1, [r4, #32]
 80114cc:	602b      	str	r3, [r5, #0]
 80114ce:	d030      	beq.n	8011532 <__sflush_r+0x92>
 80114d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114d2:	89a3      	ldrh	r3, [r4, #12]
 80114d4:	0759      	lsls	r1, r3, #29
 80114d6:	d505      	bpl.n	80114e4 <__sflush_r+0x44>
 80114d8:	6863      	ldr	r3, [r4, #4]
 80114da:	1ad2      	subs	r2, r2, r3
 80114dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114de:	b10b      	cbz	r3, 80114e4 <__sflush_r+0x44>
 80114e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114e2:	1ad2      	subs	r2, r2, r3
 80114e4:	2300      	movs	r3, #0
 80114e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114e8:	6a21      	ldr	r1, [r4, #32]
 80114ea:	4628      	mov	r0, r5
 80114ec:	47b0      	blx	r6
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	d106      	bne.n	8011502 <__sflush_r+0x62>
 80114f4:	6829      	ldr	r1, [r5, #0]
 80114f6:	291d      	cmp	r1, #29
 80114f8:	d82b      	bhi.n	8011552 <__sflush_r+0xb2>
 80114fa:	4a2a      	ldr	r2, [pc, #168]	@ (80115a4 <__sflush_r+0x104>)
 80114fc:	410a      	asrs	r2, r1
 80114fe:	07d6      	lsls	r6, r2, #31
 8011500:	d427      	bmi.n	8011552 <__sflush_r+0xb2>
 8011502:	2200      	movs	r2, #0
 8011504:	04d9      	lsls	r1, r3, #19
 8011506:	6062      	str	r2, [r4, #4]
 8011508:	6922      	ldr	r2, [r4, #16]
 801150a:	6022      	str	r2, [r4, #0]
 801150c:	d504      	bpl.n	8011518 <__sflush_r+0x78>
 801150e:	1c42      	adds	r2, r0, #1
 8011510:	d101      	bne.n	8011516 <__sflush_r+0x76>
 8011512:	682b      	ldr	r3, [r5, #0]
 8011514:	b903      	cbnz	r3, 8011518 <__sflush_r+0x78>
 8011516:	6560      	str	r0, [r4, #84]	@ 0x54
 8011518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801151a:	602f      	str	r7, [r5, #0]
 801151c:	b1b9      	cbz	r1, 801154e <__sflush_r+0xae>
 801151e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011522:	4299      	cmp	r1, r3
 8011524:	d002      	beq.n	801152c <__sflush_r+0x8c>
 8011526:	4628      	mov	r0, r5
 8011528:	f7fe f8de 	bl	800f6e8 <_free_r>
 801152c:	2300      	movs	r3, #0
 801152e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011530:	e00d      	b.n	801154e <__sflush_r+0xae>
 8011532:	2301      	movs	r3, #1
 8011534:	4628      	mov	r0, r5
 8011536:	47b0      	blx	r6
 8011538:	4602      	mov	r2, r0
 801153a:	1c50      	adds	r0, r2, #1
 801153c:	d1c9      	bne.n	80114d2 <__sflush_r+0x32>
 801153e:	682b      	ldr	r3, [r5, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0c6      	beq.n	80114d2 <__sflush_r+0x32>
 8011544:	2b1d      	cmp	r3, #29
 8011546:	d001      	beq.n	801154c <__sflush_r+0xac>
 8011548:	2b16      	cmp	r3, #22
 801154a:	d11d      	bne.n	8011588 <__sflush_r+0xe8>
 801154c:	602f      	str	r7, [r5, #0]
 801154e:	2000      	movs	r0, #0
 8011550:	e021      	b.n	8011596 <__sflush_r+0xf6>
 8011552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011556:	b21b      	sxth	r3, r3
 8011558:	e01a      	b.n	8011590 <__sflush_r+0xf0>
 801155a:	690f      	ldr	r7, [r1, #16]
 801155c:	2f00      	cmp	r7, #0
 801155e:	d0f6      	beq.n	801154e <__sflush_r+0xae>
 8011560:	0793      	lsls	r3, r2, #30
 8011562:	680e      	ldr	r6, [r1, #0]
 8011564:	600f      	str	r7, [r1, #0]
 8011566:	bf0c      	ite	eq
 8011568:	694b      	ldreq	r3, [r1, #20]
 801156a:	2300      	movne	r3, #0
 801156c:	eba6 0807 	sub.w	r8, r6, r7
 8011570:	608b      	str	r3, [r1, #8]
 8011572:	f1b8 0f00 	cmp.w	r8, #0
 8011576:	ddea      	ble.n	801154e <__sflush_r+0xae>
 8011578:	4643      	mov	r3, r8
 801157a:	463a      	mov	r2, r7
 801157c:	6a21      	ldr	r1, [r4, #32]
 801157e:	4628      	mov	r0, r5
 8011580:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011582:	47b0      	blx	r6
 8011584:	2800      	cmp	r0, #0
 8011586:	dc08      	bgt.n	801159a <__sflush_r+0xfa>
 8011588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801158c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011590:	f04f 30ff 	mov.w	r0, #4294967295
 8011594:	81a3      	strh	r3, [r4, #12]
 8011596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159a:	4407      	add	r7, r0
 801159c:	eba8 0800 	sub.w	r8, r8, r0
 80115a0:	e7e7      	b.n	8011572 <__sflush_r+0xd2>
 80115a2:	bf00      	nop
 80115a4:	dfbffffe 	.word	0xdfbffffe

080115a8 <_fflush_r>:
 80115a8:	b538      	push	{r3, r4, r5, lr}
 80115aa:	690b      	ldr	r3, [r1, #16]
 80115ac:	4605      	mov	r5, r0
 80115ae:	460c      	mov	r4, r1
 80115b0:	b913      	cbnz	r3, 80115b8 <_fflush_r+0x10>
 80115b2:	2500      	movs	r5, #0
 80115b4:	4628      	mov	r0, r5
 80115b6:	bd38      	pop	{r3, r4, r5, pc}
 80115b8:	b118      	cbz	r0, 80115c2 <_fflush_r+0x1a>
 80115ba:	6a03      	ldr	r3, [r0, #32]
 80115bc:	b90b      	cbnz	r3, 80115c2 <_fflush_r+0x1a>
 80115be:	f7fd f8cb 	bl	800e758 <__sinit>
 80115c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d0f3      	beq.n	80115b2 <_fflush_r+0xa>
 80115ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115cc:	07d0      	lsls	r0, r2, #31
 80115ce:	d404      	bmi.n	80115da <_fflush_r+0x32>
 80115d0:	0599      	lsls	r1, r3, #22
 80115d2:	d402      	bmi.n	80115da <_fflush_r+0x32>
 80115d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115d6:	f7fd fa1c 	bl	800ea12 <__retarget_lock_acquire_recursive>
 80115da:	4628      	mov	r0, r5
 80115dc:	4621      	mov	r1, r4
 80115de:	f7ff ff5f 	bl	80114a0 <__sflush_r>
 80115e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115e4:	4605      	mov	r5, r0
 80115e6:	07da      	lsls	r2, r3, #31
 80115e8:	d4e4      	bmi.n	80115b4 <_fflush_r+0xc>
 80115ea:	89a3      	ldrh	r3, [r4, #12]
 80115ec:	059b      	lsls	r3, r3, #22
 80115ee:	d4e1      	bmi.n	80115b4 <_fflush_r+0xc>
 80115f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115f2:	f7fd fa0f 	bl	800ea14 <__retarget_lock_release_recursive>
 80115f6:	e7dd      	b.n	80115b4 <_fflush_r+0xc>

080115f8 <__swbuf_r>:
 80115f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fa:	460e      	mov	r6, r1
 80115fc:	4614      	mov	r4, r2
 80115fe:	4605      	mov	r5, r0
 8011600:	b118      	cbz	r0, 801160a <__swbuf_r+0x12>
 8011602:	6a03      	ldr	r3, [r0, #32]
 8011604:	b90b      	cbnz	r3, 801160a <__swbuf_r+0x12>
 8011606:	f7fd f8a7 	bl	800e758 <__sinit>
 801160a:	69a3      	ldr	r3, [r4, #24]
 801160c:	60a3      	str	r3, [r4, #8]
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	071a      	lsls	r2, r3, #28
 8011612:	d501      	bpl.n	8011618 <__swbuf_r+0x20>
 8011614:	6923      	ldr	r3, [r4, #16]
 8011616:	b943      	cbnz	r3, 801162a <__swbuf_r+0x32>
 8011618:	4621      	mov	r1, r4
 801161a:	4628      	mov	r0, r5
 801161c:	f000 f82a 	bl	8011674 <__swsetup_r>
 8011620:	b118      	cbz	r0, 801162a <__swbuf_r+0x32>
 8011622:	f04f 37ff 	mov.w	r7, #4294967295
 8011626:	4638      	mov	r0, r7
 8011628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801162a:	6823      	ldr	r3, [r4, #0]
 801162c:	b2f6      	uxtb	r6, r6
 801162e:	6922      	ldr	r2, [r4, #16]
 8011630:	4637      	mov	r7, r6
 8011632:	1a98      	subs	r0, r3, r2
 8011634:	6963      	ldr	r3, [r4, #20]
 8011636:	4283      	cmp	r3, r0
 8011638:	dc05      	bgt.n	8011646 <__swbuf_r+0x4e>
 801163a:	4621      	mov	r1, r4
 801163c:	4628      	mov	r0, r5
 801163e:	f7ff ffb3 	bl	80115a8 <_fflush_r>
 8011642:	2800      	cmp	r0, #0
 8011644:	d1ed      	bne.n	8011622 <__swbuf_r+0x2a>
 8011646:	68a3      	ldr	r3, [r4, #8]
 8011648:	3b01      	subs	r3, #1
 801164a:	60a3      	str	r3, [r4, #8]
 801164c:	6823      	ldr	r3, [r4, #0]
 801164e:	1c5a      	adds	r2, r3, #1
 8011650:	6022      	str	r2, [r4, #0]
 8011652:	701e      	strb	r6, [r3, #0]
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	6962      	ldr	r2, [r4, #20]
 8011658:	429a      	cmp	r2, r3
 801165a:	d004      	beq.n	8011666 <__swbuf_r+0x6e>
 801165c:	89a3      	ldrh	r3, [r4, #12]
 801165e:	07db      	lsls	r3, r3, #31
 8011660:	d5e1      	bpl.n	8011626 <__swbuf_r+0x2e>
 8011662:	2e0a      	cmp	r6, #10
 8011664:	d1df      	bne.n	8011626 <__swbuf_r+0x2e>
 8011666:	4621      	mov	r1, r4
 8011668:	4628      	mov	r0, r5
 801166a:	f7ff ff9d 	bl	80115a8 <_fflush_r>
 801166e:	2800      	cmp	r0, #0
 8011670:	d0d9      	beq.n	8011626 <__swbuf_r+0x2e>
 8011672:	e7d6      	b.n	8011622 <__swbuf_r+0x2a>

08011674 <__swsetup_r>:
 8011674:	b538      	push	{r3, r4, r5, lr}
 8011676:	4b29      	ldr	r3, [pc, #164]	@ (801171c <__swsetup_r+0xa8>)
 8011678:	4605      	mov	r5, r0
 801167a:	460c      	mov	r4, r1
 801167c:	6818      	ldr	r0, [r3, #0]
 801167e:	b118      	cbz	r0, 8011688 <__swsetup_r+0x14>
 8011680:	6a03      	ldr	r3, [r0, #32]
 8011682:	b90b      	cbnz	r3, 8011688 <__swsetup_r+0x14>
 8011684:	f7fd f868 	bl	800e758 <__sinit>
 8011688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801168c:	0719      	lsls	r1, r3, #28
 801168e:	d422      	bmi.n	80116d6 <__swsetup_r+0x62>
 8011690:	06da      	lsls	r2, r3, #27
 8011692:	d407      	bmi.n	80116a4 <__swsetup_r+0x30>
 8011694:	2209      	movs	r2, #9
 8011696:	602a      	str	r2, [r5, #0]
 8011698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801169c:	f04f 30ff 	mov.w	r0, #4294967295
 80116a0:	81a3      	strh	r3, [r4, #12]
 80116a2:	e033      	b.n	801170c <__swsetup_r+0x98>
 80116a4:	0758      	lsls	r0, r3, #29
 80116a6:	d512      	bpl.n	80116ce <__swsetup_r+0x5a>
 80116a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116aa:	b141      	cbz	r1, 80116be <__swsetup_r+0x4a>
 80116ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116b0:	4299      	cmp	r1, r3
 80116b2:	d002      	beq.n	80116ba <__swsetup_r+0x46>
 80116b4:	4628      	mov	r0, r5
 80116b6:	f7fe f817 	bl	800f6e8 <_free_r>
 80116ba:	2300      	movs	r3, #0
 80116bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80116be:	89a3      	ldrh	r3, [r4, #12]
 80116c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116c4:	81a3      	strh	r3, [r4, #12]
 80116c6:	2300      	movs	r3, #0
 80116c8:	6063      	str	r3, [r4, #4]
 80116ca:	6923      	ldr	r3, [r4, #16]
 80116cc:	6023      	str	r3, [r4, #0]
 80116ce:	89a3      	ldrh	r3, [r4, #12]
 80116d0:	f043 0308 	orr.w	r3, r3, #8
 80116d4:	81a3      	strh	r3, [r4, #12]
 80116d6:	6923      	ldr	r3, [r4, #16]
 80116d8:	b94b      	cbnz	r3, 80116ee <__swsetup_r+0x7a>
 80116da:	89a3      	ldrh	r3, [r4, #12]
 80116dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80116e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80116e4:	d003      	beq.n	80116ee <__swsetup_r+0x7a>
 80116e6:	4621      	mov	r1, r4
 80116e8:	4628      	mov	r0, r5
 80116ea:	f000 fc58 	bl	8011f9e <__smakebuf_r>
 80116ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116f2:	f013 0201 	ands.w	r2, r3, #1
 80116f6:	d00a      	beq.n	801170e <__swsetup_r+0x9a>
 80116f8:	2200      	movs	r2, #0
 80116fa:	60a2      	str	r2, [r4, #8]
 80116fc:	6962      	ldr	r2, [r4, #20]
 80116fe:	4252      	negs	r2, r2
 8011700:	61a2      	str	r2, [r4, #24]
 8011702:	6922      	ldr	r2, [r4, #16]
 8011704:	b942      	cbnz	r2, 8011718 <__swsetup_r+0xa4>
 8011706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801170a:	d1c5      	bne.n	8011698 <__swsetup_r+0x24>
 801170c:	bd38      	pop	{r3, r4, r5, pc}
 801170e:	0799      	lsls	r1, r3, #30
 8011710:	bf58      	it	pl
 8011712:	6962      	ldrpl	r2, [r4, #20]
 8011714:	60a2      	str	r2, [r4, #8]
 8011716:	e7f4      	b.n	8011702 <__swsetup_r+0x8e>
 8011718:	2000      	movs	r0, #0
 801171a:	e7f7      	b.n	801170c <__swsetup_r+0x98>
 801171c:	20000024 	.word	0x20000024

08011720 <memmove>:
 8011720:	4288      	cmp	r0, r1
 8011722:	b510      	push	{r4, lr}
 8011724:	eb01 0402 	add.w	r4, r1, r2
 8011728:	d902      	bls.n	8011730 <memmove+0x10>
 801172a:	4284      	cmp	r4, r0
 801172c:	4623      	mov	r3, r4
 801172e:	d807      	bhi.n	8011740 <memmove+0x20>
 8011730:	1e43      	subs	r3, r0, #1
 8011732:	42a1      	cmp	r1, r4
 8011734:	d008      	beq.n	8011748 <memmove+0x28>
 8011736:	f811 2b01 	ldrb.w	r2, [r1], #1
 801173a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801173e:	e7f8      	b.n	8011732 <memmove+0x12>
 8011740:	4402      	add	r2, r0
 8011742:	4601      	mov	r1, r0
 8011744:	428a      	cmp	r2, r1
 8011746:	d100      	bne.n	801174a <memmove+0x2a>
 8011748:	bd10      	pop	{r4, pc}
 801174a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801174e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011752:	e7f7      	b.n	8011744 <memmove+0x24>

08011754 <strncmp>:
 8011754:	b510      	push	{r4, lr}
 8011756:	b16a      	cbz	r2, 8011774 <strncmp+0x20>
 8011758:	3901      	subs	r1, #1
 801175a:	1884      	adds	r4, r0, r2
 801175c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011760:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011764:	429a      	cmp	r2, r3
 8011766:	d103      	bne.n	8011770 <strncmp+0x1c>
 8011768:	42a0      	cmp	r0, r4
 801176a:	d001      	beq.n	8011770 <strncmp+0x1c>
 801176c:	2a00      	cmp	r2, #0
 801176e:	d1f5      	bne.n	801175c <strncmp+0x8>
 8011770:	1ad0      	subs	r0, r2, r3
 8011772:	bd10      	pop	{r4, pc}
 8011774:	4610      	mov	r0, r2
 8011776:	e7fc      	b.n	8011772 <strncmp+0x1e>

08011778 <_sbrk_r>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	2300      	movs	r3, #0
 801177c:	4d05      	ldr	r5, [pc, #20]	@ (8011794 <_sbrk_r+0x1c>)
 801177e:	4604      	mov	r4, r0
 8011780:	4608      	mov	r0, r1
 8011782:	602b      	str	r3, [r5, #0]
 8011784:	f7f1 fd56 	bl	8003234 <_sbrk>
 8011788:	1c43      	adds	r3, r0, #1
 801178a:	d102      	bne.n	8011792 <_sbrk_r+0x1a>
 801178c:	682b      	ldr	r3, [r5, #0]
 801178e:	b103      	cbz	r3, 8011792 <_sbrk_r+0x1a>
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	bd38      	pop	{r3, r4, r5, pc}
 8011794:	20004e28 	.word	0x20004e28

08011798 <memcpy>:
 8011798:	440a      	add	r2, r1
 801179a:	1e43      	subs	r3, r0, #1
 801179c:	4291      	cmp	r1, r2
 801179e:	d100      	bne.n	80117a2 <memcpy+0xa>
 80117a0:	4770      	bx	lr
 80117a2:	b510      	push	{r4, lr}
 80117a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117a8:	4291      	cmp	r1, r2
 80117aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117ae:	d1f9      	bne.n	80117a4 <memcpy+0xc>
 80117b0:	bd10      	pop	{r4, pc}
 80117b2:	0000      	movs	r0, r0
 80117b4:	0000      	movs	r0, r0
	...

080117b8 <nan>:
 80117b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80117c0 <nan+0x8>
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	00000000 	.word	0x00000000
 80117c4:	7ff80000 	.word	0x7ff80000

080117c8 <__assert_func>:
 80117c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ca:	4614      	mov	r4, r2
 80117cc:	461a      	mov	r2, r3
 80117ce:	4b09      	ldr	r3, [pc, #36]	@ (80117f4 <__assert_func+0x2c>)
 80117d0:	4605      	mov	r5, r0
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	68d8      	ldr	r0, [r3, #12]
 80117d6:	b954      	cbnz	r4, 80117ee <__assert_func+0x26>
 80117d8:	4b07      	ldr	r3, [pc, #28]	@ (80117f8 <__assert_func+0x30>)
 80117da:	461c      	mov	r4, r3
 80117dc:	9100      	str	r1, [sp, #0]
 80117de:	4907      	ldr	r1, [pc, #28]	@ (80117fc <__assert_func+0x34>)
 80117e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80117e4:	462b      	mov	r3, r5
 80117e6:	f000 fba3 	bl	8011f30 <fiprintf>
 80117ea:	f000 fc37 	bl	801205c <abort>
 80117ee:	4b04      	ldr	r3, [pc, #16]	@ (8011800 <__assert_func+0x38>)
 80117f0:	e7f4      	b.n	80117dc <__assert_func+0x14>
 80117f2:	bf00      	nop
 80117f4:	20000024 	.word	0x20000024
 80117f8:	08012705 	.word	0x08012705
 80117fc:	080126d7 	.word	0x080126d7
 8011800:	080126ca 	.word	0x080126ca

08011804 <_calloc_r>:
 8011804:	b570      	push	{r4, r5, r6, lr}
 8011806:	fba1 5402 	umull	r5, r4, r1, r2
 801180a:	b93c      	cbnz	r4, 801181c <_calloc_r+0x18>
 801180c:	4629      	mov	r1, r5
 801180e:	f7fd ffdf 	bl	800f7d0 <_malloc_r>
 8011812:	4606      	mov	r6, r0
 8011814:	b928      	cbnz	r0, 8011822 <_calloc_r+0x1e>
 8011816:	2600      	movs	r6, #0
 8011818:	4630      	mov	r0, r6
 801181a:	bd70      	pop	{r4, r5, r6, pc}
 801181c:	220c      	movs	r2, #12
 801181e:	6002      	str	r2, [r0, #0]
 8011820:	e7f9      	b.n	8011816 <_calloc_r+0x12>
 8011822:	462a      	mov	r2, r5
 8011824:	4621      	mov	r1, r4
 8011826:	f7fd f876 	bl	800e916 <memset>
 801182a:	e7f5      	b.n	8011818 <_calloc_r+0x14>

0801182c <rshift>:
 801182c:	6903      	ldr	r3, [r0, #16]
 801182e:	114a      	asrs	r2, r1, #5
 8011830:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011838:	f100 0414 	add.w	r4, r0, #20
 801183c:	dd45      	ble.n	80118ca <rshift+0x9e>
 801183e:	f011 011f 	ands.w	r1, r1, #31
 8011842:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011846:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801184a:	d10c      	bne.n	8011866 <rshift+0x3a>
 801184c:	f100 0710 	add.w	r7, r0, #16
 8011850:	4629      	mov	r1, r5
 8011852:	42b1      	cmp	r1, r6
 8011854:	d334      	bcc.n	80118c0 <rshift+0x94>
 8011856:	1a9b      	subs	r3, r3, r2
 8011858:	1eea      	subs	r2, r5, #3
 801185a:	009b      	lsls	r3, r3, #2
 801185c:	4296      	cmp	r6, r2
 801185e:	bf38      	it	cc
 8011860:	2300      	movcc	r3, #0
 8011862:	4423      	add	r3, r4
 8011864:	e015      	b.n	8011892 <rshift+0x66>
 8011866:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801186a:	f1c1 0820 	rsb	r8, r1, #32
 801186e:	f105 0e04 	add.w	lr, r5, #4
 8011872:	46a1      	mov	r9, r4
 8011874:	40cf      	lsrs	r7, r1
 8011876:	4576      	cmp	r6, lr
 8011878:	46f4      	mov	ip, lr
 801187a:	d815      	bhi.n	80118a8 <rshift+0x7c>
 801187c:	1a9a      	subs	r2, r3, r2
 801187e:	3501      	adds	r5, #1
 8011880:	0092      	lsls	r2, r2, #2
 8011882:	3a04      	subs	r2, #4
 8011884:	42ae      	cmp	r6, r5
 8011886:	bf38      	it	cc
 8011888:	2200      	movcc	r2, #0
 801188a:	18a3      	adds	r3, r4, r2
 801188c:	50a7      	str	r7, [r4, r2]
 801188e:	b107      	cbz	r7, 8011892 <rshift+0x66>
 8011890:	3304      	adds	r3, #4
 8011892:	1b1a      	subs	r2, r3, r4
 8011894:	42a3      	cmp	r3, r4
 8011896:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801189a:	bf08      	it	eq
 801189c:	2300      	moveq	r3, #0
 801189e:	6102      	str	r2, [r0, #16]
 80118a0:	bf08      	it	eq
 80118a2:	6143      	streq	r3, [r0, #20]
 80118a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118a8:	f8dc c000 	ldr.w	ip, [ip]
 80118ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80118b0:	ea4c 0707 	orr.w	r7, ip, r7
 80118b4:	f849 7b04 	str.w	r7, [r9], #4
 80118b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80118bc:	40cf      	lsrs	r7, r1
 80118be:	e7da      	b.n	8011876 <rshift+0x4a>
 80118c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80118c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80118c8:	e7c3      	b.n	8011852 <rshift+0x26>
 80118ca:	4623      	mov	r3, r4
 80118cc:	e7e1      	b.n	8011892 <rshift+0x66>

080118ce <__hexdig_fun>:
 80118ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80118d2:	2b09      	cmp	r3, #9
 80118d4:	d802      	bhi.n	80118dc <__hexdig_fun+0xe>
 80118d6:	3820      	subs	r0, #32
 80118d8:	b2c0      	uxtb	r0, r0
 80118da:	4770      	bx	lr
 80118dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80118e0:	2b05      	cmp	r3, #5
 80118e2:	d801      	bhi.n	80118e8 <__hexdig_fun+0x1a>
 80118e4:	3847      	subs	r0, #71	@ 0x47
 80118e6:	e7f7      	b.n	80118d8 <__hexdig_fun+0xa>
 80118e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80118ec:	2b05      	cmp	r3, #5
 80118ee:	d801      	bhi.n	80118f4 <__hexdig_fun+0x26>
 80118f0:	3827      	subs	r0, #39	@ 0x27
 80118f2:	e7f1      	b.n	80118d8 <__hexdig_fun+0xa>
 80118f4:	2000      	movs	r0, #0
 80118f6:	4770      	bx	lr

080118f8 <__gethex>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	b085      	sub	sp, #20
 80118fe:	468a      	mov	sl, r1
 8011900:	4690      	mov	r8, r2
 8011902:	9302      	str	r3, [sp, #8]
 8011904:	680b      	ldr	r3, [r1, #0]
 8011906:	9001      	str	r0, [sp, #4]
 8011908:	1c9c      	adds	r4, r3, #2
 801190a:	46a1      	mov	r9, r4
 801190c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011910:	2830      	cmp	r0, #48	@ 0x30
 8011912:	d0fa      	beq.n	801190a <__gethex+0x12>
 8011914:	eba9 0303 	sub.w	r3, r9, r3
 8011918:	f1a3 0b02 	sub.w	fp, r3, #2
 801191c:	f7ff ffd7 	bl	80118ce <__hexdig_fun>
 8011920:	4605      	mov	r5, r0
 8011922:	2800      	cmp	r0, #0
 8011924:	d166      	bne.n	80119f4 <__gethex+0xfc>
 8011926:	2201      	movs	r2, #1
 8011928:	499e      	ldr	r1, [pc, #632]	@ (8011ba4 <__gethex+0x2ac>)
 801192a:	4648      	mov	r0, r9
 801192c:	f7ff ff12 	bl	8011754 <strncmp>
 8011930:	4607      	mov	r7, r0
 8011932:	2800      	cmp	r0, #0
 8011934:	d165      	bne.n	8011a02 <__gethex+0x10a>
 8011936:	f899 0001 	ldrb.w	r0, [r9, #1]
 801193a:	4626      	mov	r6, r4
 801193c:	f7ff ffc7 	bl	80118ce <__hexdig_fun>
 8011940:	2800      	cmp	r0, #0
 8011942:	d060      	beq.n	8011a06 <__gethex+0x10e>
 8011944:	4623      	mov	r3, r4
 8011946:	7818      	ldrb	r0, [r3, #0]
 8011948:	4699      	mov	r9, r3
 801194a:	3301      	adds	r3, #1
 801194c:	2830      	cmp	r0, #48	@ 0x30
 801194e:	d0fa      	beq.n	8011946 <__gethex+0x4e>
 8011950:	f7ff ffbd 	bl	80118ce <__hexdig_fun>
 8011954:	fab0 f580 	clz	r5, r0
 8011958:	f04f 0b01 	mov.w	fp, #1
 801195c:	096d      	lsrs	r5, r5, #5
 801195e:	464a      	mov	r2, r9
 8011960:	4616      	mov	r6, r2
 8011962:	3201      	adds	r2, #1
 8011964:	7830      	ldrb	r0, [r6, #0]
 8011966:	f7ff ffb2 	bl	80118ce <__hexdig_fun>
 801196a:	2800      	cmp	r0, #0
 801196c:	d1f8      	bne.n	8011960 <__gethex+0x68>
 801196e:	2201      	movs	r2, #1
 8011970:	498c      	ldr	r1, [pc, #560]	@ (8011ba4 <__gethex+0x2ac>)
 8011972:	4630      	mov	r0, r6
 8011974:	f7ff feee 	bl	8011754 <strncmp>
 8011978:	2800      	cmp	r0, #0
 801197a:	d13e      	bne.n	80119fa <__gethex+0x102>
 801197c:	b944      	cbnz	r4, 8011990 <__gethex+0x98>
 801197e:	1c74      	adds	r4, r6, #1
 8011980:	4622      	mov	r2, r4
 8011982:	4616      	mov	r6, r2
 8011984:	3201      	adds	r2, #1
 8011986:	7830      	ldrb	r0, [r6, #0]
 8011988:	f7ff ffa1 	bl	80118ce <__hexdig_fun>
 801198c:	2800      	cmp	r0, #0
 801198e:	d1f8      	bne.n	8011982 <__gethex+0x8a>
 8011990:	1ba4      	subs	r4, r4, r6
 8011992:	00a7      	lsls	r7, r4, #2
 8011994:	7833      	ldrb	r3, [r6, #0]
 8011996:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801199a:	2b50      	cmp	r3, #80	@ 0x50
 801199c:	d13d      	bne.n	8011a1a <__gethex+0x122>
 801199e:	7873      	ldrb	r3, [r6, #1]
 80119a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80119a2:	d032      	beq.n	8011a0a <__gethex+0x112>
 80119a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80119a6:	d033      	beq.n	8011a10 <__gethex+0x118>
 80119a8:	1c71      	adds	r1, r6, #1
 80119aa:	2400      	movs	r4, #0
 80119ac:	7808      	ldrb	r0, [r1, #0]
 80119ae:	f7ff ff8e 	bl	80118ce <__hexdig_fun>
 80119b2:	1e43      	subs	r3, r0, #1
 80119b4:	b2db      	uxtb	r3, r3
 80119b6:	2b18      	cmp	r3, #24
 80119b8:	d82f      	bhi.n	8011a1a <__gethex+0x122>
 80119ba:	f1a0 0210 	sub.w	r2, r0, #16
 80119be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80119c2:	f7ff ff84 	bl	80118ce <__hexdig_fun>
 80119c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80119ca:	230a      	movs	r3, #10
 80119cc:	fa5f fc8c 	uxtb.w	ip, ip
 80119d0:	f1bc 0f18 	cmp.w	ip, #24
 80119d4:	d91e      	bls.n	8011a14 <__gethex+0x11c>
 80119d6:	b104      	cbz	r4, 80119da <__gethex+0xe2>
 80119d8:	4252      	negs	r2, r2
 80119da:	4417      	add	r7, r2
 80119dc:	f8ca 1000 	str.w	r1, [sl]
 80119e0:	b1ed      	cbz	r5, 8011a1e <__gethex+0x126>
 80119e2:	f1bb 0f00 	cmp.w	fp, #0
 80119e6:	bf0c      	ite	eq
 80119e8:	2506      	moveq	r5, #6
 80119ea:	2500      	movne	r5, #0
 80119ec:	4628      	mov	r0, r5
 80119ee:	b005      	add	sp, #20
 80119f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f4:	2500      	movs	r5, #0
 80119f6:	462c      	mov	r4, r5
 80119f8:	e7b1      	b.n	801195e <__gethex+0x66>
 80119fa:	2c00      	cmp	r4, #0
 80119fc:	d1c8      	bne.n	8011990 <__gethex+0x98>
 80119fe:	4627      	mov	r7, r4
 8011a00:	e7c8      	b.n	8011994 <__gethex+0x9c>
 8011a02:	464e      	mov	r6, r9
 8011a04:	462f      	mov	r7, r5
 8011a06:	2501      	movs	r5, #1
 8011a08:	e7c4      	b.n	8011994 <__gethex+0x9c>
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	1cb1      	adds	r1, r6, #2
 8011a0e:	e7cd      	b.n	80119ac <__gethex+0xb4>
 8011a10:	2401      	movs	r4, #1
 8011a12:	e7fb      	b.n	8011a0c <__gethex+0x114>
 8011a14:	fb03 0002 	mla	r0, r3, r2, r0
 8011a18:	e7cf      	b.n	80119ba <__gethex+0xc2>
 8011a1a:	4631      	mov	r1, r6
 8011a1c:	e7de      	b.n	80119dc <__gethex+0xe4>
 8011a1e:	eba6 0309 	sub.w	r3, r6, r9
 8011a22:	4629      	mov	r1, r5
 8011a24:	3b01      	subs	r3, #1
 8011a26:	2b07      	cmp	r3, #7
 8011a28:	dc0a      	bgt.n	8011a40 <__gethex+0x148>
 8011a2a:	9801      	ldr	r0, [sp, #4]
 8011a2c:	f7fd ff5c 	bl	800f8e8 <_Balloc>
 8011a30:	4604      	mov	r4, r0
 8011a32:	b940      	cbnz	r0, 8011a46 <__gethex+0x14e>
 8011a34:	4b5c      	ldr	r3, [pc, #368]	@ (8011ba8 <__gethex+0x2b0>)
 8011a36:	4602      	mov	r2, r0
 8011a38:	21e4      	movs	r1, #228	@ 0xe4
 8011a3a:	485c      	ldr	r0, [pc, #368]	@ (8011bac <__gethex+0x2b4>)
 8011a3c:	f7ff fec4 	bl	80117c8 <__assert_func>
 8011a40:	3101      	adds	r1, #1
 8011a42:	105b      	asrs	r3, r3, #1
 8011a44:	e7ef      	b.n	8011a26 <__gethex+0x12e>
 8011a46:	f100 0a14 	add.w	sl, r0, #20
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	4655      	mov	r5, sl
 8011a4e:	469b      	mov	fp, r3
 8011a50:	45b1      	cmp	r9, r6
 8011a52:	d337      	bcc.n	8011ac4 <__gethex+0x1cc>
 8011a54:	f845 bb04 	str.w	fp, [r5], #4
 8011a58:	eba5 050a 	sub.w	r5, r5, sl
 8011a5c:	4658      	mov	r0, fp
 8011a5e:	10ad      	asrs	r5, r5, #2
 8011a60:	6125      	str	r5, [r4, #16]
 8011a62:	016d      	lsls	r5, r5, #5
 8011a64:	f7fe f834 	bl	800fad0 <__hi0bits>
 8011a68:	f8d8 6000 	ldr.w	r6, [r8]
 8011a6c:	1a2d      	subs	r5, r5, r0
 8011a6e:	42b5      	cmp	r5, r6
 8011a70:	dd54      	ble.n	8011b1c <__gethex+0x224>
 8011a72:	1bad      	subs	r5, r5, r6
 8011a74:	4620      	mov	r0, r4
 8011a76:	4629      	mov	r1, r5
 8011a78:	f7fe fbd1 	bl	801021e <__any_on>
 8011a7c:	4681      	mov	r9, r0
 8011a7e:	b178      	cbz	r0, 8011aa0 <__gethex+0x1a8>
 8011a80:	1e6b      	subs	r3, r5, #1
 8011a82:	f04f 0901 	mov.w	r9, #1
 8011a86:	1159      	asrs	r1, r3, #5
 8011a88:	f003 021f 	and.w	r2, r3, #31
 8011a8c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011a90:	fa09 f202 	lsl.w	r2, r9, r2
 8011a94:	420a      	tst	r2, r1
 8011a96:	d003      	beq.n	8011aa0 <__gethex+0x1a8>
 8011a98:	454b      	cmp	r3, r9
 8011a9a:	dc36      	bgt.n	8011b0a <__gethex+0x212>
 8011a9c:	f04f 0902 	mov.w	r9, #2
 8011aa0:	442f      	add	r7, r5
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	4620      	mov	r0, r4
 8011aa6:	f7ff fec1 	bl	801182c <rshift>
 8011aaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011aae:	42bb      	cmp	r3, r7
 8011ab0:	da42      	bge.n	8011b38 <__gethex+0x240>
 8011ab2:	4621      	mov	r1, r4
 8011ab4:	9801      	ldr	r0, [sp, #4]
 8011ab6:	f7fd ff57 	bl	800f968 <_Bfree>
 8011aba:	2300      	movs	r3, #0
 8011abc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011abe:	25a3      	movs	r5, #163	@ 0xa3
 8011ac0:	6013      	str	r3, [r2, #0]
 8011ac2:	e793      	b.n	80119ec <__gethex+0xf4>
 8011ac4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011ac8:	2a2e      	cmp	r2, #46	@ 0x2e
 8011aca:	d012      	beq.n	8011af2 <__gethex+0x1fa>
 8011acc:	2b20      	cmp	r3, #32
 8011ace:	d104      	bne.n	8011ada <__gethex+0x1e2>
 8011ad0:	f845 bb04 	str.w	fp, [r5], #4
 8011ad4:	f04f 0b00 	mov.w	fp, #0
 8011ad8:	465b      	mov	r3, fp
 8011ada:	7830      	ldrb	r0, [r6, #0]
 8011adc:	9303      	str	r3, [sp, #12]
 8011ade:	f7ff fef6 	bl	80118ce <__hexdig_fun>
 8011ae2:	9b03      	ldr	r3, [sp, #12]
 8011ae4:	f000 000f 	and.w	r0, r0, #15
 8011ae8:	4098      	lsls	r0, r3
 8011aea:	3304      	adds	r3, #4
 8011aec:	ea4b 0b00 	orr.w	fp, fp, r0
 8011af0:	e7ae      	b.n	8011a50 <__gethex+0x158>
 8011af2:	45b1      	cmp	r9, r6
 8011af4:	d8ea      	bhi.n	8011acc <__gethex+0x1d4>
 8011af6:	2201      	movs	r2, #1
 8011af8:	492a      	ldr	r1, [pc, #168]	@ (8011ba4 <__gethex+0x2ac>)
 8011afa:	4630      	mov	r0, r6
 8011afc:	9303      	str	r3, [sp, #12]
 8011afe:	f7ff fe29 	bl	8011754 <strncmp>
 8011b02:	9b03      	ldr	r3, [sp, #12]
 8011b04:	2800      	cmp	r0, #0
 8011b06:	d1e1      	bne.n	8011acc <__gethex+0x1d4>
 8011b08:	e7a2      	b.n	8011a50 <__gethex+0x158>
 8011b0a:	1ea9      	subs	r1, r5, #2
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f7fe fb86 	bl	801021e <__any_on>
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d0c2      	beq.n	8011a9c <__gethex+0x1a4>
 8011b16:	f04f 0903 	mov.w	r9, #3
 8011b1a:	e7c1      	b.n	8011aa0 <__gethex+0x1a8>
 8011b1c:	da09      	bge.n	8011b32 <__gethex+0x23a>
 8011b1e:	1b75      	subs	r5, r6, r5
 8011b20:	4621      	mov	r1, r4
 8011b22:	9801      	ldr	r0, [sp, #4]
 8011b24:	462a      	mov	r2, r5
 8011b26:	1b7f      	subs	r7, r7, r5
 8011b28:	f7fe f938 	bl	800fd9c <__lshift>
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	f100 0a14 	add.w	sl, r0, #20
 8011b32:	f04f 0900 	mov.w	r9, #0
 8011b36:	e7b8      	b.n	8011aaa <__gethex+0x1b2>
 8011b38:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011b3c:	42bd      	cmp	r5, r7
 8011b3e:	dd6f      	ble.n	8011c20 <__gethex+0x328>
 8011b40:	1bed      	subs	r5, r5, r7
 8011b42:	42ae      	cmp	r6, r5
 8011b44:	dc34      	bgt.n	8011bb0 <__gethex+0x2b8>
 8011b46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	d022      	beq.n	8011b94 <__gethex+0x29c>
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	d024      	beq.n	8011b9c <__gethex+0x2a4>
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d115      	bne.n	8011b82 <__gethex+0x28a>
 8011b56:	42ae      	cmp	r6, r5
 8011b58:	d113      	bne.n	8011b82 <__gethex+0x28a>
 8011b5a:	2e01      	cmp	r6, #1
 8011b5c:	d10b      	bne.n	8011b76 <__gethex+0x27e>
 8011b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011b62:	2562      	movs	r5, #98	@ 0x62
 8011b64:	9a02      	ldr	r2, [sp, #8]
 8011b66:	6013      	str	r3, [r2, #0]
 8011b68:	2301      	movs	r3, #1
 8011b6a:	6123      	str	r3, [r4, #16]
 8011b6c:	f8ca 3000 	str.w	r3, [sl]
 8011b70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b72:	601c      	str	r4, [r3, #0]
 8011b74:	e73a      	b.n	80119ec <__gethex+0xf4>
 8011b76:	1e71      	subs	r1, r6, #1
 8011b78:	4620      	mov	r0, r4
 8011b7a:	f7fe fb50 	bl	801021e <__any_on>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d1ed      	bne.n	8011b5e <__gethex+0x266>
 8011b82:	4621      	mov	r1, r4
 8011b84:	9801      	ldr	r0, [sp, #4]
 8011b86:	f7fd feef 	bl	800f968 <_Bfree>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b8e:	2550      	movs	r5, #80	@ 0x50
 8011b90:	6013      	str	r3, [r2, #0]
 8011b92:	e72b      	b.n	80119ec <__gethex+0xf4>
 8011b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d1f3      	bne.n	8011b82 <__gethex+0x28a>
 8011b9a:	e7e0      	b.n	8011b5e <__gethex+0x266>
 8011b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d1dd      	bne.n	8011b5e <__gethex+0x266>
 8011ba2:	e7ee      	b.n	8011b82 <__gethex+0x28a>
 8011ba4:	08012558 	.word	0x08012558
 8011ba8:	080123ed 	.word	0x080123ed
 8011bac:	08012706 	.word	0x08012706
 8011bb0:	1e6f      	subs	r7, r5, #1
 8011bb2:	f1b9 0f00 	cmp.w	r9, #0
 8011bb6:	d130      	bne.n	8011c1a <__gethex+0x322>
 8011bb8:	b127      	cbz	r7, 8011bc4 <__gethex+0x2cc>
 8011bba:	4639      	mov	r1, r7
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f7fe fb2e 	bl	801021e <__any_on>
 8011bc2:	4681      	mov	r9, r0
 8011bc4:	117a      	asrs	r2, r7, #5
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	f007 071f 	and.w	r7, r7, #31
 8011bcc:	4629      	mov	r1, r5
 8011bce:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	40bb      	lsls	r3, r7
 8011bd6:	1b76      	subs	r6, r6, r5
 8011bd8:	2502      	movs	r5, #2
 8011bda:	4213      	tst	r3, r2
 8011bdc:	bf18      	it	ne
 8011bde:	f049 0902 	orrne.w	r9, r9, #2
 8011be2:	f7ff fe23 	bl	801182c <rshift>
 8011be6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8011bea:	f1b9 0f00 	cmp.w	r9, #0
 8011bee:	d047      	beq.n	8011c80 <__gethex+0x388>
 8011bf0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011bf4:	2b02      	cmp	r3, #2
 8011bf6:	d015      	beq.n	8011c24 <__gethex+0x32c>
 8011bf8:	2b03      	cmp	r3, #3
 8011bfa:	d017      	beq.n	8011c2c <__gethex+0x334>
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	d109      	bne.n	8011c14 <__gethex+0x31c>
 8011c00:	f019 0f02 	tst.w	r9, #2
 8011c04:	d006      	beq.n	8011c14 <__gethex+0x31c>
 8011c06:	f8da 3000 	ldr.w	r3, [sl]
 8011c0a:	ea49 0903 	orr.w	r9, r9, r3
 8011c0e:	f019 0f01 	tst.w	r9, #1
 8011c12:	d10e      	bne.n	8011c32 <__gethex+0x33a>
 8011c14:	f045 0510 	orr.w	r5, r5, #16
 8011c18:	e032      	b.n	8011c80 <__gethex+0x388>
 8011c1a:	f04f 0901 	mov.w	r9, #1
 8011c1e:	e7d1      	b.n	8011bc4 <__gethex+0x2cc>
 8011c20:	2501      	movs	r5, #1
 8011c22:	e7e2      	b.n	8011bea <__gethex+0x2f2>
 8011c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c26:	f1c3 0301 	rsb	r3, r3, #1
 8011c2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d0f0      	beq.n	8011c14 <__gethex+0x31c>
 8011c32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011c36:	f104 0314 	add.w	r3, r4, #20
 8011c3a:	f04f 0c00 	mov.w	ip, #0
 8011c3e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011c42:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c4c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011c50:	d01b      	beq.n	8011c8a <__gethex+0x392>
 8011c52:	3201      	adds	r2, #1
 8011c54:	6002      	str	r2, [r0, #0]
 8011c56:	2d02      	cmp	r5, #2
 8011c58:	f104 0314 	add.w	r3, r4, #20
 8011c5c:	d13c      	bne.n	8011cd8 <__gethex+0x3e0>
 8011c5e:	f8d8 2000 	ldr.w	r2, [r8]
 8011c62:	3a01      	subs	r2, #1
 8011c64:	42b2      	cmp	r2, r6
 8011c66:	d109      	bne.n	8011c7c <__gethex+0x384>
 8011c68:	1171      	asrs	r1, r6, #5
 8011c6a:	2201      	movs	r2, #1
 8011c6c:	f006 061f 	and.w	r6, r6, #31
 8011c70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c74:	fa02 f606 	lsl.w	r6, r2, r6
 8011c78:	421e      	tst	r6, r3
 8011c7a:	d13a      	bne.n	8011cf2 <__gethex+0x3fa>
 8011c7c:	f045 0520 	orr.w	r5, r5, #32
 8011c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c82:	601c      	str	r4, [r3, #0]
 8011c84:	9b02      	ldr	r3, [sp, #8]
 8011c86:	601f      	str	r7, [r3, #0]
 8011c88:	e6b0      	b.n	80119ec <__gethex+0xf4>
 8011c8a:	4299      	cmp	r1, r3
 8011c8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011c90:	d8d9      	bhi.n	8011c46 <__gethex+0x34e>
 8011c92:	68a3      	ldr	r3, [r4, #8]
 8011c94:	459b      	cmp	fp, r3
 8011c96:	db17      	blt.n	8011cc8 <__gethex+0x3d0>
 8011c98:	6861      	ldr	r1, [r4, #4]
 8011c9a:	9801      	ldr	r0, [sp, #4]
 8011c9c:	3101      	adds	r1, #1
 8011c9e:	f7fd fe23 	bl	800f8e8 <_Balloc>
 8011ca2:	4681      	mov	r9, r0
 8011ca4:	b918      	cbnz	r0, 8011cae <__gethex+0x3b6>
 8011ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8011d10 <__gethex+0x418>)
 8011ca8:	4602      	mov	r2, r0
 8011caa:	2184      	movs	r1, #132	@ 0x84
 8011cac:	e6c5      	b.n	8011a3a <__gethex+0x142>
 8011cae:	6922      	ldr	r2, [r4, #16]
 8011cb0:	f104 010c 	add.w	r1, r4, #12
 8011cb4:	300c      	adds	r0, #12
 8011cb6:	3202      	adds	r2, #2
 8011cb8:	0092      	lsls	r2, r2, #2
 8011cba:	f7ff fd6d 	bl	8011798 <memcpy>
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	464c      	mov	r4, r9
 8011cc2:	9801      	ldr	r0, [sp, #4]
 8011cc4:	f7fd fe50 	bl	800f968 <_Bfree>
 8011cc8:	6923      	ldr	r3, [r4, #16]
 8011cca:	1c5a      	adds	r2, r3, #1
 8011ccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011cd0:	6122      	str	r2, [r4, #16]
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	615a      	str	r2, [r3, #20]
 8011cd6:	e7be      	b.n	8011c56 <__gethex+0x35e>
 8011cd8:	6922      	ldr	r2, [r4, #16]
 8011cda:	455a      	cmp	r2, fp
 8011cdc:	dd0b      	ble.n	8011cf6 <__gethex+0x3fe>
 8011cde:	2101      	movs	r1, #1
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f7ff fda3 	bl	801182c <rshift>
 8011ce6:	3701      	adds	r7, #1
 8011ce8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011cec:	42bb      	cmp	r3, r7
 8011cee:	f6ff aee0 	blt.w	8011ab2 <__gethex+0x1ba>
 8011cf2:	2501      	movs	r5, #1
 8011cf4:	e7c2      	b.n	8011c7c <__gethex+0x384>
 8011cf6:	f016 061f 	ands.w	r6, r6, #31
 8011cfa:	d0fa      	beq.n	8011cf2 <__gethex+0x3fa>
 8011cfc:	4453      	add	r3, sl
 8011cfe:	f1c6 0620 	rsb	r6, r6, #32
 8011d02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8011d06:	f7fd fee3 	bl	800fad0 <__hi0bits>
 8011d0a:	42b0      	cmp	r0, r6
 8011d0c:	dbe7      	blt.n	8011cde <__gethex+0x3e6>
 8011d0e:	e7f0      	b.n	8011cf2 <__gethex+0x3fa>
 8011d10:	080123ed 	.word	0x080123ed

08011d14 <L_shift>:
 8011d14:	f1c2 0208 	rsb	r2, r2, #8
 8011d18:	0092      	lsls	r2, r2, #2
 8011d1a:	b570      	push	{r4, r5, r6, lr}
 8011d1c:	f1c2 0620 	rsb	r6, r2, #32
 8011d20:	6843      	ldr	r3, [r0, #4]
 8011d22:	6804      	ldr	r4, [r0, #0]
 8011d24:	fa03 f506 	lsl.w	r5, r3, r6
 8011d28:	40d3      	lsrs	r3, r2
 8011d2a:	432c      	orrs	r4, r5
 8011d2c:	6004      	str	r4, [r0, #0]
 8011d2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8011d32:	4288      	cmp	r0, r1
 8011d34:	d3f4      	bcc.n	8011d20 <L_shift+0xc>
 8011d36:	bd70      	pop	{r4, r5, r6, pc}

08011d38 <__match>:
 8011d38:	6803      	ldr	r3, [r0, #0]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	b530      	push	{r4, r5, lr}
 8011d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d42:	b914      	cbnz	r4, 8011d4a <__match+0x12>
 8011d44:	6003      	str	r3, [r0, #0]
 8011d46:	2001      	movs	r0, #1
 8011d48:	bd30      	pop	{r4, r5, pc}
 8011d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d4e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011d52:	2d19      	cmp	r5, #25
 8011d54:	bf98      	it	ls
 8011d56:	3220      	addls	r2, #32
 8011d58:	42a2      	cmp	r2, r4
 8011d5a:	d0f0      	beq.n	8011d3e <__match+0x6>
 8011d5c:	2000      	movs	r0, #0
 8011d5e:	e7f3      	b.n	8011d48 <__match+0x10>

08011d60 <__hexnan>:
 8011d60:	680b      	ldr	r3, [r1, #0]
 8011d62:	6801      	ldr	r1, [r0, #0]
 8011d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d68:	115e      	asrs	r6, r3, #5
 8011d6a:	f013 031f 	ands.w	r3, r3, #31
 8011d6e:	f04f 0500 	mov.w	r5, #0
 8011d72:	b087      	sub	sp, #28
 8011d74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d78:	4682      	mov	sl, r0
 8011d7a:	4690      	mov	r8, r2
 8011d7c:	46ab      	mov	fp, r5
 8011d7e:	bf18      	it	ne
 8011d80:	3604      	addne	r6, #4
 8011d82:	9301      	str	r3, [sp, #4]
 8011d84:	9502      	str	r5, [sp, #8]
 8011d86:	1f37      	subs	r7, r6, #4
 8011d88:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d8c:	46b9      	mov	r9, r7
 8011d8e:	463c      	mov	r4, r7
 8011d90:	1c4b      	adds	r3, r1, #1
 8011d92:	784a      	ldrb	r2, [r1, #1]
 8011d94:	9303      	str	r3, [sp, #12]
 8011d96:	b342      	cbz	r2, 8011dea <__hexnan+0x8a>
 8011d98:	4610      	mov	r0, r2
 8011d9a:	9105      	str	r1, [sp, #20]
 8011d9c:	9204      	str	r2, [sp, #16]
 8011d9e:	f7ff fd96 	bl	80118ce <__hexdig_fun>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	d151      	bne.n	8011e4a <__hexnan+0xea>
 8011da6:	9a04      	ldr	r2, [sp, #16]
 8011da8:	9905      	ldr	r1, [sp, #20]
 8011daa:	2a20      	cmp	r2, #32
 8011dac:	d818      	bhi.n	8011de0 <__hexnan+0x80>
 8011dae:	9b02      	ldr	r3, [sp, #8]
 8011db0:	459b      	cmp	fp, r3
 8011db2:	dd13      	ble.n	8011ddc <__hexnan+0x7c>
 8011db4:	454c      	cmp	r4, r9
 8011db6:	d206      	bcs.n	8011dc6 <__hexnan+0x66>
 8011db8:	2d07      	cmp	r5, #7
 8011dba:	dc04      	bgt.n	8011dc6 <__hexnan+0x66>
 8011dbc:	462a      	mov	r2, r5
 8011dbe:	4649      	mov	r1, r9
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f7ff ffa7 	bl	8011d14 <L_shift>
 8011dc6:	4544      	cmp	r4, r8
 8011dc8:	d951      	bls.n	8011e6e <__hexnan+0x10e>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f1a4 0904 	sub.w	r9, r4, #4
 8011dd0:	f8cd b008 	str.w	fp, [sp, #8]
 8011dd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8011dd8:	461d      	mov	r5, r3
 8011dda:	464c      	mov	r4, r9
 8011ddc:	9903      	ldr	r1, [sp, #12]
 8011dde:	e7d7      	b.n	8011d90 <__hexnan+0x30>
 8011de0:	2a29      	cmp	r2, #41	@ 0x29
 8011de2:	d156      	bne.n	8011e92 <__hexnan+0x132>
 8011de4:	3102      	adds	r1, #2
 8011de6:	f8ca 1000 	str.w	r1, [sl]
 8011dea:	f1bb 0f00 	cmp.w	fp, #0
 8011dee:	d050      	beq.n	8011e92 <__hexnan+0x132>
 8011df0:	454c      	cmp	r4, r9
 8011df2:	d206      	bcs.n	8011e02 <__hexnan+0xa2>
 8011df4:	2d07      	cmp	r5, #7
 8011df6:	dc04      	bgt.n	8011e02 <__hexnan+0xa2>
 8011df8:	462a      	mov	r2, r5
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f7ff ff89 	bl	8011d14 <L_shift>
 8011e02:	4544      	cmp	r4, r8
 8011e04:	d935      	bls.n	8011e72 <__hexnan+0x112>
 8011e06:	f1a8 0204 	sub.w	r2, r8, #4
 8011e0a:	4623      	mov	r3, r4
 8011e0c:	f853 1b04 	ldr.w	r1, [r3], #4
 8011e10:	429f      	cmp	r7, r3
 8011e12:	f842 1f04 	str.w	r1, [r2, #4]!
 8011e16:	d2f9      	bcs.n	8011e0c <__hexnan+0xac>
 8011e18:	1b3b      	subs	r3, r7, r4
 8011e1a:	3e03      	subs	r6, #3
 8011e1c:	3401      	adds	r4, #1
 8011e1e:	2200      	movs	r2, #0
 8011e20:	f023 0303 	bic.w	r3, r3, #3
 8011e24:	3304      	adds	r3, #4
 8011e26:	42b4      	cmp	r4, r6
 8011e28:	bf88      	it	hi
 8011e2a:	2304      	movhi	r3, #4
 8011e2c:	4443      	add	r3, r8
 8011e2e:	f843 2b04 	str.w	r2, [r3], #4
 8011e32:	429f      	cmp	r7, r3
 8011e34:	d2fb      	bcs.n	8011e2e <__hexnan+0xce>
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	b91b      	cbnz	r3, 8011e42 <__hexnan+0xe2>
 8011e3a:	4547      	cmp	r7, r8
 8011e3c:	d127      	bne.n	8011e8e <__hexnan+0x12e>
 8011e3e:	2301      	movs	r3, #1
 8011e40:	603b      	str	r3, [r7, #0]
 8011e42:	2005      	movs	r0, #5
 8011e44:	b007      	add	sp, #28
 8011e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e4a:	3501      	adds	r5, #1
 8011e4c:	f10b 0b01 	add.w	fp, fp, #1
 8011e50:	2d08      	cmp	r5, #8
 8011e52:	dd05      	ble.n	8011e60 <__hexnan+0x100>
 8011e54:	4544      	cmp	r4, r8
 8011e56:	d9c1      	bls.n	8011ddc <__hexnan+0x7c>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	3c04      	subs	r4, #4
 8011e5c:	2501      	movs	r5, #1
 8011e5e:	6023      	str	r3, [r4, #0]
 8011e60:	6822      	ldr	r2, [r4, #0]
 8011e62:	f000 000f 	and.w	r0, r0, #15
 8011e66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011e6a:	6020      	str	r0, [r4, #0]
 8011e6c:	e7b6      	b.n	8011ddc <__hexnan+0x7c>
 8011e6e:	2508      	movs	r5, #8
 8011e70:	e7b4      	b.n	8011ddc <__hexnan+0x7c>
 8011e72:	9b01      	ldr	r3, [sp, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d0de      	beq.n	8011e36 <__hexnan+0xd6>
 8011e78:	f1c3 0320 	rsb	r3, r3, #32
 8011e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e80:	40da      	lsrs	r2, r3
 8011e82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011e86:	4013      	ands	r3, r2
 8011e88:	f846 3c04 	str.w	r3, [r6, #-4]
 8011e8c:	e7d3      	b.n	8011e36 <__hexnan+0xd6>
 8011e8e:	3f04      	subs	r7, #4
 8011e90:	e7d1      	b.n	8011e36 <__hexnan+0xd6>
 8011e92:	2004      	movs	r0, #4
 8011e94:	e7d6      	b.n	8011e44 <__hexnan+0xe4>

08011e96 <__ascii_mbtowc>:
 8011e96:	b082      	sub	sp, #8
 8011e98:	b901      	cbnz	r1, 8011e9c <__ascii_mbtowc+0x6>
 8011e9a:	a901      	add	r1, sp, #4
 8011e9c:	b142      	cbz	r2, 8011eb0 <__ascii_mbtowc+0x1a>
 8011e9e:	b14b      	cbz	r3, 8011eb4 <__ascii_mbtowc+0x1e>
 8011ea0:	7813      	ldrb	r3, [r2, #0]
 8011ea2:	600b      	str	r3, [r1, #0]
 8011ea4:	7812      	ldrb	r2, [r2, #0]
 8011ea6:	1e10      	subs	r0, r2, #0
 8011ea8:	bf18      	it	ne
 8011eaa:	2001      	movne	r0, #1
 8011eac:	b002      	add	sp, #8
 8011eae:	4770      	bx	lr
 8011eb0:	4610      	mov	r0, r2
 8011eb2:	e7fb      	b.n	8011eac <__ascii_mbtowc+0x16>
 8011eb4:	f06f 0001 	mvn.w	r0, #1
 8011eb8:	e7f8      	b.n	8011eac <__ascii_mbtowc+0x16>

08011eba <_realloc_r>:
 8011eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ebe:	4680      	mov	r8, r0
 8011ec0:	4615      	mov	r5, r2
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	b921      	cbnz	r1, 8011ed0 <_realloc_r+0x16>
 8011ec6:	4611      	mov	r1, r2
 8011ec8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	f7fd bc80 	b.w	800f7d0 <_malloc_r>
 8011ed0:	b92a      	cbnz	r2, 8011ede <_realloc_r+0x24>
 8011ed2:	f7fd fc09 	bl	800f6e8 <_free_r>
 8011ed6:	2400      	movs	r4, #0
 8011ed8:	4620      	mov	r0, r4
 8011eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ede:	f000 f8c4 	bl	801206a <_malloc_usable_size_r>
 8011ee2:	4285      	cmp	r5, r0
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	d802      	bhi.n	8011eee <_realloc_r+0x34>
 8011ee8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011eec:	d8f4      	bhi.n	8011ed8 <_realloc_r+0x1e>
 8011eee:	4629      	mov	r1, r5
 8011ef0:	4640      	mov	r0, r8
 8011ef2:	f7fd fc6d 	bl	800f7d0 <_malloc_r>
 8011ef6:	4607      	mov	r7, r0
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d0ec      	beq.n	8011ed6 <_realloc_r+0x1c>
 8011efc:	42b5      	cmp	r5, r6
 8011efe:	462a      	mov	r2, r5
 8011f00:	4621      	mov	r1, r4
 8011f02:	bf28      	it	cs
 8011f04:	4632      	movcs	r2, r6
 8011f06:	f7ff fc47 	bl	8011798 <memcpy>
 8011f0a:	4621      	mov	r1, r4
 8011f0c:	4640      	mov	r0, r8
 8011f0e:	463c      	mov	r4, r7
 8011f10:	f7fd fbea 	bl	800f6e8 <_free_r>
 8011f14:	e7e0      	b.n	8011ed8 <_realloc_r+0x1e>

08011f16 <__ascii_wctomb>:
 8011f16:	4603      	mov	r3, r0
 8011f18:	4608      	mov	r0, r1
 8011f1a:	b141      	cbz	r1, 8011f2e <__ascii_wctomb+0x18>
 8011f1c:	2aff      	cmp	r2, #255	@ 0xff
 8011f1e:	d904      	bls.n	8011f2a <__ascii_wctomb+0x14>
 8011f20:	228a      	movs	r2, #138	@ 0x8a
 8011f22:	f04f 30ff 	mov.w	r0, #4294967295
 8011f26:	601a      	str	r2, [r3, #0]
 8011f28:	4770      	bx	lr
 8011f2a:	2001      	movs	r0, #1
 8011f2c:	700a      	strb	r2, [r1, #0]
 8011f2e:	4770      	bx	lr

08011f30 <fiprintf>:
 8011f30:	b40e      	push	{r1, r2, r3}
 8011f32:	b503      	push	{r0, r1, lr}
 8011f34:	ab03      	add	r3, sp, #12
 8011f36:	4601      	mov	r1, r0
 8011f38:	4805      	ldr	r0, [pc, #20]	@ (8011f50 <fiprintf+0x20>)
 8011f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f3e:	6800      	ldr	r0, [r0, #0]
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	f7ff f995 	bl	8011270 <_vfiprintf_r>
 8011f46:	b002      	add	sp, #8
 8011f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f4c:	b003      	add	sp, #12
 8011f4e:	4770      	bx	lr
 8011f50:	20000024 	.word	0x20000024

08011f54 <__swhatbuf_r>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	460c      	mov	r4, r1
 8011f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f5c:	b096      	sub	sp, #88	@ 0x58
 8011f5e:	4615      	mov	r5, r2
 8011f60:	2900      	cmp	r1, #0
 8011f62:	461e      	mov	r6, r3
 8011f64:	da0c      	bge.n	8011f80 <__swhatbuf_r+0x2c>
 8011f66:	89a3      	ldrh	r3, [r4, #12]
 8011f68:	2100      	movs	r1, #0
 8011f6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f6e:	bf14      	ite	ne
 8011f70:	2340      	movne	r3, #64	@ 0x40
 8011f72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f76:	2000      	movs	r0, #0
 8011f78:	6031      	str	r1, [r6, #0]
 8011f7a:	602b      	str	r3, [r5, #0]
 8011f7c:	b016      	add	sp, #88	@ 0x58
 8011f7e:	bd70      	pop	{r4, r5, r6, pc}
 8011f80:	466a      	mov	r2, sp
 8011f82:	f000 f849 	bl	8012018 <_fstat_r>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	dbed      	blt.n	8011f66 <__swhatbuf_r+0x12>
 8011f8a:	9901      	ldr	r1, [sp, #4]
 8011f8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011f90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011f94:	4259      	negs	r1, r3
 8011f96:	4159      	adcs	r1, r3
 8011f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011f9c:	e7eb      	b.n	8011f76 <__swhatbuf_r+0x22>

08011f9e <__smakebuf_r>:
 8011f9e:	898b      	ldrh	r3, [r1, #12]
 8011fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fa2:	079d      	lsls	r5, r3, #30
 8011fa4:	4606      	mov	r6, r0
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	d507      	bpl.n	8011fba <__smakebuf_r+0x1c>
 8011faa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fae:	6023      	str	r3, [r4, #0]
 8011fb0:	6123      	str	r3, [r4, #16]
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	6163      	str	r3, [r4, #20]
 8011fb6:	b003      	add	sp, #12
 8011fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fba:	ab01      	add	r3, sp, #4
 8011fbc:	466a      	mov	r2, sp
 8011fbe:	f7ff ffc9 	bl	8011f54 <__swhatbuf_r>
 8011fc2:	9f00      	ldr	r7, [sp, #0]
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	4639      	mov	r1, r7
 8011fca:	f7fd fc01 	bl	800f7d0 <_malloc_r>
 8011fce:	b948      	cbnz	r0, 8011fe4 <__smakebuf_r+0x46>
 8011fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fd4:	059a      	lsls	r2, r3, #22
 8011fd6:	d4ee      	bmi.n	8011fb6 <__smakebuf_r+0x18>
 8011fd8:	f023 0303 	bic.w	r3, r3, #3
 8011fdc:	f043 0302 	orr.w	r3, r3, #2
 8011fe0:	81a3      	strh	r3, [r4, #12]
 8011fe2:	e7e2      	b.n	8011faa <__smakebuf_r+0xc>
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	6020      	str	r0, [r4, #0]
 8011fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fec:	81a3      	strh	r3, [r4, #12]
 8011fee:	9b01      	ldr	r3, [sp, #4]
 8011ff0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011ff4:	b15b      	cbz	r3, 801200e <__smakebuf_r+0x70>
 8011ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ffa:	4630      	mov	r0, r6
 8011ffc:	f000 f81e 	bl	801203c <_isatty_r>
 8012000:	b128      	cbz	r0, 801200e <__smakebuf_r+0x70>
 8012002:	89a3      	ldrh	r3, [r4, #12]
 8012004:	f023 0303 	bic.w	r3, r3, #3
 8012008:	f043 0301 	orr.w	r3, r3, #1
 801200c:	81a3      	strh	r3, [r4, #12]
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	431d      	orrs	r5, r3
 8012012:	81a5      	strh	r5, [r4, #12]
 8012014:	e7cf      	b.n	8011fb6 <__smakebuf_r+0x18>
	...

08012018 <_fstat_r>:
 8012018:	b538      	push	{r3, r4, r5, lr}
 801201a:	2300      	movs	r3, #0
 801201c:	4d06      	ldr	r5, [pc, #24]	@ (8012038 <_fstat_r+0x20>)
 801201e:	4604      	mov	r4, r0
 8012020:	4608      	mov	r0, r1
 8012022:	4611      	mov	r1, r2
 8012024:	602b      	str	r3, [r5, #0]
 8012026:	f7f1 f8dd 	bl	80031e4 <_fstat>
 801202a:	1c43      	adds	r3, r0, #1
 801202c:	d102      	bne.n	8012034 <_fstat_r+0x1c>
 801202e:	682b      	ldr	r3, [r5, #0]
 8012030:	b103      	cbz	r3, 8012034 <_fstat_r+0x1c>
 8012032:	6023      	str	r3, [r4, #0]
 8012034:	bd38      	pop	{r3, r4, r5, pc}
 8012036:	bf00      	nop
 8012038:	20004e28 	.word	0x20004e28

0801203c <_isatty_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	2300      	movs	r3, #0
 8012040:	4d05      	ldr	r5, [pc, #20]	@ (8012058 <_isatty_r+0x1c>)
 8012042:	4604      	mov	r4, r0
 8012044:	4608      	mov	r0, r1
 8012046:	602b      	str	r3, [r5, #0]
 8012048:	f7f1 f8dc 	bl	8003204 <_isatty>
 801204c:	1c43      	adds	r3, r0, #1
 801204e:	d102      	bne.n	8012056 <_isatty_r+0x1a>
 8012050:	682b      	ldr	r3, [r5, #0]
 8012052:	b103      	cbz	r3, 8012056 <_isatty_r+0x1a>
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	bd38      	pop	{r3, r4, r5, pc}
 8012058:	20004e28 	.word	0x20004e28

0801205c <abort>:
 801205c:	2006      	movs	r0, #6
 801205e:	b508      	push	{r3, lr}
 8012060:	f000 f834 	bl	80120cc <raise>
 8012064:	2001      	movs	r0, #1
 8012066:	f7f1 f86d 	bl	8003144 <_exit>

0801206a <_malloc_usable_size_r>:
 801206a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801206e:	1f18      	subs	r0, r3, #4
 8012070:	2b00      	cmp	r3, #0
 8012072:	bfbc      	itt	lt
 8012074:	580b      	ldrlt	r3, [r1, r0]
 8012076:	18c0      	addlt	r0, r0, r3
 8012078:	4770      	bx	lr

0801207a <_raise_r>:
 801207a:	291f      	cmp	r1, #31
 801207c:	b538      	push	{r3, r4, r5, lr}
 801207e:	4605      	mov	r5, r0
 8012080:	460c      	mov	r4, r1
 8012082:	d904      	bls.n	801208e <_raise_r+0x14>
 8012084:	2316      	movs	r3, #22
 8012086:	6003      	str	r3, [r0, #0]
 8012088:	f04f 30ff 	mov.w	r0, #4294967295
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012090:	b112      	cbz	r2, 8012098 <_raise_r+0x1e>
 8012092:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012096:	b94b      	cbnz	r3, 80120ac <_raise_r+0x32>
 8012098:	4628      	mov	r0, r5
 801209a:	f000 f831 	bl	8012100 <_getpid_r>
 801209e:	4622      	mov	r2, r4
 80120a0:	4601      	mov	r1, r0
 80120a2:	4628      	mov	r0, r5
 80120a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120a8:	f000 b818 	b.w	80120dc <_kill_r>
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d00a      	beq.n	80120c6 <_raise_r+0x4c>
 80120b0:	1c59      	adds	r1, r3, #1
 80120b2:	d103      	bne.n	80120bc <_raise_r+0x42>
 80120b4:	2316      	movs	r3, #22
 80120b6:	6003      	str	r3, [r0, #0]
 80120b8:	2001      	movs	r0, #1
 80120ba:	e7e7      	b.n	801208c <_raise_r+0x12>
 80120bc:	2100      	movs	r1, #0
 80120be:	4620      	mov	r0, r4
 80120c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80120c4:	4798      	blx	r3
 80120c6:	2000      	movs	r0, #0
 80120c8:	e7e0      	b.n	801208c <_raise_r+0x12>
	...

080120cc <raise>:
 80120cc:	4b02      	ldr	r3, [pc, #8]	@ (80120d8 <raise+0xc>)
 80120ce:	4601      	mov	r1, r0
 80120d0:	6818      	ldr	r0, [r3, #0]
 80120d2:	f7ff bfd2 	b.w	801207a <_raise_r>
 80120d6:	bf00      	nop
 80120d8:	20000024 	.word	0x20000024

080120dc <_kill_r>:
 80120dc:	b538      	push	{r3, r4, r5, lr}
 80120de:	2300      	movs	r3, #0
 80120e0:	4d06      	ldr	r5, [pc, #24]	@ (80120fc <_kill_r+0x20>)
 80120e2:	4604      	mov	r4, r0
 80120e4:	4608      	mov	r0, r1
 80120e6:	4611      	mov	r1, r2
 80120e8:	602b      	str	r3, [r5, #0]
 80120ea:	f7f1 f81b 	bl	8003124 <_kill>
 80120ee:	1c43      	adds	r3, r0, #1
 80120f0:	d102      	bne.n	80120f8 <_kill_r+0x1c>
 80120f2:	682b      	ldr	r3, [r5, #0]
 80120f4:	b103      	cbz	r3, 80120f8 <_kill_r+0x1c>
 80120f6:	6023      	str	r3, [r4, #0]
 80120f8:	bd38      	pop	{r3, r4, r5, pc}
 80120fa:	bf00      	nop
 80120fc:	20004e28 	.word	0x20004e28

08012100 <_getpid_r>:
 8012100:	f7f1 b808 	b.w	8003114 <_getpid>

08012104 <round>:
 8012104:	ec51 0b10 	vmov	r0, r1, d0
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801210e:	460b      	mov	r3, r1
 8012110:	4605      	mov	r5, r0
 8012112:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8012116:	2a13      	cmp	r2, #19
 8012118:	dc1b      	bgt.n	8012152 <round+0x4e>
 801211a:	2a00      	cmp	r2, #0
 801211c:	da0b      	bge.n	8012136 <round+0x32>
 801211e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8012122:	3201      	adds	r2, #1
 8012124:	bf04      	itt	eq
 8012126:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801212a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801212e:	2200      	movs	r2, #0
 8012130:	4619      	mov	r1, r3
 8012132:	4610      	mov	r0, r2
 8012134:	e015      	b.n	8012162 <round+0x5e>
 8012136:	4c15      	ldr	r4, [pc, #84]	@ (801218c <round+0x88>)
 8012138:	4114      	asrs	r4, r2
 801213a:	ea04 0601 	and.w	r6, r4, r1
 801213e:	4306      	orrs	r6, r0
 8012140:	d00f      	beq.n	8012162 <round+0x5e>
 8012142:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8012146:	fa41 f202 	asr.w	r2, r1, r2
 801214a:	4413      	add	r3, r2
 801214c:	ea23 0304 	bic.w	r3, r3, r4
 8012150:	e7ed      	b.n	801212e <round+0x2a>
 8012152:	2a33      	cmp	r2, #51	@ 0x33
 8012154:	dd08      	ble.n	8012168 <round+0x64>
 8012156:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801215a:	d102      	bne.n	8012162 <round+0x5e>
 801215c:	4602      	mov	r2, r0
 801215e:	f7ee f9c7 	bl	80004f0 <__adddf3>
 8012162:	ec41 0b10 	vmov	d0, r0, r1
 8012166:	bd70      	pop	{r4, r5, r6, pc}
 8012168:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801216c:	f04f 34ff 	mov.w	r4, #4294967295
 8012170:	40f4      	lsrs	r4, r6
 8012172:	4204      	tst	r4, r0
 8012174:	d0f5      	beq.n	8012162 <round+0x5e>
 8012176:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801217a:	2201      	movs	r2, #1
 801217c:	408a      	lsls	r2, r1
 801217e:	1952      	adds	r2, r2, r5
 8012180:	bf28      	it	cs
 8012182:	3301      	addcs	r3, #1
 8012184:	ea22 0204 	bic.w	r2, r2, r4
 8012188:	e7d2      	b.n	8012130 <round+0x2c>
 801218a:	bf00      	nop
 801218c:	000fffff 	.word	0x000fffff

08012190 <_init>:
 8012190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012192:	bf00      	nop
 8012194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012196:	bc08      	pop	{r3}
 8012198:	469e      	mov	lr, r3
 801219a:	4770      	bx	lr

0801219c <_fini>:
 801219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219e:	bf00      	nop
 80121a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80121a2:	bc08      	pop	{r3}
 80121a4:	469e      	mov	lr, r3
 80121a6:	4770      	bx	lr
