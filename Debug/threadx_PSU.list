
threadx_PSU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010570  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  080107c8  080107c8  000117c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cf8  08010cf8  000121d8  2**0
                  CONTENTS
  4 .ARM          00000008  08010cf8  08010cf8  00011cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d00  08010d00  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d00  08010d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d04  08010d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08010d08  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000220c  200001d8  08010ee0  000121d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200023e4  08010ee0  000123e4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ead  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee4  00000000  00000000  000360bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001374  00000000  00000000  0003c980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d91  00000000  00000000  0003dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fdb  00000000  00000000  00064a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf9e  00000000  00000000  0008aa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001779fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d7c  00000000  00000000  00177a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000dc  00000000  00000000  0017f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001d8 	.word	0x200001d8
 8000274:	00000000 	.word	0x00000000
 8000278:	080107b0 	.word	0x080107b0

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001dc 	.word	0x200001dc
 8000294:	080107b0 	.word	0x080107b0

08000298 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000298:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800029a:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800029e:	4918      	ldr	r1, [pc, #96]	@ (8000300 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 80002a0:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002a4:	4817      	ldr	r0, [pc, #92]	@ (8000304 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 80002a6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002ac:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002ae:	4816      	ldr	r0, [pc, #88]	@ (8000308 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002b0:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002b2:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002b4:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002b6:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002ba:	f647 41ff 	movw	r1, #31999	@ 0x7cff
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002be:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002c0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002c4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002c6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002ca:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ce:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002d2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002d6:	490d      	ldr	r1, [pc, #52]	@ (800030c <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002d8:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002e0:	f7ff bffe 	b.w	80002e0 <__tx_BadHandler>

080002e4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002ec:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ee:	f000 f895 	bl	800041c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002f6:	4770      	bx	lr

080002f8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002f8:	f7ff bffe 	b.w	80002f8 <__tx_NMIHandler>

080002fc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002fc:	f7ff bffe 	b.w	80002fc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000300:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000304:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 8000308:	20001c8c 	.word	0x20001c8c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 800030c:	40ff0000 	.word	0x40ff0000

08000310 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000310:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000314:	4a2d      	ldr	r2, [pc, #180]	@ (80003cc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000316:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000318:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800031c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000320:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000324:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000326:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800032a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800032e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000332:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000336:	f3bf 8f6f 	isb	sy

0800033a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800033a:	e7fe      	b.n	800033a <__tx_wait_here>

0800033c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800033c:	4824      	ldr	r0, [pc, #144]	@ (80003d0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800033e:	4a25      	ldr	r2, [pc, #148]	@ (80003d4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000340:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000344:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000346:	b191      	cbz	r1, 800036e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000348:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800034a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800034e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000352:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000356:	d101      	bne.n	800035c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000358:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800035c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	4c1e      	ldr	r4, [pc, #120]	@ (80003d8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800035e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000362:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000366:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000368:	b10d      	cbz	r5, 800036e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800036a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800036c:	6023      	str	r3, [r4, #0]

0800036e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800036e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000370:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000372:	b1d1      	cbz	r1, 80003aa <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000374:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000376:	b662      	cpsie	i

08000378 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000378:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037a:	4c17      	ldr	r4, [pc, #92]	@ (80003d8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800037c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800037e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000382:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000384:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000386:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800038a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800038e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000392:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000396:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800039a:	d101      	bne.n	80003a0 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800039c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003a0 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003a0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003a4:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a8:	4770      	bx	lr

080003aa <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003aa:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003ac:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003ae:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003b0:	b909      	cbnz	r1, 80003b6 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003b4:	e7f9      	b.n	80003aa <__tx_ts_wait>

080003b6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003b6:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003ba:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003be:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003c4:	e7d8      	b.n	8000378 <__tx_ts_restore>
 80003c6:	bf00      	nop

080003c8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c8:	4770      	bx	lr
 80003ca:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003cc:	20001d28 	.word	0x20001d28
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003d0:	20001c90 	.word	0x20001c90
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003d4:	20001c94 	.word	0x20001c94
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d8:	20002294 	.word	0x20002294

080003dc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003dc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003de:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003e2:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003e6:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ea:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003ec:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003f0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003f2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003f4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003f6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003fa:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003fc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003fe:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000400:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000402:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000404:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 8000406:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000408:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 800040e:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000410:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000412:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000416:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000418:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800041a:	4770      	bx	lr

0800041c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800041c:	4922      	ldr	r1, [pc, #136]	@ (80004a8 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800041e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000420:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000424:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000428:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800042a:	b13a      	cbz	r2, 800043c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800042c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000430:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000432:	b91a      	cbnz	r2, 800043c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000436:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800043a:	6018      	str	r0, [r3, #0]

0800043c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800043c:	491d      	ldr	r1, [pc, #116]	@ (80004b4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800043e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000440:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000442:	b122      	cbz	r2, 800044e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000444:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000446:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800044a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800044c:	e008      	b.n	8000460 <__tx_timer_done>

0800044e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800044e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000454:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000456:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000458:	d101      	bne.n	800045e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800045c:	6818      	ldr	r0, [r3, #0]

0800045e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800045e:	6008      	str	r0, [r1, #0]

08000460 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000460:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000462:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000464:	b912      	cbnz	r2, 800046c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000466:	4914      	ldr	r1, [pc, #80]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800046a:	b1c8      	cbz	r0, 80004a0 <__tx_timer_nothing_expired>

0800046c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800046c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800046e:	4912      	ldr	r1, [pc, #72]	@ (80004b8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000470:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000472:	b108      	cbz	r0, 8000478 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000474:	f00b f9d6 	bl	800b824 <_tx_timer_expiration_process>

08000478 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000478:	4b0d      	ldr	r3, [pc, #52]	@ (80004b0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800047a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800047c:	b172      	cbz	r2, 800049c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800047e:	f00b f925 	bl	800b6cc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000482:	4810      	ldr	r0, [pc, #64]	@ (80004c4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000484:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000486:	b949      	cbnz	r1, 800049c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800048a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800048c:	4a0f      	ldr	r2, [pc, #60]	@ (80004cc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800048e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000490:	480f      	ldr	r0, [pc, #60]	@ (80004d0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000496:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000498:	d000      	beq.n	800049c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800049a:	6002      	str	r2, [r0, #0]

0800049c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800049c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004a0 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004a0:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004a4:	4770      	bx	lr
 80004a6:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a8:	20001d34 	.word	0x20001d34
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004ac:	20002294 	.word	0x20002294
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004b0:	20001d38 	.word	0x20001d38
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004b4:	20001dc4 	.word	0x20001dc4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b8:	20001dc8 	.word	0x20001dc8
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004bc:	20001dc0 	.word	0x20001dc0
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004c0:	20001dbc 	.word	0x20001dbc
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c4:	20001d28 	.word	0x20001d28
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c8:	20001c90 	.word	0x20001c90
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004cc:	20001c94 	.word	0x20001c94
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d0:	e000ed04 	.word	0xe000ed04

080004d4 <strlen>:
 80004d4:	4603      	mov	r3, r0
 80004d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d1fb      	bne.n	80004d6 <strlen+0x2>
 80004de:	1a18      	subs	r0, r3, r0
 80004e0:	3801      	subs	r0, #1
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_dmul>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8de 	bleq	8000a38 <__aeabi_dmul+0x1dc>
 800087c:	442c      	add	r4, r5
 800087e:	ea81 0603 	eor.w	r6, r1, r3
 8000882:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000886:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800088a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800088e:	bf18      	it	ne
 8000890:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000894:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000898:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800089c:	d038      	beq.n	8000910 <__aeabi_dmul+0xb4>
 800089e:	fba0 ce02 	umull	ip, lr, r0, r2
 80008a2:	f04f 0500 	mov.w	r5, #0
 80008a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80008ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008b2:	f04f 0600 	mov.w	r6, #0
 80008b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008ba:	f09c 0f00 	teq	ip, #0
 80008be:	bf18      	it	ne
 80008c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80008c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80008cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80008d0:	d204      	bcs.n	80008dc <__aeabi_dmul+0x80>
 80008d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008d6:	416d      	adcs	r5, r5
 80008d8:	eb46 0606 	adc.w	r6, r6, r6
 80008dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f4:	bf88      	it	hi
 80008f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fa:	d81e      	bhi.n	800093a <__aeabi_dmul+0xde>
 80008fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000900:	bf08      	it	eq
 8000902:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000914:	ea46 0101 	orr.w	r1, r6, r1
 8000918:	ea40 0002 	orr.w	r0, r0, r2
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	f300 80ab 	bgt.w	8000a94 <__aeabi_dmul+0x238>
 800093e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000942:	bfde      	ittt	le
 8000944:	2000      	movle	r0, #0
 8000946:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800094a:	bd70      	pople	{r4, r5, r6, pc}
 800094c:	f1c4 0400 	rsb	r4, r4, #0
 8000950:	3c20      	subs	r4, #32
 8000952:	da35      	bge.n	80009c0 <__aeabi_dmul+0x164>
 8000954:	340c      	adds	r4, #12
 8000956:	dc1b      	bgt.n	8000990 <__aeabi_dmul+0x134>
 8000958:	f104 0414 	add.w	r4, r4, #20
 800095c:	f1c4 0520 	rsb	r5, r4, #32
 8000960:	fa00 f305 	lsl.w	r3, r0, r5
 8000964:	fa20 f004 	lsr.w	r0, r0, r4
 8000968:	fa01 f205 	lsl.w	r2, r1, r5
 800096c:	ea40 0002 	orr.w	r0, r0, r2
 8000970:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000974:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800097c:	fa21 f604 	lsr.w	r6, r1, r4
 8000980:	eb42 0106 	adc.w	r1, r2, r6
 8000984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000988:	bf08      	it	eq
 800098a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f1c4 040c 	rsb	r4, r4, #12
 8000994:	f1c4 0520 	rsb	r5, r4, #32
 8000998:	fa00 f304 	lsl.w	r3, r0, r4
 800099c:	fa20 f005 	lsr.w	r0, r0, r5
 80009a0:	fa01 f204 	lsl.w	r2, r1, r4
 80009a4:	ea40 0002 	orr.w	r0, r0, r2
 80009a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009b0:	f141 0100 	adc.w	r1, r1, #0
 80009b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b8:	bf08      	it	eq
 80009ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f1c4 0520 	rsb	r5, r4, #32
 80009c4:	fa00 f205 	lsl.w	r2, r0, r5
 80009c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009cc:	fa20 f304 	lsr.w	r3, r0, r4
 80009d0:	fa01 f205 	lsl.w	r2, r1, r5
 80009d4:	ea43 0302 	orr.w	r3, r3, r2
 80009d8:	fa21 f004 	lsr.w	r0, r1, r4
 80009dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009e0:	fa21 f204 	lsr.w	r2, r1, r4
 80009e4:	ea20 0002 	bic.w	r0, r0, r2
 80009e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f0:	bf08      	it	eq
 80009f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f094 0f00 	teq	r4, #0
 80009fc:	d10f      	bne.n	8000a1e <__aeabi_dmul+0x1c2>
 80009fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000a02:	0040      	lsls	r0, r0, #1
 8000a04:	eb41 0101 	adc.w	r1, r1, r1
 8000a08:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a0c:	bf08      	it	eq
 8000a0e:	3c01      	subeq	r4, #1
 8000a10:	d0f7      	beq.n	8000a02 <__aeabi_dmul+0x1a6>
 8000a12:	ea41 0106 	orr.w	r1, r1, r6
 8000a16:	f095 0f00 	teq	r5, #0
 8000a1a:	bf18      	it	ne
 8000a1c:	4770      	bxne	lr
 8000a1e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a22:	0052      	lsls	r2, r2, #1
 8000a24:	eb43 0303 	adc.w	r3, r3, r3
 8000a28:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a2c:	bf08      	it	eq
 8000a2e:	3d01      	subeq	r5, #1
 8000a30:	d0f7      	beq.n	8000a22 <__aeabi_dmul+0x1c6>
 8000a32:	ea43 0306 	orr.w	r3, r3, r6
 8000a36:	4770      	bx	lr
 8000a38:	ea94 0f0c 	teq	r4, ip
 8000a3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a40:	bf18      	it	ne
 8000a42:	ea95 0f0c 	teqne	r5, ip
 8000a46:	d00c      	beq.n	8000a62 <__aeabi_dmul+0x206>
 8000a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4c:	bf18      	it	ne
 8000a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a52:	d1d1      	bne.n	80009f8 <__aeabi_dmul+0x19c>
 8000a54:	ea81 0103 	eor.w	r1, r1, r3
 8000a58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
 8000a62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a66:	bf06      	itte	eq
 8000a68:	4610      	moveq	r0, r2
 8000a6a:	4619      	moveq	r1, r3
 8000a6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a70:	d019      	beq.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a72:	ea94 0f0c 	teq	r4, ip
 8000a76:	d102      	bne.n	8000a7e <__aeabi_dmul+0x222>
 8000a78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a7c:	d113      	bne.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a7e:	ea95 0f0c 	teq	r5, ip
 8000a82:	d105      	bne.n	8000a90 <__aeabi_dmul+0x234>
 8000a84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a88:	bf1c      	itt	ne
 8000a8a:	4610      	movne	r0, r2
 8000a8c:	4619      	movne	r1, r3
 8000a8e:	d10a      	bne.n	8000aa6 <__aeabi_dmul+0x24a>
 8000a90:	ea81 0103 	eor.w	r1, r1, r3
 8000a94:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a98:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000a9c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
 8000aa6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000aaa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000aae:	bd70      	pop	{r4, r5, r6, pc}

08000ab0 <__aeabi_ddiv>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ab6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000aba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000abe:	bf1d      	ittte	ne
 8000ac0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac4:	ea94 0f0c 	teqne	r4, ip
 8000ac8:	ea95 0f0c 	teqne	r5, ip
 8000acc:	f000 f8a7 	bleq	8000c1e <__aeabi_ddiv+0x16e>
 8000ad0:	eba4 0405 	sub.w	r4, r4, r5
 8000ad4:	ea81 0e03 	eor.w	lr, r1, r3
 8000ad8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000adc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ae0:	f000 8088 	beq.w	8000bf4 <__aeabi_ddiv+0x144>
 8000ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ae8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000aec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000af0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000af8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000afc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b00:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b04:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000b08:	429d      	cmp	r5, r3
 8000b0a:	bf08      	it	eq
 8000b0c:	4296      	cmpeq	r6, r2
 8000b0e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000b12:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000b16:	d202      	bcs.n	8000b1e <__aeabi_ddiv+0x6e>
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1e:	1ab6      	subs	r6, r6, r2
 8000b20:	eb65 0503 	sbc.w	r5, r5, r3
 8000b24:	085b      	lsrs	r3, r3, #1
 8000b26:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b2e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3a:	bf22      	ittt	cs
 8000b3c:	1ab6      	subcs	r6, r6, r2
 8000b3e:	4675      	movcs	r5, lr
 8000b40:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b52:	bf22      	ittt	cs
 8000b54:	1ab6      	subcs	r6, r6, r2
 8000b56:	4675      	movcs	r5, lr
 8000b58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b74:	085b      	lsrs	r3, r3, #1
 8000b76:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b82:	bf22      	ittt	cs
 8000b84:	1ab6      	subcs	r6, r6, r2
 8000b86:	4675      	movcs	r5, lr
 8000b88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b8c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b90:	d018      	beq.n	8000bc4 <__aeabi_ddiv+0x114>
 8000b92:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ba2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ba6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000baa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bae:	d1c0      	bne.n	8000b32 <__aeabi_ddiv+0x82>
 8000bb0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bb4:	d10b      	bne.n	8000bce <__aeabi_ddiv+0x11e>
 8000bb6:	ea41 0100 	orr.w	r1, r1, r0
 8000bba:	f04f 0000 	mov.w	r0, #0
 8000bbe:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000bc2:	e7b6      	b.n	8000b32 <__aeabi_ddiv+0x82>
 8000bc4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bc8:	bf04      	itt	eq
 8000bca:	4301      	orreq	r1, r0
 8000bcc:	2000      	moveq	r0, #0
 8000bce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000bd2:	bf88      	it	hi
 8000bd4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000bd8:	f63f aeaf 	bhi.w	800093a <__aeabi_dmul+0xde>
 8000bdc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000be0:	bf04      	itt	eq
 8000be2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bea:	f150 0000 	adcs.w	r0, r0, #0
 8000bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000bf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c00:	bfc2      	ittt	gt
 8000c02:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c0a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c0c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c10:	f04f 0e00 	mov.w	lr, #0
 8000c14:	3c01      	subs	r4, #1
 8000c16:	e690      	b.n	800093a <__aeabi_dmul+0xde>
 8000c18:	ea45 0e06 	orr.w	lr, r5, r6
 8000c1c:	e68d      	b.n	800093a <__aeabi_dmul+0xde>
 8000c1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c22:	ea94 0f0c 	teq	r4, ip
 8000c26:	bf08      	it	eq
 8000c28:	ea95 0f0c 	teqeq	r5, ip
 8000c2c:	f43f af3b 	beq.w	8000aa6 <__aeabi_dmul+0x24a>
 8000c30:	ea94 0f0c 	teq	r4, ip
 8000c34:	d10a      	bne.n	8000c4c <__aeabi_ddiv+0x19c>
 8000c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c3a:	f47f af34 	bne.w	8000aa6 <__aeabi_dmul+0x24a>
 8000c3e:	ea95 0f0c 	teq	r5, ip
 8000c42:	f47f af25 	bne.w	8000a90 <__aeabi_dmul+0x234>
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_dmul+0x24a>
 8000c4c:	ea95 0f0c 	teq	r5, ip
 8000c50:	d106      	bne.n	8000c60 <__aeabi_ddiv+0x1b0>
 8000c52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c56:	f43f aefd 	beq.w	8000a54 <__aeabi_dmul+0x1f8>
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	e722      	b.n	8000aa6 <__aeabi_dmul+0x24a>
 8000c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c64:	bf18      	it	ne
 8000c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c6a:	f47f aec5 	bne.w	80009f8 <__aeabi_dmul+0x19c>
 8000c6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c72:	f47f af0d 	bne.w	8000a90 <__aeabi_dmul+0x234>
 8000c76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c7a:	f47f aeeb 	bne.w	8000a54 <__aeabi_dmul+0x1f8>
 8000c7e:	e712      	b.n	8000aa6 <__aeabi_dmul+0x24a>

08000c80 <__gedf2>:
 8000c80:	f04f 3cff 	mov.w	ip, #4294967295
 8000c84:	e006      	b.n	8000c94 <__cmpdf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__ledf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	e002      	b.n	8000c94 <__cmpdf2+0x4>
 8000c8e:	bf00      	nop

08000c90 <__cmpdf2>:
 8000c90:	f04f 0c01 	mov.w	ip, #1
 8000c94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ca0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca4:	bf18      	it	ne
 8000ca6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000caa:	d01b      	beq.n	8000ce4 <__cmpdf2+0x54>
 8000cac:	b001      	add	sp, #4
 8000cae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cb2:	bf0c      	ite	eq
 8000cb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cb8:	ea91 0f03 	teqne	r1, r3
 8000cbc:	bf02      	ittt	eq
 8000cbe:	ea90 0f02 	teqeq	r0, r2
 8000cc2:	2000      	moveq	r0, #0
 8000cc4:	4770      	bxeq	lr
 8000cc6:	f110 0f00 	cmn.w	r0, #0
 8000cca:	ea91 0f03 	teq	r1, r3
 8000cce:	bf58      	it	pl
 8000cd0:	4299      	cmppl	r1, r3
 8000cd2:	bf08      	it	eq
 8000cd4:	4290      	cmpeq	r0, r2
 8000cd6:	bf2c      	ite	cs
 8000cd8:	17d8      	asrcs	r0, r3, #31
 8000cda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cde:	f040 0001 	orr.w	r0, r0, #1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cec:	d102      	bne.n	8000cf4 <__cmpdf2+0x64>
 8000cee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cf2:	d107      	bne.n	8000d04 <__cmpdf2+0x74>
 8000cf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cfc:	d1d6      	bne.n	8000cac <__cmpdf2+0x1c>
 8000cfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d02:	d0d3      	beq.n	8000cac <__cmpdf2+0x1c>
 8000d04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <__aeabi_cdrcmple>:
 8000d0c:	4684      	mov	ip, r0
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4662      	mov	r2, ip
 8000d12:	468c      	mov	ip, r1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4663      	mov	r3, ip
 8000d18:	e000      	b.n	8000d1c <__aeabi_cdcmpeq>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_cdcmpeq>:
 8000d1c:	b501      	push	{r0, lr}
 8000d1e:	f7ff ffb7 	bl	8000c90 <__cmpdf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd01      	pop	{r0, pc}

08000d2c <__aeabi_dcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_dcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_dcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cdcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_dcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffce 	bl	8000d0c <__aeabi_cdrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_dcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc4 	bl	8000d0c <__aeabi_cdrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_dcmpun>:
 8000d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d98:	d102      	bne.n	8000da0 <__aeabi_dcmpun+0x10>
 8000d9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d9e:	d10a      	bne.n	8000db6 <__aeabi_dcmpun+0x26>
 8000da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__aeabi_dcmpun+0x20>
 8000daa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dae:	d102      	bne.n	8000db6 <__aeabi_dcmpun+0x26>
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4770      	bx	lr
 8000db6:	f04f 0001 	mov.w	r0, #1
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_d2iz>:
 8000dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000dc4:	d215      	bcs.n	8000df2 <__aeabi_d2iz+0x36>
 8000dc6:	d511      	bpl.n	8000dec <__aeabi_d2iz+0x30>
 8000dc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dd0:	d912      	bls.n	8000df8 <__aeabi_d2iz+0x3c>
 8000dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000de2:	fa23 f002 	lsr.w	r0, r3, r2
 8000de6:	bf18      	it	ne
 8000de8:	4240      	negne	r0, r0
 8000dea:	4770      	bx	lr
 8000dec:	f04f 0000 	mov.w	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000df6:	d105      	bne.n	8000e04 <__aeabi_d2iz+0x48>
 8000df8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e02:	4770      	bx	lr
 8000e04:	f04f 0000 	mov.w	r0, #0
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <__aeabi_d2uiz>:
 8000e0c:	004a      	lsls	r2, r1, #1
 8000e0e:	d211      	bcs.n	8000e34 <__aeabi_d2uiz+0x28>
 8000e10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e14:	d211      	bcs.n	8000e3a <__aeabi_d2uiz+0x2e>
 8000e16:	d50d      	bpl.n	8000e34 <__aeabi_d2uiz+0x28>
 8000e18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e20:	d40e      	bmi.n	8000e40 <__aeabi_d2uiz+0x34>
 8000e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e32:	4770      	bx	lr
 8000e34:	f04f 0000 	mov.w	r0, #0
 8000e38:	4770      	bx	lr
 8000e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e3e:	d102      	bne.n	8000e46 <__aeabi_d2uiz+0x3a>
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_d2f>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000e54:	bf24      	itt	cs
 8000e56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000e5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000e5e:	d90d      	bls.n	8000e7c <__aeabi_d2f+0x30>
 8000e60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000e70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e74:	bf08      	it	eq
 8000e76:	f020 0001 	biceq.w	r0, r0, #1
 8000e7a:	4770      	bx	lr
 8000e7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000e80:	d121      	bne.n	8000ec6 <__aeabi_d2f+0x7a>
 8000e82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000e86:	bfbc      	itt	lt
 8000e88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000e8c:	4770      	bxlt	lr
 8000e8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000e92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e96:	f1c2 0218 	rsb	r2, r2, #24
 8000e9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000e9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ea2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ea6:	bf18      	it	ne
 8000ea8:	f040 0001 	orrne.w	r0, r0, #1
 8000eac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000eb4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000eb8:	ea40 000c 	orr.w	r0, r0, ip
 8000ebc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ec4:	e7cc      	b.n	8000e60 <__aeabi_d2f+0x14>
 8000ec6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000eca:	d107      	bne.n	8000edc <__aeabi_d2f+0x90>
 8000ecc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ed0:	bf1e      	ittt	ne
 8000ed2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ed6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000eda:	4770      	bxne	lr
 8000edc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ee0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_uldivmod>:
 8000eec:	b953      	cbnz	r3, 8000f04 <__aeabi_uldivmod+0x18>
 8000eee:	b94a      	cbnz	r2, 8000f04 <__aeabi_uldivmod+0x18>
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	bf08      	it	eq
 8000ef4:	2800      	cmpeq	r0, #0
 8000ef6:	bf1c      	itt	ne
 8000ef8:	f04f 31ff 	movne.w	r1, #4294967295
 8000efc:	f04f 30ff 	movne.w	r0, #4294967295
 8000f00:	f000 b9b4 	b.w	800126c <__aeabi_idiv0>
 8000f04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0c:	f000 f83c 	bl	8000f88 <__udivmoddi4>
 8000f10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_d2lz>:
 8000f1c:	b538      	push	{r3, r4, r5, lr}
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2300      	movs	r3, #0
 8000f22:	4604      	mov	r4, r0
 8000f24:	460d      	mov	r5, r1
 8000f26:	f7ff ff0b 	bl	8000d40 <__aeabi_dcmplt>
 8000f2a:	b928      	cbnz	r0, 8000f38 <__aeabi_d2lz+0x1c>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f34:	f000 b80a 	b.w	8000f4c <__aeabi_d2ulz>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f3e:	f000 f805 	bl	8000f4c <__aeabi_d2ulz>
 8000f42:	4240      	negs	r0, r0
 8000f44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f48:	bd38      	pop	{r3, r4, r5, pc}
 8000f4a:	bf00      	nop

08000f4c <__aeabi_d2ulz>:
 8000f4c:	b5d0      	push	{r4, r6, r7, lr}
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <__aeabi_d2ulz+0x34>)
 8000f52:	4606      	mov	r6, r0
 8000f54:	460f      	mov	r7, r1
 8000f56:	f7ff fc81 	bl	800085c <__aeabi_dmul>
 8000f5a:	f7ff ff57 	bl	8000e0c <__aeabi_d2uiz>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	f7ff fc02 	bl	8000768 <__aeabi_ui2d>
 8000f64:	2200      	movs	r2, #0
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <__aeabi_d2ulz+0x38>)
 8000f68:	f7ff fc78 	bl	800085c <__aeabi_dmul>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4630      	mov	r0, r6
 8000f72:	4639      	mov	r1, r7
 8000f74:	f7ff faba 	bl	80004ec <__aeabi_dsub>
 8000f78:	f7ff ff48 	bl	8000e0c <__aeabi_d2uiz>
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	bdd0      	pop	{r4, r6, r7, pc}
 8000f80:	3df00000 	.word	0x3df00000
 8000f84:	41f00000 	.word	0x41f00000

08000f88 <__udivmoddi4>:
 8000f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f8c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000f8e:	460c      	mov	r4, r1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d14d      	bne.n	8001030 <__udivmoddi4+0xa8>
 8000f94:	428a      	cmp	r2, r1
 8000f96:	460f      	mov	r7, r1
 8000f98:	4684      	mov	ip, r0
 8000f9a:	4696      	mov	lr, r2
 8000f9c:	fab2 f382 	clz	r3, r2
 8000fa0:	d960      	bls.n	8001064 <__udivmoddi4+0xdc>
 8000fa2:	b14b      	cbz	r3, 8000fb8 <__udivmoddi4+0x30>
 8000fa4:	fa02 fe03 	lsl.w	lr, r2, r3
 8000fa8:	f1c3 0220 	rsb	r2, r3, #32
 8000fac:	409f      	lsls	r7, r3
 8000fae:	fa00 fc03 	lsl.w	ip, r0, r3
 8000fb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb6:	4317      	orrs	r7, r2
 8000fb8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000fbc:	fa1f f48e 	uxth.w	r4, lr
 8000fc0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000fc4:	fbb7 f1f6 	udiv	r1, r7, r6
 8000fc8:	fb06 7711 	mls	r7, r6, r1, r7
 8000fcc:	fb01 f004 	mul.w	r0, r1, r4
 8000fd0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x62>
 8000fd8:	eb1e 0202 	adds.w	r2, lr, r2
 8000fdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000fe0:	d202      	bcs.n	8000fe8 <__udivmoddi4+0x60>
 8000fe2:	4290      	cmp	r0, r2
 8000fe4:	f200 812d 	bhi.w	8001242 <__udivmoddi4+0x2ba>
 8000fe8:	4639      	mov	r1, r7
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	fa1f fc8c 	uxth.w	ip, ip
 8000ff0:	fbb2 f0f6 	udiv	r0, r2, r6
 8000ff4:	fb06 2210 	mls	r2, r6, r0, r2
 8000ff8:	fb00 f404 	mul.w	r4, r0, r4
 8000ffc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8001000:	4564      	cmp	r4, ip
 8001002:	d908      	bls.n	8001016 <__udivmoddi4+0x8e>
 8001004:	eb1e 0c0c 	adds.w	ip, lr, ip
 8001008:	f100 32ff 	add.w	r2, r0, #4294967295
 800100c:	d202      	bcs.n	8001014 <__udivmoddi4+0x8c>
 800100e:	4564      	cmp	r4, ip
 8001010:	f200 811a 	bhi.w	8001248 <__udivmoddi4+0x2c0>
 8001014:	4610      	mov	r0, r2
 8001016:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800101a:	ebac 0c04 	sub.w	ip, ip, r4
 800101e:	2100      	movs	r1, #0
 8001020:	b125      	cbz	r5, 800102c <__udivmoddi4+0xa4>
 8001022:	fa2c f303 	lsr.w	r3, ip, r3
 8001026:	2200      	movs	r2, #0
 8001028:	e9c5 3200 	strd	r3, r2, [r5]
 800102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001030:	428b      	cmp	r3, r1
 8001032:	d905      	bls.n	8001040 <__udivmoddi4+0xb8>
 8001034:	b10d      	cbz	r5, 800103a <__udivmoddi4+0xb2>
 8001036:	e9c5 0100 	strd	r0, r1, [r5]
 800103a:	2100      	movs	r1, #0
 800103c:	4608      	mov	r0, r1
 800103e:	e7f5      	b.n	800102c <__udivmoddi4+0xa4>
 8001040:	fab3 f183 	clz	r1, r3
 8001044:	2900      	cmp	r1, #0
 8001046:	d14d      	bne.n	80010e4 <__udivmoddi4+0x15c>
 8001048:	42a3      	cmp	r3, r4
 800104a:	f0c0 80f2 	bcc.w	8001232 <__udivmoddi4+0x2aa>
 800104e:	4290      	cmp	r0, r2
 8001050:	f080 80ef 	bcs.w	8001232 <__udivmoddi4+0x2aa>
 8001054:	4606      	mov	r6, r0
 8001056:	4623      	mov	r3, r4
 8001058:	4608      	mov	r0, r1
 800105a:	2d00      	cmp	r5, #0
 800105c:	d0e6      	beq.n	800102c <__udivmoddi4+0xa4>
 800105e:	e9c5 6300 	strd	r6, r3, [r5]
 8001062:	e7e3      	b.n	800102c <__udivmoddi4+0xa4>
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 80a2 	bne.w	80011ae <__udivmoddi4+0x226>
 800106a:	1a8a      	subs	r2, r1, r2
 800106c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8001070:	fa1f f68e 	uxth.w	r6, lr
 8001074:	2101      	movs	r1, #1
 8001076:	fbb2 f4f7 	udiv	r4, r2, r7
 800107a:	fb07 2014 	mls	r0, r7, r4, r2
 800107e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8001082:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001086:	fb06 f004 	mul.w	r0, r6, r4
 800108a:	4290      	cmp	r0, r2
 800108c:	d90f      	bls.n	80010ae <__udivmoddi4+0x126>
 800108e:	eb1e 0202 	adds.w	r2, lr, r2
 8001092:	f104 38ff 	add.w	r8, r4, #4294967295
 8001096:	bf2c      	ite	cs
 8001098:	f04f 0901 	movcs.w	r9, #1
 800109c:	f04f 0900 	movcc.w	r9, #0
 80010a0:	4290      	cmp	r0, r2
 80010a2:	d903      	bls.n	80010ac <__udivmoddi4+0x124>
 80010a4:	f1b9 0f00 	cmp.w	r9, #0
 80010a8:	f000 80c8 	beq.w	800123c <__udivmoddi4+0x2b4>
 80010ac:	4644      	mov	r4, r8
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	fa1f fc8c 	uxth.w	ip, ip
 80010b4:	fbb2 f0f7 	udiv	r0, r2, r7
 80010b8:	fb07 2210 	mls	r2, r7, r0, r2
 80010bc:	fb00 f606 	mul.w	r6, r0, r6
 80010c0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80010c4:	4566      	cmp	r6, ip
 80010c6:	d908      	bls.n	80010da <__udivmoddi4+0x152>
 80010c8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80010cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80010d0:	d202      	bcs.n	80010d8 <__udivmoddi4+0x150>
 80010d2:	4566      	cmp	r6, ip
 80010d4:	f200 80bb 	bhi.w	800124e <__udivmoddi4+0x2c6>
 80010d8:	4610      	mov	r0, r2
 80010da:	ebac 0c06 	sub.w	ip, ip, r6
 80010de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010e2:	e79d      	b.n	8001020 <__udivmoddi4+0x98>
 80010e4:	f1c1 0620 	rsb	r6, r1, #32
 80010e8:	408b      	lsls	r3, r1
 80010ea:	fa04 fe01 	lsl.w	lr, r4, r1
 80010ee:	fa22 f706 	lsr.w	r7, r2, r6
 80010f2:	fa20 fc06 	lsr.w	ip, r0, r6
 80010f6:	40f4      	lsrs	r4, r6
 80010f8:	408a      	lsls	r2, r1
 80010fa:	431f      	orrs	r7, r3
 80010fc:	ea4e 030c 	orr.w	r3, lr, ip
 8001100:	fa00 fe01 	lsl.w	lr, r0, r1
 8001104:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001108:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800110c:	fa1f fc87 	uxth.w	ip, r7
 8001110:	fbb4 f0f8 	udiv	r0, r4, r8
 8001114:	fb08 4410 	mls	r4, r8, r0, r4
 8001118:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800111c:	fb00 f90c 	mul.w	r9, r0, ip
 8001120:	45a1      	cmp	r9, r4
 8001122:	d90e      	bls.n	8001142 <__udivmoddi4+0x1ba>
 8001124:	193c      	adds	r4, r7, r4
 8001126:	f100 3aff 	add.w	sl, r0, #4294967295
 800112a:	bf2c      	ite	cs
 800112c:	f04f 0b01 	movcs.w	fp, #1
 8001130:	f04f 0b00 	movcc.w	fp, #0
 8001134:	45a1      	cmp	r9, r4
 8001136:	d903      	bls.n	8001140 <__udivmoddi4+0x1b8>
 8001138:	f1bb 0f00 	cmp.w	fp, #0
 800113c:	f000 8093 	beq.w	8001266 <__udivmoddi4+0x2de>
 8001140:	4650      	mov	r0, sl
 8001142:	eba4 0409 	sub.w	r4, r4, r9
 8001146:	fa1f f983 	uxth.w	r9, r3
 800114a:	fbb4 f3f8 	udiv	r3, r4, r8
 800114e:	fb08 4413 	mls	r4, r8, r3, r4
 8001152:	fb03 fc0c 	mul.w	ip, r3, ip
 8001156:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800115a:	45a4      	cmp	ip, r4
 800115c:	d906      	bls.n	800116c <__udivmoddi4+0x1e4>
 800115e:	193c      	adds	r4, r7, r4
 8001160:	f103 38ff 	add.w	r8, r3, #4294967295
 8001164:	d201      	bcs.n	800116a <__udivmoddi4+0x1e2>
 8001166:	45a4      	cmp	ip, r4
 8001168:	d87a      	bhi.n	8001260 <__udivmoddi4+0x2d8>
 800116a:	4643      	mov	r3, r8
 800116c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001170:	eba4 040c 	sub.w	r4, r4, ip
 8001174:	fba0 9802 	umull	r9, r8, r0, r2
 8001178:	4544      	cmp	r4, r8
 800117a:	46cc      	mov	ip, r9
 800117c:	4643      	mov	r3, r8
 800117e:	d302      	bcc.n	8001186 <__udivmoddi4+0x1fe>
 8001180:	d106      	bne.n	8001190 <__udivmoddi4+0x208>
 8001182:	45ce      	cmp	lr, r9
 8001184:	d204      	bcs.n	8001190 <__udivmoddi4+0x208>
 8001186:	3801      	subs	r0, #1
 8001188:	ebb9 0c02 	subs.w	ip, r9, r2
 800118c:	eb68 0307 	sbc.w	r3, r8, r7
 8001190:	b15d      	cbz	r5, 80011aa <__udivmoddi4+0x222>
 8001192:	ebbe 020c 	subs.w	r2, lr, ip
 8001196:	eb64 0403 	sbc.w	r4, r4, r3
 800119a:	fa04 f606 	lsl.w	r6, r4, r6
 800119e:	fa22 f301 	lsr.w	r3, r2, r1
 80011a2:	40cc      	lsrs	r4, r1
 80011a4:	431e      	orrs	r6, r3
 80011a6:	e9c5 6400 	strd	r6, r4, [r5]
 80011aa:	2100      	movs	r1, #0
 80011ac:	e73e      	b.n	800102c <__udivmoddi4+0xa4>
 80011ae:	fa02 fe03 	lsl.w	lr, r2, r3
 80011b2:	f1c3 0120 	rsb	r1, r3, #32
 80011b6:	fa04 f203 	lsl.w	r2, r4, r3
 80011ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80011be:	40cc      	lsrs	r4, r1
 80011c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80011c4:	fa20 f101 	lsr.w	r1, r0, r1
 80011c8:	fa1f f68e 	uxth.w	r6, lr
 80011cc:	fbb4 f0f7 	udiv	r0, r4, r7
 80011d0:	430a      	orrs	r2, r1
 80011d2:	fb07 4410 	mls	r4, r7, r0, r4
 80011d6:	0c11      	lsrs	r1, r2, #16
 80011d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80011dc:	fb00 f406 	mul.w	r4, r0, r6
 80011e0:	428c      	cmp	r4, r1
 80011e2:	d90e      	bls.n	8001202 <__udivmoddi4+0x27a>
 80011e4:	eb1e 0101 	adds.w	r1, lr, r1
 80011e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80011ec:	bf2c      	ite	cs
 80011ee:	f04f 0901 	movcs.w	r9, #1
 80011f2:	f04f 0900 	movcc.w	r9, #0
 80011f6:	428c      	cmp	r4, r1
 80011f8:	d902      	bls.n	8001200 <__udivmoddi4+0x278>
 80011fa:	f1b9 0f00 	cmp.w	r9, #0
 80011fe:	d02c      	beq.n	800125a <__udivmoddi4+0x2d2>
 8001200:	4640      	mov	r0, r8
 8001202:	1b09      	subs	r1, r1, r4
 8001204:	b292      	uxth	r2, r2
 8001206:	fbb1 f4f7 	udiv	r4, r1, r7
 800120a:	fb07 1114 	mls	r1, r7, r4, r1
 800120e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001212:	fb04 f106 	mul.w	r1, r4, r6
 8001216:	4291      	cmp	r1, r2
 8001218:	d907      	bls.n	800122a <__udivmoddi4+0x2a2>
 800121a:	eb1e 0202 	adds.w	r2, lr, r2
 800121e:	f104 38ff 	add.w	r8, r4, #4294967295
 8001222:	d201      	bcs.n	8001228 <__udivmoddi4+0x2a0>
 8001224:	4291      	cmp	r1, r2
 8001226:	d815      	bhi.n	8001254 <__udivmoddi4+0x2cc>
 8001228:	4644      	mov	r4, r8
 800122a:	1a52      	subs	r2, r2, r1
 800122c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8001230:	e721      	b.n	8001076 <__udivmoddi4+0xee>
 8001232:	1a86      	subs	r6, r0, r2
 8001234:	eb64 0303 	sbc.w	r3, r4, r3
 8001238:	2001      	movs	r0, #1
 800123a:	e70e      	b.n	800105a <__udivmoddi4+0xd2>
 800123c:	3c02      	subs	r4, #2
 800123e:	4472      	add	r2, lr
 8001240:	e735      	b.n	80010ae <__udivmoddi4+0x126>
 8001242:	3902      	subs	r1, #2
 8001244:	4472      	add	r2, lr
 8001246:	e6d0      	b.n	8000fea <__udivmoddi4+0x62>
 8001248:	44f4      	add	ip, lr
 800124a:	3802      	subs	r0, #2
 800124c:	e6e3      	b.n	8001016 <__udivmoddi4+0x8e>
 800124e:	44f4      	add	ip, lr
 8001250:	3802      	subs	r0, #2
 8001252:	e742      	b.n	80010da <__udivmoddi4+0x152>
 8001254:	3c02      	subs	r4, #2
 8001256:	4472      	add	r2, lr
 8001258:	e7e7      	b.n	800122a <__udivmoddi4+0x2a2>
 800125a:	3802      	subs	r0, #2
 800125c:	4471      	add	r1, lr
 800125e:	e7d0      	b.n	8001202 <__udivmoddi4+0x27a>
 8001260:	3b02      	subs	r3, #2
 8001262:	443c      	add	r4, r7
 8001264:	e782      	b.n	800116c <__udivmoddi4+0x1e4>
 8001266:	3802      	subs	r0, #2
 8001268:	443c      	add	r4, r7
 800126a:	e76a      	b.n	8001142 <__udivmoddi4+0x1ba>

0800126c <__aeabi_idiv0>:
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800127c:	2334      	movs	r3, #52	@ 0x34
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <tx_application_define+0x44>)
 8001286:	490c      	ldr	r1, [pc, #48]	@ (80012b8 <tx_application_define+0x48>)
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <tx_application_define+0x4c>)
 800128a:	f00a fd01 	bl	800bc90 <_txe_byte_pool_create>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10a      	bne.n	80012aa <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <tx_application_define+0x4c>)
 8001296:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001298:	68b8      	ldr	r0, [r7, #8]
 800129a:	f000 f811 	bl	80012c0 <App_ThreadX_Init>
 800129e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80012a6:	bf00      	nop
 80012a8:	e7fd      	b.n	80012a6 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200001f4 	.word	0x200001f4
 80012b8:	080107c8 	.word	0x080107c8
 80012bc:	200005f4 	.word	0x200005f4

080012c0 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	@ 0x30
 80012c4:	af08      	add	r7, sp, #32
 80012c6:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60bb      	str	r3, [r7, #8]
	(void)byte_pool;

  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
	tx_thread_create(&setone, "Setone", ReadADC_voltage_current, 0, thread_Setone, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);
 80012d0:	23b0      	movs	r3, #176	@ 0xb0
 80012d2:	9306      	str	r3, [sp, #24]
 80012d4:	2301      	movs	r3, #1
 80012d6:	9305      	str	r3, [sp, #20]
 80012d8:	2301      	movs	r3, #1
 80012da:	9304      	str	r3, [sp, #16]
 80012dc:	230e      	movs	r3, #14
 80012de:	9303      	str	r3, [sp, #12]
 80012e0:	230e      	movs	r3, #14
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <App_ThreadX_Init+0xc4>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	4a25      	ldr	r2, [pc, #148]	@ (8001388 <App_ThreadX_Init+0xc8>)
 80012f2:	4926      	ldr	r1, [pc, #152]	@ (800138c <App_ThreadX_Init+0xcc>)
 80012f4:	4826      	ldr	r0, [pc, #152]	@ (8001390 <App_ThreadX_Init+0xd0>)
 80012f6:	f00a fd6b 	bl	800bdd0 <_txe_thread_create>
	tx_thread_create(&settwo, "Settwo", Setup, 0, thread_Settwo, THREAD_STACK_SIZE, 13, 13, 1, TX_AUTO_START);
 80012fa:	23b0      	movs	r3, #176	@ 0xb0
 80012fc:	9306      	str	r3, [sp, #24]
 80012fe:	2301      	movs	r3, #1
 8001300:	9305      	str	r3, [sp, #20]
 8001302:	2301      	movs	r3, #1
 8001304:	9304      	str	r3, [sp, #16]
 8001306:	230d      	movs	r3, #13
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	230d      	movs	r3, #13
 800130c:	9302      	str	r3, [sp, #8]
 800130e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <App_ThreadX_Init+0xd4>)
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <App_ThreadX_Init+0xd8>)
 800131c:	491f      	ldr	r1, [pc, #124]	@ (800139c <App_ThreadX_Init+0xdc>)
 800131e:	4820      	ldr	r0, [pc, #128]	@ (80013a0 <App_ThreadX_Init+0xe0>)
 8001320:	f00a fd56 	bl	800bdd0 <_txe_thread_create>
	tx_thread_create(&setthree, "Setthree", Set_LED, 0, thread_Setthree, THREAD_STACK_SIZE, 12, 12, 1, TX_AUTO_START);
 8001324:	23b0      	movs	r3, #176	@ 0xb0
 8001326:	9306      	str	r3, [sp, #24]
 8001328:	2301      	movs	r3, #1
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	2301      	movs	r3, #1
 800132e:	9304      	str	r3, [sp, #16]
 8001330:	230c      	movs	r3, #12
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	230c      	movs	r3, #12
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <App_ThreadX_Init+0xe4>)
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <App_ThreadX_Init+0xe8>)
 8001346:	4919      	ldr	r1, [pc, #100]	@ (80013ac <App_ThreadX_Init+0xec>)
 8001348:	4819      	ldr	r0, [pc, #100]	@ (80013b0 <App_ThreadX_Init+0xf0>)
 800134a:	f00a fd41 	bl	800bdd0 <_txe_thread_create>
	tx_thread_create(&setfour, "Setfour", Transmit, 0, thread_Setfour, THREAD_STACK_SIZE, 12, 12, 1, TX_AUTO_START);
 800134e:	23b0      	movs	r3, #176	@ 0xb0
 8001350:	9306      	str	r3, [sp, #24]
 8001352:	2301      	movs	r3, #1
 8001354:	9305      	str	r3, [sp, #20]
 8001356:	2301      	movs	r3, #1
 8001358:	9304      	str	r3, [sp, #16]
 800135a:	230c      	movs	r3, #12
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	230c      	movs	r3, #12
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <App_ThreadX_Init+0xf4>)
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <App_ThreadX_Init+0xf8>)
 8001370:	4912      	ldr	r1, [pc, #72]	@ (80013bc <App_ThreadX_Init+0xfc>)
 8001372:	4813      	ldr	r0, [pc, #76]	@ (80013c0 <App_ThreadX_Init+0x100>)
 8001374:	f00a fd2c 	bl	800bdd0 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000628 	.word	0x20000628
 8001388:	080013d1 	.word	0x080013d1
 800138c:	080107dc 	.word	0x080107dc
 8001390:	20001628 	.word	0x20001628
 8001394:	20000a28 	.word	0x20000a28
 8001398:	080018b1 	.word	0x080018b1
 800139c:	080107e4 	.word	0x080107e4
 80013a0:	200016d8 	.word	0x200016d8
 80013a4:	20000e28 	.word	0x20000e28
 80013a8:	080018cd 	.word	0x080018cd
 80013ac:	080107ec 	.word	0x080107ec
 80013b0:	20001788 	.word	0x20001788
 80013b4:	20001228 	.word	0x20001228
 80013b8:	08001929 	.word	0x08001929
 80013bc:	080107f8 	.word	0x080107f8
 80013c0:	20001838 	.word	0x20001838

080013c4 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80013c8:	f009 fd06 	bl	800add8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <ReadADC_voltage_current>:

/* USER CODE BEGIN 1 */
void ReadADC_voltage_current(ULONG initial_input) {
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08c      	sub	sp, #48	@ 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    while(1	) {
    	uint32_t sumADC_voltage1 = 0, sumADC_current1 = 0,sumADC_voltage2 = 0, sumADC_current2 = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
    	uint16_t value_voltage1, value_current1, value_voltage2, value_current2;
    	float voltage_current1,voltage_current2;

    	for (int i = 0; i < 500; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	e01e      	b.n	800142c <ReadADC_voltage_current+0x5c>
    		HAL_ADC_Start_DMA(&hadc1, adcBuffer, 4);
 80013ee:	2204      	movs	r2, #4
 80013f0:	49cd      	ldr	r1, [pc, #820]	@ (8001728 <ReadADC_voltage_current+0x358>)
 80013f2:	48ce      	ldr	r0, [pc, #824]	@ (800172c <ReadADC_voltage_current+0x35c>)
 80013f4:	f001 fff6 	bl	80033e4 <HAL_ADC_Start_DMA>
    		sumADC_voltage1 += adcBuffer[0];
 80013f8:	4bcb      	ldr	r3, [pc, #812]	@ (8001728 <ReadADC_voltage_current+0x358>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013fe:	4413      	add	r3, r2
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
    		sumADC_voltage2 += adcBuffer[1];
 8001402:	4bc9      	ldr	r3, [pc, #804]	@ (8001728 <ReadADC_voltage_current+0x358>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001408:	4413      	add	r3, r2
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
    		sumADC_current1 += adcBuffer[2];
 800140c:	4bc6      	ldr	r3, [pc, #792]	@ (8001728 <ReadADC_voltage_current+0x358>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001412:	4413      	add	r3, r2
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    		sumADC_current2 += adcBuffer[3];
 8001416:	4bc4      	ldr	r3, [pc, #784]	@ (8001728 <ReadADC_voltage_current+0x358>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	6a3a      	ldr	r2, [r7, #32]
 800141c:	4413      	add	r3, r2
 800141e:	623b      	str	r3, [r7, #32]
    		HAL_ADC_Stop_DMA(&hadc1);
 8001420:	48c2      	ldr	r0, [pc, #776]	@ (800172c <ReadADC_voltage_current+0x35c>)
 8001422:	f002 f8d7 	bl	80035d4 <HAL_ADC_Stop_DMA>
    	for (int i = 0; i < 500; i++) {
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001432:	dbdc      	blt.n	80013ee <ReadADC_voltage_current+0x1e>
    	}

    	value_voltage1 = ((sumADC_voltage1 / 500) - 60) * 3882 / (3942 - 60);
 8001434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001436:	4abe      	ldr	r2, [pc, #760]	@ (8001730 <ReadADC_voltage_current+0x360>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	f640 722a 	movw	r2, #3882	@ 0xf2a
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	f5a3 3363 	sub.w	r3, r3, #232448	@ 0x38c00
 800144a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800144e:	4ab9      	ldr	r2, [pc, #740]	@ (8001734 <ReadADC_voltage_current+0x364>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	837b      	strh	r3, [r7, #26]
    	value_current1 = ((sumADC_current1 / 500) - 60) * 4035 / (4095 - 60);
 8001458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800145a:	4ab5      	ldr	r2, [pc, #724]	@ (8001730 <ReadADC_voltage_current+0x360>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	095b      	lsrs	r3, r3, #5
 8001462:	f640 72c3 	movw	r2, #4035	@ 0xfc3
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	f5a3 336c 	sub.w	r3, r3, #241664	@ 0x3b000
 800146e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001472:	4ab1      	ldr	r2, [pc, #708]	@ (8001738 <ReadADC_voltage_current+0x368>)
 8001474:	fba2 1203 	umull	r1, r2, r2, r3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	833b      	strh	r3, [r7, #24]
    	value_voltage2 = ((sumADC_voltage2 / 500) - 59) * 3886 / (3994 - 59);
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	4aaa      	ldr	r2, [pc, #680]	@ (8001730 <ReadADC_voltage_current+0x360>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	f640 722e 	movw	r2, #3886	@ 0xf2e
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	f5a3 335f 	sub.w	r3, r3, #228352	@ 0x37c00
 8001498:	f2a3 339a 	subw	r3, r3, #922	@ 0x39a
 800149c:	4aa7      	ldr	r2, [pc, #668]	@ (800173c <ReadADC_voltage_current+0x36c>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	82fb      	strh	r3, [r7, #22]
    	value_current2 = ((sumADC_current2 / 500) - 57) * 4038 / (4095 - 57);
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	4aa1      	ldr	r2, [pc, #644]	@ (8001730 <ReadADC_voltage_current+0x360>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	f640 72c6 	movw	r2, #4038	@ 0xfc6
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	f5a3 3360 	sub.w	r3, r3, #229376	@ 0x38000
 80014bc:	f2a3 3316 	subw	r3, r3, #790	@ 0x316
 80014c0:	4a9f      	ldr	r2, [pc, #636]	@ (8001740 <ReadADC_voltage_current+0x370>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0adb      	lsrs	r3, r3, #11
 80014c8:	82bb      	strh	r3, [r7, #20]

    	voltage1 = (value_voltage1 * 14.6) / 3882;
 80014ca:	8b7b      	ldrh	r3, [r7, #26]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f95b 	bl	8000788 <__aeabi_i2d>
 80014d2:	a383      	add	r3, pc, #524	@ (adr r3, 80016e0 <ReadADC_voltage_current+0x310>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	f7ff f9c0 	bl	800085c <__aeabi_dmul>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	a380      	add	r3, pc, #512	@ (adr r3, 80016e8 <ReadADC_voltage_current+0x318>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff fae1 	bl	8000ab0 <__aeabi_ddiv>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fca9 	bl	8000e4c <__aeabi_d2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a91      	ldr	r2, [pc, #580]	@ (8001744 <ReadADC_voltage_current+0x374>)
 80014fe:	6013      	str	r3, [r2, #0]
    	voltage_current1 = (value_current1 * 3.31) / 4095;
 8001500:	8b3b      	ldrh	r3, [r7, #24]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f940 	bl	8000788 <__aeabi_i2d>
 8001508:	a379      	add	r3, pc, #484	@ (adr r3, 80016f0 <ReadADC_voltage_current+0x320>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f9a5 	bl	800085c <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	a377      	add	r3, pc, #476	@ (adr r3, 80016f8 <ReadADC_voltage_current+0x328>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff fac6 	bl	8000ab0 <__aeabi_ddiv>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fc8e 	bl	8000e4c <__aeabi_d2f>
 8001530:	4603      	mov	r3, r0
 8001532:	613b      	str	r3, [r7, #16]
    	current1 = fabs((voltage_current1 - 2.5) / 0.097);
 8001534:	6938      	ldr	r0, [r7, #16]
 8001536:	f7ff f939 	bl	80007ac <__aeabi_f2d>
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <ReadADC_voltage_current+0x378>)
 8001540:	f7fe ffd4 	bl	80004ec <__aeabi_dsub>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	a36c      	add	r3, pc, #432	@ (adr r3, 8001700 <ReadADC_voltage_current+0x330>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	f7ff faad 	bl	8000ab0 <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f7ff fc75 	bl	8000e4c <__aeabi_d2f>
 8001562:	ee07 0a90 	vmov	s15, r0
 8001566:	eef0 7ae7 	vabs.f32	s15, s15
 800156a:	4b78      	ldr	r3, [pc, #480]	@ (800174c <ReadADC_voltage_current+0x37c>)
 800156c:	edc3 7a00 	vstr	s15, [r3]

    	voltage2 = (value_voltage2 * 14.6) / 3836;
 8001570:	8afb      	ldrh	r3, [r7, #22]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f908 	bl	8000788 <__aeabi_i2d>
 8001578:	a359      	add	r3, pc, #356	@ (adr r3, 80016e0 <ReadADC_voltage_current+0x310>)
 800157a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157e:	f7ff f96d 	bl	800085c <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001708 <ReadADC_voltage_current+0x338>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff fa8e 	bl	8000ab0 <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fc56 	bl	8000e4c <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a6b      	ldr	r2, [pc, #428]	@ (8001750 <ReadADC_voltage_current+0x380>)
 80015a4:	6013      	str	r3, [r2, #0]
    	voltage_current2 = (value_current2 * 3.31) / 4095;
 80015a6:	8abb      	ldrh	r3, [r7, #20]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f8ed 	bl	8000788 <__aeabi_i2d>
 80015ae:	a350      	add	r3, pc, #320	@ (adr r3, 80016f0 <ReadADC_voltage_current+0x320>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f952 	bl	800085c <__aeabi_dmul>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	a34d      	add	r3, pc, #308	@ (adr r3, 80016f8 <ReadADC_voltage_current+0x328>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7ff fa73 	bl	8000ab0 <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fc3b 	bl	8000e4c <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	60fb      	str	r3, [r7, #12]
    	current2 = fabs((voltage_current2 - 2.5) / 0.098);
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7ff f8e6 	bl	80007ac <__aeabi_f2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <ReadADC_voltage_current+0x378>)
 80015e6:	f7fe ff81 	bl	80004ec <__aeabi_dsub>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	a347      	add	r3, pc, #284	@ (adr r3, 8001710 <ReadADC_voltage_current+0x340>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff fa5a 	bl	8000ab0 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fc22 	bl	8000e4c <__aeabi_d2f>
 8001608:	ee07 0a90 	vmov	s15, r0
 800160c:	eef0 7ae7 	vabs.f32	s15, s15
 8001610:	4b50      	ldr	r3, [pc, #320]	@ (8001754 <ReadADC_voltage_current+0x384>)
 8001612:	edc3 7a00 	vstr	s15, [r3]

    	//Current batt1 Consumption Algorithm
    	NowMillis1 = tx_time_get();
 8001616:	f00a f8e7 	bl	800b7e8 <_tx_time_get>
 800161a:	4603      	mov	r3, r0
 800161c:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <ReadADC_voltage_current+0x388>)
 800161e:	6013      	str	r3, [r2, #0]
    	if (NowMillis1 - BeforeMillis1 >= 1000){
 8001620:	4b4d      	ldr	r3, [pc, #308]	@ (8001758 <ReadADC_voltage_current+0x388>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <ReadADC_voltage_current+0x38c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800162e:	f0c0 80ac 	bcc.w	800178a <ReadADC_voltage_current+0x3ba>
    		CurrentFiltered1 = 0.2 * current1 + 0.8 * CurrentFiltered1;
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <ReadADC_voltage_current+0x37c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f8b8 	bl	80007ac <__aeabi_f2d>
 800163c:	a336      	add	r3, pc, #216	@ (adr r3, 8001718 <ReadADC_voltage_current+0x348>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7ff f90b 	bl	800085c <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	4b44      	ldr	r3, [pc, #272]	@ (8001760 <ReadADC_voltage_current+0x390>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f8aa 	bl	80007ac <__aeabi_f2d>
 8001658:	a331      	add	r3, pc, #196	@ (adr r3, 8001720 <ReadADC_voltage_current+0x350>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ff41 	bl	80004f0 <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fbe9 	bl	8000e4c <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a38      	ldr	r2, [pc, #224]	@ (8001760 <ReadADC_voltage_current+0x390>)
 800167e:	6013      	str	r3, [r2, #0]
    		ConsumptionEnergy1 += (CurrentFiltered1 / 3600);
 8001680:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <ReadADC_voltage_current+0x390>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001764 <ReadADC_voltage_current+0x394>
 800168a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800168e:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <ReadADC_voltage_current+0x398>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	4b33      	ldr	r3, [pc, #204]	@ (8001768 <ReadADC_voltage_current+0x398>)
 800169a:	edc3 7a00 	vstr	s15, [r3]
    		batterypercentage1 = ((BatteryCapacity1 - ConsumptionEnergy1) / BatteryCapacity1) *100;
 800169e:	4b32      	ldr	r3, [pc, #200]	@ (8001768 <ReadADC_voltage_current+0x398>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff f882 	bl	80007ac <__aeabi_f2d>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016b4:	f7fe ff1a 	bl	80004ec <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016c8:	f7ff f9f2 	bl	8000ab0 <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b24      	ldr	r3, [pc, #144]	@ (800176c <ReadADC_voltage_current+0x39c>)
 80016da:	f7ff f8bf 	bl	800085c <__aeabi_dmul>
 80016de:	e047      	b.n	8001770 <ReadADC_voltage_current+0x3a0>
 80016e0:	33333333 	.word	0x33333333
 80016e4:	402d3333 	.word	0x402d3333
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40ae5400 	.word	0x40ae5400
 80016f0:	47ae147b 	.word	0x47ae147b
 80016f4:	400a7ae1 	.word	0x400a7ae1
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40affe00 	.word	0x40affe00
 8001700:	f3b645a2 	.word	0xf3b645a2
 8001704:	3fb8d4fd 	.word	0x3fb8d4fd
 8001708:	00000000 	.word	0x00000000
 800170c:	40adf800 	.word	0x40adf800
 8001710:	2b020c4a 	.word	0x2b020c4a
 8001714:	3fb91687 	.word	0x3fb91687
 8001718:	9999999a 	.word	0x9999999a
 800171c:	3fc99999 	.word	0x3fc99999
 8001720:	9999999a 	.word	0x9999999a
 8001724:	3fe99999 	.word	0x3fe99999
 8001728:	200018f8 	.word	0x200018f8
 800172c:	20001930 	.word	0x20001930
 8001730:	10624dd3 	.word	0x10624dd3
 8001734:	10e1cc09 	.word	0x10e1cc09
 8001738:	03dec141 	.word	0x03dec141
 800173c:	853cb2c7 	.word	0x853cb2c7
 8001740:	81d6aa29 	.word	0x81d6aa29
 8001744:	20001908 	.word	0x20001908
 8001748:	40040000 	.word	0x40040000
 800174c:	2000190c 	.word	0x2000190c
 8001750:	20001910 	.word	0x20001910
 8001754:	20001914 	.word	0x20001914
 8001758:	200018e8 	.word	0x200018e8
 800175c:	200018ec 	.word	0x200018ec
 8001760:	20001920 	.word	0x20001920
 8001764:	45610000 	.word	0x45610000
 8001768:	20001918 	.word	0x20001918
 800176c:	40590000 	.word	0x40590000
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff fb68 	bl	8000e4c <__aeabi_d2f>
 800177c:	4603      	mov	r3, r0
 800177e:	4a40      	ldr	r2, [pc, #256]	@ (8001880 <ReadADC_voltage_current+0x4b0>)
 8001780:	6013      	str	r3, [r2, #0]
    		BeforeMillis1 = NowMillis1;
 8001782:	4b40      	ldr	r3, [pc, #256]	@ (8001884 <ReadADC_voltage_current+0x4b4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a40      	ldr	r2, [pc, #256]	@ (8001888 <ReadADC_voltage_current+0x4b8>)
 8001788:	6013      	str	r3, [r2, #0]
    	}

    	//Current batt2 Consumption Algorithm
    	NowMillis2 = tx_time_get();
 800178a:	f00a f82d 	bl	800b7e8 <_tx_time_get>
 800178e:	4603      	mov	r3, r0
 8001790:	4a3e      	ldr	r2, [pc, #248]	@ (800188c <ReadADC_voltage_current+0x4bc>)
 8001792:	6013      	str	r3, [r2, #0]
    	if (NowMillis2 - BeforeMillis2 >= 1000){
 8001794:	4b3d      	ldr	r3, [pc, #244]	@ (800188c <ReadADC_voltage_current+0x4bc>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <ReadADC_voltage_current+0x4c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017a2:	f4ff ae19 	bcc.w	80013d8 <ReadADC_voltage_current+0x8>
    		CurrentFiltered2 = 0.2 * current2 + 0.8 * CurrentFiltered2;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <ReadADC_voltage_current+0x4c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fffe 	bl	80007ac <__aeabi_f2d>
 80017b0:	a32f      	add	r3, pc, #188	@ (adr r3, 8001870 <ReadADC_voltage_current+0x4a0>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7ff f851 	bl	800085c <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4614      	mov	r4, r2
 80017c0:	461d      	mov	r5, r3
 80017c2:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <ReadADC_voltage_current+0x4c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fff0 	bl	80007ac <__aeabi_f2d>
 80017cc:	a32a      	add	r3, pc, #168	@ (adr r3, 8001878 <ReadADC_voltage_current+0x4a8>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7ff f843 	bl	800085c <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	f7fe fe87 	bl	80004f0 <__adddf3>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff fb2f 	bl	8000e4c <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <ReadADC_voltage_current+0x4c8>)
 80017f2:	6013      	str	r3, [r2, #0]
    		ConsumptionEnergy2 += (CurrentFiltered2 / 3600);
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <ReadADC_voltage_current+0x4c8>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800189c <ReadADC_voltage_current+0x4cc>
 80017fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001802:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <ReadADC_voltage_current+0x4d0>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	4b24      	ldr	r3, [pc, #144]	@ (80018a0 <ReadADC_voltage_current+0x4d0>)
 800180e:	edc3 7a00 	vstr	s15, [r3]
    		batterypercentage2 = ((BatteryCapacity2 - ConsumptionEnergy2) / BatteryCapacity2) *100;
 8001812:	4b23      	ldr	r3, [pc, #140]	@ (80018a0 <ReadADC_voltage_current+0x4d0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe ffc8 	bl	80007ac <__aeabi_f2d>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	491f      	ldr	r1, [pc, #124]	@ (80018a4 <ReadADC_voltage_current+0x4d4>)
 8001826:	f7fe fe61 	bl	80004ec <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <ReadADC_voltage_current+0x4d4>)
 8001838:	f7ff f93a 	bl	8000ab0 <__aeabi_ddiv>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <ReadADC_voltage_current+0x4d8>)
 800184a:	f7ff f807 	bl	800085c <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	f7ff faf9 	bl	8000e4c <__aeabi_d2f>
 800185a:	4603      	mov	r3, r0
 800185c:	4a13      	ldr	r2, [pc, #76]	@ (80018ac <ReadADC_voltage_current+0x4dc>)
 800185e:	6013      	str	r3, [r2, #0]
    		BeforeMillis2 = NowMillis2;
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <ReadADC_voltage_current+0x4bc>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <ReadADC_voltage_current+0x4c0>)
 8001866:	6013      	str	r3, [r2, #0]
    while(1	) {
 8001868:	e5b6      	b.n	80013d8 <ReadADC_voltage_current+0x8>
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	9999999a 	.word	0x9999999a
 8001874:	3fc99999 	.word	0x3fc99999
 8001878:	9999999a 	.word	0x9999999a
 800187c:	3fe99999 	.word	0x3fe99999
 8001880:	20001924 	.word	0x20001924
 8001884:	200018e8 	.word	0x200018e8
 8001888:	200018ec 	.word	0x200018ec
 800188c:	200018f0 	.word	0x200018f0
 8001890:	200018f4 	.word	0x200018f4
 8001894:	20001914 	.word	0x20001914
 8001898:	20001928 	.word	0x20001928
 800189c:	45610000 	.word	0x45610000
 80018a0:	2000191c 	.word	0x2000191c
 80018a4:	40100000 	.word	0x40100000
 80018a8:	40590000 	.word	0x40590000
 80018ac:	2000192c 	.word	0x2000192c

080018b0 <Setup>:
//    		printf("percentage : %d %%\n", (int)round(batterypercentage1));
    	}
    }
}

void Setup(ULONG initial_input) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	Beep_Beep(2,100,50);
 80018b8:	2232      	movs	r2, #50	@ 0x32
 80018ba:	2164      	movs	r1, #100	@ 0x64
 80018bc:	2002      	movs	r0, #2
 80018be:	f000 f8a9 	bl	8001a14 <Beep_Beep>
    while(1) {
    	tx_thread_sleep(TX_WAIT_FOREVER);
 80018c2:	f04f 30ff 	mov.w	r0, #4294967295
 80018c6:	f009 fc2f 	bl	800b128 <_tx_thread_sleep>
 80018ca:	e7fa      	b.n	80018c2 <Setup+0x12>

080018cc <Set_LED>:
    }
}

void Set_LED(ULONG initial_input) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018d4:	2104      	movs	r1, #4
 80018d6:	4813      	ldr	r0, [pc, #76]	@ (8001924 <Set_LED+0x58>)
 80018d8:	f007 fc5a 	bl	8009190 <HAL_TIM_PWM_Start>
	while(1) {
		for(int i = 0; i < 4095; i++){
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	e009      	b.n	80018f6 <Set_LED+0x2a>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <Set_LED+0x58>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	639a      	str	r2, [r3, #56]	@ 0x38
			tx_thread_sleep(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f009 fc1c 	bl	800b128 <_tx_thread_sleep>
		for(int i = 0; i < 4095; i++){
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3301      	adds	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80018fc:	4293      	cmp	r3, r2
 80018fe:	ddf0      	ble.n	80018e2 <Set_LED+0x16>
		}
		for(int i = 4095; i > 0; i--){
 8001900:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	e009      	b.n	800191c <Set_LED+0x50>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <Set_LED+0x58>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	639a      	str	r2, [r3, #56]	@ 0x38
			tx_thread_sleep(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f009 fc09 	bl	800b128 <_tx_thread_sleep>
		for(int i = 4095; i > 0; i--){
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	3b01      	subs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dcf2      	bgt.n	8001908 <Set_LED+0x3c>
		for(int i = 0; i < 4095; i++){
 8001922:	e7db      	b.n	80018dc <Set_LED+0x10>
 8001924:	20001adc 	.word	0x20001adc

08001928 <Transmit>:
		}
	}
}

void Transmit(ULONG initial_input) {
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b0b4      	sub	sp, #208	@ 0xd0
 800192e:	af0c      	add	r7, sp, #48	@ 0x30
 8001930:	6178      	str	r0, [r7, #20]
	char buffer[128];
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8001932:	4830      	ldr	r0, [pc, #192]	@ (80019f4 <Transmit+0xcc>)
 8001934:	f008 fc82 	bl	800a23c <HAL_HalfDuplex_EnableTransmitter>
	while(1) {
		int len = snprintf(buffer, sizeof(buffer),
 8001938:	4b2f      	ldr	r3, [pc, #188]	@ (80019f8 <Transmit+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe ff35 	bl	80007ac <__aeabi_f2d>
 8001942:	4604      	mov	r4, r0
 8001944:	460d      	mov	r5, r1
 8001946:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <Transmit+0xd4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe ff2e 	bl	80007ac <__aeabi_f2d>
 8001950:	4680      	mov	r8, r0
 8001952:	4689      	mov	r9, r1
 8001954:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <Transmit+0xd8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe ff27 	bl	80007ac <__aeabi_f2d>
 800195e:	4682      	mov	sl, r0
 8001960:	468b      	mov	fp, r1
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <Transmit+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe ff20 	bl	80007ac <__aeabi_f2d>
 800196c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001970:	4b25      	ldr	r3, [pc, #148]	@ (8001a08 <Transmit+0xe0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe ff19 	bl	80007ac <__aeabi_f2d>
 800197a:	e9c7 0100 	strd	r0, r1, [r7]
				"Voltage1 : %.2f | current1 : %.4f | Voltage2 : %.2f | current2 : %.4f | Consumption : %.4f Ah | percentage : %d %%\n",
				voltage1, current1, voltage2, current2, ConsumptionEnergy1, (int)round(batterypercentage1));
 800197e:	4b23      	ldr	r3, [pc, #140]	@ (8001a0c <Transmit+0xe4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff12 	bl	80007ac <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	ec43 2b10 	vmov	d0, r2, r3
 8001990:	f00e fec8 	bl	8010724 <round>
 8001994:	ec53 2b10 	vmov	r2, r3, d0
		int len = snprintf(buffer, sizeof(buffer),
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fa0e 	bl	8000dbc <__aeabi_d2iz>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	920a      	str	r2, [sp, #40]	@ 0x28
 80019a8:	ed97 7b00 	vldr	d7, [r7]
 80019ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80019b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80019b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80019b8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80019bc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80019c0:	e9cd 4500 	strd	r4, r5, [sp]
 80019c4:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <Transmit+0xe8>)
 80019c6:	2180      	movs	r1, #128	@ 0x80
 80019c8:	4618      	mov	r0, r3
 80019ca:	f00b fa21 	bl	800ce10 <sniprintf>
 80019ce:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY);
 80019d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f107 011c 	add.w	r1, r7, #28
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	4804      	ldr	r0, [pc, #16]	@ (80019f4 <Transmit+0xcc>)
 80019e2:	f008 fb8d 	bl	800a100 <HAL_UART_Transmit>
		tx_thread_sleep(1000);
 80019e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ea:	f009 fb9d 	bl	800b128 <_tx_thread_sleep>
	while(1) {
 80019ee:	bf00      	nop
 80019f0:	e7a2      	b.n	8001938 <Transmit+0x10>
 80019f2:	bf00      	nop
 80019f4:	20001b28 	.word	0x20001b28
 80019f8:	20001908 	.word	0x20001908
 80019fc:	2000190c 	.word	0x2000190c
 8001a00:	20001910 	.word	0x20001910
 8001a04:	20001914 	.word	0x20001914
 8001a08:	20001918 	.word	0x20001918
 8001a0c:	20001924 	.word	0x20001924
 8001a10:	08010800 	.word	0x08010800

08001a14 <Beep_Beep>:
	}
}

//Function to produce a beep sound on the buzzer
void Beep_Beep(uint8_t cycle, uint16_t delay1, uint16_t delay2) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	80bb      	strh	r3, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	807b      	strh	r3, [r7, #2]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a26:	2100      	movs	r1, #0
 8001a28:	481a      	ldr	r0, [pc, #104]	@ (8001a94 <Beep_Beep+0x80>)
 8001a2a:	f007 fbb1 	bl	8009190 <HAL_TIM_PWM_Start>
	for (int i = 0; i < cycle; i++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e026      	b.n	8001a82 <Beep_Beep+0x6e>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a34:	2100      	movs	r1, #0
 8001a36:	4817      	ldr	r0, [pc, #92]	@ (8001a94 <Beep_Beep+0x80>)
 8001a38:	f007 fbaa 	bl	8009190 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 3000);
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <Beep_Beep+0x80>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(delay1);
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f009 fb6d 	bl	800b128 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a4e:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <Beep_Beep+0x80>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(50);
 8001a56:	2032      	movs	r0, #50	@ 0x32
 8001a58:	f009 fb66 	bl	800b128 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a94 <Beep_Beep+0x80>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a64:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(delay2);
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f009 fb5d 	bl	800b128 <_tx_thread_sleep>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <Beep_Beep+0x80>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2200      	movs	r2, #0
 8001a74:	635a      	str	r2, [r3, #52]	@ 0x34
		tx_thread_sleep(50);
 8001a76:	2032      	movs	r0, #50	@ 0x32
 8001a78:	f009 fb56 	bl	800b128 <_tx_thread_sleep>
	for (int i = 0; i < cycle; i++) {
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbd4      	blt.n	8001a34 <Beep_Beep+0x20>
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20001adc 	.word	0x20001adc

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9c:	f001 f826 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa0:	f000 f812 	bl	8001ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa4:	f000 faec 	bl	8002080 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001aa8:	f000 f920 	bl	8001cec <MX_GPDMA1_Init>
  MX_USART1_UART_Init();
 8001aac:	f000 fa50 	bl	8001f50 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001ab0:	f000 f992 	bl	8001dd8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001ab4:	f000 f87e 	bl	8001bb4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001ab8:	f000 f938 	bl	8001d2c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001abc:	f000 fa94 	bl	8001fe8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //tx_kernel_enter();
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001ac0:	f7ff fc80 	bl	80013c4 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <main+0x2c>

08001ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b09c      	sub	sp, #112	@ 0x70
 8001acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2250      	movs	r2, #80	@ 0x50
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00b fa31 	bl	800cf3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001aee:	4b2f      	ldr	r3, [pc, #188]	@ (8001bac <SystemClock_Config+0xe4>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	4a2e      	ldr	r2, [pc, #184]	@ (8001bac <SystemClock_Config+0xe4>)
 8001af4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001af8:	6113      	str	r3, [r2, #16]
 8001afa:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <SystemClock_Config+0xe4>)
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b06:	bf00      	nop
 8001b08:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <SystemClock_Config+0xe4>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d1f9      	bne.n	8001b08 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8001b14:	2312      	movs	r3, #18
 8001b16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b20:	2340      	movs	r3, #64	@ 0x40
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8001b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8001b32:	2302      	movs	r3, #2
 8001b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8001b3a:	2381      	movs	r3, #129	@ 0x81
 8001b3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f900 	bl	8005d60 <HAL_RCC_OscConfig>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b66:	f000 faff 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b6a:	231f      	movs	r3, #31
 8001b6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	2101      	movs	r1, #1
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fd21 	bl	80065d0 <HAL_RCC_ClockConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001b94:	f000 fae8 	bl	8002168 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <SystemClock_Config+0xe8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <SystemClock_Config+0xe8>)
 8001b9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ba2:	6013      	str	r3, [r2, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3770      	adds	r7, #112	@ 0x70
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	44020800 	.word	0x44020800
 8001bb0:	40022000 	.word	0x40022000

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f00b f9bc 	bl	800cf3e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bc6:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bc8:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <MX_ADC1_Init+0x124>)
 8001bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001bcc:	4b41      	ldr	r3, [pc, #260]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bda:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001be0:	4b3c      	ldr	r3, [pc, #240]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bf2:	4b38      	ldr	r3, [pc, #224]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001bf8:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bfe:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c12:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c20:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001c26:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c2e:	4829      	ldr	r0, [pc, #164]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c30:	f001 fa8a 	bl	8003148 <HAL_ADC_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c3a:	f000 fa95 	bl	8002168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <MX_ADC1_Init+0x128>)
 8001c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c42:	2306      	movs	r3, #6
 8001c44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001c46:	2305      	movs	r3, #5
 8001c48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c4a:	237f      	movs	r3, #127	@ 0x7f
 8001c4c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481e      	ldr	r0, [pc, #120]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c5c:	f001 fd30 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001c66:	f000 fa7f 	bl	8002168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce0 <MX_ADC1_Init+0x12c>)
 8001c6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001c72:	2304      	movs	r3, #4
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c7c:	f001 fd20 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001c86:	f000 fa6f 	bl	8002168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <MX_ADC1_Init+0x130>)
 8001c8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001c92:	2305      	movs	r3, #5
 8001c94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c96:	463b      	mov	r3, r7
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480e      	ldr	r0, [pc, #56]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001c9c:	f001 fd10 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8001ca6:	f000 fa5f 	bl	8002168 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <MX_ADC1_Init+0x134>)
 8001cac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cae:	2318      	movs	r3, #24
 8001cb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_ADC1_Init+0x120>)
 8001cbc:	f001 fd00 	bl	80036c0 <HAL_ADC_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001cc6:	f000 fa4f 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20001930 	.word	0x20001930
 8001cd8:	42028000 	.word	0x42028000
 8001cdc:	14f00020 	.word	0x14f00020
 8001ce0:	10c00010 	.word	0x10c00010
 8001ce4:	04300002 	.word	0x04300002
 8001ce8:	2a000400 	.word	0x2a000400

08001cec <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <MX_GPDMA1_Init+0x3c>)
 8001cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d28 <MX_GPDMA1_Init+0x3c>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001d02:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_GPDMA1_Init+0x3c>)
 8001d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2100      	movs	r1, #0
 8001d14:	201b      	movs	r0, #27
 8001d16:	f002 fbbd 	bl	8004494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001d1a:	201b      	movs	r0, #27
 8001d1c:	f002 fbd4 	bl	80044c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	44020c00 	.word	0x44020c00

08001d2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d30:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d32:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <MX_SPI1_Init+0xa8>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b26      	ldr	r3, [pc, #152]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001d44:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d46:	2203      	movs	r2, #3
 8001d48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d82:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_SPI1_Init+0xa4>)
 8001dbc:	f007 f818 	bl	8008df0 <HAL_SPI_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001dc6:	f000 f9cf 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20001a4c 	.word	0x20001a4c
 8001dd4:	40013000 	.word	0x40013000

08001dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09c      	sub	sp, #112	@ 0x70
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2234      	movs	r2, #52	@ 0x34
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00b f893 	bl	800cf3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e18:	4b4b      	ldr	r3, [pc, #300]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f4c <MX_TIM1_Init+0x174>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b48      	ldr	r3, [pc, #288]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e2c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001e30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b45      	ldr	r3, [pc, #276]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e38:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e44:	4840      	ldr	r0, [pc, #256]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e46:	f007 f8ea 	bl	800901e <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 f98a 	bl	8002168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4839      	ldr	r0, [pc, #228]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e62:	f007 fb77 	bl	8009554 <HAL_TIM_ConfigClockSource>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e6c:	f000 f97c 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e70:	4835      	ldr	r0, [pc, #212]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e72:	f007 f92b 	bl	80090cc <HAL_TIM_PWM_Init>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e7c:	f000 f974 	bl	8002168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e90:	4619      	mov	r1, r3
 8001e92:	482d      	ldr	r0, [pc, #180]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001e94:	f007 ffee 	bl	8009e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e9e:	f000 f963 	bl	8002168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea2:	2360      	movs	r3, #96	@ 0x60
 8001ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4820      	ldr	r0, [pc, #128]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001ec8:	f007 fa30 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001ed2:	f000 f949 	bl	8002168 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ed6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eda:	2204      	movs	r2, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	481a      	ldr	r0, [pc, #104]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001ee0:	f007 fa24 	bl	800932c <HAL_TIM_PWM_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001eea:	f000 f93d 	bl	8002168 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001f2c:	f008 f80a 	bl	8009f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001f36:	f000 f917 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f3a:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <MX_TIM1_Init+0x170>)
 8001f3c:	f000 fb3c 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3770      	adds	r7, #112	@ 0x70
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20001adc 	.word	0x20001adc
 8001f4c:	40012c00 	.word	0x40012c00

08001f50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f54:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f56:	4a23      	ldr	r2, [pc, #140]	@ (8001fe4 <MX_USART1_UART_Init+0x94>)
 8001f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001f98:	4811      	ldr	r0, [pc, #68]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001f9a:	f008 f859 	bl	800a050 <HAL_HalfDuplex_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001fa4:	f000 f8e0 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fa8:	2100      	movs	r1, #0
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fac:	f008 fd70 	bl	800aa90 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001fb6:	f000 f8d7 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4808      	ldr	r0, [pc, #32]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fbe:	f008 fda5 	bl	800ab0c <HAL_UARTEx_SetRxFifoThreshold>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001fc8:	f000 f8ce 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_USART1_UART_Init+0x90>)
 8001fce:	f008 fd26 	bl	800aa1e <HAL_UARTEx_DisableFifoMode>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001fd8:	f000 f8c6 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20001b28 	.word	0x20001b28
 8001fe4:	40013800 	.word	0x40013800

08001fe8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fec:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8001fee:	4a23      	ldr	r2, [pc, #140]	@ (800207c <MX_USART2_UART_Init+0x94>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202a:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002030:	4811      	ldr	r0, [pc, #68]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002032:	f008 f80d 	bl	800a050 <HAL_HalfDuplex_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800203c:	f000 f894 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002044:	f008 fd24 	bl	800aa90 <HAL_UARTEx_SetTxFifoThreshold>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800204e:	f000 f88b 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002052:	2100      	movs	r1, #0
 8002054:	4808      	ldr	r0, [pc, #32]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002056:	f008 fd59 	bl	800ab0c <HAL_UARTEx_SetRxFifoThreshold>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002060:	f000 f882 	bl	8002168 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002064:	4804      	ldr	r0, [pc, #16]	@ (8002078 <MX_USART2_UART_Init+0x90>)
 8002066:	f008 fcda 	bl	800aa1e <HAL_UARTEx_DisableFifoMode>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002070:	f000 f87a 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20001bbc 	.word	0x20001bbc
 800207c:	40004400 	.word	0x40004400

08002080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <MX_GPIO_Init+0xc8>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209c:	4a2a      	ldr	r2, [pc, #168]	@ (8002148 <MX_GPIO_Init+0xc8>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020a6:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ba:	4a23      	ldr	r2, [pc, #140]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020c4:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020e2:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <MX_GPIO_Init+0xc8>)
 80020e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2110      	movs	r1, #16
 80020f4:	4815      	ldr	r0, [pc, #84]	@ (800214c <MX_GPIO_Init+0xcc>)
 80020f6:	f003 fe1b 	bl	8005d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002100:	4813      	ldr	r0, [pc, #76]	@ (8002150 <MX_GPIO_Init+0xd0>)
 8002102:	f003 fe15 	bl	8005d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002106:	2310      	movs	r3, #16
 8002108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4619      	mov	r1, r3
 800211c:	480b      	ldr	r0, [pc, #44]	@ (800214c <MX_GPIO_Init+0xcc>)
 800211e:	f003 fcb5 	bl	8005a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002122:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4619      	mov	r1, r3
 800213a:	4805      	ldr	r0, [pc, #20]	@ (8002150 <MX_GPIO_Init+0xd0>)
 800213c:	f003 fca6 	bl	8005a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	44020c00 	.word	0x44020c00
 800214c:	42020000 	.word	0x42020000
 8002150:	42020400 	.word	0x42020400

08002154 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
		//ReadADC_voltage_current();
	}
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0c8      	sub	sp, #288	@ 0x120
 8002188:	af00      	add	r7, sp, #0
 800218a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800218e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002192:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021ac:	4618      	mov	r0, r3
 80021ae:	2388      	movs	r3, #136	@ 0x88
 80021b0:	461a      	mov	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	f00a fec3 	bl	800cf3e <memset>
  if(hadc->Instance==ADC1)
 80021b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021bc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a9b      	ldr	r2, [pc, #620]	@ (8002434 <HAL_ADC_MspInit+0x2b0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	f040 812e 	bne.w	8002428 <HAL_ADC_MspInit+0x2a4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80021cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021d0:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80021d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80021e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80021e8:	2200      	movs	r2, #0
 80021ea:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ec:	f107 0318 	add.w	r3, r7, #24
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fd2f 	bl	8006c54 <HAL_RCCEx_PeriphCLKConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80021fc:	f7ff ffb4 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002200:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002206:	4a8c      	ldr	r2, [pc, #560]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002208:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002210:	4b89      	ldr	r3, [pc, #548]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002212:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002216:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 800221a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800221e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002228:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800222c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b82      	ldr	r3, [pc, #520]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002234:	4a80      	ldr	r2, [pc, #512]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800223e:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002244:	f003 0204 	and.w	r2, r3, #4
 8002248:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800224c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002256:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800225a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b76      	ldr	r3, [pc, #472]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 800225e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002262:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800226c:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 800226e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800227a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002284:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002288:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b6b      	ldr	r3, [pc, #428]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002290:	4a69      	ldr	r2, [pc, #420]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800229a:	4b67      	ldr	r3, [pc, #412]	@ (8002438 <HAL_ADC_MspInit+0x2b4>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a0:	f003 0202 	and.w	r2, r3, #2
 80022a4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80022b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022b6:	681b      	ldr	r3, [r3, #0]
    PC0     ------> ADC1_INP10
    PA1     ------> ADC1_INP1
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80022b8:	2311      	movs	r3, #17
 80022ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022be:	2303      	movs	r3, #3
 80022c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022ce:	4619      	mov	r1, r3
 80022d0:	485a      	ldr	r0, [pc, #360]	@ (800243c <HAL_ADC_MspInit+0x2b8>)
 80022d2:	f003 fbdb 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022dc:	2303      	movs	r3, #3
 80022de:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80022ec:	4619      	mov	r1, r3
 80022ee:	4854      	ldr	r0, [pc, #336]	@ (8002440 <HAL_ADC_MspInit+0x2bc>)
 80022f0:	f003 fbcc 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800230a:	4619      	mov	r1, r3
 800230c:	484d      	ldr	r0, [pc, #308]	@ (8002444 <HAL_ADC_MspInit+0x2c0>)
 800230e:	f003 fbbd 	bl	8005a8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8002312:	2321      	movs	r3, #33	@ 0x21
 8002314:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NodeConfig.Init.Request = GPDMA1_REQUEST_ADC1;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    NodeConfig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    NodeConfig.Init.DestInc = DMA_DINC_INCREMENTED;
 8002330:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 8002338:	2302      	movs	r3, #2
 800233a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 800233e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002342:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    NodeConfig.Init.SrcBurstLength = 1;
 8002346:	2301      	movs	r3, #1
 8002348:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    NodeConfig.Init.DestBurstLength = 1;
 800234c:	2301      	movs	r3, #1
 800234e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002352:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002356:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    NodeConfig.Init.Mode = DMA_NORMAL;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel0) != HAL_OK)
 8002378:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800237c:	4932      	ldr	r1, [pc, #200]	@ (8002448 <HAL_ADC_MspInit+0x2c4>)
 800237e:	4618      	mov	r0, r3
 8002380:	f002 fd48 	bl	8004e14 <HAL_DMAEx_List_BuildNode>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_ADC_MspInit+0x20a>
    {
      Error_Handler();
 800238a:	f7ff feed 	bl	8002168 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel0, NULL, &Node_GPDMA1_Channel0) != HAL_OK)
 800238e:	4a2e      	ldr	r2, [pc, #184]	@ (8002448 <HAL_ADC_MspInit+0x2c4>)
 8002390:	2100      	movs	r1, #0
 8002392:	482e      	ldr	r0, [pc, #184]	@ (800244c <HAL_ADC_MspInit+0x2c8>)
 8002394:	f002 fd6a 	bl	8004e6c <HAL_DMAEx_List_InsertNode>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_ADC_MspInit+0x21e>
    {
      Error_Handler();
 800239e:	f7ff fee3 	bl	8002168 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel0) != HAL_OK)
 80023a2:	482a      	ldr	r0, [pc, #168]	@ (800244c <HAL_ADC_MspInit+0x2c8>)
 80023a4:	f002 fe2b 	bl	8004ffe <HAL_DMAEx_List_SetCircularMode>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_ADC_MspInit+0x22e>
    {
      Error_Handler();
 80023ae:	f7ff fedb 	bl	8002168 <Error_Handler>
    }

    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80023b2:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023b4:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_ADC_MspInit+0x2d0>)
 80023b6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023be:	639a      	str	r2, [r3, #56]	@ 0x38
    handle_GPDMA1_Channel0.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 80023c0:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    handle_GPDMA1_Channel0.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80023c6:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40
    handle_GPDMA1_Channel0.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44
    handle_GPDMA1_Channel0.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80023d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023d4:	2281      	movs	r2, #129	@ 0x81
 80023d6:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80023d8:	481d      	ldr	r0, [pc, #116]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023da:	f002 fbd1 	bl	8004b80 <HAL_DMAEx_List_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_ADC_MspInit+0x264>
    {
      Error_Handler();
 80023e4:	f7ff fec0 	bl	8002168 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel0, &List_GPDMA1_Channel0) != HAL_OK)
 80023e8:	4918      	ldr	r1, [pc, #96]	@ (800244c <HAL_ADC_MspInit+0x2c8>)
 80023ea:	4819      	ldr	r0, [pc, #100]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 80023ec:	f002 fe68 	bl	80050c0 <HAL_DMAEx_List_LinkQ>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_ADC_MspInit+0x276>
    {
      Error_Handler();
 80023f6:	f7ff feb7 	bl	8002168 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel0);
 80023fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a12      	ldr	r2, [pc, #72]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 8002406:	651a      	str	r2, [r3, #80]	@ 0x50
 8002408:	4a11      	ldr	r2, [pc, #68]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 800240a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800240e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002416:	2110      	movs	r1, #16
 8002418:	480d      	ldr	r0, [pc, #52]	@ (8002450 <HAL_ADC_MspInit+0x2cc>)
 800241a:	f002 fb50 	bl	8004abe <HAL_DMA_ConfigChannelAttributes>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_ADC_MspInit+0x2a4>
    {
      Error_Handler();
 8002424:	f7ff fea0 	bl	8002168 <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002428:	bf00      	nop
 800242a:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	42028000 	.word	0x42028000
 8002438:	44020c00 	.word	0x44020c00
 800243c:	42020800 	.word	0x42020800
 8002440:	42020000 	.word	0x42020000
 8002444:	42020400 	.word	0x42020400
 8002448:	20001998 	.word	0x20001998
 800244c:	200019bc 	.word	0x200019bc
 8002450:	200019d4 	.word	0x200019d4
 8002454:	40020050 	.word	0x40020050

08002458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b0ae      	sub	sp, #184	@ 0xb8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002470:	f107 0318 	add.w	r3, r7, #24
 8002474:	2288      	movs	r2, #136	@ 0x88
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f00a fd60 	bl	800cf3e <memset>
  if(hspi->Instance==SPI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a38      	ldr	r2, [pc, #224]	@ (8002564 <HAL_SPI_MspInit+0x10c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d169      	bne.n	800255c <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002488:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800249a:	f107 0318 	add.w	r3, r7, #24
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 fbd8 	bl	8006c54 <HAL_RCCEx_PeriphCLKConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80024aa:	f7ff fe5d 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024ba:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b26      	ldr	r3, [pc, #152]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d2:	4a25      	ldr	r2, [pc, #148]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024f2:	f043 0302 	orr.w	r3, r3, #2
 80024f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <HAL_SPI_MspInit+0x110>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002508:	23c0      	movs	r3, #192	@ 0xc0
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002520:	2305      	movs	r3, #5
 8002522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800252a:	4619      	mov	r1, r3
 800252c:	480f      	ldr	r0, [pc, #60]	@ (800256c <HAL_SPI_MspInit+0x114>)
 800252e:	f003 faad 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002532:	2308      	movs	r3, #8
 8002534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800254a:	2305      	movs	r3, #5
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002550:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	@ (8002570 <HAL_SPI_MspInit+0x118>)
 8002558:	f003 fa98 	bl	8005a8c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800255c:	bf00      	nop
 800255e:	37b8      	adds	r7, #184	@ 0xb8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40013000 	.word	0x40013000
 8002568:	44020c00 	.word	0x44020c00
 800256c:	42020000 	.word	0x42020000
 8002570:	42020400 	.word	0x42020400

08002574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0b      	ldr	r2, [pc, #44]	@ (80025b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002586:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800258c:	4a09      	ldr	r2, [pc, #36]	@ (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 800258e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002592:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_TIM_Base_MspInit+0x40>)
 8002598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800259c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	44020c00 	.word	0x44020c00

080025b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a22      	ldr	r2, [pc, #136]	@ (8002660 <HAL_TIM_MspPostInit+0xa8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d13e      	bne.n	8002658 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 80025dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e0:	4a20      	ldr	r2, [pc, #128]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 80025fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025fe:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002608:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_TIM_MspPostInit+0xac>)
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC7     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002616:	2380      	movs	r3, #128	@ 0x80
 8002618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002626:	2301      	movs	r3, #1
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	480d      	ldr	r0, [pc, #52]	@ (8002668 <HAL_TIM_MspPostInit+0xb0>)
 8002632:	f003 fa2b 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002636:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002648:	2301      	movs	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4806      	ldr	r0, [pc, #24]	@ (800266c <HAL_TIM_MspPostInit+0xb4>)
 8002654:	f003 fa1a 	bl	8005a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	@ 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40012c00 	.word	0x40012c00
 8002664:	44020c00 	.word	0x44020c00
 8002668:	42020800 	.word	0x42020800
 800266c:	42020000 	.word	0x42020000

08002670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0ae      	sub	sp, #184	@ 0xb8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002688:	f107 0318 	add.w	r3, r7, #24
 800268c:	2288      	movs	r2, #136	@ 0x88
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f00a fc54 	bl	800cf3e <memset>
  if(huart->Instance==USART1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4c      	ldr	r2, [pc, #304]	@ (80027cc <HAL_UART_MspInit+0x15c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d146      	bne.n	800272e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026a0:	f04f 0201 	mov.w	r2, #1
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 facd 	bl	8006c54 <HAL_RCCEx_PeriphCLKConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80026c0:	f7ff fd52 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026c4:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026ca:	4a41      	ldr	r2, [pc, #260]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026d4:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026e8:	4a39      	ldr	r2, [pc, #228]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026f2:	4b37      	ldr	r3, [pc, #220]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 80026f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002708:	2312      	movs	r3, #18
 800270a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800271a:	2307      	movs	r3, #7
 800271c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002724:	4619      	mov	r1, r3
 8002726:	482b      	ldr	r0, [pc, #172]	@ (80027d4 <HAL_UART_MspInit+0x164>)
 8002728:	f003 f9b0 	bl	8005a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272c:	e049      	b.n	80027c2 <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a29      	ldr	r2, [pc, #164]	@ (80027d8 <HAL_UART_MspInit+0x168>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d144      	bne.n	80027c2 <HAL_UART_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002738:	f04f 0202 	mov.w	r2, #2
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002744:	2300      	movs	r3, #0
 8002746:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	4618      	mov	r0, r3
 800274e:	f004 fa81 	bl	8006c54 <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_MspInit+0xec>
      Error_Handler();
 8002758:	f7ff fd06 	bl	8002168 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 800275e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002762:	4a1b      	ldr	r2, [pc, #108]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 8002764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002768:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800276c:	4b18      	ldr	r3, [pc, #96]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 800276e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 800277c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002780:	4a13      	ldr	r2, [pc, #76]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800278a:	4b11      	ldr	r3, [pc, #68]	@ (80027d0 <HAL_UART_MspInit+0x160>)
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002798:	2304      	movs	r3, #4
 800279a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279e:	2312      	movs	r3, #18
 80027a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027b0:	2307      	movs	r3, #7
 80027b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	@ (80027d4 <HAL_UART_MspInit+0x164>)
 80027be:	f003 f965 	bl	8005a8c <HAL_GPIO_Init>
}
 80027c2:	bf00      	nop
 80027c4:	37b8      	adds	r7, #184	@ 0xb8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40013800 	.word	0x40013800
 80027d0:	44020c00 	.word	0x44020c00
 80027d4:	42020000 	.word	0x42020000
 80027d8:	40004400 	.word	0x40004400

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <NMI_Handler+0x4>

080027e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <HardFault_Handler+0x4>

080027ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <MemManage_Handler+0x4>

080027f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <BusFault_Handler+0x4>

080027fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002800:	bf00      	nop
 8002802:	e7fd      	b.n	8002800 <UsageFault_Handler+0x4>

08002804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8002818:	4802      	ldr	r0, [pc, #8]	@ (8002824 <GPDMA1_Channel0_IRQHandler+0x10>)
 800281a:	f001 ffef 	bl	80047fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200019d4 	.word	0x200019d4

08002828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return 1;
 800282c:	2301      	movs	r3, #1
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_kill>:

int _kill(int pid, int sig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002842:	f00a fbcf 	bl	800cfe4 <__errno>
 8002846:	4603      	mov	r3, r0
 8002848:	2216      	movs	r2, #22
 800284a:	601a      	str	r2, [r3, #0]
  return -1;
 800284c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <_exit>:

void _exit (int status)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ffe7 	bl	8002838 <_kill>
  while (1) {}    /* Make sure we hang here */
 800286a:	bf00      	nop
 800286c:	e7fd      	b.n	800286a <_exit+0x12>

0800286e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b086      	sub	sp, #24
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e00a      	b.n	8002896 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002880:	f3af 8000 	nop.w
 8002884:	4601      	mov	r1, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	60ba      	str	r2, [r7, #8]
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	dbf0      	blt.n	8002880 <_read+0x12>
  }

  return len;
 800289e:	687b      	ldr	r3, [r7, #4]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e009      	b.n	80028ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	60ba      	str	r2, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbf1      	blt.n	80028ba <_write+0x12>
  }
  return len;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_close>:

int _close(int file)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002908:	605a      	str	r2, [r3, #4]
  return 0;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <_isatty>:

int _isatty(int file)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002920:	2301      	movs	r3, #1
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800292e:	b480      	push	{r7}
 8002930:	b085      	sub	sp, #20
 8002932:	af00      	add	r7, sp, #0
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002950:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <_sbrk+0x5c>)
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <_sbrk+0x60>)
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <_sbrk+0x64>)
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <_sbrk+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d207      	bcs.n	8002988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002978:	f00a fb34 	bl	800cfe4 <__errno>
 800297c:	4603      	mov	r3, r0
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e009      	b.n	800299c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298e:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	4a05      	ldr	r2, [pc, #20]	@ (80029ac <_sbrk+0x64>)
 8002998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20008000 	.word	0x20008000
 80029a8:	00000400 	.word	0x00000400
 80029ac:	20001c50 	.word	0x20001c50
 80029b0:	200023e8 	.word	0x200023e8

080029b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029ba:	4b30      	ldr	r3, [pc, #192]	@ (8002a7c <SystemInit+0xc8>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c0:	4a2e      	ldr	r2, [pc, #184]	@ (8002a7c <SystemInit+0xc8>)
 80029c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <SystemInit+0xcc>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <SystemInit+0xcc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <SystemInit+0xcc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <SystemInit+0xcc>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4927      	ldr	r1, [pc, #156]	@ (8002a80 <SystemInit+0xcc>)
 80029e2:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <SystemInit+0xd0>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80029e8:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <SystemInit+0xcc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <SystemInit+0xcc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80029f4:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <SystemInit+0xcc>)
 80029f6:	4a24      	ldr	r2, [pc, #144]	@ (8002a88 <SystemInit+0xd4>)
 80029f8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80029fa:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <SystemInit+0xcc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <SystemInit+0xcc>)
 8002a02:	4a21      	ldr	r2, [pc, #132]	@ (8002a88 <SystemInit+0xd4>)
 8002a04:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <SystemInit+0xcc>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <SystemInit+0xcc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1b      	ldr	r2, [pc, #108]	@ (8002a80 <SystemInit+0xcc>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <SystemInit+0xcc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <SystemInit+0xc8>)
 8002a20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a24:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <SystemInit+0xd8>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002a2e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002a36:	d003      	beq.n	8002a40 <SystemInit+0x8c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002a3e:	d117      	bne.n	8002a70 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002a40:	4b12      	ldr	r3, [pc, #72]	@ (8002a8c <SystemInit+0xd8>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <SystemInit+0xd8>)
 8002a4e:	4a10      	ldr	r2, [pc, #64]	@ (8002a90 <SystemInit+0xdc>)
 8002a50:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <SystemInit+0xd8>)
 8002a54:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <SystemInit+0xe0>)
 8002a56:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <SystemInit+0xd8>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a8c <SystemInit+0xd8>)
 8002a5e:	f043 0302 	orr.w	r3, r3, #2
 8002a62:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002a64:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <SystemInit+0xd8>)
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <SystemInit+0xd8>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	61d3      	str	r3, [r2, #28]
  }
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00
 8002a80:	44020c00 	.word	0x44020c00
 8002a84:	fae2eae3 	.word	0xfae2eae3
 8002a88:	01010280 	.word	0x01010280
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	08192a3b 	.word	0x08192a3b
 8002a94:	4c5d6e7f 	.word	0x4c5d6e7f

08002a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002a9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002a9e:	e003      	b.n	8002aa8 <LoopCopyDataInit>

08002aa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002aa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002aa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002aa6:	3104      	adds	r1, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002aa8:	480b      	ldr	r0, [pc, #44]	@ (8002ad8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <LoopForever+0xe>)
	adds	r2, r0, r1
 8002aac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002aae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ab0:	d3f6      	bcc.n	8002aa0 <CopyDataInit>
	ldr	r2, =_sbss
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ab4:	e002      	b.n	8002abc <LoopFillZerobss>

08002ab6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ab6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ab8:	f842 3b04 	str.w	r3, [r2], #4

08002abc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <LoopForever+0x16>)
	cmp	r2, r3
 8002abe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ac0:	d3f9      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ac2:	f7ff ff77 	bl	80029b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f00a fa93 	bl	800cff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aca:	f7fe ffe5 	bl	8001a98 <main>

08002ace <LoopForever>:

LoopForever:
    b LoopForever
 8002ace:	e7fe      	b.n	8002ace <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002ad0:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8002ad4:	08010d08 	.word	0x08010d08
	ldr	r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002adc:	200001d8 	.word	0x200001d8
	ldr	r2, =_sbss
 8002ae0:	200001d8 	.word	0x200001d8
	ldr	r3, = _ebss
 8002ae4:	200023e4 	.word	0x200023e4

08002ae8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC1_IRQHandler>
	...

08002aec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f001 fcc4 	bl	800447e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002af6:	f003 ff23 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <HAL_Init+0x44>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	490b      	ldr	r1, [pc, #44]	@ (8002b34 <HAL_Init+0x48>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_Init+0x4c>)
 8002b0e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002b10:	2004      	movs	r0, #4
 8002b12:	f001 fd09 	bl	8004528 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f810 	bl	8002b3c <HAL_InitTick>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e002      	b.n	8002b2c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b26:	f7ff fb25 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	44020c00 	.word	0x44020c00
 8002b34:	08010888 	.word	0x08010888
 8002b38:	20000000 	.word	0x20000000

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b48:	4b33      	ldr	r3, [pc, #204]	@ (8002c18 <HAL_InitTick+0xdc>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e05c      	b.n	8002c0e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002b54:	4b31      	ldr	r3, [pc, #196]	@ (8002c1c <HAL_InitTick+0xe0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d10c      	bne.n	8002b7a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002b60:	4b2f      	ldr	r3, [pc, #188]	@ (8002c20 <HAL_InitTick+0xe4>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b2c      	ldr	r3, [pc, #176]	@ (8002c18 <HAL_InitTick+0xdc>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e037      	b.n	8002bea <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002b7a:	f001 fd2d 	bl	80045d8 <HAL_SYSTICK_GetCLKSourceConfig>
 8002b7e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d023      	beq.n	8002bce <HAL_InitTick+0x92>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d82d      	bhi.n	8002be8 <HAL_InitTick+0xac>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_InitTick+0x5e>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d00d      	beq.n	8002bb4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002b98:	e026      	b.n	8002be8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002b9a:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_InitTick+0xe4>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_InitTick+0xdc>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ba8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	60fb      	str	r3, [r7, #12]
        break;
 8002bb2:	e01a      	b.n	8002bea <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bb4:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <HAL_InitTick+0xdc>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bc2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	60fb      	str	r3, [r7, #12]
        break;
 8002bcc:	e00d      	b.n	8002bea <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_InitTick+0xdc>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bdc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	60fb      	str	r3, [r7, #12]
        break;
 8002be6:	e000      	b.n	8002bea <HAL_InitTick+0xae>
        break;
 8002be8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f001 fc7a 	bl	80044e4 <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e009      	b.n	8002c0e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002c02:	f001 fc47 	bl	8004494 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_InitTick+0xe8>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	e000e010 	.word	0xe000e010
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000004 	.word	0x20000004

08002c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_GetTick+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20001c54 	.word	0x20001c54

08002c40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002cd6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	42028000 	.word	0x42028000

08002cf4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3360      	adds	r3, #96	@ 0x60
 8002d06:	461a      	mov	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <LL_ADC_SetOffset+0x44>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	03fff000 	.word	0x03fff000

08002d3c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3360      	adds	r3, #96	@ 0x60
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3360      	adds	r3, #96	@ 0x60
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002d92:	bf00      	nop
 8002d94:	371c      	adds	r7, #28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b087      	sub	sp, #28
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	60f8      	str	r0, [r7, #12]
 8002da6:	60b9      	str	r1, [r7, #8]
 8002da8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3360      	adds	r3, #96	@ 0x60
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3360      	adds	r3, #96	@ 0x60
 8002de4:	461a      	mov	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002dfe:	bf00      	nop
 8002e00:	371c      	adds	r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	615a      	str	r2, [r3, #20]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b087      	sub	sp, #28
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3330      	adds	r3, #48	@ 0x30
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	0a1b      	lsrs	r3, r3, #8
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f003 030c 	and.w	r3, r3, #12
 8002e72:	4413      	add	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	211f      	movs	r1, #31
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 011f 	and.w	r1, r3, #31
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0e5b      	lsrs	r3, r3, #25
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	4413      	add	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2107      	movs	r1, #7
 8002edc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	0d1b      	lsrs	r3, r3, #20
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	401a      	ands	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0318 	and.w	r3, r3, #24
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f28:	40d9      	lsrs	r1, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	000fffff 	.word	0x000fffff

08002f4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6093      	str	r3, [r2, #8]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f84:	d101      	bne.n	8002f8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003020:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003024:	f043 0202 	orr.w	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <LL_ADC_IsEnabled+0x18>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <LL_ADC_IsEnabled+0x1a>
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b02      	cmp	r3, #2
 8003070:	d101      	bne.n	8003076 <LL_ADC_IsDisableOngoing+0x18>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <LL_ADC_IsDisableOngoing+0x1a>
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003098:	f043 0204 	orr.w	r2, r3, #4
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030c0:	f043 0210 	orr.w	r2, r3, #16
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d101      	bne.n	80030ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800310a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d101      	bne.n	800313a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e131      	b.n	80033c6 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff f807 	bl	8002184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fef1 	bl	8002f70 <LL_ADC_IsDeepPowerDownEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fed7 	bl	8002f4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff0c 	bl	8002fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fef0 	bl	8002f98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b8:	4b85      	ldr	r3, [pc, #532]	@ (80033d0 <HAL_ADC_Init+0x288>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	4a85      	ldr	r2, [pc, #532]	@ (80033d4 <HAL_ADC_Init+0x28c>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031cc:	e002      	b.n	80031d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f9      	bne.n	80031ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff feee 	bl	8002fc0 <LL_ADC_IsInternalRegulatorEnabled>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10d      	bne.n	8003206 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ee:	f043 0210 	orr.w	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff62 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 8003210:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 80ca 	bne.w	80033b4 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 80c6 	bne.w	80033b4 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff fefb 	bl	8003038 <LL_ADC_IsEnabled>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	4863      	ldr	r0, [pc, #396]	@ (80033d8 <HAL_ADC_Init+0x290>)
 800324a:	f7ff fef5 	bl	8003038 <LL_ADC_IsEnabled>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4619      	mov	r1, r3
 800325a:	4860      	ldr	r0, [pc, #384]	@ (80033dc <HAL_ADC_Init+0x294>)
 800325c:	f7ff fcf0 	bl	8002c40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7e5b      	ldrb	r3, [r3, #25]
 8003264:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800326a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003270:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003276:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	3b01      	subs	r3, #1
 8003294:	045b      	lsls	r3, r3, #17
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b48      	ldr	r3, [pc, #288]	@ (80033e0 <HAL_ADC_Init+0x298>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	69b9      	ldr	r1, [r7, #24]
 80032c8:	430b      	orrs	r3, r1
 80032ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff1b 	bl	8003122 <LL_ADC_INJ_IsConversionOngoing>
 80032ec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d13d      	bne.n	8003370 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d13a      	bne.n	8003370 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	7e1b      	ldrb	r3, [r3, #24]
 80032fe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003306:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003316:	f023 0302 	bic.w	r3, r3, #2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332a:	2b01      	cmp	r3, #1
 800332c:	d118      	bne.n	8003360 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003338:	f023 0304 	bic.w	r3, r3, #4
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800334a:	4311      	orrs	r1, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	e007      	b.n	8003370 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d10c      	bne.n	8003392 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	f023 010f 	bic.w	r1, r3, #15
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	1e5a      	subs	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003390:	e007      	b.n	80033a2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 020f 	bic.w	r2, r2, #15
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b2:	e007      	b.n	80033c4 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f043 0210 	orr.w	r2, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3720      	adds	r7, #32
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000
 80033d4:	053e2d63 	.word	0x053e2d63
 80033d8:	42028000 	.word	0x42028000
 80033dc:	42028300 	.word	0x42028300
 80033e0:	fff04007 	.word	0xfff04007

080033e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b0a2      	sub	sp, #136	@ 0x88
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fe6d 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 80d9 	bne.w	80035b4 <HAL_ADC_Start_DMA+0x1d0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_ADC_Start_DMA+0x2c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0d6      	b.n	80035be <HAL_ADC_Start_DMA+0x1da>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fe0d 	bl	8004038 <ADC_Enable>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003424:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003428:	2b00      	cmp	r3, #0
 800342a:	f040 80be 	bne.w	80035aa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_ADC_Start_DMA+0x78>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003452:	f023 0206 	bic.w	r2, r3, #6
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	65da      	str	r2, [r3, #92]	@ 0x5c
 800345a:	e002      	b.n	8003462 <HAL_ADC_Start_DMA+0x7e>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_ADC_Start_DMA+0x1e4>)
 8003468:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346e:	4a57      	ldr	r2, [pc, #348]	@ (80035cc <HAL_ADC_Start_DMA+0x1e8>)
 8003470:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003476:	4a56      	ldr	r2, [pc, #344]	@ (80035d0 <HAL_ADC_Start_DMA+0x1ec>)
 8003478:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	221c      	movs	r2, #28
 8003480:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0210 	orr.w	r2, r2, #16
 8003498:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d04d      	beq.n	8003554 <HAL_ADC_Start_DMA+0x170>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d046      	beq.n	8003550 <HAL_ADC_Start_DMA+0x16c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d040      	beq.n	8003550 <HAL_ADC_Start_DMA+0x16c>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f001 fcaf 	bl	8004e40 <HAL_DMAEx_List_GetNodeConfig>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_ADC_Start_DMA+0x108>
            {
              return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e068      	b.n	80035be <HAL_ADC_Start_DMA+0x1da>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d104      	bne.n	80034fc <HAL_ADC_Start_DMA+0x118>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034fa:	e00a      	b.n	8003512 <HAL_ADC_Start_DMA+0x12e>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d104      	bne.n	800350c <HAL_ADC_Start_DMA+0x128>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800350a:	e002      	b.n	8003512 <HAL_ADC_Start_DMA+0x12e>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003516:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800351e:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f001 fbd2 	bl	8004cec <HAL_DMAEx_List_Start_IT>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800354e:	e026      	b.n	800359e <HAL_ADC_Start_DMA+0x1ba>
          }
          else
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e034      	b.n	80035be <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d104      	bne.n	8003568 <HAL_ADC_Start_DMA+0x184>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003566:	e00c      	b.n	8003582 <HAL_ADC_Start_DMA+0x19e>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d104      	bne.n	800357c <HAL_ADC_Start_DMA+0x198>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800357a:	e002      	b.n	8003582 <HAL_ADC_Start_DMA+0x19e>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3340      	adds	r3, #64	@ 0x40
 800358c:	4619      	mov	r1, r3
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003594:	f001 f856 	bl	8004644 <HAL_DMA_Start_IT>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fd6e 	bl	8003084 <LL_ADC_REG_StartConversion>
 80035a8:	e007      	b.n	80035ba <HAL_ADC_Start_DMA+0x1d6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80035b2:	e002      	b.n	80035ba <HAL_ADC_Start_DMA+0x1d6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 80035ba:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3788      	adds	r7, #136	@ 0x88
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	080041fb 	.word	0x080041fb
 80035cc:	080042d3 	.word	0x080042d3
 80035d0:	080042ef 	.word	0x080042ef

080035d4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_Stop_DMA+0x16>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e051      	b.n	800368e <HAL_ADC_Stop_DMA+0xba>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035f2:	2103      	movs	r1, #3
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fc63 	bl	8003ec0 <ADC_ConversionStop>
 80035fa:	4603      	mov	r3, r0
 80035fc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13f      	bne.n	8003684 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0201 	bic.w	r2, r2, #1
 8003612:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003618:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d10f      	bne.n	8003642 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003626:	4618      	mov	r0, r3
 8003628:	f001 f86c 	bl	8004704 <HAL_DMA_Abort>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0210 	bic.w	r2, r2, #16
 8003650:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d105      	bne.n	8003664 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fd6f 	bl	800413c <ADC_Disable>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
 8003662:	e002      	b.n	800366a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fd69 	bl	800413c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003674:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
	...

080036c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0b6      	sub	sp, #216	@ 0xd8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x22>
 80036de:	2302      	movs	r3, #2
 80036e0:	e3d8      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x7d4>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fcf0 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f040 83bd 	bne.w	8003e76 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d104      	bne.n	800370e <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fadf 	bl	8002ccc <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6859      	ldr	r1, [r3, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	f7ff fb9b 	bl	8002e56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fcd5 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 800372a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fcf5 	bl	8003122 <LL_ADC_INJ_IsConversionOngoing>
 8003738:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800373c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 81d9 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800374a:	2b00      	cmp	r3, #0
 800374c:	f040 81d4 	bne.w	8003af8 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003758:	d10f      	bne.n	800377a <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	4619      	mov	r1, r3
 8003766:	f7ff fba2 	bl	8002eae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fb49 	bl	8002e0a <LL_ADC_SetSamplingTimeCommonConfig>
 8003778:	e00e      	b.n	8003798 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6819      	ldr	r1, [r3, #0]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	461a      	mov	r2, r3
 8003788:	f7ff fb91 	bl	8002eae <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fb39 	bl	8002e0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d022      	beq.n	8003800 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6919      	ldr	r1, [r3, #16]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037ca:	f7ff fa93 	bl	8002cf4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	461a      	mov	r2, r3
 80037dc:	f7ff fadf 	bl	8002d9e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x136>
 80037f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f4:	e000      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x138>
 80037f6:	2300      	movs	r3, #0
 80037f8:	461a      	mov	r2, r3
 80037fa:	f7ff faeb 	bl	8002dd4 <LL_ADC_SetOffsetSaturation>
 80037fe:	e17b      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2100      	movs	r1, #0
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fa98 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 800380c:	4603      	mov	r3, r0
 800380e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_ADC_ConfigChannel+0x16c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa8d 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	f003 021f 	and.w	r2, r3, #31
 800382a:	e01e      	b.n	800386a <HAL_ADC_ConfigChannel+0x1aa>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fa82 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800384a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800384e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8003852:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800385a:	2320      	movs	r3, #32
 800385c:	e004      	b.n	8003868 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800385e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x1c2>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	0e9b      	lsrs	r3, r3, #26
 800387c:	f003 031f 	and.w	r3, r3, #31
 8003880:	e018      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800389a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800389e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e004      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80038aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d106      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fa51 	bl	8002d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2101      	movs	r1, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fa35 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x232>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff fa2a 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 80038e8:	4603      	mov	r3, r0
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	e01e      	b.n	8003930 <HAL_ADC_ConfigChannel+0x270>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fa1f 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003904:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003910:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003914:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003918:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8003920:	2320      	movs	r3, #32
 8003922:	e004      	b.n	800392e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8003924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x288>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	f003 031f 	and.w	r3, r3, #31
 8003946:	e018      	b.n	800397a <HAL_ADC_ConfigChannel+0x2ba>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003954:	fa93 f3a3 	rbit	r3, r3
 8003958:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800395c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800396c:	2320      	movs	r3, #32
 800396e:	e004      	b.n	800397a <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 8003970:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800397a:	429a      	cmp	r2, r3
 800397c:	d106      	bne.n	800398c <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	2101      	movs	r1, #1
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f9ee 	bl	8002d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2102      	movs	r1, #2
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f9d2 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003998:	4603      	mov	r3, r0
 800399a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x2f8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f9c7 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 021f 	and.w	r2, r3, #31
 80039b6:	e01e      	b.n	80039f6 <HAL_ADC_ConfigChannel+0x336>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f9bc 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80039d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80039de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 80039e6:	2320      	movs	r3, #32
 80039e8:	e004      	b.n	80039f4 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 80039ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_ADC_ConfigChannel+0x34e>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	0e9b      	lsrs	r3, r3, #26
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	e016      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x37c>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8003a2e:	2320      	movs	r3, #32
 8003a30:	e004      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8003a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d106      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2102      	movs	r1, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f98d 	bl	8002d68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2103      	movs	r1, #3
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff f971 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x3ba>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2103      	movs	r1, #3
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff f966 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003a70:	4603      	mov	r3, r0
 8003a72:	0e9b      	lsrs	r3, r3, #26
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	e017      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x3ea>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2103      	movs	r1, #3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f95b 	bl	8002d3c <LL_ADC_GetOffsetChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a94:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	e003      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 8003aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d105      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x402>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0e9b      	lsrs	r3, r3, #26
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	e011      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x426>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003ad0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8003ada:	2320      	movs	r3, #32
 8003adc:	e003      	b.n	8003ae6 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8003ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae0:	fab3 f383 	clz	r3, r3
 8003ae4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d106      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2103      	movs	r1, #3
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f938 	bl	8002d68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fa9b 	bl	8003038 <LL_ADC_IsEnabled>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f040 813f 	bne.w	8003d88 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f7ff f9f4 	bl	8002f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a8e      	ldr	r2, [pc, #568]	@ (8003d5c <HAL_ADC_ConfigChannel+0x69c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	f040 8130 	bne.w	8003d88 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x490>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f003 031f 	and.w	r3, r3, #31
 8003b44:	2b09      	cmp	r3, #9
 8003b46:	bf94      	ite	ls
 8003b48:	2301      	movls	r3, #1
 8003b4a:	2300      	movhi	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e019      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x4c4>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003b68:	2320      	movs	r3, #32
 8003b6a:	e003      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003b6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2b09      	cmp	r3, #9
 8003b7c:	bf94      	ite	ls
 8003b7e:	2301      	movls	r3, #1
 8003b80:	2300      	movhi	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d079      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d107      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x4e4>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0e9b      	lsrs	r3, r3, #26
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	069b      	lsls	r3, r3, #26
 8003b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ba2:	e015      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x510>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	e003      	b.n	8003bc8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc2:	fab3 f383 	clz	r3, r3
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3301      	adds	r3, #1
 8003bca:	069b      	lsls	r3, r3, #26
 8003bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_ADC_ConfigChannel+0x530>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	3301      	adds	r3, #1
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	e017      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x560>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8003c08:	2320      	movs	r3, #32
 8003c0a:	e003      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8003c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c0e:	fab3 f383 	clz	r3, r3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3301      	adds	r3, #1
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	ea42 0103 	orr.w	r1, r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <HAL_ADC_ConfigChannel+0x586>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	f003 021f 	and.w	r2, r3, #31
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	4413      	add	r3, r2
 8003c42:	051b      	lsls	r3, r3, #20
 8003c44:	e018      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x5b8>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	fa93 f3a3 	rbit	r3, r3
 8003c52:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 8003c5e:	2320      	movs	r3, #32
 8003c60:	e003      	b.n	8003c6a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8003c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c64:	fab3 f383 	clz	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f003 021f 	and.w	r2, r3, #31
 8003c70:	4613      	mov	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	e080      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x5d8>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	0e9b      	lsrs	r3, r3, #26
 8003c8e:	3301      	adds	r3, #1
 8003c90:	069b      	lsls	r3, r3, #26
 8003c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c96:	e015      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x604>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	e003      	b.n	8003cbc <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	069b      	lsls	r3, r3, #26
 8003cc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d109      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x624>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e9b      	lsrs	r3, r3, #26
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	e017      	b.n	8003d14 <HAL_ADC_ConfigChannel+0x654>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	61fb      	str	r3, [r7, #28]
  return result;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8003cfc:	2320      	movs	r3, #32
 8003cfe:	e003      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 031f 	and.w	r3, r3, #31
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	ea42 0103 	orr.w	r1, r2, r3
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10d      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x680>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	0e9b      	lsrs	r3, r3, #26
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	3b1e      	subs	r3, #30
 8003d38:	051b      	lsls	r3, r3, #20
 8003d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d3e:	e01d      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x6bc>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	613b      	str	r3, [r7, #16]
  return result;
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003d58:	2320      	movs	r3, #32
 8003d5a:	e005      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x6a8>
 8003d5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f003 021f 	and.w	r2, r3, #31
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	3b1e      	subs	r3, #30
 8003d76:	051b      	lsls	r3, r3, #20
 8003d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d82:	4619      	mov	r1, r3
 8003d84:	f7ff f893 	bl	8002eae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_ADC_ConfigChannel+0x7dc>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d079      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d94:	4842      	ldr	r0, [pc, #264]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003d96:	f7fe ff79 	bl	8002c8c <LL_ADC_GetCommonPathInternalCh>
 8003d9a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a40      	ldr	r2, [pc, #256]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x7e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d124      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d11e      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d164      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4835      	ldr	r0, [pc, #212]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003dca:	f7fe ff4c 	bl	8002c66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dce:	4b37      	ldr	r3, [pc, #220]	@ (8003eac <HAL_ADC_ConfigChannel+0x7ec>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	099b      	lsrs	r3, r3, #6
 8003dd4:	4a36      	ldr	r2, [pc, #216]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x7f0>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	3301      	adds	r3, #1
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003de2:	e002      	b.n	8003dea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f9      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003df0:	e04a      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	@ (8003eb4 <HAL_ADC_ConfigChannel+0x7f4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10d      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d13a      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4820      	ldr	r0, [pc, #128]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003e1e:	f7fe ff22 	bl	8002c66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e22:	e031      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a23      	ldr	r2, [pc, #140]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x7f8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d113      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10d      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d121      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003e48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4814      	ldr	r0, [pc, #80]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003e50:	f7fe ff09 	bl	8002c66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e54:	e018      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a18      	ldr	r2, [pc, #96]	@ (8003ebc <HAL_ADC_ConfigChannel+0x7fc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d113      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a10      	ldr	r2, [pc, #64]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x7e8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00e      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe ff1a 	bl	8002ca8 <LL_ADC_EnableChannelVDDcore>
 8003e74:	e008      	b.n	8003e88 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003e90:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	37d8      	adds	r7, #216	@ 0xd8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	80080000 	.word	0x80080000
 8003ea0:	42028300 	.word	0x42028300
 8003ea4:	c3210000 	.word	0xc3210000
 8003ea8:	42028000 	.word	0x42028000
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	053e2d63 	.word	0x053e2d63
 8003eb4:	88600004 	.word	0x88600004
 8003eb8:	c7520000 	.word	0xc7520000
 8003ebc:	99200040 	.word	0x99200040

08003ec0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff f8fc 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 8003edc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff f91d 	bl	8003122 <LL_ADC_INJ_IsConversionOngoing>
 8003ee8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8098 	beq.w	8004028 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7e5b      	ldrb	r3, [r3, #25]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d126      	bne.n	8003f5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7e1b      	ldrb	r3, [r3, #24]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d122      	bne.n	8003f5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f1a:	e014      	b.n	8003f46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4a45      	ldr	r2, [pc, #276]	@ (8004034 <ADC_ConversionStop+0x174>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d90d      	bls.n	8003f40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	f043 0210 	orr.w	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e074      	b.n	800402a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3301      	adds	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d1e3      	bne.n	8003f1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2240      	movs	r2, #64	@ 0x40
 8003f5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d014      	beq.n	8003f8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff f8b4 	bl	80030d4 <LL_ADC_REG_IsConversionOngoing>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f871 	bl	800305e <LL_ADC_IsDisableOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff f890 	bl	80030ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d014      	beq.n	8003fbc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f8c3 	bl	8003122 <LL_ADC_INJ_IsConversionOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f859 	bl	800305e <LL_ADC_IsDisableOngoing>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff f89f 	bl	80030fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d005      	beq.n	8003fce <ADC_ConversionStop+0x10e>
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d105      	bne.n	8003fd4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003fc8:	230c      	movs	r3, #12
 8003fca:	617b      	str	r3, [r7, #20]
        break;
 8003fcc:	e005      	b.n	8003fda <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003fce:	2308      	movs	r3, #8
 8003fd0:	617b      	str	r3, [r7, #20]
        break;
 8003fd2:	e002      	b.n	8003fda <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	617b      	str	r3, [r7, #20]
        break;
 8003fd8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003fda:	f7fe fe25 	bl	8002c28 <HAL_GetTick>
 8003fde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fe0:	e01b      	b.n	800401a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003fe2:	f7fe fe21 	bl	8002c28 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d914      	bls.n	800401a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e007      	b.n	800402a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1dc      	bne.n	8003fe2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	a33fffff 	.word	0xa33fffff

08004038 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fff5 	bl	8003038 <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d166      	bne.n	8004122 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b34      	ldr	r3, [pc, #208]	@ (800412c <ADC_Enable+0xf4>)
 800405c:	4013      	ands	r3, r2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e052      	b.n	8004124 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe ffb0 	bl	8002fe8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004088:	4829      	ldr	r0, [pc, #164]	@ (8004130 <ADC_Enable+0xf8>)
 800408a:	f7fe fdff 	bl	8002c8c <LL_ADC_GetCommonPathInternalCh>
 800408e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004094:	2b00      	cmp	r3, #0
 8004096:	d010      	beq.n	80040ba <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004098:	4b26      	ldr	r3, [pc, #152]	@ (8004134 <ADC_Enable+0xfc>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	099b      	lsrs	r3, r3, #6
 800409e:	4a26      	ldr	r2, [pc, #152]	@ (8004138 <ADC_Enable+0x100>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040ac:	e002      	b.n	80040b4 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f9      	bne.n	80040ae <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040ba:	f7fe fdb5 	bl	8002c28 <HAL_GetTick>
 80040be:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040c0:	e028      	b.n	8004114 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe ffb6 	bl	8003038 <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ff86 	bl	8002fe8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040dc:	f7fe fda4 	bl	8002c28 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d914      	bls.n	8004114 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d00d      	beq.n	8004114 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	f043 0210 	orr.w	r2, r3, #16
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004108:	f043 0201 	orr.w	r2, r3, #1
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e007      	b.n	8004124 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d1cf      	bne.n	80040c2 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	8000003f 	.word	0x8000003f
 8004130:	42028300 	.word	0x42028300
 8004134:	20000000 	.word	0x20000000
 8004138:	053e2d63 	.word	0x053e2d63

0800413c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe ff88 	bl	800305e <LL_ADC_IsDisableOngoing>
 800414e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fe ff6f 	bl	8003038 <LL_ADC_IsEnabled>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d047      	beq.n	80041f0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d144      	bne.n	80041f0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f003 030d 	and.w	r3, r3, #13
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10c      	bne.n	800418e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe ff49 	bl	8003010 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2203      	movs	r2, #3
 8004184:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004186:	f7fe fd4f 	bl	8002c28 <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800418c:	e029      	b.n	80041e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004192:	f043 0210 	orr.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e023      	b.n	80041f2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041aa:	f7fe fd3d 	bl	8002c28 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d914      	bls.n	80041e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e007      	b.n	80041f2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1dc      	bne.n	80041aa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004206:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004210:	2b00      	cmp	r3, #0
 8004212:	d14b      	bne.n	80042ac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d021      	beq.n	8004272 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fdfc 	bl	8002e30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d032      	beq.n	80042a4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d12b      	bne.n	80042a4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d11f      	bne.n	80042a4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004270:	e018      	b.n	80042a4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d111      	bne.n	80042a4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	f043 0201 	orr.w	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7fd ff55 	bl	8002154 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042aa:	e00e      	b.n	80042ca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f7ff f9f6 	bl	80036aa <HAL_ADC_ErrorCallback>
}
 80042be:	e004      	b.n	80042ca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff f9d8 	bl	8003696 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004300:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f7ff f9c8 	bl	80036aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004334:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004340:	4013      	ands	r3, r2
 8004342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800434c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004356:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <__NVIC_SetPriorityGrouping+0x44>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	60d3      	str	r3, [r2, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <__NVIC_GetPriorityGrouping+0x18>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	0a1b      	lsrs	r3, r3, #8
 8004376:	f003 0307 	and.w	r3, r3, #7
}
 800437a:	4618      	mov	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db0b      	blt.n	80043b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	4907      	ldr	r1, [pc, #28]	@ (80043c0 <__NVIC_EnableIRQ+0x38>)
 80043a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2001      	movs	r0, #1
 80043aa:	fa00 f202 	lsl.w	r2, r0, r2
 80043ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e100 	.word	0xe000e100

080043c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db0a      	blt.n	80043ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	490c      	ldr	r1, [pc, #48]	@ (8004410 <__NVIC_SetPriority+0x4c>)
 80043de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e2:	0112      	lsls	r2, r2, #4
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ec:	e00a      	b.n	8004404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	4908      	ldr	r1, [pc, #32]	@ (8004414 <__NVIC_SetPriority+0x50>)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	3b04      	subs	r3, #4
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	440b      	add	r3, r1
 8004402:	761a      	strb	r2, [r3, #24]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	e000e100 	.word	0xe000e100
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	@ 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	2b04      	cmp	r3, #4
 8004434:	bf28      	it	cs
 8004436:	2304      	movcs	r3, #4
 8004438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3304      	adds	r3, #4
 800443e:	2b06      	cmp	r3, #6
 8004440:	d902      	bls.n	8004448 <NVIC_EncodePriority+0x30>
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3b03      	subs	r3, #3
 8004446:	e000      	b.n	800444a <NVIC_EncodePriority+0x32>
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	f04f 32ff 	mov.w	r2, #4294967295
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004460:	f04f 31ff 	mov.w	r1, #4294967295
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	43d9      	mvns	r1, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004470:	4313      	orrs	r3, r2
         );
}
 8004472:	4618      	mov	r0, r3
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ff4c 	bl	8004324 <__NVIC_SetPriorityGrouping>
}
 800448c:	bf00      	nop
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044a2:	f7ff ff63 	bl	800436c <__NVIC_GetPriorityGrouping>
 80044a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	6978      	ldr	r0, [r7, #20]
 80044ae:	f7ff ffb3 	bl	8004418 <NVIC_EncodePriority>
 80044b2:	4602      	mov	r2, r0
 80044b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044b8:	4611      	mov	r1, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff82 	bl	80043c4 <__NVIC_SetPriority>
}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff56 	bl	8004388 <__NVIC_EnableIRQ>
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f4:	d301      	bcc.n	80044fa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00d      	b.n	8004516 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80044fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <HAL_SYSTICK_Config+0x40>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3b01      	subs	r3, #1
 8004500:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8004502:	4b08      	ldr	r3, [pc, #32]	@ (8004524 <HAL_SYSTICK_Config+0x40>)
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8004508:	4b06      	ldr	r3, [pc, #24]	@ (8004524 <HAL_SYSTICK_Config+0x40>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a05      	ldr	r2, [pc, #20]	@ (8004524 <HAL_SYSTICK_Config+0x40>)
 800450e:	f043 0303 	orr.w	r3, r3, #3
 8004512:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e010 	.word	0xe000e010

08004528 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d844      	bhi.n	80045c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004536:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	0800455f 	.word	0x0800455f
 8004540:	0800457d 	.word	0x0800457d
 8004544:	0800459f 	.word	0x0800459f
 8004548:	080045c1 	.word	0x080045c1
 800454c:	08004551 	.word	0x08004551
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004550:	4b1f      	ldr	r3, [pc, #124]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6013      	str	r3, [r2, #0]
      break;
 800455c:	e031      	b.n	80045c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800455e:	4b1c      	ldr	r3, [pc, #112]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1b      	ldr	r2, [pc, #108]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800456a:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800456c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004570:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004572:	f023 030c 	bic.w	r3, r3, #12
 8004576:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800457a:	e022      	b.n	80045c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800457c:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a13      	ldr	r2, [pc, #76]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004582:	f023 0304 	bic.w	r3, r3, #4
 8004586:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004588:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800458a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800458e:	f023 030c 	bic.w	r3, r3, #12
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800459c:	e011      	b.n	80045c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800459e:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80045aa:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80045ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045b0:	f023 030c 	bic.w	r3, r3, #12
 80045b4:	4a07      	ldr	r2, [pc, #28]	@ (80045d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80045be:	e000      	b.n	80045c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80045c0:	bf00      	nop
  }
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	e000e010 	.word	0xe000e010
 80045d4:	44020c00 	.word	0x44020c00

080045d8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80045de:	4b17      	ldr	r3, [pc, #92]	@ (800463c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80045ea:	2304      	movs	r3, #4
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e01e      	b.n	800462e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80045f0:	4b13      	ldr	r3, [pc, #76]	@ (8004640 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80045f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d00f      	beq.n	8004622 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d80f      	bhi.n	8004628 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d003      	beq.n	800461c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8004614:	e008      	b.n	8004628 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
        break;
 800461a:	e008      	b.n	800462e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800461c:	2301      	movs	r3, #1
 800461e:	607b      	str	r3, [r7, #4]
        break;
 8004620:	e005      	b.n	800462e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8004622:	2302      	movs	r3, #2
 8004624:	607b      	str	r3, [r7, #4]
        break;
 8004626:	e002      	b.n	800462e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8004628:	2300      	movs	r3, #0
 800462a:	607b      	str	r3, [r7, #4]
        break;
 800462c:	bf00      	nop
    }
  }
  return systick_source;
 800462e:	687b      	ldr	r3, [r7, #4]
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000e010 	.word	0xe000e010
 8004640:	44020c00 	.word	0x44020c00

08004644 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e04f      	b.n	80046fc <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_DMA_Start_IT+0x26>
 8004666:	2302      	movs	r3, #2
 8004668:	e048      	b.n	80046fc <HAL_DMA_Start_IT+0xb8>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d136      	bne.n	80046ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fa4f 	bl	8004b36 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80046a6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046be:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046d6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695a      	ldr	r2, [r3, #20]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e007      	b.n	80046fc <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2240      	movs	r2, #64	@ 0x40
 80046f0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800470c:	f7fe fa8c 	bl	8002c28 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e06b      	b.n	80047f4 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d008      	beq.n	800473a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e05c      	b.n	80047f4 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695a      	ldr	r2, [r3, #20]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0204 	orr.w	r2, r2, #4
 8004748:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2205      	movs	r2, #5
 800474e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004752:	e020      	b.n	8004796 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004754:	f7fe fa68 	bl	8002c28 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b05      	cmp	r3, #5
 8004760:	d919      	bls.n	8004796 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	f043 0210 	orr.w	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2203      	movs	r2, #3
 8004772:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004786:	2201      	movs	r2, #1
 8004788:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02e      	b.n	80047f4 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0d7      	beq.n	8004754 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0202 	orr.w	r2, r2, #2
 80047b2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2204      	movs	r2, #4
 80047b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80047c4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047de:	2201      	movs	r2, #1
 80047e0:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800480c:	f023 030f 	bic.w	r3, r3, #15
 8004810:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481a:	3b50      	subs	r3, #80	@ 0x50
 800481c:	09db      	lsrs	r3, r3, #7
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f000 813b 	beq.w	8004ab2 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004860:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	f043 0201 	orr.w	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004892:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004898:	f043 0202 	orr.w	r2, r3, #2
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80048c4:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ca:	f043 0204 	orr.w	r2, r3, #4
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d011      	beq.n	8004904 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80048f6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	f043 0208 	orr.w	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490e:	2b00      	cmp	r3, #0
 8004910:	d013      	beq.n	800493a <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00c      	beq.n	800493a <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004928:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d04c      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d045      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800495e:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b04      	cmp	r3, #4
 800496a:	d12e      	bne.n	80049ca <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800497a:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0202 	orr.w	r2, r2, #2
 800498a:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a4:	2201      	movs	r2, #1
 80049a6:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2200      	movs	r2, #0
 80049ae:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d07a      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
        }

        return;
 80049c8:	e075      	b.n	8004ab6 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2205      	movs	r2, #5
 80049ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d039      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d032      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d116      	bne.n	8004a42 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d111      	bne.n	8004a42 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	731a      	strb	r2, [r3, #12]
 8004a2e:	e008      	b.n	8004a42 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004a4a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d025      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0202 	orr.w	r2, r2, #2
 8004a7a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	2201      	movs	r2, #1
 8004a96:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d007      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
 8004ab0:	e002      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x2bc>
        return;
 8004ab6:	bf00      	nop
    }
  }
}
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e02b      	b.n	8004b2a <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004ada:	f023 030f 	bic.w	r3, r3, #15
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae8:	3b50      	subs	r3, #80	@ 0x50
 8004aea:	09db      	lsrs	r3, r3, #7
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	2201      	movs	r2, #1
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f003 0311 	and.w	r3, r3, #17
 8004b08:	2b11      	cmp	r3, #17
 8004b0a:	d106      	bne.n	8004b1a <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	e006      	b.n	8004b28 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b085      	sub	sp, #20
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	b291      	uxth	r1, r2
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	6812      	ldr	r2, [r2, #0]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8004b62:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004b88:	f7fe f84e 	bl	8002c28 <HAL_GetTick>
 8004b8c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e085      	b.n	8004ca4 <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a43      	ldr	r2, [pc, #268]	@ (8004cac <HAL_DMAEx_List_Init+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d049      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a42      	ldr	r2, [pc, #264]	@ (8004cb0 <HAL_DMAEx_List_Init+0x130>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d044      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <HAL_DMAEx_List_Init+0x134>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d03f      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb8 <HAL_DMAEx_List_Init+0x138>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d03a      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a3d      	ldr	r2, [pc, #244]	@ (8004cbc <HAL_DMAEx_List_Init+0x13c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d035      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a3c      	ldr	r2, [pc, #240]	@ (8004cc0 <HAL_DMAEx_List_Init+0x140>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d030      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8004cc4 <HAL_DMAEx_List_Init+0x144>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d02b      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a39      	ldr	r2, [pc, #228]	@ (8004cc8 <HAL_DMAEx_List_Init+0x148>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d026      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a37      	ldr	r2, [pc, #220]	@ (8004ccc <HAL_DMAEx_List_Init+0x14c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d021      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a36      	ldr	r2, [pc, #216]	@ (8004cd0 <HAL_DMAEx_List_Init+0x150>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d01c      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a34      	ldr	r2, [pc, #208]	@ (8004cd4 <HAL_DMAEx_List_Init+0x154>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d017      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a33      	ldr	r2, [pc, #204]	@ (8004cd8 <HAL_DMAEx_List_Init+0x158>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d012      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a31      	ldr	r2, [pc, #196]	@ (8004cdc <HAL_DMAEx_List_Init+0x15c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00d      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a30      	ldr	r2, [pc, #192]	@ (8004ce0 <HAL_DMAEx_List_Init+0x160>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d008      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce4 <HAL_DMAEx_List_Init+0x164>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <HAL_DMAEx_List_Init+0xb6>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce8 <HAL_DMAEx_List_Init+0x168>)
 8004c34:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f042 0206 	orr.w	r2, r2, #6
 8004c54:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004c56:	e00f      	b.n	8004c78 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004c58:	f7fd ffe6 	bl	8002c28 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d908      	bls.n	8004c78 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e015      	b.n	8004ca4 <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e8      	bne.n	8004c58 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa94 	bl	80051b4 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40020050 	.word	0x40020050
 8004cb0:	400200d0 	.word	0x400200d0
 8004cb4:	40020150 	.word	0x40020150
 8004cb8:	400201d0 	.word	0x400201d0
 8004cbc:	40020250 	.word	0x40020250
 8004cc0:	400202d0 	.word	0x400202d0
 8004cc4:	40020350 	.word	0x40020350
 8004cc8:	400203d0 	.word	0x400203d0
 8004ccc:	40021050 	.word	0x40021050
 8004cd0:	400210d0 	.word	0x400210d0
 8004cd4:	40021150 	.word	0x40021150
 8004cd8:	400211d0 	.word	0x400211d0
 8004cdc:	40021250 	.word	0x40021250
 8004ce0:	400212d0 	.word	0x400212d0
 8004ce4:	40021350 	.word	0x40021350
 8004ce8:	400213d0 	.word	0x400213d0

08004cec <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_DMAEx_List_Start_IT+0x16>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e082      	b.n	8004e0c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d0c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d18:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d005      	beq.n	8004d2c <HAL_DMAEx_List_Start_IT+0x40>
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d16a      	bne.n	8004dfc <HAL_DMAEx_List_Start_IT+0x110>
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d067      	beq.n	8004dfc <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d157      	bne.n	8004de8 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_DMAEx_List_Start_IT+0x5a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e062      	b.n	8004e0c <HAL_DMAEx_List_Start_IT+0x120>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004d7a:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d92:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004daa:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f107 010c 	add.w	r1, r7, #12
 8004db6:	2200      	movs	r2, #0
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd97 	bl	80058ec <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	0c0b      	lsrs	r3, r1, #16
 8004dcc:	041b      	lsls	r3, r3, #16
 8004dce:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68f9      	ldr	r1, [r7, #12]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	430b      	orrs	r3, r1
 8004de6:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e007      	b.n	8004e0c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	@ 0x40
 8004e00:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_DMAEx_List_BuildNode+0x16>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e004      	b.n	8004e38 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fa8d 	bl	8005350 <DMA_List_BuildNode>

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e004      	b.n	8004e64 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fbcf 	bl	8005600 <DMA_List_GetNodeConfig>

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	@ 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_DMAEx_List_InsertNode+0x18>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e0b6      	b.n	8004ff6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d104      	bne.n	8004e9a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2204      	movs	r2, #4
 8004e94:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0ad      	b.n	8004ff6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fcb6 	bl	8005814 <DMA_List_CheckNodesBaseAddresses>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2205      	movs	r2, #5
 8004eb2:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e09e      	b.n	8004ff6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fcd7 	bl	8005874 <DMA_List_CheckNodesTypes>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d004      	beq.n	8004ed6 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2204      	movs	r2, #4
 8004ed0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e08f      	b.n	8004ff6 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8004ee2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004ee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fcfd 	bl	80058ec <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11a      	bne.n	8004f30 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	e06c      	b.n	8004fe8 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f20:	4319      	orrs	r1, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	609a      	str	r2, [r3, #8]
 8004f2e:	e05b      	b.n	8004fe8 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10f      	bne.n	8004f56 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f40:	4013      	ands	r3, r2
 8004f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f46:	4319      	orrs	r1, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e043      	b.n	8004fde <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fcf2 	bl	800594c <DMA_List_FindNode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d132      	bne.n	8004fd4 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 8004f6e:	69fa      	ldr	r2, [r7, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d11a      	bne.n	8004fae <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	461a      	mov	r2, r3
 8004f86:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f90:	4319      	orrs	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa4:	4319      	orrs	r1, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004fac:	e017      	b.n	8004fde <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 8004fae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fca:	4319      	orrs	r1, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004fd2:	e004      	b.n	8004fde <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2206      	movs	r2, #6
 8004fd8:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00b      	b.n	8004ff6 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3730      	adds	r7, #48	@ 0x30
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b08a      	sub	sp, #40	@ 0x28
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e052      	b.n	80050b6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e049      	b.n	80050b6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00c      	beq.n	8005044 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d101      	bne.n	800503a <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e03d      	b.n	80050b6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2204      	movs	r2, #4
 800503e:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e038      	b.n	80050b6 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d104      	bne.n	8005056 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2204      	movs	r2, #4
 8005050:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e02f      	b.n	80050b6 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f107 0220 	add.w	r2, r7, #32
 800506a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fc3c 	bl	80058ec <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	461a      	mov	r2, r3
 800507e:	2100      	movs	r1, #0
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fc63 	bl	800594c <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005090:	4013      	ands	r3, r2
 8005092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4610      	mov	r0, r2
 8005098:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800509a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800509c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3728      	adds	r7, #40	@ 0x28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_DMAEx_List_LinkQ+0x16>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e05e      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Get DMA state */
  state = hdma->State;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80050e0:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d002      	beq.n	80050f4 <HAL_DMAEx_List_LinkQ+0x34>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d108      	bne.n	8005106 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2240      	movs	r2, #64	@ 0x40
 80050f8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e048      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	7b1b      	ldrb	r3, [r3, #12]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d104      	bne.n	800511a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e03e      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a21      	ldr	r2, [pc, #132]	@ (80051a4 <HAL_DMAEx_List_LinkQ+0xe4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_DMAEx_List_LinkQ+0x82>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1f      	ldr	r2, [pc, #124]	@ (80051a8 <HAL_DMAEx_List_LinkQ+0xe8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_DMAEx_List_LinkQ+0x82>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1e      	ldr	r2, [pc, #120]	@ (80051ac <HAL_DMAEx_List_LinkQ+0xec>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_DMAEx_List_LinkQ+0x82>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1c      	ldr	r2, [pc, #112]	@ (80051b0 <HAL_DMAEx_List_LinkQ+0xf0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <HAL_DMAEx_List_LinkQ+0x86>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <HAL_DMAEx_List_LinkQ+0x88>
 8005146:	2300      	movs	r3, #0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_DMAEx_List_LinkQ+0xa4>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <HAL_DMAEx_List_LinkQ+0xa4>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2203      	movs	r2, #3
 800515e:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e019      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	2b81      	cmp	r3, #129	@ 0x81
 800516a:	d108      	bne.n	800517e <HAL_DMAEx_List_LinkQ+0xbe>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10d      	bne.n	8005190 <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2204      	movs	r2, #4
 8005178:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e00c      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <HAL_DMAEx_List_LinkQ+0xd0>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2204      	movs	r2, #4
 800518a:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e003      	b.n	8005198 <HAL_DMAEx_List_LinkQ+0xd8>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	675a      	str	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40020350 	.word	0x40020350
 80051a8:	400203d0 	.word	0x400203d0
 80051ac:	40021350 	.word	0x40021350
 80051b0:	400213d0 	.word	0x400213d0

080051b4 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a50      	ldr	r2, [pc, #320]	@ (8005310 <DMA_List_Init+0x15c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d04a      	beq.n	8005268 <DMA_List_Init+0xb4>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a4f      	ldr	r2, [pc, #316]	@ (8005314 <DMA_List_Init+0x160>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d045      	beq.n	8005268 <DMA_List_Init+0xb4>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a4d      	ldr	r2, [pc, #308]	@ (8005318 <DMA_List_Init+0x164>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d040      	beq.n	8005268 <DMA_List_Init+0xb4>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4c      	ldr	r2, [pc, #304]	@ (800531c <DMA_List_Init+0x168>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d03b      	beq.n	8005268 <DMA_List_Init+0xb4>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005320 <DMA_List_Init+0x16c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d036      	beq.n	8005268 <DMA_List_Init+0xb4>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a49      	ldr	r2, [pc, #292]	@ (8005324 <DMA_List_Init+0x170>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d031      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a47      	ldr	r2, [pc, #284]	@ (8005328 <DMA_List_Init+0x174>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02c      	beq.n	8005268 <DMA_List_Init+0xb4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a46      	ldr	r2, [pc, #280]	@ (800532c <DMA_List_Init+0x178>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d027      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a44      	ldr	r2, [pc, #272]	@ (8005330 <DMA_List_Init+0x17c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d022      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a43      	ldr	r2, [pc, #268]	@ (8005334 <DMA_List_Init+0x180>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d01d      	beq.n	8005268 <DMA_List_Init+0xb4>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a41      	ldr	r2, [pc, #260]	@ (8005338 <DMA_List_Init+0x184>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d018      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a40      	ldr	r2, [pc, #256]	@ (800533c <DMA_List_Init+0x188>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3e      	ldr	r2, [pc, #248]	@ (8005340 <DMA_List_Init+0x18c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00e      	beq.n	8005268 <DMA_List_Init+0xb4>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3d      	ldr	r2, [pc, #244]	@ (8005344 <DMA_List_Init+0x190>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d009      	beq.n	8005268 <DMA_List_Init+0xb4>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a3b      	ldr	r2, [pc, #236]	@ (8005348 <DMA_List_Init+0x194>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d004      	beq.n	8005268 <DMA_List_Init+0xb4>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a3a      	ldr	r2, [pc, #232]	@ (800534c <DMA_List_Init+0x198>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d101      	bne.n	800526c <DMA_List_Init+0xb8>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <DMA_List_Init+0xba>
 800526c:	2300      	movs	r3, #0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4313      	orrs	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	430a      	orrs	r2, r1
 800528e:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1a      	ldr	r2, [pc, #104]	@ (8005328 <DMA_List_Init+0x174>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00e      	beq.n	80052e2 <DMA_List_Init+0x12e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a18      	ldr	r2, [pc, #96]	@ (800532c <DMA_List_Init+0x178>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d009      	beq.n	80052e2 <DMA_List_Init+0x12e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005348 <DMA_List_Init+0x194>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d004      	beq.n	80052e2 <DMA_List_Init+0x12e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <DMA_List_Init+0x198>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d101      	bne.n	80052e6 <DMA_List_Init+0x132>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <DMA_List_Init+0x134>
 80052e6:	2300      	movs	r3, #0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d007      	beq.n	80052fc <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2200      	movs	r2, #0
 80052fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40020050 	.word	0x40020050
 8005314:	400200d0 	.word	0x400200d0
 8005318:	40020150 	.word	0x40020150
 800531c:	400201d0 	.word	0x400201d0
 8005320:	40020250 	.word	0x40020250
 8005324:	400202d0 	.word	0x400202d0
 8005328:	40020350 	.word	0x40020350
 800532c:	400203d0 	.word	0x400203d0
 8005330:	40021050 	.word	0x40021050
 8005334:	400210d0 	.word	0x400210d0
 8005338:	40021150 	.word	0x40021150
 800533c:	400211d0 	.word	0x400211d0
 8005340:	40021250 	.word	0x40021250
 8005344:	400212d0 	.word	0x400212d0
 8005348:	40021350 	.word	0x40021350
 800534c:	400213d0 	.word	0x400213d0

08005350 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005362:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005368:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 800536e:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005374:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80053a0:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	3b01      	subs	r3, #1
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80053ae:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80053b0:	431a      	orrs	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6859      	ldr	r1, [r3, #4]
 80053be:	f240 23ff 	movw	r3, #767	@ 0x2ff
 80053c2:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80053c4:	431a      	orrs	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d2:	d10c      	bne.n	80053ee <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0320 	and.w	r3, r3, #32
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	e00a      	b.n	8005404 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	d105      	bne.n	8005404 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Configure HW Peripheral flow control selection */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= pNodeConfig->Init.Mode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540c:	431a      	orrs	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	605a      	str	r2, [r3, #4]

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00f      	beq.n	800543a <DMA_List_BuildNode+0xea>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005432:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005434:	431a      	orrs	r2, r3
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800543e:	b29a      	uxth	r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d04e      	beq.n	80054ee <DMA_List_BuildNode+0x19e>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005458:	3b01      	subs	r3, #1
 800545a:	0419      	lsls	r1, r3, #16
 800545c:	4b66      	ldr	r3, [pc, #408]	@ (80055f8 <DMA_List_BuildNode+0x2a8>)
 800545e:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005460:	431a      	orrs	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546a:	2b00      	cmp	r3, #0
 800546c:	da06      	bge.n	800547c <DMA_List_BuildNode+0x12c>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	e005      	b.n	8005488 <DMA_List_BuildNode+0x138>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	da06      	bge.n	800549e <DMA_List_BuildNode+0x14e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	e005      	b.n	80054aa <DMA_List_BuildNode+0x15a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	da06      	bge.n	80054c0 <DMA_List_BuildNode+0x170>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	609a      	str	r2, [r3, #8]
 80054be:	e005      	b.n	80054cc <DMA_List_BuildNode+0x17c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	da06      	bge.n	80054e2 <DMA_List_BuildNode+0x192>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	e005      	b.n	80054ee <DMA_List_BuildNode+0x19e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d059      	beq.n	80055be <DMA_List_BuildNode+0x26e>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550e:	2b00      	cmp	r3, #0
 8005510:	da09      	bge.n	8005526 <DMA_List_BuildNode+0x1d6>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005516:	425b      	negs	r3, r3
 8005518:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	615a      	str	r2, [r3, #20]
 8005524:	e005      	b.n	8005532 <DMA_List_BuildNode+0x1e2>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552a:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	2b00      	cmp	r3, #0
 8005538:	da0d      	bge.n	8005556 <DMA_List_BuildNode+0x206>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	425b      	negs	r3, r3
 8005540:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	0419      	lsls	r1, r3, #16
 800554a:	4b2c      	ldr	r3, [pc, #176]	@ (80055fc <DMA_List_BuildNode+0x2ac>)
 800554c:	400b      	ands	r3, r1
 800554e:	431a      	orrs	r2, r3
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	615a      	str	r2, [r3, #20]
 8005554:	e009      	b.n	800556a <DMA_List_BuildNode+0x21a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	0419      	lsls	r1, r3, #16
 8005560:	4b26      	ldr	r3, [pc, #152]	@ (80055fc <DMA_List_BuildNode+0x2ac>)
 8005562:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005564:	431a      	orrs	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	2b00      	cmp	r3, #0
 8005570:	da08      	bge.n	8005584 <DMA_List_BuildNode+0x234>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005576:	425b      	negs	r3, r3
 8005578:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	b29a      	uxth	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	619a      	str	r2, [r3, #24]
 8005582:	e004      	b.n	800558e <DMA_List_BuildNode+0x23e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005592:	2b00      	cmp	r3, #0
 8005594:	da0b      	bge.n	80055ae <DMA_List_BuildNode+0x25e>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800559a:	425b      	negs	r3, r3
 800559c:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80055a6:	431a      	orrs	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	619a      	str	r2, [r3, #24]
 80055ac:	e007      	b.n	80055be <DMA_List_BuildNode+0x26e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b6:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80055b8:	431a      	orrs	r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d006      	beq.n	80055e0 <DMA_List_BuildNode+0x290>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f443 62e0 	orr.w	r2, r3, #1792	@ 0x700
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80055de:	e005      	b.n	80055ec <DMA_List_BuildNode+0x29c>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	f443 62a0 	orr.w	r2, r3, #1280	@ 0x500
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	07ff0000 	.word	0x07ff0000
 80055fc:	1fff0000 	.word	0x1fff0000

08005600 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0208 	and.w	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0203 	and.w	r2, r3, #3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800564e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005658:	0d1b      	lsrs	r3, r3, #20
 800565a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800565e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	4b66      	ldr	r3, [pc, #408]	@ (8005810 <DMA_List_GetNodeConfig+0x210>)
 8005676:	4013      	ands	r3, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800569a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a2:	60da      	str	r2, [r3, #12]
 80056a4:	e012      	b.n	80056cc <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056c2:	60da      	str	r2, [r3, #12]
 80056c4:	e002      	b.n	80056cc <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	b29a      	uxth	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	0c1b      	lsrs	r3, r3, #16
 8005726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800572a:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005730:	e002      	b.n	8005738 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d04a      	beq.n	80057ea <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8005760:	89fa      	ldrh	r2, [r7, #14]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	0c1b      	lsrs	r3, r3, #16
 800576c:	b29b      	uxth	r3, r3
 800576e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005772:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8005774:	89fa      	ldrh	r2, [r7, #14]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d004      	beq.n	8005790 <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578a:	425a      	negs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	425a      	negs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80057ac:	89fa      	ldrh	r2, [r7, #14]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80057ba:	89fa      	ldrh	r2, [r7, #14]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d004      	beq.n	80057d6 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	425a      	negs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	da11      	bge.n	8005802 <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	425a      	negs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 80057e8:	e00b      	b.n	8005802 <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005802:	bf00      	nop
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	0c002000 	.word	0x0c002000

08005814 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4313      	orrs	r3, r2
 800582a:	0c1b      	lsrs	r3, r3, #16
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e00a      	b.n	8005856 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e004      	b.n	8005856 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d001      	beq.n	8005866 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e00e      	b.n	80058b2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d004      	beq.n	80058a4 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e006      	b.n	80058b2 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6a1b      	ldr	r3, [r3, #32]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d001      	beq.n	80058c8 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 80058c4:	2302      	movs	r3, #2
 80058c6:	e00b      	b.n	80058e0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d001      	beq.n	80058de <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 80058da:	2303      	movs	r3, #3
 80058dc:	e000      	b.n	80058e0 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a0d      	ldr	r2, [pc, #52]	@ (8005944 <DMA_List_GetCLLRNodeInfo+0x58>)
 800590e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00f      	beq.n	8005936 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2207      	movs	r2, #7
 800591a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800591c:	e00b      	b.n	8005936 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4a08      	ldr	r2, [pc, #32]	@ (8005948 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005928:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2205      	movs	r2, #5
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	fe010000 	.word	0xfe010000
 8005948:	f8010000 	.word	0xf8010000

0800594c <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 800594c:	b480      	push	{r7}
 800594e:	b089      	sub	sp, #36	@ 0x24
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d142      	bne.n	80059f6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8005970:	e01d      	b.n	80059ae <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d107      	bne.n	8005988 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e00f      	b.n	80059a8 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0c1b      	lsrs	r3, r3, #16
 8005992:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80059a0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3dc      	bcc.n	8005972 <DMA_List_FindNode+0x26>
 80059b8:	e029      	b.n	8005a0e <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d107      	bne.n	80059d0 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e00f      	b.n	80059f0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	0c1b      	lsrs	r3, r3, #16
 80059da:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4413      	add	r3, r2
 80059e0:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 80059e8:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d206      	bcs.n	8005a0e <DMA_List_FindNode+0xc2>
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005a06:	4013      	ands	r3, r2
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d1d5      	bne.n	80059ba <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d001      	beq.n	8005a26 <DMA_List_FindNode+0xda>
    {
      return 1U;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e02b      	b.n	8005a7e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	0c1b      	lsrs	r3, r3, #16
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	461a      	mov	r2, r3
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00f      	beq.n	8005a7c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	461a      	mov	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a68:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8005a6c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	0c1b      	lsrs	r3, r3, #16
 8005a74:	041b      	lsls	r3, r3, #16
 8005a76:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3724      	adds	r7, #36	@ 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b087      	sub	sp, #28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005a9a:	e136      	b.n	8005d0a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8128 	beq.w	8005d04 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d003      	beq.n	8005ac4 <HAL_GPIO_Init+0x38>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b12      	cmp	r3, #18
 8005ac2:	d125      	bne.n	8005b10 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	08da      	lsrs	r2, r3, #3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3208      	adds	r2, #8
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	220f      	movs	r2, #15
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f003 020f 	and.w	r2, r3, #15
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	08da      	lsrs	r2, r3, #3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3208      	adds	r2, #8
 8005b0a:	6979      	ldr	r1, [r7, #20]
 8005b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	2203      	movs	r2, #3
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4013      	ands	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 0203 	and.w	r2, r3, #3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d00b      	beq.n	8005b64 <HAL_GPIO_Init+0xd8>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d007      	beq.n	8005b64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b58:	2b11      	cmp	r3, #17
 8005b5a:	d003      	beq.n	8005b64 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b12      	cmp	r3, #18
 8005b62:	d130      	bne.n	8005bc6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	2203      	movs	r2, #3
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43db      	mvns	r3, r3
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 0201 	and.w	r2, r3, #1
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d017      	beq.n	8005bfe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	2203      	movs	r2, #3
 8005bda:	fa02 f303 	lsl.w	r3, r2, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	4013      	ands	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d07c      	beq.n	8005d04 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005c0a:	4a47      	ldr	r2, [pc, #284]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	3318      	adds	r3, #24
 8005c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c16:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	220f      	movs	r2, #15
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0a9a      	lsrs	r2, r3, #10
 8005c32:	4b3e      	ldr	r3, [pc, #248]	@ (8005d2c <HAL_GPIO_Init+0x2a0>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	f002 0203 	and.w	r2, r2, #3
 8005c3c:	00d2      	lsls	r2, r2, #3
 8005c3e:	4093      	lsls	r3, r2
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005c46:	4938      	ldr	r1, [pc, #224]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	089b      	lsrs	r3, r3, #2
 8005c4c:	3318      	adds	r3, #24
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005c54:	4b34      	ldr	r3, [pc, #208]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	4013      	ands	r3, r2
 8005c62:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8005c78:	4a2b      	ldr	r2, [pc, #172]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8005ca2:	4a21      	ldr	r2, [pc, #132]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	43db      	mvns	r3, r3
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8005cce:	4a16      	ldr	r2, [pc, #88]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005cd6:	4b14      	ldr	r3, [pc, #80]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <HAL_GPIO_Init+0x29c>)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3301      	adds	r3, #1
 8005d08:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f47f aec1 	bne.w	8005a9c <HAL_GPIO_Init+0x10>
  }
}
 8005d1a:	bf00      	nop
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	44022000 	.word	0x44022000
 8005d2c:	002f7f7f 	.word	0x002f7f7f

08005d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	807b      	strh	r3, [r7, #2]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d40:	787b      	ldrb	r3, [r7, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005d46:	887a      	ldrh	r2, [r7, #2]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d4c:	e002      	b.n	8005d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d4e:	887a      	ldrh	r2, [r7, #2]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d102      	bne.n	8005d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f000 bc28 	b.w	80065c4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d74:	4b94      	ldr	r3, [pc, #592]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005d76:	69db      	ldr	r3, [r3, #28]
 8005d78:	f003 0318 	and.w	r3, r3, #24
 8005d7c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005d7e:	4b92      	ldr	r3, [pc, #584]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05b      	beq.n	8005e4c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d005      	beq.n	8005da6 <HAL_RCC_OscConfig+0x46>
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2b18      	cmp	r3, #24
 8005d9e:	d114      	bne.n	8005dca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d111      	bne.n	8005dca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f000 bc08 	b.w	80065c4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005db4:	4b84      	ldr	r3, [pc, #528]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	041b      	lsls	r3, r3, #16
 8005dc2:	4981      	ldr	r1, [pc, #516]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005dc8:	e040      	b.n	8005e4c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d023      	beq.n	8005e1a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dde:	f7fc ff23 	bl	8002c28 <HAL_GetTick>
 8005de2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005de6:	f7fc ff1f 	bl	8002c28 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e3e5      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005df8:	4b73      	ldr	r3, [pc, #460]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005e04:	4b70      	ldr	r3, [pc, #448]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	496d      	ldr	r1, [pc, #436]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	618b      	str	r3, [r1, #24]
 8005e18:	e018      	b.n	8005e4c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fc feff 	bl	8002c28 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005e2e:	f7fc fefb 	bl	8002c28 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e3c1      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005e40:	4b61      	ldr	r3, [pc, #388]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f0      	bne.n	8005e2e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 80a0 	beq.w	8005f9a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d005      	beq.n	8005e6c <HAL_RCC_OscConfig+0x10c>
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b18      	cmp	r3, #24
 8005e64:	d109      	bne.n	8005e7a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d106      	bne.n	8005e7a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8092 	bne.w	8005f9a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e3a4      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e82:	d106      	bne.n	8005e92 <HAL_RCC_OscConfig+0x132>
 8005e84:	4b50      	ldr	r3, [pc, #320]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4f      	ldr	r2, [pc, #316]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	e058      	b.n	8005f44 <HAL_RCC_OscConfig+0x1e4>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d112      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x160>
 8005e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4b48      	ldr	r3, [pc, #288]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a47      	ldr	r2, [pc, #284]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005eac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b45      	ldr	r3, [pc, #276]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a44      	ldr	r2, [pc, #272]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e041      	b.n	8005f44 <HAL_RCC_OscConfig+0x1e4>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ec8:	d112      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x190>
 8005eca:	4b3f      	ldr	r3, [pc, #252]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3b      	ldr	r2, [pc, #236]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005edc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b39      	ldr	r3, [pc, #228]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a38      	ldr	r2, [pc, #224]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e029      	b.n	8005f44 <HAL_RCC_OscConfig+0x1e4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x1c0>
 8005efa:	4b33      	ldr	r3, [pc, #204]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a32      	ldr	r2, [pc, #200]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4b30      	ldr	r3, [pc, #192]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	4b2d      	ldr	r3, [pc, #180]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e011      	b.n	8005f44 <HAL_RCC_OscConfig+0x1e4>
 8005f20:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a28      	ldr	r2, [pc, #160]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b23      	ldr	r3, [pc, #140]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a22      	ldr	r2, [pc, #136]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fc fe6c 	bl	8002c28 <HAL_GetTick>
 8005f50:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005f54:	f7fc fe68 	bl	8002c28 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	@ 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e32e      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f66:	4b18      	ldr	r3, [pc, #96]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x1f4>
 8005f72:	e012      	b.n	8005f9a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fc fe58 	bl	8002c28 <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005f7c:	f7fc fe54 	bl	8002c28 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	@ 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e31a      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc8 <HAL_RCC_OscConfig+0x268>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 809a 	beq.w	80060dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <HAL_RCC_OscConfig+0x25a>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b18      	cmp	r3, #24
 8005fb2:	d149      	bne.n	8006048 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d146      	bne.n	8006048 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e2fe      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
 8005fc6:	bf00      	nop
 8005fc8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d11c      	bne.n	800600c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005fd2:	4b9a      	ldr	r3, [pc, #616]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0218 	and.w	r2, r3, #24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d014      	beq.n	800600c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005fe2:	4b96      	ldr	r3, [pc, #600]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 0218 	bic.w	r2, r3, #24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	4993      	ldr	r1, [pc, #588]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005ff4:	f000 fdd0 	bl	8006b98 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ff8:	4b91      	ldr	r3, [pc, #580]	@ (8006240 <HAL_RCC_OscConfig+0x4e0>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fc fd9d 	bl	8002b3c <HAL_InitTick>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e2db      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fc fe0c 	bl	8002c28 <HAL_GetTick>
 8006010:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006014:	f7fc fe08 	bl	8002c28 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e2ce      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006026:	4b85      	ldr	r3, [pc, #532]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006032:	4b82      	ldr	r3, [pc, #520]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	497e      	ldr	r1, [pc, #504]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006046:	e049      	b.n	80060dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02c      	beq.n	80060aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006050:	4b7a      	ldr	r3, [pc, #488]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f023 0218 	bic.w	r2, r3, #24
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	4977      	ldr	r1, [pc, #476]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800605e:	4313      	orrs	r3, r2
 8006060:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8006062:	4b76      	ldr	r3, [pc, #472]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a75      	ldr	r2, [pc, #468]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606e:	f7fc fddb 	bl	8002c28 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006076:	f7fc fdd7 	bl	8002c28 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e29d      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006088:	4b6c      	ldr	r3, [pc, #432]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006094:	4b69      	ldr	r3, [pc, #420]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	4966      	ldr	r1, [pc, #408]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	610b      	str	r3, [r1, #16]
 80060a8:	e018      	b.n	80060dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060aa:	4b64      	ldr	r3, [pc, #400]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a63      	ldr	r2, [pc, #396]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fc fdb7 	bl	8002c28 <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80060be:	f7fc fdb3 	bl	8002c28 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e279      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060d0:	4b5a      	ldr	r3, [pc, #360]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d03c      	beq.n	8006162 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01c      	beq.n	800612a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f0:	4b52      	ldr	r3, [pc, #328]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f6:	4a51      	ldr	r2, [pc, #324]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80060f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006100:	f7fc fd92 	bl	8002c28 <HAL_GetTick>
 8006104:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006108:	f7fc fd8e 	bl	8002c28 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e254      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800611a:	4b48      	ldr	r3, [pc, #288]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800611c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0ef      	beq.n	8006108 <HAL_RCC_OscConfig+0x3a8>
 8006128:	e01b      	b.n	8006162 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800612a:	4b44      	ldr	r3, [pc, #272]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800612c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006130:	4a42      	ldr	r2, [pc, #264]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613a:	f7fc fd75 	bl	8002c28 <HAL_GetTick>
 800613e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006142:	f7fc fd71 	bl	8002c28 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e237      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006154:	4b39      	ldr	r3, [pc, #228]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800615a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ef      	bne.n	8006142 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80d2 	beq.w	8006314 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006170:	4b34      	ldr	r3, [pc, #208]	@ (8006244 <HAL_RCC_OscConfig+0x4e4>)
 8006172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d118      	bne.n	80061ae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800617c:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <HAL_RCC_OscConfig+0x4e4>)
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	4a30      	ldr	r2, [pc, #192]	@ (8006244 <HAL_RCC_OscConfig+0x4e4>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006188:	f7fc fd4e 	bl	8002c28 <HAL_GetTick>
 800618c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006190:	f7fc fd4a 	bl	8002c28 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e210      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061a2:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCC_OscConfig+0x4e4>)
 80061a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d108      	bne.n	80061c8 <HAL_RCC_OscConfig+0x468>
 80061b6:	4b21      	ldr	r3, [pc, #132]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061bc:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061c6:	e074      	b.n	80062b2 <HAL_RCC_OscConfig+0x552>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d118      	bne.n	8006202 <HAL_RCC_OscConfig+0x4a2>
 80061d0:	4b1a      	ldr	r3, [pc, #104]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061d6:	4a19      	ldr	r2, [pc, #100]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061e0:	4b16      	ldr	r3, [pc, #88]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e6:	4a15      	ldr	r2, [pc, #84]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80061f0:	4b12      	ldr	r3, [pc, #72]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f6:	4a11      	ldr	r2, [pc, #68]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006200:	e057      	b.n	80062b2 <HAL_RCC_OscConfig+0x552>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b05      	cmp	r3, #5
 8006208:	d11e      	bne.n	8006248 <HAL_RCC_OscConfig+0x4e8>
 800620a:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800620c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006210:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006212:	f043 0304 	orr.w	r3, r3, #4
 8006216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800621a:	4b08      	ldr	r3, [pc, #32]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800621c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006220:	4a06      	ldr	r2, [pc, #24]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800622a:	4b04      	ldr	r3, [pc, #16]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 800622c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006230:	4a02      	ldr	r2, [pc, #8]	@ (800623c <HAL_RCC_OscConfig+0x4dc>)
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800623a:	e03a      	b.n	80062b2 <HAL_RCC_OscConfig+0x552>
 800623c:	44020c00 	.word	0x44020c00
 8006240:	20000004 	.word	0x20000004
 8006244:	44020800 	.word	0x44020800
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b85      	cmp	r3, #133	@ 0x85
 800624e:	d118      	bne.n	8006282 <HAL_RCC_OscConfig+0x522>
 8006250:	4ba2      	ldr	r3, [pc, #648]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006256:	4aa1      	ldr	r2, [pc, #644]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006258:	f043 0304 	orr.w	r3, r3, #4
 800625c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006260:	4b9e      	ldr	r3, [pc, #632]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006266:	4a9d      	ldr	r2, [pc, #628]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800626c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006270:	4b9a      	ldr	r3, [pc, #616]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006276:	4a99      	ldr	r2, [pc, #612]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006280:	e017      	b.n	80062b2 <HAL_RCC_OscConfig+0x552>
 8006282:	4b96      	ldr	r3, [pc, #600]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006288:	4a94      	ldr	r2, [pc, #592]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006292:	4b92      	ldr	r3, [pc, #584]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006298:	4a90      	ldr	r2, [pc, #576]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800629a:	f023 0304 	bic.w	r3, r3, #4
 800629e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062a2:	4b8e      	ldr	r3, [pc, #568]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80062a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062a8:	4a8c      	ldr	r2, [pc, #560]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80062aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d016      	beq.n	80062e8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ba:	f7fc fcb5 	bl	8002c28 <HAL_GetTick>
 80062be:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c0:	e00a      	b.n	80062d8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c2:	f7fc fcb1 	bl	8002c28 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d901      	bls.n	80062d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e175      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d8:	4b80      	ldr	r3, [pc, #512]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80062da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ed      	beq.n	80062c2 <HAL_RCC_OscConfig+0x562>
 80062e6:	e015      	b.n	8006314 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e8:	f7fc fc9e 	bl	8002c28 <HAL_GetTick>
 80062ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fc fc9a 	bl	8002c28 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e15e      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006306:	4b75      	ldr	r3, [pc, #468]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ed      	bne.n	80062f0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d036      	beq.n	800638e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	d019      	beq.n	800635c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006328:	4b6c      	ldr	r3, [pc, #432]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a6b      	ldr	r2, [pc, #428]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800632e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006334:	f7fc fc78 	bl	8002c28 <HAL_GetTick>
 8006338:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800633c:	f7fc fc74 	bl	8002c28 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e13a      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800634e:	4b63      	ldr	r3, [pc, #396]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x5dc>
 800635a:	e018      	b.n	800638e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800635c:	4b5f      	ldr	r3, [pc, #380]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a5e      	ldr	r2, [pc, #376]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fc fc5e 	bl	8002c28 <HAL_GetTick>
 800636c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006370:	f7fc fc5a 	bl	8002c28 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e120      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006382:	4b56      	ldr	r3, [pc, #344]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8115 	beq.w	80065c2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	2b18      	cmp	r3, #24
 800639c:	f000 80af 	beq.w	80064fe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f040 8086 	bne.w	80064b6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80063aa:	4b4c      	ldr	r3, [pc, #304]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a4b      	ldr	r2, [pc, #300]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80063b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b6:	f7fc fc37 	bl	8002c28 <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80063be:	f7fc fc33 	bl	8002c28 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0f9      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063d0:	4b42      	ldr	r3, [pc, #264]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f0      	bne.n	80063be <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80063dc:	4b3f      	ldr	r3, [pc, #252]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80063de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80063e4:	f023 0303 	bic.w	r3, r3, #3
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063f0:	0212      	lsls	r2, r2, #8
 80063f2:	430a      	orrs	r2, r1
 80063f4:	4939      	ldr	r1, [pc, #228]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fe:	3b01      	subs	r3, #1
 8006400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	3b01      	subs	r3, #1
 800640a:	025b      	lsls	r3, r3, #9
 800640c:	b29b      	uxth	r3, r3
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	3b01      	subs	r3, #1
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800641c:	431a      	orrs	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	3b01      	subs	r3, #1
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800642a:	492c      	ldr	r1, [pc, #176]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800642c:	4313      	orrs	r3, r2
 800642e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006430:	4b2a      	ldr	r3, [pc, #168]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	4a29      	ldr	r2, [pc, #164]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006436:	f023 0310 	bic.w	r3, r3, #16
 800643a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006440:	4a26      	ldr	r2, [pc, #152]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006446:	4b25      	ldr	r3, [pc, #148]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644a:	4a24      	ldr	r2, [pc, #144]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800644c:	f043 0310 	orr.w	r3, r3, #16
 8006450:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006452:	4b22      	ldr	r3, [pc, #136]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	f023 020c 	bic.w	r2, r3, #12
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645e:	491f      	ldr	r1, [pc, #124]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006460:	4313      	orrs	r3, r2
 8006462:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006464:	4b1d      	ldr	r3, [pc, #116]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006468:	f023 0220 	bic.w	r2, r3, #32
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006470:	491a      	ldr	r1, [pc, #104]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006472:	4313      	orrs	r3, r2
 8006474:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006476:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 800647c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006480:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8006482:	4b16      	ldr	r3, [pc, #88]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a15      	ldr	r2, [pc, #84]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 8006488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800648c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fc fbcb 	bl	8002c28 <HAL_GetTick>
 8006492:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006496:	f7fc fbc7 	bl	8002c28 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e08d      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80064a8:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <HAL_RCC_OscConfig+0x736>
 80064b4:	e085      	b.n	80065c2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80064b6:	4b09      	ldr	r3, [pc, #36]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a08      	ldr	r2, [pc, #32]	@ (80064dc <HAL_RCC_OscConfig+0x77c>)
 80064bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c2:	f7fc fbb1 	bl	8002c28 <HAL_GetTick>
 80064c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064c8:	e00a      	b.n	80064e0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80064ca:	f7fc fbad 	bl	8002c28 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d903      	bls.n	80064e0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e073      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
 80064dc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80064e0:	4b3a      	ldr	r3, [pc, #232]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1ee      	bne.n	80064ca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80064ec:	4b37      	ldr	r3, [pc, #220]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80064ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f0:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80064f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	6293      	str	r3, [r2, #40]	@ 0x28
 80064fc:	e061      	b.n	80065c2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80064fe:	4b33      	ldr	r3, [pc, #204]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006504:	4b31      	ldr	r3, [pc, #196]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 8006506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006508:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	2b01      	cmp	r3, #1
 8006510:	d031      	beq.n	8006576 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f003 0203 	and.w	r2, r3, #3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d12a      	bne.n	8006576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d122      	bne.n	8006576 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800653a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d11a      	bne.n	8006576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	0a5b      	lsrs	r3, r3, #9
 8006544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800654e:	429a      	cmp	r2, r3
 8006550:	d111      	bne.n	8006576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006560:	429a      	cmp	r2, r3
 8006562:	d108      	bne.n	8006576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	0e1b      	lsrs	r3, r3, #24
 8006568:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006572:	429a      	cmp	r2, r3
 8006574:	d001      	beq.n	800657a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e024      	b.n	80065c4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800657a:	4b14      	ldr	r3, [pc, #80]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	08db      	lsrs	r3, r3, #3
 8006580:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006588:	429a      	cmp	r2, r3
 800658a:	d01a      	beq.n	80065c2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800658c:	4b0f      	ldr	r3, [pc, #60]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	4a0e      	ldr	r2, [pc, #56]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 8006592:	f023 0310 	bic.w	r3, r3, #16
 8006596:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fc fb46 	bl	8002c28 <HAL_GetTick>
 800659c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800659e:	bf00      	nop
 80065a0:	f7fc fb42 	bl	8002c28 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d0f9      	beq.n	80065a0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b0:	4a06      	ldr	r2, [pc, #24]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80065b6:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ba:	4a04      	ldr	r2, [pc, #16]	@ (80065cc <HAL_RCC_OscConfig+0x86c>)
 80065bc:	f043 0310 	orr.w	r3, r3, #16
 80065c0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3720      	adds	r7, #32
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	44020c00 	.word	0x44020c00

080065d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e19e      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e4:	4b83      	ldr	r3, [pc, #524]	@ (80067f4 <HAL_RCC_ClockConfig+0x224>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d910      	bls.n	8006614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b80      	ldr	r3, [pc, #512]	@ (80067f4 <HAL_RCC_ClockConfig+0x224>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 020f 	bic.w	r2, r3, #15
 80065fa:	497e      	ldr	r1, [pc, #504]	@ (80067f4 <HAL_RCC_ClockConfig+0x224>)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006602:	4b7c      	ldr	r3, [pc, #496]	@ (80067f4 <HAL_RCC_ClockConfig+0x224>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e186      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0310 	and.w	r3, r3, #16
 800661c:	2b00      	cmp	r3, #0
 800661e:	d012      	beq.n	8006646 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695a      	ldr	r2, [r3, #20]
 8006624:	4b74      	ldr	r3, [pc, #464]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800662e:	429a      	cmp	r2, r3
 8006630:	d909      	bls.n	8006646 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006632:	4b71      	ldr	r3, [pc, #452]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	496d      	ldr	r1, [pc, #436]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006642:	4313      	orrs	r3, r2
 8006644:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d012      	beq.n	8006678 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	4b68      	ldr	r3, [pc, #416]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006660:	429a      	cmp	r2, r3
 8006662:	d909      	bls.n	8006678 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006664:	4b64      	ldr	r3, [pc, #400]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	4961      	ldr	r1, [pc, #388]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006674:	4313      	orrs	r3, r2
 8006676:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	4b5b      	ldr	r3, [pc, #364]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006690:	429a      	cmp	r2, r3
 8006692:	d908      	bls.n	80066a6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006694:	4b58      	ldr	r3, [pc, #352]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4955      	ldr	r1, [pc, #340]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	4b50      	ldr	r3, [pc, #320]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	429a      	cmp	r2, r3
 80066c0:	d908      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80066c2:	4b4d      	ldr	r3, [pc, #308]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f023 020f 	bic.w	r2, r3, #15
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	494a      	ldr	r1, [pc, #296]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8093 	beq.w	8006808 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d107      	bne.n	80066fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80066ea:	4b43      	ldr	r3, [pc, #268]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d121      	bne.n	800673a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e113      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d107      	bne.n	8006712 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006702:	4b3d      	ldr	r3, [pc, #244]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d115      	bne.n	800673a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e107      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d107      	bne.n	800672a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800671a:	4b37      	ldr	r3, [pc, #220]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e0fb      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800672a:	4b33      	ldr	r3, [pc, #204]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0f3      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f023 0203 	bic.w	r2, r3, #3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	492c      	ldr	r1, [pc, #176]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006748:	4313      	orrs	r3, r2
 800674a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800674c:	f7fc fa6c 	bl	8002c28 <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d112      	bne.n	8006780 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800675a:	e00a      	b.n	8006772 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800675c:	f7fc fa64 	bl	8002c28 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e0d7      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006772:	4b21      	ldr	r3, [pc, #132]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0318 	and.w	r3, r3, #24
 800677a:	2b18      	cmp	r3, #24
 800677c:	d1ee      	bne.n	800675c <HAL_RCC_ClockConfig+0x18c>
 800677e:	e043      	b.n	8006808 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d112      	bne.n	80067ae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006788:	e00a      	b.n	80067a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800678a:	f7fc fa4d 	bl	8002c28 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e0c0      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067a0:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f003 0318 	and.w	r3, r3, #24
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d1ee      	bne.n	800678a <HAL_RCC_ClockConfig+0x1ba>
 80067ac:	e02c      	b.n	8006808 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d122      	bne.n	80067fc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fc fa36 	bl	8002c28 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e0a9      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80067ce:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <HAL_RCC_ClockConfig+0x228>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0318 	and.w	r3, r3, #24
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d1ee      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x1e8>
 80067da:	e015      	b.n	8006808 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067dc:	f7fc fa24 	bl	8002c28 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d906      	bls.n	80067fc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e097      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
 80067f2:	bf00      	nop
 80067f4:	40022000 	.word	0x40022000
 80067f8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80067fc:	4b4b      	ldr	r3, [pc, #300]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0318 	and.w	r3, r3, #24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e9      	bne.n	80067dc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	4b44      	ldr	r3, [pc, #272]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	429a      	cmp	r2, r3
 8006822:	d208      	bcs.n	8006836 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006824:	4b41      	ldr	r3, [pc, #260]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 020f 	bic.w	r2, r3, #15
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	493e      	ldr	r1, [pc, #248]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006836:	4b3e      	ldr	r3, [pc, #248]	@ (8006930 <HAL_RCC_ClockConfig+0x360>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d210      	bcs.n	8006866 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006844:	4b3a      	ldr	r3, [pc, #232]	@ (8006930 <HAL_RCC_ClockConfig+0x360>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 020f 	bic.w	r2, r3, #15
 800684c:	4938      	ldr	r1, [pc, #224]	@ (8006930 <HAL_RCC_ClockConfig+0x360>)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006854:	4b36      	ldr	r3, [pc, #216]	@ (8006930 <HAL_RCC_ClockConfig+0x360>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d001      	beq.n	8006866 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e05d      	b.n	8006922 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b00      	cmp	r3, #0
 8006870:	d010      	beq.n	8006894 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	4b2d      	ldr	r3, [pc, #180]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800687e:	429a      	cmp	r2, r3
 8006880:	d208      	bcs.n	8006894 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006882:	4b2a      	ldr	r3, [pc, #168]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	4927      	ldr	r1, [pc, #156]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006890:	4313      	orrs	r3, r2
 8006892:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d012      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	4b21      	ldr	r3, [pc, #132]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d209      	bcs.n	80068c6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80068b2:	4b1e      	ldr	r3, [pc, #120]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	491a      	ldr	r1, [pc, #104]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	4b15      	ldr	r3, [pc, #84]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d209      	bcs.n	80068f8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80068e4:	4b11      	ldr	r3, [pc, #68]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	021b      	lsls	r3, r3, #8
 80068f2:	490e      	ldr	r1, [pc, #56]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80068f8:	f000 f822 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80068fc:	4602      	mov	r2, r0
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <HAL_RCC_ClockConfig+0x35c>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	490b      	ldr	r1, [pc, #44]	@ (8006934 <HAL_RCC_ClockConfig+0x364>)
 8006908:	5ccb      	ldrb	r3, [r1, r3]
 800690a:	fa22 f303 	lsr.w	r3, r2, r3
 800690e:	4a0a      	ldr	r2, [pc, #40]	@ (8006938 <HAL_RCC_ClockConfig+0x368>)
 8006910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006912:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <HAL_RCC_ClockConfig+0x36c>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fc f910 	bl	8002b3c <HAL_InitTick>
 800691c:	4603      	mov	r3, r0
 800691e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006920:	7afb      	ldrb	r3, [r7, #11]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	44020c00 	.word	0x44020c00
 8006930:	40022000 	.word	0x40022000
 8006934:	08010888 	.word	0x08010888
 8006938:	20000000 	.word	0x20000000
 800693c:	20000004 	.word	0x20000004

08006940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006940:	b480      	push	{r7}
 8006942:	b089      	sub	sp, #36	@ 0x24
 8006944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006946:	4b8c      	ldr	r3, [pc, #560]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 0318 	and.w	r3, r3, #24
 800694e:	2b08      	cmp	r3, #8
 8006950:	d102      	bne.n	8006958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006952:	4b8a      	ldr	r3, [pc, #552]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x23c>)
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e107      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006958:	4b87      	ldr	r3, [pc, #540]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f003 0318 	and.w	r3, r3, #24
 8006960:	2b00      	cmp	r3, #0
 8006962:	d112      	bne.n	800698a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006964:	4b84      	ldr	r3, [pc, #528]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0320 	and.w	r3, r3, #32
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006970:	4b81      	ldr	r3, [pc, #516]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	08db      	lsrs	r3, r3, #3
 8006976:	f003 0303 	and.w	r3, r3, #3
 800697a:	4a81      	ldr	r2, [pc, #516]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x240>)
 800697c:	fa22 f303 	lsr.w	r3, r2, r3
 8006980:	61fb      	str	r3, [r7, #28]
 8006982:	e0f1      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8006984:	4b7e      	ldr	r3, [pc, #504]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	e0ee      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800698a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f003 0318 	and.w	r3, r3, #24
 8006992:	2b10      	cmp	r3, #16
 8006994:	d102      	bne.n	800699c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006996:	4b7b      	ldr	r3, [pc, #492]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x244>)
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e0e5      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800699c:	4b76      	ldr	r3, [pc, #472]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f003 0318 	and.w	r3, r3, #24
 80069a4:	2b18      	cmp	r3, #24
 80069a6:	f040 80dd 	bne.w	8006b64 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80069aa:	4b73      	ldr	r3, [pc, #460]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	f003 0303 	and.w	r3, r3, #3
 80069b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80069b4:	4b70      	ldr	r3, [pc, #448]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	0a1b      	lsrs	r3, r3, #8
 80069ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80069c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80069c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80069cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80069ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	fb02 f303 	mul.w	r3, r2, r3
 80069dc:	ee07 3a90 	vmov	s15, r3
 80069e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80b7 	beq.w	8006b5e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d003      	beq.n	80069fe <HAL_RCC_GetSysClockFreq+0xbe>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d056      	beq.n	8006aaa <HAL_RCC_GetSysClockFreq+0x16a>
 80069fc:	e077      	b.n	8006aee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80069fe:	4b5e      	ldr	r3, [pc, #376]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d02d      	beq.n	8006a66 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	4a5a      	ldr	r2, [pc, #360]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8006a16:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a34:	4b50      	ldr	r3, [pc, #320]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a44:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a48:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8006b88 <HAL_RCC_GetSysClockFreq+0x248>
 8006a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a60:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8006a64:	e065      	b.n	8006b32 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	ee07 3a90 	vmov	s15, r3
 8006a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a70:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8006b8c <HAL_RCC_GetSysClockFreq+0x24c>
 8006a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a78:	4b3f      	ldr	r3, [pc, #252]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a80:	ee07 3a90 	vmov	s15, r3
 8006a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a8c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006b88 <HAL_RCC_GetSysClockFreq+0x248>
 8006a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006aa8:	e043      	b.n	8006b32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8006b90 <HAL_RCC_GetSysClockFreq+0x250>
 8006ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abc:	4b2e      	ldr	r3, [pc, #184]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8006b88 <HAL_RCC_GetSysClockFreq+0x248>
 8006ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006adc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8006aec:	e021      	b.n	8006b32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006b94 <HAL_RCC_GetSysClockFreq+0x254>
 8006afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b14:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8006b88 <HAL_RCC_GetSysClockFreq+0x248>
 8006b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006b30:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006b32:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8006b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b36:	0a5b      	lsrs	r3, r3, #9
 8006b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	ee07 3a90 	vmov	s15, r3
 8006b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8006b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b56:	ee17 3a90 	vmov	r3, s15
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e004      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e001      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8006b64:	4b06      	ldr	r3, [pc, #24]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8006b66:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8006b68:	69fb      	ldr	r3, [r7, #28]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3724      	adds	r7, #36	@ 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	44020c00 	.word	0x44020c00
 8006b7c:	003d0900 	.word	0x003d0900
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	017d7840 	.word	0x017d7840
 8006b88:	46000000 	.word	0x46000000
 8006b8c:	4c742400 	.word	0x4c742400
 8006b90:	4bbebc20 	.word	0x4bbebc20
 8006b94:	4a742400 	.word	0x4a742400

08006b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006b9c:	f7ff fed0 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b08      	ldr	r3, [pc, #32]	@ (8006bc4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ba6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006baa:	4907      	ldr	r1, [pc, #28]	@ (8006bc8 <HAL_RCC_GetHCLKFreq+0x30>)
 8006bac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006bae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	4a05      	ldr	r2, [pc, #20]	@ (8006bcc <HAL_RCC_GetHCLKFreq+0x34>)
 8006bb8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006bba:	4b04      	ldr	r3, [pc, #16]	@ (8006bcc <HAL_RCC_GetHCLKFreq+0x34>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	44020c00 	.word	0x44020c00
 8006bc8:	08010888 	.word	0x08010888
 8006bcc:	20000000 	.word	0x20000000

08006bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006bd4:	f7ff ffe0 	bl	8006b98 <HAL_RCC_GetHCLKFreq>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	091b      	lsrs	r3, r3, #4
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	4904      	ldr	r1, [pc, #16]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006be6:	5ccb      	ldrb	r3, [r1, r3]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	44020c00 	.word	0x44020c00
 8006bf8:	08010898 	.word	0x08010898

08006bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006c00:	f7ff ffca 	bl	8006b98 <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b06      	ldr	r3, [pc, #24]	@ (8006c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4904      	ldr	r1, [pc, #16]	@ (8006c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	44020c00 	.word	0x44020c00
 8006c24:	08010898 	.word	0x08010898

08006c28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006c2c:	f7ff ffb4 	bl	8006b98 <HAL_RCC_GetHCLKFreq>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4b06      	ldr	r3, [pc, #24]	@ (8006c4c <HAL_RCC_GetPCLK3Freq+0x24>)
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	0b1b      	lsrs	r3, r3, #12
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	4904      	ldr	r1, [pc, #16]	@ (8006c50 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006c3e:	5ccb      	ldrb	r3, [r1, r3]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	44020c00 	.word	0x44020c00
 8006c50:	08010898 	.word	0x08010898

08006c54 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	b0aa      	sub	sp, #168	@ 0xa8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c60:	2300      	movs	r3, #0
 8006c62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006c78:	2500      	movs	r5, #0
 8006c7a:	ea54 0305 	orrs.w	r3, r4, r5
 8006c7e:	d00b      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006c80:	4bb8      	ldr	r3, [pc, #736]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c86:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	4ab4      	ldr	r2, [pc, #720]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c92:	430b      	orrs	r3, r1
 8006c94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca0:	f002 0801 	and.w	r8, r2, #1
 8006ca4:	f04f 0900 	mov.w	r9, #0
 8006ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8006cac:	d038      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006cae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d819      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006cd9 	.word	0x08006cd9
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cf5 	.word	0x08006cf5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006cdc:	3308      	adds	r3, #8
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 ffee 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8006cea:	e004      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006cf2:	e000      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8006cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10c      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006cfe:	4b99      	ldr	r3, [pc, #612]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d04:	f023 0107 	bic.w	r1, r3, #7
 8006d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0e:	4a95      	ldr	r2, [pc, #596]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d10:	430b      	orrs	r3, r1
 8006d12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006d1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f002 0a02 	and.w	sl, r2, #2
 8006d2c:	f04f 0b00 	mov.w	fp, #0
 8006d30:	ea5a 030b 	orrs.w	r3, sl, fp
 8006d34:	d03c      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006d36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	2b28      	cmp	r3, #40	@ 0x28
 8006d3e:	d01b      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
 8006d40:	2b28      	cmp	r3, #40	@ 0x28
 8006d42:	d815      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8006d44:	2b20      	cmp	r3, #32
 8006d46:	d019      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d811      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8006d4c:	2b18      	cmp	r3, #24
 8006d4e:	d017      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8006d50:	2b18      	cmp	r3, #24
 8006d52:	d80d      	bhi.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d109      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d60:	3308      	adds	r3, #8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 ffac 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006d76:	e006      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006d78:	bf00      	nop
 8006d7a:	e004      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006d7c:	bf00      	nop
 8006d7e:	e002      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006d80:	bf00      	nop
 8006d82:	e000      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8006d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d86:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006d8e:	4b75      	ldr	r3, [pc, #468]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d94:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	4a71      	ldr	r2, [pc, #452]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006da0:	430b      	orrs	r3, r1
 8006da2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006da6:	e003      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006dac:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006db0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f002 0304 	and.w	r3, r2, #4
 8006dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006dc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d040      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006dd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006dda:	d01e      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8006ddc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006de0:	d817      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006de6:	d01a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8006de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dec:	d811      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df0:	d017      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df4:	d80d      	bhi.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d015      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e02:	3308      	adds	r3, #8
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 ff5b 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8006e10:	e00a      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006e18:	e006      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8006e1a:	bf00      	nop
 8006e1c:	e004      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8006e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e28:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10c      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006e30:	4b4c      	ldr	r3, [pc, #304]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e36:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e40:	4a48      	ldr	r2, [pc, #288]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006e42:	430b      	orrs	r3, r1
 8006e44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006e4e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006e5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e68:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d043      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006e72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e7c:	d021      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006e7e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e82:	d81a      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006e84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e88:	d01d      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006e8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e8e:	d814      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e94:	d019      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x276>
 8006e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e9a:	d80e      	bhi.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x266>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d016      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8006ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ea4:	d109      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006eaa:	3308      	adds	r3, #8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 ff07 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006eb8:	e00a      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006ec0:	e006      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006ec2:	bf00      	nop
 8006ec4:	e004      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006ec6:	bf00      	nop
 8006ec8:	e002      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006eca:	bf00      	nop
 8006ecc:	e000      	b.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8006ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ed0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10c      	bne.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006ed8:	4b22      	ldr	r3, [pc, #136]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ede:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006eea:	430b      	orrs	r3, r1
 8006eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006ef0:	e003      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006ef6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006f06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f08:	2300      	movs	r3, #0
 8006f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f10:	460b      	mov	r3, r1
 8006f12:	4313      	orrs	r3, r2
 8006f14:	d03e      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006f16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f20:	d01b      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8006f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f26:	d814      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8006f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f2c:	d017      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8006f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f32:	d80e      	bhi.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f3c:	d109      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f42:	3308      	adds	r3, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 febb 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006f50:	e00b      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006f58:	e007      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8006f5a:	bf00      	nop
 8006f5c:	e005      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8006f5e:	bf00      	nop
 8006f60:	e003      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
 8006f62:	bf00      	nop
 8006f64:	44020c00 	.word	0x44020c00
        break;
 8006f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f6a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10c      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f72:	4ba5      	ldr	r3, [pc, #660]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8006f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f78:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f82:	4aa1      	ldr	r2, [pc, #644]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8006f84:	430b      	orrs	r3, r1
 8006f86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006f8a:	e003      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f8c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006f90:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006fa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fa6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006faa:	460b      	mov	r3, r1
 8006fac:	4313      	orrs	r3, r2
 8006fae:	d03b      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fba:	d01b      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8006fbc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006fc0:	d814      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x398>
 8006fc2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fc6:	d017      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006fc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fcc:	d80e      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x398>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d014      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8006fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd6:	d109      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006fdc:	3308      	adds	r3, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fe6e 	bl	8008cc0 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006fea:	e008      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006ff2:	e004      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8006ff4:	bf00      	nop
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8006ff8:	bf00      	nop
 8006ffa:	e000      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8006ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ffe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10c      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007006:	4b80      	ldr	r3, [pc, #512]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800700c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007010:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007016:	4a7c      	ldr	r2, [pc, #496]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007018:	430b      	orrs	r3, r1
 800701a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007024:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007028:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007036:	2300      	movs	r3, #0
 8007038:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800703a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800703e:	460b      	mov	r3, r1
 8007040:	4313      	orrs	r3, r2
 8007042:	d033      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8007044:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800704e:	d015      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007054:	d80e      	bhi.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d012      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800705a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800705e:	d109      	bne.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007060:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007064:	3308      	adds	r3, #8
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fe2a 	bl	8008cc0 <RCCEx_PLL2_Config>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8007072:	e006      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800707a:	e002      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 800707c:	bf00      	nop
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8007080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007082:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10c      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800708a:	4b5f      	ldr	r3, [pc, #380]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800708c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007090:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8007094:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709a:	4a5b      	ldr	r2, [pc, #364]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800709c:	430b      	orrs	r3, r1
 800709e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80070a2:	e003      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80070a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80070ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b4:	2100      	movs	r1, #0
 80070b6:	6639      	str	r1, [r7, #96]	@ 0x60
 80070b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80070be:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80070c2:	460b      	mov	r3, r1
 80070c4:	4313      	orrs	r3, r2
 80070c6:	d033      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80070c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070d2:	d015      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 80070d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070d8:	d80e      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d012      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80070de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070e2:	d109      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070e8:	3308      	adds	r3, #8
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 fde8 	bl	8008cc0 <RCCEx_PLL2_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80070f6:	e006      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80070fe:	e002      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8007100:	bf00      	nop
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8007104:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007106:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800710e:	4b3e      	ldr	r3, [pc, #248]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007110:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007114:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007118:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800711c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711e:	4a3a      	ldr	r2, [pc, #232]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007120:	430b      	orrs	r3, r1
 8007122:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007126:	e003      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800712c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	2100      	movs	r1, #0
 800713a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800713c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007142:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007146:	460b      	mov	r3, r1
 8007148:	4313      	orrs	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800714c:	4b2e      	ldr	r3, [pc, #184]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007156:	61d3      	str	r3, [r2, #28]
 8007158:	4b2b      	ldr	r3, [pc, #172]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800715a:	69d9      	ldr	r1, [r3, #28]
 800715c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007164:	4a28      	ldr	r2, [pc, #160]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8007166:	430b      	orrs	r3, r1
 8007168:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800716a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007176:	653b      	str	r3, [r7, #80]	@ 0x50
 8007178:	2300      	movs	r3, #0
 800717a:	657b      	str	r3, [r7, #84]	@ 0x54
 800717c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007180:	460b      	mov	r3, r1
 8007182:	4313      	orrs	r3, r2
 8007184:	d046      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800718a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800718c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007190:	d021      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007192:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007196:	d81a      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800719c:	d01d      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x586>
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	d814      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80071a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a8:	d019      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ae:	d80e      	bhi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d016      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80071b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071b8:	d109      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071be:	3308      	adds	r3, #8
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 fd7d 	bl	8008cc0 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80071cc:	e00a      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80071d6:	bf00      	nop
 80071d8:	e004      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80071da:	bf00      	nop
 80071dc:	e002      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80071de:	bf00      	nop
 80071e0:	e000      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80071e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10f      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80071ec:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80071ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071f2:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80071f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071fc:	4a02      	ldr	r2, [pc, #8]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80071fe:	430b      	orrs	r3, r1
 8007200:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007204:	e006      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007206:	bf00      	nop
 8007208:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007210:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007214:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007222:	2300      	movs	r3, #0
 8007224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007226:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800722a:	460b      	mov	r3, r1
 800722c:	4313      	orrs	r3, r2
 800722e:	d043      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007230:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007236:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800723a:	d021      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 800723c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007240:	d81a      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8007242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007246:	d01d      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8007248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724c:	d814      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800724e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007252:	d019      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8007254:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007258:	d80e      	bhi.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d016      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x638>
 800725e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007262:	d109      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007264:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007268:	3308      	adds	r3, #8
 800726a:	4618      	mov	r0, r3
 800726c:	f001 fd28 	bl	8008cc0 <RCCEx_PLL2_Config>
 8007270:	4603      	mov	r3, r0
 8007272:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8007276:	e00a      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800727e:	e006      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007280:	bf00      	nop
 8007282:	e004      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007284:	bf00      	nop
 8007286:	e002      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8007288:	bf00      	nop
 800728a:	e000      	b.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 800728c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10c      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007296:	4bb6      	ldr	r3, [pc, #728]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007298:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800729c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80072a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072a6:	4ab2      	ldr	r2, [pc, #712]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80072ae:	e003      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80072b4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80072b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80072c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80072c6:	2300      	movs	r3, #0
 80072c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072ca:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80072ce:	460b      	mov	r3, r1
 80072d0:	4313      	orrs	r3, r2
 80072d2:	d030      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80072d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072da:	2b05      	cmp	r3, #5
 80072dc:	d80f      	bhi.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d211      	bcs.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d911      	bls.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d109      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80072ee:	3308      	adds	r3, #8
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 fce5 	bl	8008cc0 <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80072fc:	e006      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007304:	e002      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800730a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800730c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10c      	bne.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007314:	4b96      	ldr	r3, [pc, #600]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800731a:	f023 0107 	bic.w	r1, r3, #7
 800731e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007324:	4a92      	ldr	r2, [pc, #584]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007326:	430b      	orrs	r3, r1
 8007328:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800732c:	e003      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007332:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007336:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	2100      	movs	r1, #0
 8007340:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007342:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007348:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800734c:	460b      	mov	r3, r1
 800734e:	4313      	orrs	r3, r2
 8007350:	d022      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007352:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007356:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007358:	2b00      	cmp	r3, #0
 800735a:	d005      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800735c:	2b08      	cmp	r3, #8
 800735e:	d005      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007366:	e002      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8007368:	bf00      	nop
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007376:	4b7e      	ldr	r3, [pc, #504]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007378:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737c:	f023 0108 	bic.w	r1, r3, #8
 8007380:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007386:	4a7a      	ldr	r2, [pc, #488]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007388:	430b      	orrs	r3, r1
 800738a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800738e:	e003      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007394:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80073a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80073a6:	2300      	movs	r3, #0
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f000 80b0 	beq.w	8007516 <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80073b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80073b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80073bc:	f043 0301 	orr.w	r3, r3, #1
 80073c0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c2:	f7fb fc31 	bl	8002c28 <HAL_GetTick>
 80073c6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80073ca:	e00b      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073cc:	f7fb fc2c 	bl	8002c28 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d903      	bls.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80073e2:	e005      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80073e4:	4b63      	ldr	r3, [pc, #396]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0ed      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 80073f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 808a 	bne.w	800750e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073fa:	4b5d      	ldr	r3, [pc, #372]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80073fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007408:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d022      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8007410:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007416:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800741a:	429a      	cmp	r2, r3
 800741c:	d01b      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800741e:	4b54      	ldr	r3, [pc, #336]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007424:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007428:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800742c:	4b50      	ldr	r3, [pc, #320]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800742e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007432:	4a4f      	ldr	r2, [pc, #316]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007438:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800743c:	4b4c      	ldr	r3, [pc, #304]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800743e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007442:	4a4b      	ldr	r2, [pc, #300]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800744c:	4a48      	ldr	r2, [pc, #288]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800744e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007452:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d019      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007462:	f7fb fbe1 	bl	8002c28 <HAL_GetTick>
 8007466:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746a:	e00d      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fb fbdc 	bl	8002c28 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800747c:	4293      	cmp	r3, r2
 800747e:	d903      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8007486:	e006      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007488:	4b39      	ldr	r3, [pc, #228]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800748a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0ea      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8007496:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d132      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800749e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074ac:	d10f      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80074ae:	4b30      	ldr	r3, [pc, #192]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80074b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074bc:	091b      	lsrs	r3, r3, #4
 80074be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80074c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80074c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074c8:	430b      	orrs	r3, r1
 80074ca:	61d3      	str	r3, [r2, #28]
 80074cc:	e005      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x886>
 80074ce:	4b28      	ldr	r3, [pc, #160]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	4a27      	ldr	r2, [pc, #156]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80074d8:	61d3      	str	r3, [r2, #28]
 80074da:	4b25      	ldr	r3, [pc, #148]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074e0:	4a23      	ldr	r2, [pc, #140]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074ea:	4b21      	ldr	r3, [pc, #132]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074ec:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80074f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007502:	e008      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007504:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007508:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007512:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007516:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007524:	2300      	movs	r3, #0
 8007526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007528:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800752c:	460b      	mov	r3, r1
 800752e:	4313      	orrs	r3, r2
 8007530:	d038      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007532:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007538:	2b30      	cmp	r3, #48	@ 0x30
 800753a:	d014      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800753c:	2b30      	cmp	r3, #48	@ 0x30
 800753e:	d80e      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8007540:	2b20      	cmp	r3, #32
 8007542:	d012      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d80a      	bhi.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d015      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800754c:	2b10      	cmp	r3, #16
 800754e:	d106      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007550:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	4a06      	ldr	r2, [pc, #24]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8007556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800755c:	e00d      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007564:	e009      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8007566:	bf00      	nop
 8007568:	e007      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800756a:	bf00      	nop
 800756c:	e005      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800756e:	bf00      	nop
 8007570:	44020c00 	.word	0x44020c00
 8007574:	44020800 	.word	0x44020800
        break;
 8007578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10c      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007582:	4bb5      	ldr	r3, [pc, #724]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007584:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007588:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800758c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007592:	49b1      	ldr	r1, [pc, #708]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800759a:	e003      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80075a0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80075a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d03c      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80075c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d81d      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80075ca:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	080075e5 	.word	0x080075e5
 80075d4:	080075f3 	.word	0x080075f3
 80075d8:	08007607 	.word	0x08007607
 80075dc:	0800760f 	.word	0x0800760f
 80075e0:	0800760f 	.word	0x0800760f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e4:	4b9c      	ldr	r3, [pc, #624]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	4a9b      	ldr	r2, [pc, #620]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80075ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80075f0:	e00e      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075f6:	3308      	adds	r3, #8
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fb61 	bl	8008cc0 <RCCEx_PLL2_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007604:	e004      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800760c:	e000      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 800760e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007610:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007618:	4b8f      	ldr	r3, [pc, #572]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800761a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800761e:	f023 0207 	bic.w	r2, r3, #7
 8007622:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007628:	498b      	ldr	r1, [pc, #556]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007636:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800763a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007650:	460b      	mov	r3, r1
 8007652:	4313      	orrs	r3, r2
 8007654:	d03c      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8007656:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800765a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765c:	2b20      	cmp	r3, #32
 800765e:	d01f      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8007660:	2b20      	cmp	r3, #32
 8007662:	d819      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8007664:	2b18      	cmp	r3, #24
 8007666:	d01d      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8007668:	2b18      	cmp	r3, #24
 800766a:	d815      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8007670:	2b08      	cmp	r3, #8
 8007672:	d007      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007674:	e010      	b.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007676:	4b78      	ldr	r3, [pc, #480]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767a:	4a77      	ldr	r2, [pc, #476]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800767c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007680:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007682:	e010      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007688:	3308      	adds	r3, #8
 800768a:	4618      	mov	r0, r3
 800768c:	f001 fb18 	bl	8008cc0 <RCCEx_PLL2_Config>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007696:	e006      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800769e:	e002      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80076a0:	bf00      	nop
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10c      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80076ae:	4b6a      	ldr	r3, [pc, #424]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80076b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076b4:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80076b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	4966      	ldr	r1, [pc, #408]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80076c6:	e003      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80076cc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80076d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
 80076e2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076e6:	460b      	mov	r3, r1
 80076e8:	4313      	orrs	r3, r2
 80076ea:	d03e      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80076ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80076f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f6:	d020      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xae6>
 80076f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076fc:	d819      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80076fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007700:	d01d      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8007702:	2bc0      	cmp	r3, #192	@ 0xc0
 8007704:	d815      	bhi.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800770a:	2b40      	cmp	r3, #64	@ 0x40
 800770c:	d007      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800770e:	e010      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007710:	4b51      	ldr	r3, [pc, #324]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	4a50      	ldr	r2, [pc, #320]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800771a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800771c:	e010      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800771e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007722:	3308      	adds	r3, #8
 8007724:	4618      	mov	r0, r3
 8007726:	f001 facb 	bl	8008cc0 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007730:	e006      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007738:	e002      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800773a:	bf00      	nop
 800773c:	e000      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800773e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007740:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10c      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007748:	4b43      	ldr	r3, [pc, #268]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800774a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800774e:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8007752:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007758:	493f      	ldr	r1, [pc, #252]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007760:	e003      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007762:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007766:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800776a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	2100      	movs	r1, #0
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d038      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007786:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800778a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007790:	d00e      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8007792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007796:	d815      	bhi.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d017      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xb78>
 800779c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077a0:	d110      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80077a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077ac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80077ae:	e00e      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077b4:	3308      	adds	r3, #8
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 fa82 	bl	8008cc0 <RCCEx_PLL2_Config>
 80077bc:	4603      	mov	r3, r0
 80077be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80077c2:	e004      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80077ca:	e000      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80077cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ce:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10c      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80077d6:	4b20      	ldr	r3, [pc, #128]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80077d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077e6:	491c      	ldr	r1, [pc, #112]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80077ee:	e003      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80077f4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	2100      	movs	r1, #0
 8007802:	6039      	str	r1, [r7, #0]
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800780e:	460b      	mov	r3, r1
 8007810:	4313      	orrs	r3, r2
 8007812:	d039      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007814:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800781a:	2b30      	cmp	r3, #48	@ 0x30
 800781c:	d01e      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800781e:	2b30      	cmp	r3, #48	@ 0x30
 8007820:	d815      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8007822:	2b10      	cmp	r3, #16
 8007824:	d002      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007826:	2b20      	cmp	r3, #32
 8007828:	d007      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800782a:	e010      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782c:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800782e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007830:	4a09      	ldr	r2, [pc, #36]	@ (8007858 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8007832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007836:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007838:	e011      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800783a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800783e:	3308      	adds	r3, #8
 8007840:	4618      	mov	r0, r3
 8007842:	f001 fa3d 	bl	8008cc0 <RCCEx_PLL2_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800784c:	e007      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8007854:	e003      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8007856:	bf00      	nop
 8007858:	44020c00 	.word	0x44020c00
        break;
 800785c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800785e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007868:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800786c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007870:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007876:	4908      	ldr	r1, [pc, #32]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800787e:	e003      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007880:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8007884:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 8007888:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 800788c:	4618      	mov	r0, r3
 800788e:	37a8      	adds	r7, #168	@ 0xa8
 8007890:	46bd      	mov	sp, r7
 8007892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007896:	bf00      	nop
 8007898:	44020c00 	.word	0x44020c00

0800789c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800789c:	b480      	push	{r7}
 800789e:	b08b      	sub	sp, #44	@ 0x2c
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80078a4:	4bad      	ldr	r3, [pc, #692]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ac:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80078ae:	4bab      	ldr	r3, [pc, #684]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b2:	f003 0303 	and.w	r3, r3, #3
 80078b6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80078b8:	4ba8      	ldr	r3, [pc, #672]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078bc:	0a1b      	lsrs	r3, r3, #8
 80078be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078c2:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80078c4:	4ba5      	ldr	r3, [pc, #660]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078ce:	4ba3      	ldr	r3, [pc, #652]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d2:	08db      	lsrs	r3, r3, #3
 80078d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8126 	beq.w	8007b3e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	2b03      	cmp	r3, #3
 80078f6:	d053      	beq.n	80079a0 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d86f      	bhi.n	80079de <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d003      	beq.n	800790c <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d02b      	beq.n	8007962 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800790a:	e068      	b.n	80079de <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800790c:	4b93      	ldr	r3, [pc, #588]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a92      	ldr	r2, [pc, #584]	@ (8007b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	ee07 3a90 	vmov	s15, r3
 800793c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007940:	ed97 6a04 	vldr	s12, [r7, #16]
 8007944:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8007b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007950:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007960:	e068      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007982:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800798a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800799a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800799e:	e049      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	ee07 3a90 	vmov	s15, r3
 80079a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079aa:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007b6c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80079ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	ee07 3a90 	vmov	s15, r3
 80079b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079bc:	ed97 6a04 	vldr	s12, [r7, #16]
 80079c0:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8007b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80079c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80079dc:	e02a      	b.n	8007a34 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079de:	4b5f      	ldr	r3, [pc, #380]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	08db      	lsrs	r3, r3, #3
 80079e4:	f003 0303 	and.w	r3, r3, #3
 80079e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007b60 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ea:	fa22 f303 	lsr.w	r3, r2, r3
 80079ee:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	ee07 3a90 	vmov	s15, r3
 8007a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a12:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a16:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007a32:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a34:	4b49      	ldr	r3, [pc, #292]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a40:	d121      	bne.n	8007a86 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007a42:	4b46      	ldr	r3, [pc, #280]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a4e:	4b43      	ldr	r3, [pc, #268]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	0a5b      	lsrs	r3, r3, #9
 8007a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007a60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a64:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a68:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a74:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e006      	b.n	8007a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e002      	b.n	8007a8c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a8c:	4b33      	ldr	r3, [pc, #204]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a98:	d121      	bne.n	8007ade <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007a9a:	4b30      	ldr	r3, [pc, #192]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d017      	beq.n	8007ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007ab8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007abc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007ac0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007acc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	e006      	b.n	8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	605a      	str	r2, [r3, #4]
 8007adc:	e002      	b.n	8007ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007af0:	d121      	bne.n	8007b36 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007af2:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d017      	beq.n	8007b2e <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007afe:	4b17      	ldr	r3, [pc, #92]	@ (8007b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b02:	0e1b      	lsrs	r3, r3, #24
 8007b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b14:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007b18:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b24:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007b2c:	e010      	b.n	8007b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
}
 8007b34:	e00c      	b.n	8007b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	609a      	str	r2, [r3, #8]
}
 8007b3c:	e008      	b.n	8007b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	609a      	str	r2, [r3, #8]
}
 8007b50:	bf00      	nop
 8007b52:	372c      	adds	r7, #44	@ 0x2c
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	44020c00 	.word	0x44020c00
 8007b60:	03d09000 	.word	0x03d09000
 8007b64:	46000000 	.word	0x46000000
 8007b68:	4a742400 	.word	0x4a742400
 8007b6c:	4bbebc20 	.word	0x4bbebc20

08007b70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b08b      	sub	sp, #44	@ 0x2c
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007b78:	4bad      	ldr	r3, [pc, #692]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b80:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007b82:	4bab      	ldr	r3, [pc, #684]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	f003 0303 	and.w	r3, r3, #3
 8007b8a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007b8c:	4ba8      	ldr	r3, [pc, #672]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b96:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8007b98:	4ba5      	ldr	r3, [pc, #660]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007ba2:	4ba3      	ldr	r3, [pc, #652]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	08db      	lsrs	r3, r3, #3
 8007ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8126 	beq.w	8007e12 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d053      	beq.n	8007c74 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d86f      	bhi.n	8007cb2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d003      	beq.n	8007be0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d02b      	beq.n	8007c36 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8007bde:	e068      	b.n	8007cb2 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007be0:	4b93      	ldr	r3, [pc, #588]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	08db      	lsrs	r3, r3, #3
 8007be6:	f003 0303 	and.w	r3, r3, #3
 8007bea:	4a92      	ldr	r2, [pc, #584]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bec:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c14:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c18:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c34:	e068      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8007e3c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c52:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007c72:	e049      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c90:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c94:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007c98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007cb0:	e02a      	b.n	8007d08 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007cea:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007e38 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007d06:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d08:	4b49      	ldr	r3, [pc, #292]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d14:	d121      	bne.n	8007d5a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007d16:	4b46      	ldr	r3, [pc, #280]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d017      	beq.n	8007d52 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007d22:	4b43      	ldr	r3, [pc, #268]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d26:	0a5b      	lsrs	r3, r3, #9
 8007d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e006      	b.n	8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	e002      	b.n	8007d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d60:	4b33      	ldr	r3, [pc, #204]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d6c:	d121      	bne.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007d6e:	4b30      	ldr	r3, [pc, #192]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d017      	beq.n	8007daa <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7e:	0c1b      	lsrs	r3, r3, #16
 8007d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d84:	ee07 3a90 	vmov	s15, r3
 8007d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007d8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d90:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	605a      	str	r2, [r3, #4]
 8007da8:	e006      	b.n	8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	605a      	str	r2, [r3, #4]
 8007db0:	e002      	b.n	8007db8 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007db8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007dc4:	d121      	bne.n	8007e0a <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d017      	beq.n	8007e02 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007dd2:	4b17      	ldr	r3, [pc, #92]	@ (8007e30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd6:	0e1b      	lsrs	r3, r3, #24
 8007dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ddc:	ee07 3a90 	vmov	s15, r3
 8007de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007de8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007dec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007df8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007e00:	e010      	b.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	609a      	str	r2, [r3, #8]
}
 8007e08:	e00c      	b.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	609a      	str	r2, [r3, #8]
}
 8007e10:	e008      	b.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	372c      	adds	r7, #44	@ 0x2c
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr
 8007e30:	44020c00 	.word	0x44020c00
 8007e34:	03d09000 	.word	0x03d09000
 8007e38:	46000000 	.word	0x46000000
 8007e3c:	4a742400 	.word	0x4a742400
 8007e40:	4bbebc20 	.word	0x4bbebc20

08007e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b08c      	sub	sp, #48	@ 0x30
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e52:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007e56:	430b      	orrs	r3, r1
 8007e58:	d14b      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007e5a:	4bc4      	ldr	r3, [pc, #784]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e64:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007e66:	4bc1      	ldr	r3, [pc, #772]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d108      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e7a:	d104      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e82:	f000 bf14 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007e86:	4bb9      	ldr	r3, [pc, #740]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e94:	d108      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e9c:	d104      	bne.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007e9e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea4:	f000 bf03 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb4:	d119      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ebc:	d115      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007ebe:	4bab      	ldr	r3, [pc, #684]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eca:	d30a      	bcc.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007ecc:	4ba7      	ldr	r3, [pc, #668]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	0a1b      	lsrs	r3, r3, #8
 8007ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed6:	4aa6      	ldr	r2, [pc, #664]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8007ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007ede:	f000 bee6 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007ee6:	f000 bee2 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eee:	f000 bede 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef6:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8007efa:	ea52 0301 	orrs.w	r3, r2, r1
 8007efe:	f000 838e 	beq.w	800861e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8007f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f06:	2a01      	cmp	r2, #1
 8007f08:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8007f0c:	f080 86cc 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f14:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8007f18:	ea52 0301 	orrs.w	r3, r2, r1
 8007f1c:	f000 82aa 	beq.w	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8007f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f24:	2a01      	cmp	r2, #1
 8007f26:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8007f2a:	f080 86bd 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f32:	f1a3 0110 	sub.w	r1, r3, #16
 8007f36:	ea52 0301 	orrs.w	r3, r2, r1
 8007f3a:	f000 8681 	beq.w	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8007f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f42:	2a01      	cmp	r2, #1
 8007f44:	f173 0310 	sbcs.w	r3, r3, #16
 8007f48:	f080 86ae 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f50:	1f19      	subs	r1, r3, #4
 8007f52:	ea52 0301 	orrs.w	r3, r2, r1
 8007f56:	f000 84b1 	beq.w	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5e:	2a01      	cmp	r2, #1
 8007f60:	f173 0304 	sbcs.w	r3, r3, #4
 8007f64:	f080 86a0 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8007f70:	430b      	orrs	r3, r1
 8007f72:	f000 85aa 	beq.w	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8007f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7a:	497e      	ldr	r1, [pc, #504]	@ (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8007f7c:	428a      	cmp	r2, r1
 8007f7e:	f173 0300 	sbcs.w	r3, r3, #0
 8007f82:	f080 8691 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f8a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007f8e:	430b      	orrs	r3, r1
 8007f90:	f000 8532 	beq.w	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8007f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f98:	4977      	ldr	r1, [pc, #476]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8007f9a:	428a      	cmp	r2, r1
 8007f9c:	f173 0300 	sbcs.w	r3, r3, #0
 8007fa0:	f080 8682 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007fac:	430b      	orrs	r3, r1
 8007fae:	f000 84bc 	beq.w	800892a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8007fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fb6:	4971      	ldr	r1, [pc, #452]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8007fb8:	428a      	cmp	r2, r1
 8007fba:	f173 0300 	sbcs.w	r3, r3, #0
 8007fbe:	f080 8673 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007fca:	430b      	orrs	r3, r1
 8007fcc:	f000 85f2 	beq.w	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8007fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fd4:	496a      	ldr	r1, [pc, #424]	@ (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8007fd6:	428a      	cmp	r2, r1
 8007fd8:	f173 0300 	sbcs.w	r3, r3, #0
 8007fdc:	f080 8664 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8007fe8:	430b      	orrs	r3, r1
 8007fea:	f000 81e5 	beq.w	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8007fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ff2:	4964      	ldr	r1, [pc, #400]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8007ff4:	428a      	cmp	r2, r1
 8007ff6:	f173 0300 	sbcs.w	r3, r3, #0
 8007ffa:	f080 8655 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8007ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008002:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8008006:	430b      	orrs	r3, r1
 8008008:	f000 83cc 	beq.w	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800800c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008010:	495d      	ldr	r1, [pc, #372]	@ (8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8008012:	428a      	cmp	r2, r1
 8008014:	f173 0300 	sbcs.w	r3, r3, #0
 8008018:	f080 8646 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800801c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008020:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8008024:	430b      	orrs	r3, r1
 8008026:	f000 8331 	beq.w	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 800802a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802e:	4957      	ldr	r1, [pc, #348]	@ (800818c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8008030:	428a      	cmp	r2, r1
 8008032:	f173 0300 	sbcs.w	r3, r3, #0
 8008036:	f080 8637 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800803a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800803e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008042:	430b      	orrs	r3, r1
 8008044:	f000 82bb 	beq.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8008048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800804c:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8008050:	f173 0300 	sbcs.w	r3, r3, #0
 8008054:	f080 8628 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008060:	430b      	orrs	r3, r1
 8008062:	f000 826d 	beq.w	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8008066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800806e:	428a      	cmp	r2, r1
 8008070:	f173 0300 	sbcs.w	r3, r3, #0
 8008074:	f080 8618 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008080:	430b      	orrs	r3, r1
 8008082:	f000 821e 	beq.w	80084c2 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8008086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800808a:	f242 0101 	movw	r1, #8193	@ 0x2001
 800808e:	428a      	cmp	r2, r1
 8008090:	f173 0300 	sbcs.w	r3, r3, #0
 8008094:	f080 8608 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800809c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80080a0:	430b      	orrs	r3, r1
 80080a2:	f000 8137 	beq.w	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80080a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080aa:	f241 0101 	movw	r1, #4097	@ 0x1001
 80080ae:	428a      	cmp	r2, r1
 80080b0:	f173 0300 	sbcs.w	r3, r3, #0
 80080b4:	f080 85f8 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80080b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080bc:	1f11      	subs	r1, r2, #4
 80080be:	430b      	orrs	r3, r1
 80080c0:	f000 80d2 	beq.w	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 80080c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c8:	2a05      	cmp	r2, #5
 80080ca:	f173 0300 	sbcs.w	r3, r3, #0
 80080ce:	f080 85eb 	bcs.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80080d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d6:	1e51      	subs	r1, r2, #1
 80080d8:	430b      	orrs	r3, r1
 80080da:	d006      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80080dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e0:	1e91      	subs	r1, r2, #2
 80080e2:	430b      	orrs	r3, r1
 80080e4:	d06c      	beq.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80080e6:	f000 bddf 	b.w	8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80080ea:	4b20      	ldr	r3, [pc, #128]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80080ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80080f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80080fc:	f7fe fd7e 	bl	8006bfc <HAL_RCC_GetPCLK2Freq>
 8008100:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008102:	f000 bdd4 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008106:	4b19      	ldr	r3, [pc, #100]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800810e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008112:	d10a      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8008114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008116:	2b01      	cmp	r3, #1
 8008118:	d107      	bne.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fd26 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008128:	e048      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800812a:	4b10      	ldr	r3, [pc, #64]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	2b02      	cmp	r3, #2
 8008134:	d10c      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	2b03      	cmp	r3, #3
 800813a:	d109      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800813c:	4b0b      	ldr	r3, [pc, #44]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	08db      	lsrs	r3, r3, #3
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	4a12      	ldr	r2, [pc, #72]	@ (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008148:	fa22 f303 	lsr.w	r3, r2, r3
 800814c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800814e:	e035      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008150:	4b06      	ldr	r3, [pc, #24]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815c:	d11c      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800815e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008160:	2b04      	cmp	r3, #4
 8008162:	d119      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8008164:	4b0b      	ldr	r3, [pc, #44]	@ (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008168:	e028      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800816a:	bf00      	nop
 800816c:	44020c00 	.word	0x44020c00
 8008170:	017d7840 	.word	0x017d7840
 8008174:	20000001 	.word	0x20000001
 8008178:	10000001 	.word	0x10000001
 800817c:	08000001 	.word	0x08000001
 8008180:	04000001 	.word	0x04000001
 8008184:	00200001 	.word	0x00200001
 8008188:	00040001 	.word	0x00040001
 800818c:	00020001 	.word	0x00020001
 8008190:	03d09000 	.word	0x03d09000
 8008194:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008198:	4b9f      	ldr	r3, [pc, #636]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800819a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d106      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	d103      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80081ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081b2:	e003      	b.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80081b8:	f000 bd79 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80081bc:	f000 bd77 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80081c0:	4b95      	ldr	r3, [pc, #596]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80081c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081ca:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80081d2:	f7fe fcfd 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 80081d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80081d8:	f000 bd69 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80081dc:	4b8e      	ldr	r3, [pc, #568]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e8:	d10a      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d107      	bne.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f0:	f107 030c 	add.w	r3, r7, #12
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fcbb 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081fe:	e031      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008200:	4b85      	ldr	r3, [pc, #532]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0302 	and.w	r3, r3, #2
 8008208:	2b02      	cmp	r3, #2
 800820a:	d10c      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800820c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820e:	2b18      	cmp	r3, #24
 8008210:	d109      	bne.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008212:	4b81      	ldr	r3, [pc, #516]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	08db      	lsrs	r3, r3, #3
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	4a7f      	ldr	r2, [pc, #508]	@ (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800821e:	fa22 f303 	lsr.w	r3, r2, r3
 8008222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008224:	e01e      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008226:	4b7c      	ldr	r3, [pc, #496]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800822e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008232:	d105      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	2b20      	cmp	r3, #32
 8008238:	d102      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800823a:	4b79      	ldr	r3, [pc, #484]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800823c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800823e:	e011      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008240:	4b75      	ldr	r3, [pc, #468]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b02      	cmp	r3, #2
 800824c:	d106      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800824e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008250:	2b28      	cmp	r3, #40	@ 0x28
 8008252:	d103      	bne.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8008254:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008258:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800825a:	e003      	b.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008260:	f000 bd25 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008264:	f000 bd23 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008268:	4b6b      	ldr	r3, [pc, #428]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800826a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800826e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008272:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800827a:	f7fe fca9 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 800827e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008280:	f000 bd15 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008284:	4b64      	ldr	r3, [pc, #400]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800828c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008290:	d10a      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	2b40      	cmp	r3, #64	@ 0x40
 8008296:	d107      	bne.n	80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4618      	mov	r0, r3
 800829e:	f7ff fc67 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082a6:	e033      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80082a8:	4b5b      	ldr	r3, [pc, #364]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d10c      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082b8:	d109      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ba:	4b57      	ldr	r3, [pc, #348]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	08db      	lsrs	r3, r3, #3
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	4a55      	ldr	r2, [pc, #340]	@ (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80082c6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082cc:	e020      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80082ce:	4b52      	ldr	r3, [pc, #328]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082da:	d106      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 80082dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e2:	d102      	bne.n	80082ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 80082e4:	4b4e      	ldr	r3, [pc, #312]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082e8:	e012      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80082ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80082ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d107      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80082f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80082fe:	d103      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8008300:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008306:	e003      	b.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800830c:	f000 bccf 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008310:	f000 bccd 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008314:	4b40      	ldr	r3, [pc, #256]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800831a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800831e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	d104      	bne.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008326:	f7fe fc7f 	bl	8006c28 <HAL_RCC_GetPCLK3Freq>
 800832a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800832c:	f000 bcbf 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008336:	d108      	bne.n	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4618      	mov	r0, r3
 800833e:	f7ff fc17 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008346:	f000 bcb2 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800834a:	4b33      	ldr	r3, [pc, #204]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b02      	cmp	r3, #2
 8008354:	d10d      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800835c:	d109      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800835e:	4b2e      	ldr	r3, [pc, #184]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	08db      	lsrs	r3, r3, #3
 8008364:	f003 0303 	and.w	r3, r3, #3
 8008368:	4a2c      	ldr	r2, [pc, #176]	@ (800841c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800836a:	fa22 f303 	lsr.w	r3, r2, r3
 800836e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008370:	e020      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008372:	4b29      	ldr	r3, [pc, #164]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800837a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800837e:	d106      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008386:	d102      	bne.n	800838e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8008388:	4b25      	ldr	r3, [pc, #148]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800838a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800838c:	e012      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800838e:	4b22      	ldr	r3, [pc, #136]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b02      	cmp	r3, #2
 800839a:	d107      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 800839c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80083a2:	d103      	bne.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80083a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80083b0:	f000 bc7d 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80083b4:	f000 bc7b 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80083b8:	4b17      	ldr	r3, [pc, #92]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80083ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80083c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80083ca:	f7fe fbe5 	bl	8006b98 <HAL_RCC_GetHCLKFreq>
 80083ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80083d0:	f000 bc6d 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80083d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d104      	bne.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80083da:	f7fe fab1 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80083de:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 80083e0:	f000 bc65 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d108      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ea:	f107 030c 	add.w	r3, r7, #12
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7ff fbbe 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80083f8:	f000 bc59 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008408:	d10e      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	2b03      	cmp	r3, #3
 800840e:	d10b      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8008412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008414:	e02c      	b.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8008416:	bf00      	nop
 8008418:	44020c00 	.word	0x44020c00
 800841c:	03d09000 	.word	0x03d09000
 8008420:	003d0900 	.word	0x003d0900
 8008424:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008428:	4b95      	ldr	r3, [pc, #596]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b02      	cmp	r3, #2
 8008432:	d10c      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	2b04      	cmp	r3, #4
 8008438:	d109      	bne.n	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800843a:	4b91      	ldr	r3, [pc, #580]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	4a8f      	ldr	r2, [pc, #572]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800844c:	e010      	b.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800844e:	4b8c      	ldr	r3, [pc, #560]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800845a:	d105      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	2b05      	cmp	r3, #5
 8008460:	d102      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8008462:	4b89      	ldr	r3, [pc, #548]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008466:	e003      	b.n	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800846c:	f000 bc1f 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008470:	f000 bc1d 	b.w	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008474:	4b82      	ldr	r3, [pc, #520]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800847a:	f003 0308 	and.w	r3, r3, #8
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008480:	4b7f      	ldr	r3, [pc, #508]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b02      	cmp	r3, #2
 800848c:	d106      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800848e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8008494:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800849a:	e011      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800849c:	4b78      	ldr	r3, [pc, #480]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800849e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084aa:	d106      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d103      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80084b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80084b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80084be:	e3f6      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80084c0:	e3f5      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80084c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084d4:	f7fe fb7c 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 80084d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80084da:	e3e8      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80084dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e2:	d107      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e4:	f107 030c 	add.w	r3, r7, #12
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7ff fb41 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80084f2:	e3dc      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80084f4:	4b62      	ldr	r3, [pc, #392]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0302 	and.w	r3, r3, #2
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d10d      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008508:	4b5d      	ldr	r3, [pc, #372]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	4a5c      	ldr	r2, [pc, #368]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800851a:	e010      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800851c:	4b58      	ldr	r3, [pc, #352]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008528:	d106      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800852a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008530:	d102      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8008532:	4b55      	ldr	r3, [pc, #340]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008536:	e002      	b.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800853c:	e3b7      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800853e:	e3b6      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008540:	4b4f      	ldr	r3, [pc, #316]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008546:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800854a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008552:	f7fe fb3d 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 8008556:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008558:	e3a9      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008560:	d107      	bne.n	8008572 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008562:	f107 030c 	add.w	r3, r7, #12
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fb02 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008570:	e39d      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008572:	4b43      	ldr	r3, [pc, #268]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	2b02      	cmp	r3, #2
 800857c:	d10d      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008584:	d109      	bne.n	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008586:	4b3e      	ldr	r3, [pc, #248]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	08db      	lsrs	r3, r3, #3
 800858c:	f003 0303 	and.w	r3, r3, #3
 8008590:	4a3c      	ldr	r2, [pc, #240]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008592:	fa22 f303 	lsr.w	r3, r2, r3
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008598:	e010      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800859a:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085a6:	d106      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80085ae:	d102      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80085b0:	4b35      	ldr	r3, [pc, #212]	@ (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80085b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085b4:	e002      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085ba:	e378      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80085bc:	e377      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80085be:	4b30      	ldr	r3, [pc, #192]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80085c4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80085c8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d103      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085d0:	f7fe fafe 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 80085d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80085d6:	e36a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80085d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085de:	d107      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e0:	f107 030c 	add.w	r3, r7, #12
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff fac3 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80085ee:	e35e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80085f0:	4b23      	ldr	r3, [pc, #140]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d10d      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80085fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008602:	d109      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008604:	4b1e      	ldr	r3, [pc, #120]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	4a1d      	ldr	r2, [pc, #116]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008616:	e34a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800861c:	e347      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800861e:	4b18      	ldr	r3, [pc, #96]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008624:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8008628:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d103      	bne.n	8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008630:	f7fe fafa 	bl	8006c28 <HAL_RCC_GetPCLK3Freq>
 8008634:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008636:	e33a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4618      	mov	r0, r3
 8008646:	f7ff fa93 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800864e:	e32e      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8008650:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d10d      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800865c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008662:	d109      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008664:	4b06      	ldr	r3, [pc, #24]	@ (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	4a05      	ldr	r2, [pc, #20]	@ (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008676:	e31a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800867c:	e317      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800867e:	bf00      	nop
 8008680:	44020c00 	.word	0x44020c00
 8008684:	03d09000 	.word	0x03d09000
 8008688:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800868c:	4b9b      	ldr	r3, [pc, #620]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800868e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008692:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008696:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800869a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800869e:	d044      	beq.n	800872a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80086a6:	d879      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ae:	d02d      	beq.n	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80086b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b6:	d871      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80086b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086be:	d017      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086c6:	d869      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d004      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80086ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d4:	d004      	beq.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80086d6:	e061      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80086d8:	f7fe faa6 	bl	8006c28 <HAL_RCC_GetPCLK3Freq>
 80086dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80086de:	e060      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086e0:	f107 030c 	add.w	r3, r7, #12
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fa43 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80086ee:	e058      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086f0:	4b82      	ldr	r3, [pc, #520]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80086f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d103      	bne.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80086fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008702:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8008704:	e04d      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800870a:	e04a      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800870c:	4b7b      	ldr	r3, [pc, #492]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800870e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008712:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800871a:	d103      	bne.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 800871c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008720:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8008722:	e03e      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008728:	e03b      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800872a:	4b74      	ldr	r3, [pc, #464]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800872c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008730:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008734:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008736:	4b71      	ldr	r3, [pc, #452]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b02      	cmp	r3, #2
 8008740:	d10c      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d109      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008748:	4b6c      	ldr	r3, [pc, #432]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	08db      	lsrs	r3, r3, #3
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	4a6b      	ldr	r2, [pc, #428]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
 8008758:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800875a:	e01e      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800875c:	4b67      	ldr	r3, [pc, #412]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008768:	d106      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800876a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008770:	d102      	bne.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008772:	4b64      	ldr	r3, [pc, #400]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8008774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008776:	e010      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008778:	4b60      	ldr	r3, [pc, #384]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008784:	d106      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800878c:	d102      	bne.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800878e:	4b5e      	ldr	r3, [pc, #376]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8008790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008792:	e002      	b.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8008798:	e003      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 800879a:	e002      	b.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80087a0:	bf00      	nop
          }
        }
        break;
 80087a2:	e284      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80087a4:	4b55      	ldr	r3, [pc, #340]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80087a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80087aa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80087b6:	d044      	beq.n	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80087be:	d879      	bhi.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80087c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c6:	d02d      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80087c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087ce:	d871      	bhi.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80087d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087d6:	d017      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80087d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087de:	d869      	bhi.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ec:	d004      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80087ee:	e061      	b.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80087f0:	f7fe f9ee 	bl	8006bd0 <HAL_RCC_GetPCLK1Freq>
 80087f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80087f6:	e060      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7ff f9b7 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008806:	e058      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008808:	4b3c      	ldr	r3, [pc, #240]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800880a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b02      	cmp	r3, #2
 8008814:	d103      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800881a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800881c:	e04d      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008822:	e04a      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008824:	4b35      	ldr	r3, [pc, #212]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008826:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800882a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800882e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008832:	d103      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8008834:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008838:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800883a:	e03e      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008840:	e03b      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008842:	4b2e      	ldr	r3, [pc, #184]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008848:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800884c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800884e:	4b2b      	ldr	r3, [pc, #172]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d10c      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d109      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008860:	4b26      	ldr	r3, [pc, #152]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	08db      	lsrs	r3, r3, #3
 8008866:	f003 0303 	and.w	r3, r3, #3
 800886a:	4a25      	ldr	r2, [pc, #148]	@ (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008872:	e01e      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008874:	4b21      	ldr	r3, [pc, #132]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008880:	d106      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008888:	d102      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800888a:	4b1e      	ldr	r3, [pc, #120]	@ (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800888c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800888e:	e010      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008890:	4b1a      	ldr	r3, [pc, #104]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800889c:	d106      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80088a6:	4b18      	ldr	r3, [pc, #96]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088aa:	e002      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80088ac:	2300      	movs	r3, #0
 80088ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80088b0:	e003      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80088b2:	e002      	b.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80088b4:	2300      	movs	r3, #0
 80088b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80088b8:	bf00      	nop
          }
        }
        break;
 80088ba:	e1f8      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80088bc:	4b0f      	ldr	r3, [pc, #60]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80088be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088c6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80088c8:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088d4:	d105      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80088de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80088e0:	e1e5      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80088e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e8:	d110      	bne.n	800890c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ea:	f107 0318 	add.w	r3, r7, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe ffd4 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80088f8:	e1d9      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80088fa:	bf00      	nop
 80088fc:	44020c00 	.word	0x44020c00
 8008900:	03d09000 	.word	0x03d09000
 8008904:	003d0900 	.word	0x003d0900
 8008908:	017d7840 	.word	0x017d7840
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800890c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008912:	d107      	bne.n	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 030c 	add.w	r3, r7, #12
 8008918:	4618      	mov	r0, r3
 800891a:	f7ff f929 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008922:	e1c4      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8008924:	2300      	movs	r3, #0
 8008926:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008928:	e1c1      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800892a:	4b9d      	ldr	r3, [pc, #628]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800892c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008938:	2b04      	cmp	r3, #4
 800893a:	d859      	bhi.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800893c:	a201      	add	r2, pc, #4	@ (adr r2, 8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008959 	.word	0x08008959
 8008948:	08008969 	.word	0x08008969
 800894c:	080089f1 	.word	0x080089f1
 8008950:	08008979 	.word	0x08008979
 8008954:	0800897f 	.word	0x0800897f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008958:	f107 0318 	add.w	r3, r7, #24
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe ff9d 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008966:	e046      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008968:	f107 030c 	add.w	r3, r7, #12
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff f8ff 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008976:	e03e      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008978:	4b8a      	ldr	r3, [pc, #552]	@ (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800897a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800897c:	e03b      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800897e:	4b88      	ldr	r3, [pc, #544]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008984:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008988:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800898a:	4b85      	ldr	r3, [pc, #532]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b02      	cmp	r3, #2
 8008994:	d10c      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	2b00      	cmp	r3, #0
 800899a:	d109      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800899c:	4b80      	ldr	r3, [pc, #512]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	08db      	lsrs	r3, r3, #3
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	4a80      	ldr	r2, [pc, #512]	@ (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ae:	e01e      	b.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089b0:	4b7b      	ldr	r3, [pc, #492]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d106      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c4:	d102      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80089c6:	4b79      	ldr	r3, [pc, #484]	@ (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80089c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ca:	e010      	b.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089cc:	4b74      	ldr	r3, [pc, #464]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089d8:	d106      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089e0:	d102      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80089e2:	4b73      	ldr	r3, [pc, #460]	@ (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089e6:	e002      	b.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80089ec:	e003      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80089f4:	bf00      	nop
          }
        }
        break;
 80089f6:	e15a      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80089f8:	4b69      	ldr	r3, [pc, #420]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80089fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	2b20      	cmp	r3, #32
 8008a08:	d022      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d858      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8008a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a12:	2b18      	cmp	r3, #24
 8008a14:	d019      	beq.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8008a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a18:	2b18      	cmp	r3, #24
 8008a1a:	d852      	bhi.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d008      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8008a28:	e04b      	b.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a2a:	f107 0318 	add.w	r3, r7, #24
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe ff34 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008a38:	e046      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3a:	f107 030c 	add.w	r3, r7, #12
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff f896 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008a48:	e03e      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008a4a:	4b56      	ldr	r3, [pc, #344]	@ (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008a4e:	e03b      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a50:	4b53      	ldr	r3, [pc, #332]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008a56:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008a5a:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a5c:	4b50      	ldr	r3, [pc, #320]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d10c      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	08db      	lsrs	r3, r3, #3
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	4a4b      	ldr	r2, [pc, #300]	@ (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a80:	e01e      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a82:	4b47      	ldr	r3, [pc, #284]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a96:	d102      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a98:	4b44      	ldr	r3, [pc, #272]	@ (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8008a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a9c:	e010      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a9e:	4b40      	ldr	r3, [pc, #256]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aaa:	d106      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ab2:	d102      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8008ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ab8:	e002      	b.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008aba:	2300      	movs	r3, #0
 8008abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8008abe:	e003      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8008ac0:	e002      	b.n	8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008ac6:	bf00      	nop
          }
        }
        break;
 8008ac8:	e0f1      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008aca:	4b35      	ldr	r3, [pc, #212]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ad0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008adc:	d023      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ae4:	d858      	bhi.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8008ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae8:	2bc0      	cmp	r3, #192	@ 0xc0
 8008aea:	d019      	beq.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8008aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8008af0:	d852      	bhi.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8008af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008afa:	2b40      	cmp	r3, #64	@ 0x40
 8008afc:	d008      	beq.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8008afe:	e04b      	b.n	8008b98 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b00:	f107 0318 	add.w	r3, r7, #24
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fec9 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008b0e:	e046      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b10:	f107 030c 	add.w	r3, r7, #12
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff f82b 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008b1e:	e03e      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008b20:	4b20      	ldr	r3, [pc, #128]	@ (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008b24:	e03b      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b26:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b2c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b30:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d10c      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d109      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b44:	4b16      	ldr	r3, [pc, #88]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	08db      	lsrs	r3, r3, #3
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	4a16      	ldr	r2, [pc, #88]	@ (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008b50:	fa22 f303 	lsr.w	r3, r2, r3
 8008b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b56:	e01e      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b58:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b64:	d106      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6c:	d102      	bne.n	8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8008b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b72:	e010      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b74:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b80:	d106      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b88:	d102      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b8a:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b8e:	e002      	b.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b90:	2300      	movs	r3, #0
 8008b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8008b94:	e003      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008b96:	e002      	b.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8008b9c:	bf00      	nop
          }
        }
        break;
 8008b9e:	e086      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ba0:	44020c00 	.word	0x44020c00
 8008ba4:	00bb8000 	.word	0x00bb8000
 8008ba8:	03d09000 	.word	0x03d09000
 8008bac:	003d0900 	.word	0x003d0900
 8008bb0:	017d7840 	.word	0x017d7840
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008bb4:	4b40      	ldr	r3, [pc, #256]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008bbe:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bcc:	d105      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8008bd4:	4b39      	ldr	r3, [pc, #228]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8008bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bd8:	e031      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008bda:	4b37      	ldr	r3, [pc, #220]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008be6:	d10a      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8008be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bea:	2b10      	cmp	r3, #16
 8008bec:	d107      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bee:	f107 0318 	add.w	r3, r7, #24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fe52 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bfc:	e01f      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d106      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d103      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8008c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c18:	e011      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008c1a:	4b27      	ldr	r3, [pc, #156]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c28:	d106      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8008c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2c:	2b30      	cmp	r3, #48	@ 0x30
 8008c2e:	d103      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8008c30:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c36:	e002      	b.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8008c3c:	e037      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008c3e:	e036      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008c40:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008c42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008c46:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d107      	bne.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c52:	f107 0318 	add.w	r3, r7, #24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fe20 	bl	800789c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8008c60:	e025      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8008c62:	4b15      	ldr	r3, [pc, #84]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c6e:	d10a      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d107      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c76:	f107 030c 	add.w	r3, r7, #12
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fe ff78 	bl	8007b70 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c84:	e00f      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008c86:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c92:	d105      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8008c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c96:	2b30      	cmp	r3, #48	@ 0x30
 8008c98:	d102      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8008c9a:	4b08      	ldr	r3, [pc, #32]	@ (8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8008c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c9e:	e002      	b.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8008ca4:	e003      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008ca6:	e002      	b.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008cac:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8008cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3730      	adds	r7, #48	@ 0x30
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	44020c00 	.word	0x44020c00
 8008cbc:	02dc6c00 	.word	0x02dc6c00

08008cc0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008cc8:	4b48      	ldr	r3, [pc, #288]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a47      	ldr	r2, [pc, #284]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008cce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cd2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cd4:	f7f9 ffa8 	bl	8002c28 <HAL_GetTick>
 8008cd8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cda:	e008      	b.n	8008cee <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cdc:	f7f9 ffa4 	bl	8002c28 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d901      	bls.n	8008cee <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e07a      	b.n	8008de4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cee:	4b3f      	ldr	r3, [pc, #252]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f0      	bne.n	8008cdc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cfe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008d02:	f023 0303 	bic.w	r3, r3, #3
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	6811      	ldr	r1, [r2, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6852      	ldr	r2, [r2, #4]
 8008d0e:	0212      	lsls	r2, r2, #8
 8008d10:	430a      	orrs	r2, r1
 8008d12:	4936      	ldr	r1, [pc, #216]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	025b      	lsls	r3, r3, #9
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	061b      	lsls	r3, r3, #24
 8008d44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008d48:	4928      	ldr	r1, [pc, #160]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008d4e:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d52:	f023 020c 	bic.w	r2, r3, #12
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	4924      	ldr	r1, [pc, #144]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008d60:	4b22      	ldr	r3, [pc, #136]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d64:	f023 0220 	bic.w	r2, r3, #32
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	491f      	ldr	r1, [pc, #124]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008d72:	4b1e      	ldr	r3, [pc, #120]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7a:	491c      	ldr	r1, [pc, #112]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008d80:	4b1a      	ldr	r3, [pc, #104]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	4a19      	ldr	r2, [pc, #100]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d86:	f023 0310 	bic.w	r3, r3, #16
 8008d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008d8c:	4b17      	ldr	r3, [pc, #92]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d94:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6a12      	ldr	r2, [r2, #32]
 8008d9c:	00d2      	lsls	r2, r2, #3
 8008d9e:	4913      	ldr	r1, [pc, #76]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008da4:	4b11      	ldr	r3, [pc, #68]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da8:	4a10      	ldr	r2, [pc, #64]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008daa:	f043 0310 	orr.w	r3, r3, #16
 8008dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008db0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a0d      	ldr	r2, [pc, #52]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008db6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008dba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dbc:	f7f9 ff34 	bl	8002c28 <HAL_GetTick>
 8008dc0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dc2:	e008      	b.n	8008dd6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008dc4:	f7f9 ff30 	bl	8002c28 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e006      	b.n	8008de4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008dd6:	4b05      	ldr	r3, [pc, #20]	@ (8008dec <RCCEx_PLL2_Config+0x12c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f0      	beq.n	8008dc4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0

}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	44020c00 	.word	0x44020c00

08008df0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e0e7      	b.n	8008fd2 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d105      	bne.n	8008e1c <HAL_SPI_Init+0x2c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b0f      	cmp	r3, #15
 8008e16:	d901      	bls.n	8008e1c <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e0da      	b.n	8008fd2 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f8e3 	bl	8008fe8 <SPI_GetPacketSize>
 8008e22:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <HAL_SPI_Init+0x42>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d811      	bhi.n	8008e56 <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e36:	4a69      	ldr	r2, [pc, #420]	@ (8008fdc <HAL_SPI_Init+0x1ec>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d009      	beq.n	8008e50 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a67      	ldr	r2, [pc, #412]	@ (8008fe0 <HAL_SPI_Init+0x1f0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d004      	beq.n	8008e50 <HAL_SPI_Init+0x60>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a66      	ldr	r2, [pc, #408]	@ (8008fe4 <HAL_SPI_Init+0x1f4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d104      	bne.n	8008e5a <HAL_SPI_Init+0x6a>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d901      	bls.n	8008e5a <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e0bb      	b.n	8008fd2 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d106      	bne.n	8008e74 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7f9 faf2 	bl	8002458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008e96:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ea0:	d119      	bne.n	8008ed6 <HAL_SPI_Init+0xe6>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eaa:	d103      	bne.n	8008eb4 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10c      	bne.n	8008ed6 <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec4:	d107      	bne.n	8008ed6 <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008ed4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <HAL_SPI_Init+0x112>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	d90b      	bls.n	8008f02 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e007      	b.n	8008f12 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f24:	ea42 0103 	orr.w	r1, r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f72:	431a      	orrs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f7e:	ea42 0103 	orr.w	r1, r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	40013000 	.word	0x40013000
 8008fe0:	40003800 	.word	0x40003800
 8008fe4:	40003c00 	.word	0x40003c00

08008fe8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	3301      	adds	r3, #1
 8009000:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	3307      	adds	r3, #7
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e049      	b.n	80090c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7f9 fa95 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f000 fb97 	bl	8009790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e049      	b.n	8009172 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d106      	bne.n	80090f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f841 	bl	800917a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f000 fb40 	bl	8009790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d109      	bne.n	80091b4 <HAL_TIM_PWM_Start+0x24>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	bf14      	ite	ne
 80091ac:	2301      	movne	r3, #1
 80091ae:	2300      	moveq	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	e03c      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d109      	bne.n	80091ce <HAL_TIM_PWM_Start+0x3e>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	bf14      	ite	ne
 80091c6:	2301      	movne	r3, #1
 80091c8:	2300      	moveq	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	e02f      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b08      	cmp	r3, #8
 80091d2:	d109      	bne.n	80091e8 <HAL_TIM_PWM_Start+0x58>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b01      	cmp	r3, #1
 80091de:	bf14      	ite	ne
 80091e0:	2301      	movne	r3, #1
 80091e2:	2300      	moveq	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	e022      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d109      	bne.n	8009202 <HAL_TIM_PWM_Start+0x72>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	bf14      	ite	ne
 80091fa:	2301      	movne	r3, #1
 80091fc:	2300      	moveq	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	e015      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b10      	cmp	r3, #16
 8009206:	d109      	bne.n	800921c <HAL_TIM_PWM_Start+0x8c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	bf14      	ite	ne
 8009214:	2301      	movne	r3, #1
 8009216:	2300      	moveq	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	e008      	b.n	800922e <HAL_TIM_PWM_Start+0x9e>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e06f      	b.n	8009316 <HAL_TIM_PWM_Start+0x186>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <HAL_TIM_PWM_Start+0xb6>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009244:	e023      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b04      	cmp	r3, #4
 800924a:	d104      	bne.n	8009256 <HAL_TIM_PWM_Start+0xc6>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2202      	movs	r2, #2
 8009250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009254:	e01b      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b08      	cmp	r3, #8
 800925a:	d104      	bne.n	8009266 <HAL_TIM_PWM_Start+0xd6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009264:	e013      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b0c      	cmp	r3, #12
 800926a:	d104      	bne.n	8009276 <HAL_TIM_PWM_Start+0xe6>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009274:	e00b      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b10      	cmp	r3, #16
 800927a:	d104      	bne.n	8009286 <HAL_TIM_PWM_Start+0xf6>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009284:	e003      	b.n	800928e <HAL_TIM_PWM_Start+0xfe>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2201      	movs	r2, #1
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fdc6 	bl	8009e28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1f      	ldr	r2, [pc, #124]	@ (8009320 <HAL_TIM_PWM_Start+0x190>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d107      	bne.n	80092b6 <HAL_TIM_PWM_Start+0x126>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a19      	ldr	r2, [pc, #100]	@ (8009320 <HAL_TIM_PWM_Start+0x190>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_TIM_PWM_Start+0x144>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c8:	d004      	beq.n	80092d4 <HAL_TIM_PWM_Start+0x144>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a15      	ldr	r2, [pc, #84]	@ (8009324 <HAL_TIM_PWM_Start+0x194>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d115      	bne.n	8009300 <HAL_TIM_PWM_Start+0x170>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	4b13      	ldr	r3, [pc, #76]	@ (8009328 <HAL_TIM_PWM_Start+0x198>)
 80092dc:	4013      	ands	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b06      	cmp	r3, #6
 80092e4:	d015      	beq.n	8009312 <HAL_TIM_PWM_Start+0x182>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ec:	d011      	beq.n	8009312 <HAL_TIM_PWM_Start+0x182>
    {
      __HAL_TIM_ENABLE(htim);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0201 	orr.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fe:	e008      	b.n	8009312 <HAL_TIM_PWM_Start+0x182>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f042 0201 	orr.w	r2, r2, #1
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	e000      	b.n	8009314 <HAL_TIM_PWM_Start+0x184>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40012c00 	.word	0x40012c00
 8009324:	40000400 	.word	0x40000400
 8009328:	00010007 	.word	0x00010007

0800932c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009346:	2302      	movs	r3, #2
 8009348:	e0ff      	b.n	800954a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b14      	cmp	r3, #20
 8009356:	f200 80f0 	bhi.w	800953a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800935a:	a201      	add	r2, pc, #4	@ (adr r2, 8009360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	080093b5 	.word	0x080093b5
 8009364:	0800953b 	.word	0x0800953b
 8009368:	0800953b 	.word	0x0800953b
 800936c:	0800953b 	.word	0x0800953b
 8009370:	080093f5 	.word	0x080093f5
 8009374:	0800953b 	.word	0x0800953b
 8009378:	0800953b 	.word	0x0800953b
 800937c:	0800953b 	.word	0x0800953b
 8009380:	08009437 	.word	0x08009437
 8009384:	0800953b 	.word	0x0800953b
 8009388:	0800953b 	.word	0x0800953b
 800938c:	0800953b 	.word	0x0800953b
 8009390:	08009477 	.word	0x08009477
 8009394:	0800953b 	.word	0x0800953b
 8009398:	0800953b 	.word	0x0800953b
 800939c:	0800953b 	.word	0x0800953b
 80093a0:	080094b9 	.word	0x080094b9
 80093a4:	0800953b 	.word	0x0800953b
 80093a8:	0800953b 	.word	0x0800953b
 80093ac:	0800953b 	.word	0x0800953b
 80093b0:	080094f9 	.word	0x080094f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fa4e 	bl	800985c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0208 	orr.w	r2, r2, #8
 80093ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0204 	bic.w	r2, r2, #4
 80093de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6999      	ldr	r1, [r3, #24]
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	619a      	str	r2, [r3, #24]
      break;
 80093f2:	e0a5      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68b9      	ldr	r1, [r7, #8]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fa96 	bl	800992c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800940e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800941e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6999      	ldr	r1, [r3, #24]
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	021a      	lsls	r2, r3, #8
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	619a      	str	r2, [r3, #24]
      break;
 8009434:	e084      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fae3 	bl	8009a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0208 	orr.w	r2, r2, #8
 8009450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69da      	ldr	r2, [r3, #28]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0204 	bic.w	r2, r2, #4
 8009460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69d9      	ldr	r1, [r3, #28]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	691a      	ldr	r2, [r3, #16]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	430a      	orrs	r2, r1
 8009472:	61da      	str	r2, [r3, #28]
      break;
 8009474:	e064      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	4618      	mov	r0, r3
 800947e:	f000 fb2f 	bl	8009ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69da      	ldr	r2, [r3, #28]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	69d9      	ldr	r1, [r3, #28]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	021a      	lsls	r2, r3, #8
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	61da      	str	r2, [r3, #28]
      break;
 80094b6:	e043      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68b9      	ldr	r1, [r7, #8]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fb7c 	bl	8009bbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0208 	orr.w	r2, r2, #8
 80094d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0204 	bic.w	r2, r2, #4
 80094e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	691a      	ldr	r2, [r3, #16]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80094f6:	e023      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68b9      	ldr	r1, [r7, #8]
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fba8 	bl	8009c54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009512:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009522:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	021a      	lsls	r2, r3, #8
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009538:	e002      	b.n	8009540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	75fb      	strb	r3, [r7, #23]
      break;
 800953e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop

08009554 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_TIM_ConfigClockSource+0x1c>
 800956c:	2302      	movs	r3, #2
 800956e:	e0fe      	b.n	800976e <HAL_TIM_ConfigClockSource+0x21a>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800958e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800959a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095ac:	f000 80c9 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 80095b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095b4:	f200 80ce 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 80095b8:	4a6f      	ldr	r2, [pc, #444]	@ (8009778 <HAL_TIM_ConfigClockSource+0x224>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	f000 80c1 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 80095c0:	4a6d      	ldr	r2, [pc, #436]	@ (8009778 <HAL_TIM_ConfigClockSource+0x224>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	f200 80c6 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 80095c8:	4a6c      	ldr	r2, [pc, #432]	@ (800977c <HAL_TIM_ConfigClockSource+0x228>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	f000 80b9 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 80095d0:	4a6a      	ldr	r2, [pc, #424]	@ (800977c <HAL_TIM_ConfigClockSource+0x228>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	f200 80be 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 80095d8:	4a69      	ldr	r2, [pc, #420]	@ (8009780 <HAL_TIM_ConfigClockSource+0x22c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	f000 80b1 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 80095e0:	4a67      	ldr	r2, [pc, #412]	@ (8009780 <HAL_TIM_ConfigClockSource+0x22c>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	f200 80b6 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 80095e8:	4a66      	ldr	r2, [pc, #408]	@ (8009784 <HAL_TIM_ConfigClockSource+0x230>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	f000 80a9 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 80095f0:	4a64      	ldr	r2, [pc, #400]	@ (8009784 <HAL_TIM_ConfigClockSource+0x230>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	f200 80ae 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 80095f8:	4a63      	ldr	r2, [pc, #396]	@ (8009788 <HAL_TIM_ConfigClockSource+0x234>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	f000 80a1 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009600:	4a61      	ldr	r2, [pc, #388]	@ (8009788 <HAL_TIM_ConfigClockSource+0x234>)
 8009602:	4293      	cmp	r3, r2
 8009604:	f200 80a6 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009608:	4a60      	ldr	r2, [pc, #384]	@ (800978c <HAL_TIM_ConfigClockSource+0x238>)
 800960a:	4293      	cmp	r3, r2
 800960c:	f000 8099 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009610:	4a5e      	ldr	r2, [pc, #376]	@ (800978c <HAL_TIM_ConfigClockSource+0x238>)
 8009612:	4293      	cmp	r3, r2
 8009614:	f200 809e 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009618:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800961c:	f000 8091 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009620:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009624:	f200 8096 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800962c:	f000 8089 	beq.w	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009634:	f200 808e 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800963c:	d03e      	beq.n	80096bc <HAL_TIM_ConfigClockSource+0x168>
 800963e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009642:	f200 8087 	bhi.w	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800964a:	f000 8086 	beq.w	800975a <HAL_TIM_ConfigClockSource+0x206>
 800964e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009652:	d87f      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009654:	2b70      	cmp	r3, #112	@ 0x70
 8009656:	d01a      	beq.n	800968e <HAL_TIM_ConfigClockSource+0x13a>
 8009658:	2b70      	cmp	r3, #112	@ 0x70
 800965a:	d87b      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 800965c:	2b60      	cmp	r3, #96	@ 0x60
 800965e:	d050      	beq.n	8009702 <HAL_TIM_ConfigClockSource+0x1ae>
 8009660:	2b60      	cmp	r3, #96	@ 0x60
 8009662:	d877      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009664:	2b50      	cmp	r3, #80	@ 0x50
 8009666:	d03c      	beq.n	80096e2 <HAL_TIM_ConfigClockSource+0x18e>
 8009668:	2b50      	cmp	r3, #80	@ 0x50
 800966a:	d873      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 800966c:	2b40      	cmp	r3, #64	@ 0x40
 800966e:	d058      	beq.n	8009722 <HAL_TIM_ConfigClockSource+0x1ce>
 8009670:	2b40      	cmp	r3, #64	@ 0x40
 8009672:	d86f      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009674:	2b30      	cmp	r3, #48	@ 0x30
 8009676:	d064      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009678:	2b30      	cmp	r3, #48	@ 0x30
 800967a:	d86b      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 800967c:	2b20      	cmp	r3, #32
 800967e:	d060      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009680:	2b20      	cmp	r3, #32
 8009682:	d867      	bhi.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d05c      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 8009688:	2b10      	cmp	r3, #16
 800968a:	d05a      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0x1ee>
 800968c:	e062      	b.n	8009754 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800969e:	f000 fba3 	bl	8009de8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80096b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	609a      	str	r2, [r3, #8]
      break;
 80096ba:	e04f      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80096cc:	f000 fb8c 	bl	8009de8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096de:	609a      	str	r2, [r3, #8]
      break;
 80096e0:	e03c      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ee:	461a      	mov	r2, r3
 80096f0:	f000 fafe 	bl	8009cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2150      	movs	r1, #80	@ 0x50
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 fb57 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009700:	e02c      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800970e:	461a      	mov	r2, r3
 8009710:	f000 fb1d 	bl	8009d4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2160      	movs	r1, #96	@ 0x60
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fb47 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009720:	e01c      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800972e:	461a      	mov	r2, r3
 8009730:	f000 fade 	bl	8009cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2140      	movs	r1, #64	@ 0x40
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fb37 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009740:	e00c      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4619      	mov	r1, r3
 800974c:	4610      	mov	r0, r2
 800974e:	f000 fb2e 	bl	8009dae <TIM_ITRx_SetConfig>
      break;
 8009752:	e003      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	e000      	b.n	800975c <HAL_TIM_ConfigClockSource+0x208>
      break;
 800975a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	00100070 	.word	0x00100070
 800977c:	00100060 	.word	0x00100060
 8009780:	00100050 	.word	0x00100050
 8009784:	00100040 	.word	0x00100040
 8009788:	00100030 	.word	0x00100030
 800978c:	00100020 	.word	0x00100020

08009790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009854 <TIM_Base_SetConfig+0xc4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d007      	beq.n	80097b8 <TIM_Base_SetConfig+0x28>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097ae:	d003      	beq.n	80097b8 <TIM_Base_SetConfig+0x28>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a29      	ldr	r2, [pc, #164]	@ (8009858 <TIM_Base_SetConfig+0xc8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d108      	bne.n	80097ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a21      	ldr	r2, [pc, #132]	@ (8009854 <TIM_Base_SetConfig+0xc4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d007      	beq.n	80097e2 <TIM_Base_SetConfig+0x52>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d8:	d003      	beq.n	80097e2 <TIM_Base_SetConfig+0x52>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009858 <TIM_Base_SetConfig+0xc8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d108      	bne.n	80097f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	4313      	orrs	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a0e      	ldr	r2, [pc, #56]	@ (8009854 <TIM_Base_SetConfig+0xc4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d103      	bne.n	8009828 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691a      	ldr	r2, [r3, #16]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	f003 0301 	and.w	r3, r3, #1
 8009836:	2b01      	cmp	r3, #1
 8009838:	d105      	bne.n	8009846 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f023 0201 	bic.w	r2, r3, #1
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	611a      	str	r2, [r3, #16]
  }
}
 8009846:	bf00      	nop
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	40012c00 	.word	0x40012c00
 8009858:	40000400 	.word	0x40000400

0800985c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a1b      	ldr	r3, [r3, #32]
 8009870:	f023 0201 	bic.w	r2, r3, #1
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800988a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800988e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f023 0302 	bic.w	r3, r3, #2
 80098a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009928 <TIM_OC1_SetConfig+0xcc>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d10c      	bne.n	80098d6 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	f023 0308 	bic.w	r3, r3, #8
 80098c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	4313      	orrs	r3, r2
 80098cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f023 0304 	bic.w	r3, r3, #4
 80098d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a13      	ldr	r2, [pc, #76]	@ (8009928 <TIM_OC1_SetConfig+0xcc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d111      	bne.n	8009902 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80098ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	621a      	str	r2, [r3, #32]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	40012c00 	.word	0x40012c00

0800992c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	f023 0210 	bic.w	r2, r3, #16
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800995a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800995e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	021b      	lsls	r3, r3, #8
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4313      	orrs	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f023 0320 	bic.w	r3, r3, #32
 800997a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	011b      	lsls	r3, r3, #4
 8009982:	697a      	ldr	r2, [r7, #20]
 8009984:	4313      	orrs	r3, r2
 8009986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a1e      	ldr	r2, [pc, #120]	@ (8009a04 <TIM_OC2_SetConfig+0xd8>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10d      	bne.n	80099ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	011b      	lsls	r3, r3, #4
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a15      	ldr	r2, [pc, #84]	@ (8009a04 <TIM_OC2_SetConfig+0xd8>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d113      	bne.n	80099dc <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80099ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80099c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	693a      	ldr	r2, [r7, #16]
 80099d8:	4313      	orrs	r3, r2
 80099da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40012c00 	.word	0x40012c00

08009a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	021b      	lsls	r3, r3, #8
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a1d      	ldr	r2, [pc, #116]	@ (8009adc <TIM_OC3_SetConfig+0xd4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d10d      	bne.n	8009a86 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	021b      	lsls	r3, r3, #8
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a14      	ldr	r2, [pc, #80]	@ (8009adc <TIM_OC3_SetConfig+0xd4>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d113      	bne.n	8009ab6 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	621a      	str	r2, [r3, #32]
}
 8009ad0:	bf00      	nop
 8009ad2:	371c      	adds	r7, #28
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr
 8009adc:	40012c00 	.word	0x40012c00

08009ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	031b      	lsls	r3, r3, #12
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb8 <TIM_OC4_SetConfig+0xd8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d10d      	bne.n	8009b60 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	031b      	lsls	r3, r3, #12
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a15      	ldr	r2, [pc, #84]	@ (8009bb8 <TIM_OC4_SetConfig+0xd8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d113      	bne.n	8009b90 <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009b76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	019b      	lsls	r3, r3, #6
 8009b7e:	693a      	ldr	r2, [r7, #16]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	019b      	lsls	r3, r3, #6
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	621a      	str	r2, [r3, #32]
}
 8009baa:	bf00      	nop
 8009bac:	371c      	adds	r7, #28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	40012c00 	.word	0x40012c00

08009bbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009c00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a0f      	ldr	r2, [pc, #60]	@ (8009c50 <TIM_OC5_SetConfig+0x94>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d109      	bne.n	8009c2a <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	697a      	ldr	r2, [r7, #20]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68fa      	ldr	r2, [r7, #12]
 8009c34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	685a      	ldr	r2, [r3, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	621a      	str	r2, [r3, #32]
}
 8009c44:	bf00      	nop
 8009c46:	371c      	adds	r7, #28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	40012c00 	.word	0x40012c00

08009c54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	051b      	lsls	r3, r3, #20
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a10      	ldr	r2, [pc, #64]	@ (8009cec <TIM_OC6_SetConfig+0x98>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d109      	bne.n	8009cc4 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	029b      	lsls	r3, r3, #10
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	621a      	str	r2, [r3, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	40012c00 	.word	0x40012c00

08009cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6a1b      	ldr	r3, [r3, #32]
 8009d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	f023 0201 	bic.w	r2, r3, #1
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	699b      	ldr	r3, [r3, #24]
 8009d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f023 030a 	bic.w	r3, r3, #10
 8009d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b087      	sub	sp, #28
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6a1b      	ldr	r3, [r3, #32]
 8009d5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	f023 0210 	bic.w	r2, r3, #16
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	031b      	lsls	r3, r3, #12
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009d8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	011b      	lsls	r3, r3, #4
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	693a      	ldr	r2, [r7, #16]
 8009d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	621a      	str	r2, [r3, #32]
}
 8009da2:	bf00      	nop
 8009da4:	371c      	adds	r7, #28
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f043 0307 	orr.w	r3, r3, #7
 8009dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	609a      	str	r2, [r3, #8]
}
 8009ddc:	bf00      	nop
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b087      	sub	sp, #28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	021a      	lsls	r2, r3, #8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	609a      	str	r2, [r3, #8]
}
 8009e1c:	bf00      	nop
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6a1a      	ldr	r2, [r3, #32]
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	43db      	mvns	r3, r3
 8009e4a:	401a      	ands	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6a1a      	ldr	r2, [r3, #32]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	f003 031f 	and.w	r3, r3, #31
 8009e5a:	6879      	ldr	r1, [r7, #4]
 8009e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e60:	431a      	orrs	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	621a      	str	r2, [r3, #32]
}
 8009e66:	bf00      	nop
 8009e68:	371c      	adds	r7, #28
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e051      	b.n	8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d108      	bne.n	8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a14      	ldr	r2, [pc, #80]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d009      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a10      	ldr	r2, [pc, #64]	@ (8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d10c      	bne.n	8009f1e <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	40012c00 	.word	0x40012c00
 8009f40:	40000400 	.word	0x40000400

08009f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d101      	bne.n	8009f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	e06e      	b.n	800a03e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	041b      	lsls	r3, r3, #16
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a17      	ldr	r2, [pc, #92]	@ (800a04c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d11c      	bne.n	800a02c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffc:	051b      	lsls	r3, r3, #20
 8009ffe:	4313      	orrs	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	40012c00 	.word	0x40012c00

0800a050 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d101      	bne.n	800a062 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e04a      	b.n	800a0f8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d106      	bne.n	800a07a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f7f8 fafb 	bl	8002670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2224      	movs	r2, #36	@ 0x24
 800a07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 faa0 	bl	800a5e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f91f 	bl	800a2e4 <UART_SetConfig>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e023      	b.n	800a0f8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800a0ce:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0208 	orr.w	r2, r2, #8
 800a0de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fb17 	bl	800a724 <UART_CheckIdleState>
 800a0f6:	4603      	mov	r3, r0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	@ 0x28
 800a104:	af02      	add	r7, sp, #8
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	603b      	str	r3, [r7, #0]
 800a10c:	4613      	mov	r3, r2
 800a10e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a116:	2b20      	cmp	r3, #32
 800a118:	f040 808b 	bne.w	800a232 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <HAL_UART_Transmit+0x28>
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e083      	b.n	800a234 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a136:	2b80      	cmp	r3, #128	@ 0x80
 800a138:	d107      	bne.n	800a14a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	689a      	ldr	r2, [r3, #8]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a148:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2221      	movs	r2, #33	@ 0x21
 800a156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a15a:	f7f8 fd65 	bl	8002c28 <HAL_GetTick>
 800a15e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	88fa      	ldrh	r2, [r7, #6]
 800a16c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a178:	d108      	bne.n	800a18c <HAL_UART_Transmit+0x8c>
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	e003      	b.n	800a194 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a190:	2300      	movs	r3, #0
 800a192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a194:	e030      	b.n	800a1f8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	2180      	movs	r1, #128	@ 0x80
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fb69 	bl	800a878 <UART_WaitOnFlagUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d005      	beq.n	800a1b8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e03d      	b.n	800a234 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10b      	bne.n	800a1d6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	3302      	adds	r3, #2
 800a1d2:	61bb      	str	r3, [r7, #24]
 800a1d4:	e007      	b.n	800a1e6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	781a      	ldrb	r2, [r3, #0]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1c8      	bne.n	800a196 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2140      	movs	r1, #64	@ 0x40
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fb32 	bl	800a878 <UART_WaitOnFlagUntilTimeout>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2220      	movs	r2, #32
 800a21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e006      	b.n	800a234 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	e000      	b.n	800a234 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a232:	2302      	movs	r3, #2
  }
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b08f      	sub	sp, #60	@ 0x3c
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d101      	bne.n	800a252 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800a24e:	2302      	movs	r3, #2
 800a250:	e042      	b.n	800a2d8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2224      	movs	r2, #36	@ 0x24
 800a25e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	f023 030c 	bic.w	r3, r3, #12
 800a276:	637b      	str	r3, [r7, #52]	@ 0x34
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a282:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e6      	bne.n	800a262 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	e853 3f00 	ldrex	r3, [r3]
 800a2a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f043 0308 	orr.w	r3, r3, #8
 800a2a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	61bb      	str	r3, [r7, #24]
 800a2b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b6:	6979      	ldr	r1, [r7, #20]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	e841 2300 	strex	r3, r2, [r1]
 800a2be:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1e6      	bne.n	800a294 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	373c      	adds	r7, #60	@ 0x3c
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2e8:	b094      	sub	sp, #80	@ 0x50
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	431a      	orrs	r2, r3
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	69db      	ldr	r3, [r3, #28]
 800a308:	4313      	orrs	r3, r2
 800a30a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	498a      	ldr	r1, [pc, #552]	@ (800a53c <UART_SetConfig+0x258>)
 800a314:	4019      	ands	r1, r3
 800a316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31c:	430b      	orrs	r3, r1
 800a31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	68d9      	ldr	r1, [r3, #12]
 800a32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	ea40 0301 	orr.w	r3, r0, r1
 800a336:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	4b7f      	ldr	r3, [pc, #508]	@ (800a540 <UART_SetConfig+0x25c>)
 800a344:	429a      	cmp	r2, r3
 800a346:	d004      	beq.n	800a352 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34a:	6a1a      	ldr	r2, [r3, #32]
 800a34c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a34e:	4313      	orrs	r3, r2
 800a350:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a35c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a366:	430b      	orrs	r3, r1
 800a368:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a370:	f023 000f 	bic.w	r0, r3, #15
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	ea40 0301 	orr.w	r3, r0, r1
 800a380:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	4b6f      	ldr	r3, [pc, #444]	@ (800a544 <UART_SetConfig+0x260>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	d102      	bne.n	800a392 <UART_SetConfig+0xae>
 800a38c:	2301      	movs	r3, #1
 800a38e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a390:	e01a      	b.n	800a3c8 <UART_SetConfig+0xe4>
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b6c      	ldr	r3, [pc, #432]	@ (800a548 <UART_SetConfig+0x264>)
 800a398:	429a      	cmp	r2, r3
 800a39a:	d102      	bne.n	800a3a2 <UART_SetConfig+0xbe>
 800a39c:	2302      	movs	r3, #2
 800a39e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3a0:	e012      	b.n	800a3c8 <UART_SetConfig+0xe4>
 800a3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b69      	ldr	r3, [pc, #420]	@ (800a54c <UART_SetConfig+0x268>)
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d102      	bne.n	800a3b2 <UART_SetConfig+0xce>
 800a3ac:	2304      	movs	r3, #4
 800a3ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3b0:	e00a      	b.n	800a3c8 <UART_SetConfig+0xe4>
 800a3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	4b62      	ldr	r3, [pc, #392]	@ (800a540 <UART_SetConfig+0x25c>)
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d103      	bne.n	800a3c4 <UART_SetConfig+0xe0>
 800a3bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3c2:	e001      	b.n	800a3c8 <UART_SetConfig+0xe4>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a540 <UART_SetConfig+0x25c>)
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d171      	bne.n	800a4b6 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a3d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	623b      	str	r3, [r7, #32]
 800a3d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a3da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a3de:	f7fd fd31 	bl	8007e44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3e2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 80e2 	beq.w	800a5b0 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f0:	4a57      	ldr	r2, [pc, #348]	@ (800a550 <UART_SetConfig+0x26c>)
 800a3f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3fe:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	4613      	mov	r3, r2
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4413      	add	r3, r2
 800a40a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d305      	bcc.n	800a41c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a418:	429a      	cmp	r2, r3
 800a41a:	d903      	bls.n	800a424 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a422:	e0c5      	b.n	800a5b0 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a426:	2200      	movs	r2, #0
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	61fa      	str	r2, [r7, #28]
 800a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a430:	4a47      	ldr	r2, [pc, #284]	@ (800a550 <UART_SetConfig+0x26c>)
 800a432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a436:	b29b      	uxth	r3, r3
 800a438:	2200      	movs	r2, #0
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	617a      	str	r2, [r7, #20]
 800a43e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a442:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a446:	f7f6 fd51 	bl	8000eec <__aeabi_uldivmod>
 800a44a:	4602      	mov	r2, r0
 800a44c:	460b      	mov	r3, r1
 800a44e:	4610      	mov	r0, r2
 800a450:	4619      	mov	r1, r3
 800a452:	f04f 0200 	mov.w	r2, #0
 800a456:	f04f 0300 	mov.w	r3, #0
 800a45a:	020b      	lsls	r3, r1, #8
 800a45c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a460:	0202      	lsls	r2, r0, #8
 800a462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a464:	6849      	ldr	r1, [r1, #4]
 800a466:	0849      	lsrs	r1, r1, #1
 800a468:	2000      	movs	r0, #0
 800a46a:	460c      	mov	r4, r1
 800a46c:	4605      	mov	r5, r0
 800a46e:	eb12 0804 	adds.w	r8, r2, r4
 800a472:	eb43 0905 	adc.w	r9, r3, r5
 800a476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	60bb      	str	r3, [r7, #8]
 800a47e:	60fa      	str	r2, [r7, #12]
 800a480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 fd30 	bl	8000eec <__aeabi_uldivmod>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4613      	mov	r3, r2
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a496:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a49a:	d308      	bcc.n	800a4ae <UART_SetConfig+0x1ca>
 800a49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a49e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4a2:	d204      	bcs.n	800a4ae <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 800a4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4aa:	60da      	str	r2, [r3, #12]
 800a4ac:	e080      	b.n	800a5b0 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a4b4:	e07c      	b.n	800a5b0 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4be:	d149      	bne.n	800a554 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	603b      	str	r3, [r7, #0]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4cc:	f7fd fcba 	bl	8007e44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4d0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d06b      	beq.n	800a5b0 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a550 <UART_SetConfig+0x26c>)
 800a4de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4ea:	005a      	lsls	r2, r3, #1
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	085b      	lsrs	r3, r3, #1
 800a4f2:	441a      	add	r2, r3
 800a4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a500:	2b0f      	cmp	r3, #15
 800a502:	d916      	bls.n	800a532 <UART_SetConfig+0x24e>
 800a504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a50a:	d212      	bcs.n	800a532 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f023 030f 	bic.w	r3, r3, #15
 800a514:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a518:	085b      	lsrs	r3, r3, #1
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	b29a      	uxth	r2, r3
 800a522:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a524:	4313      	orrs	r3, r2
 800a526:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a52e:	60da      	str	r2, [r3, #12]
 800a530:	e03e      	b.n	800a5b0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a538:	e03a      	b.n	800a5b0 <UART_SetConfig+0x2cc>
 800a53a:	bf00      	nop
 800a53c:	cfff69f3 	.word	0xcfff69f3
 800a540:	44002400 	.word	0x44002400
 800a544:	40013800 	.word	0x40013800
 800a548:	40004400 	.word	0x40004400
 800a54c:	40004800 	.word	0x40004800
 800a550:	080108a0 	.word	0x080108a0
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a556:	2200      	movs	r2, #0
 800a558:	469a      	mov	sl, r3
 800a55a:	4693      	mov	fp, r2
 800a55c:	4650      	mov	r0, sl
 800a55e:	4659      	mov	r1, fp
 800a560:	f7fd fc70 	bl	8007e44 <HAL_RCCEx_GetPeriphCLKFreq>
 800a564:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d021      	beq.n	800a5b0 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a570:	4a1a      	ldr	r2, [pc, #104]	@ (800a5dc <UART_SetConfig+0x2f8>)
 800a572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a576:	461a      	mov	r2, r3
 800a578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a57a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	441a      	add	r2, r3
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d909      	bls.n	800a5aa <UART_SetConfig+0x2c6>
 800a596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a598:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a59c:	d205      	bcs.n	800a5aa <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a59e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	60da      	str	r2, [r3, #12]
 800a5a8:	e002      	b.n	800a5b0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a5cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3750      	adds	r7, #80	@ 0x50
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5da:	bf00      	nop
 800a5dc:	080108a0 	.word	0x080108a0

0800a5e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ec:	f003 0308 	and.w	r3, r3, #8
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00a      	beq.n	800a60a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00a      	beq.n	800a62c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00a      	beq.n	800a64e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	430a      	orrs	r2, r1
 800a690:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00a      	beq.n	800a6b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01a      	beq.n	800a6f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6de:	d10a      	bne.n	800a6f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	430a      	orrs	r2, r1
 800a716:	605a      	str	r2, [r3, #4]
  }
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b098      	sub	sp, #96	@ 0x60
 800a728:	af02      	add	r7, sp, #8
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a734:	f7f8 fa78 	bl	8002c28 <HAL_GetTick>
 800a738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0308 	and.w	r3, r3, #8
 800a744:	2b08      	cmp	r3, #8
 800a746:	d12f      	bne.n	800a7a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a750:	2200      	movs	r2, #0
 800a752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f88e 	bl	800a878 <UART_WaitOnFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d022      	beq.n	800a7a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	e853 3f00 	ldrex	r3, [r3]
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a776:	653b      	str	r3, [r7, #80]	@ 0x50
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a780:	647b      	str	r3, [r7, #68]	@ 0x44
 800a782:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a788:	e841 2300 	strex	r3, r2, [r1]
 800a78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1e6      	bne.n	800a762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2220      	movs	r2, #32
 800a798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e063      	b.n	800a870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0304 	and.w	r3, r3, #4
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d149      	bne.n	800a84a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f857 	bl	800a878 <UART_WaitOnFlagUntilTimeout>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d03c      	beq.n	800a84a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a7de:	6a3b      	ldr	r3, [r7, #32]
 800a7e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e6      	bne.n	800a7d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3308      	adds	r3, #8
 800a808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	60fb      	str	r3, [r7, #12]
   return(result);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a822:	61fa      	str	r2, [r7, #28]
 800a824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	69b9      	ldr	r1, [r7, #24]
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	617b      	str	r3, [r7, #20]
   return(result);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e5      	bne.n	800a802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a846:	2303      	movs	r3, #3
 800a848:	e012      	b.n	800a870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2220      	movs	r2, #32
 800a84e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2220      	movs	r2, #32
 800a856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3758      	adds	r7, #88	@ 0x58
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	603b      	str	r3, [r7, #0]
 800a884:	4613      	mov	r3, r2
 800a886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a888:	e04f      	b.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d04b      	beq.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a892:	f7f8 f9c9 	bl	8002c28 <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d302      	bcc.n	800a8a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e04e      	b.n	800a94a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0304 	and.w	r3, r3, #4
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d037      	beq.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b80      	cmp	r3, #128	@ 0x80
 800a8be:	d034      	beq.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b40      	cmp	r3, #64	@ 0x40
 800a8c4:	d031      	beq.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69db      	ldr	r3, [r3, #28]
 800a8cc:	f003 0308 	and.w	r3, r3, #8
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d110      	bne.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2208      	movs	r2, #8
 800a8da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f838 	bl	800a952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e029      	b.n	800a94a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a904:	d111      	bne.n	800a92a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a90e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f000 f81e 	bl	800a952 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2220      	movs	r2, #32
 800a91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e00f      	b.n	800a94a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	69da      	ldr	r2, [r3, #28]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4013      	ands	r3, r2
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	bf0c      	ite	eq
 800a93a:	2301      	moveq	r3, #1
 800a93c:	2300      	movne	r3, #0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	429a      	cmp	r2, r3
 800a946:	d0a0      	beq.n	800a88a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a952:	b480      	push	{r7}
 800a954:	b095      	sub	sp, #84	@ 0x54
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a962:	e853 3f00 	ldrex	r3, [r3]
 800a966:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a96e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	461a      	mov	r2, r3
 800a976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a978:	643b      	str	r3, [r7, #64]	@ 0x40
 800a97a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a97e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a980:	e841 2300 	strex	r3, r2, [r1]
 800a984:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1e6      	bne.n	800a95a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3308      	adds	r3, #8
 800a992:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9a2:	f023 0301 	bic.w	r3, r3, #1
 800a9a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a9b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a9b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e3      	bne.n	800a98c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d118      	bne.n	800a9fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f023 0310 	bic.w	r3, r3, #16
 800a9e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ea:	61bb      	str	r3, [r7, #24]
 800a9ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6979      	ldr	r1, [r7, #20]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa12:	bf00      	nop
 800aa14:	3754      	adds	r7, #84	@ 0x54
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr

0800aa1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b085      	sub	sp, #20
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d101      	bne.n	800aa34 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa30:	2302      	movs	r3, #2
 800aa32:	e027      	b.n	800aa84 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2224      	movs	r2, #36	@ 0x24
 800aa40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681a      	ldr	r2, [r3, #0]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f022 0201 	bic.w	r2, r2, #1
 800aa5a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aa62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d101      	bne.n	800aaa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	e02d      	b.n	800ab04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2224      	movs	r2, #36	@ 0x24
 800aab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0201 	bic.w	r2, r2, #1
 800aace:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f84f 	bl	800ab88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3710      	adds	r7, #16
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d101      	bne.n	800ab24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab20:	2302      	movs	r3, #2
 800ab22:	e02d      	b.n	800ab80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2224      	movs	r2, #36	@ 0x24
 800ab30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	430a      	orrs	r2, r1
 800ab5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f811 	bl	800ab88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2220      	movs	r2, #32
 800ab72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d108      	bne.n	800abaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aba8:	e031      	b.n	800ac0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abaa:	2308      	movs	r3, #8
 800abac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abae:	2308      	movs	r3, #8
 800abb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	0e5b      	lsrs	r3, r3, #25
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	f003 0307 	and.w	r3, r3, #7
 800abc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	0f5b      	lsrs	r3, r3, #29
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	7b3a      	ldrb	r2, [r7, #12]
 800abd6:	4911      	ldr	r1, [pc, #68]	@ (800ac1c <UARTEx_SetNbDataToProcess+0x94>)
 800abd8:	5c8a      	ldrb	r2, [r1, r2]
 800abda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abde:	7b3a      	ldrb	r2, [r7, #12]
 800abe0:	490f      	ldr	r1, [pc, #60]	@ (800ac20 <UARTEx_SetNbDataToProcess+0x98>)
 800abe2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abe4:	fb93 f3f2 	sdiv	r3, r3, r2
 800abe8:	b29a      	uxth	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	7b7a      	ldrb	r2, [r7, #13]
 800abf4:	4909      	ldr	r1, [pc, #36]	@ (800ac1c <UARTEx_SetNbDataToProcess+0x94>)
 800abf6:	5c8a      	ldrb	r2, [r1, r2]
 800abf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800abfc:	7b7a      	ldrb	r2, [r7, #13]
 800abfe:	4908      	ldr	r1, [pc, #32]	@ (800ac20 <UARTEx_SetNbDataToProcess+0x98>)
 800ac00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac0e:	bf00      	nop
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	080108b8 	.word	0x080108b8
 800ac20:	080108c0 	.word	0x080108c0

0800ac24 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08e      	sub	sp, #56	@ 0x38
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ac32:	2234      	movs	r2, #52	@ 0x34
 800ac34:	2100      	movs	r1, #0
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f002 f981 	bl	800cf3e <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	f023 0303 	bic.w	r3, r3, #3
 800ac42:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f1a3 0208 	sub.w	r2, r3, #8
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ac76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac80:	3b04      	subs	r3, #4
 800ac82:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ac88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac90:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ac92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac94:	3b04      	subs	r3, #4
 800ac96:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ac98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb6:	3304      	adds	r3, #4
 800acb8:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800acba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800acbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc0:	4a1f      	ldr	r2, [pc, #124]	@ (800ad40 <_tx_byte_pool_create+0x11c>)
 800acc2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800acca:	f3ef 8310 	mrs	r3, PRIMASK
 800acce:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800acd0:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800acd2:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800acd4:	b672      	cpsid	i
#endif
    return(int_posture);
 800acd6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800acd8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4a19      	ldr	r2, [pc, #100]	@ (800ad44 <_tx_byte_pool_create+0x120>)
 800acde:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ace0:	4b19      	ldr	r3, [pc, #100]	@ (800ad48 <_tx_byte_pool_create+0x124>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ace8:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <_tx_byte_pool_create+0x128>)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	631a      	str	r2, [r3, #48]	@ 0x30
 800acfa:	e011      	b.n	800ad20 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800acfc:	4b13      	ldr	r3, [pc, #76]	@ (800ad4c <_tx_byte_pool_create+0x128>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad06:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a3a      	ldr	r2, [r7, #32]
 800ad1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ad20:	4b09      	ldr	r3, [pc, #36]	@ (800ad48 <_tx_byte_pool_create+0x124>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3301      	adds	r3, #1
 800ad26:	4a08      	ldr	r2, [pc, #32]	@ (800ad48 <_tx_byte_pool_create+0x124>)
 800ad28:	6013      	str	r3, [r2, #0]
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f383 8810 	msr	PRIMASK, r3
}
 800ad34:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3738      	adds	r7, #56	@ 0x38
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	ffffeeee 	.word	0xffffeeee
 800ad44:	42595445 	.word	0x42595445
 800ad48:	20001c84 	.word	0x20001c84
 800ad4c:	20001c80 	.word	0x20001c80

0800ad50 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ad54:	f000 f960 	bl	800b018 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ad58:	f000 fd86 	bl	800b868 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ad5c:	4b12      	ldr	r3, [pc, #72]	@ (800ada8 <_tx_initialize_high_level+0x58>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	4b12      	ldr	r3, [pc, #72]	@ (800adac <_tx_initialize_high_level+0x5c>)
 800ad64:	2200      	movs	r2, #0
 800ad66:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ad68:	4b11      	ldr	r3, [pc, #68]	@ (800adb0 <_tx_initialize_high_level+0x60>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	4b11      	ldr	r3, [pc, #68]	@ (800adb4 <_tx_initialize_high_level+0x64>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ad74:	4b10      	ldr	r3, [pc, #64]	@ (800adb8 <_tx_initialize_high_level+0x68>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	4b10      	ldr	r3, [pc, #64]	@ (800adbc <_tx_initialize_high_level+0x6c>)
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ad80:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <_tx_initialize_high_level+0x70>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	601a      	str	r2, [r3, #0]
 800ad86:	4b0f      	ldr	r3, [pc, #60]	@ (800adc4 <_tx_initialize_high_level+0x74>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	@ (800adc8 <_tx_initialize_high_level+0x78>)
 800ad8e:	2200      	movs	r2, #0
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	4b0e      	ldr	r3, [pc, #56]	@ (800adcc <_tx_initialize_high_level+0x7c>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ad98:	4b0d      	ldr	r3, [pc, #52]	@ (800add0 <_tx_initialize_high_level+0x80>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <_tx_initialize_high_level+0x84>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
#endif
}
 800ada4:	bf00      	nop
 800ada6:	bd80      	pop	{r7, pc}
 800ada8:	20001c58 	.word	0x20001c58
 800adac:	20001c5c 	.word	0x20001c5c
 800adb0:	20001c60 	.word	0x20001c60
 800adb4:	20001c64 	.word	0x20001c64
 800adb8:	20001c68 	.word	0x20001c68
 800adbc:	20001c6c 	.word	0x20001c6c
 800adc0:	20001c78 	.word	0x20001c78
 800adc4:	20001c7c 	.word	0x20001c7c
 800adc8:	20001c80 	.word	0x20001c80
 800adcc:	20001c84 	.word	0x20001c84
 800add0:	20001c70 	.word	0x20001c70
 800add4:	20001c74 	.word	0x20001c74

0800add8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800addc:	4b10      	ldr	r3, [pc, #64]	@ (800ae20 <_tx_initialize_kernel_enter+0x48>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 800ade4:	d00c      	beq.n	800ae00 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ade6:	4b0e      	ldr	r3, [pc, #56]	@ (800ae20 <_tx_initialize_kernel_enter+0x48>)
 800ade8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800adec:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800adee:	f7f5 fa53 	bl	8000298 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800adf2:	f7ff ffad 	bl	800ad50 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800adf6:	4b0b      	ldr	r3, [pc, #44]	@ (800ae24 <_tx_initialize_kernel_enter+0x4c>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	4a09      	ldr	r2, [pc, #36]	@ (800ae24 <_tx_initialize_kernel_enter+0x4c>)
 800adfe:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ae00:	4b07      	ldr	r3, [pc, #28]	@ (800ae20 <_tx_initialize_kernel_enter+0x48>)
 800ae02:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800ae06:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800ae08:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <_tx_initialize_kernel_enter+0x50>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7f6 fa2f 	bl	8001270 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800ae12:	4b03      	ldr	r3, [pc, #12]	@ (800ae20 <_tx_initialize_kernel_enter+0x48>)
 800ae14:	2200      	movs	r2, #0
 800ae16:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800ae18:	f7f5 fa7a 	bl	8000310 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ae1c:	bf00      	nop
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	2000000c 	.word	0x2000000c
 800ae24:	20001d28 	.word	0x20001d28
 800ae28:	20001c88 	.word	0x20001c88

0800ae2c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b092      	sub	sp, #72	@ 0x48
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800ae3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae40:	21ef      	movs	r1, #239	@ 0xef
 800ae42:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ae44:	f002 f87b 	bl	800cf3e <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ae48:	22b0      	movs	r2, #176	@ 0xb0
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f002 f876 	bl	800cf3e <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae68:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae6e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae74:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae82:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae88:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ae92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ae96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae9c:	4413      	add	r3, r2
 800ae9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aea4:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800aea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d007      	beq.n	800aebe <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800aebc:	e006      	b.n	800aecc <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aec2:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aec8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2203      	movs	r2, #3
 800aed0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	4a48      	ldr	r2, [pc, #288]	@ (800aff8 <_tx_thread_create+0x1cc>)
 800aed6:	655a      	str	r2, [r3, #84]	@ 0x54
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800aede:	4947      	ldr	r1, [pc, #284]	@ (800affc <_tx_thread_create+0x1d0>)
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7f5 fa7b 	bl	80003dc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aee6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800aeec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800aeee:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800aef0:	b672      	cpsid	i
    return(int_posture);
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800aef4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4a41      	ldr	r2, [pc, #260]	@ (800b000 <_tx_thread_create+0x1d4>)
 800aefa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800aefc:	4b41      	ldr	r3, [pc, #260]	@ (800b004 <_tx_thread_create+0x1d8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10b      	bne.n	800af1c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800af04:	4a40      	ldr	r2, [pc, #256]	@ (800b008 <_tx_thread_create+0x1dc>)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800af1a:	e016      	b.n	800af4a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800af1c:	4b3a      	ldr	r3, [pc, #232]	@ (800b008 <_tx_thread_create+0x1dc>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800af22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af28:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800af2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800af4a:	4b2e      	ldr	r3, [pc, #184]	@ (800b004 <_tx_thread_create+0x1d8>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3301      	adds	r3, #1
 800af50:	4a2c      	ldr	r2, [pc, #176]	@ (800b004 <_tx_thread_create+0x1d8>)
 800af52:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800af54:	4b2d      	ldr	r3, [pc, #180]	@ (800b00c <_tx_thread_create+0x1e0>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3301      	adds	r3, #1
 800af5a:	4a2c      	ldr	r2, [pc, #176]	@ (800b00c <_tx_thread_create+0x1e0>)
 800af5c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800af5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af60:	2b01      	cmp	r3, #1
 800af62:	d129      	bne.n	800afb8 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af64:	f3ef 8305 	mrs	r3, IPSR
 800af68:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800af6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800af6c:	4b28      	ldr	r3, [pc, #160]	@ (800b010 <_tx_thread_create+0x1e4>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4313      	orrs	r3, r2
 800af72:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800af76:	d30d      	bcc.n	800af94 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800af78:	4b26      	ldr	r3, [pc, #152]	@ (800b014 <_tx_thread_create+0x1e8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800af7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af80:	2b00      	cmp	r3, #0
 800af82:	d009      	beq.n	800af98 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800af84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af88:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800af8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af90:	63da      	str	r2, [r3, #60]	@ 0x3c
 800af92:	e001      	b.n	800af98 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800af94:	2300      	movs	r3, #0
 800af96:	647b      	str	r3, [r7, #68]	@ 0x44
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	f383 8810 	msr	PRIMASK, r3
}
 800afa2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f979 	bl	800b29c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800afaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01e      	beq.n	800afee <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800afb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800afb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800afb6:	e01a      	b.n	800afee <_tx_thread_create+0x1c2>
 800afb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f383 8810 	msr	PRIMASK, r3
}
 800afc2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800afc4:	f3ef 8310 	mrs	r3, PRIMASK
 800afc8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800afca:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800afcc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800afce:	b672      	cpsid	i
    return(int_posture);
 800afd0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800afd2:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800afd4:	4b0d      	ldr	r3, [pc, #52]	@ (800b00c <_tx_thread_create+0x1e0>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3b01      	subs	r3, #1
 800afda:	4a0c      	ldr	r2, [pc, #48]	@ (800b00c <_tx_thread_create+0x1e0>)
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	f383 8810 	msr	PRIMASK, r3
}
 800afe8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800afea:	f000 f91d 	bl	800b228 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3748      	adds	r7, #72	@ 0x48
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	0800b771 	.word	0x0800b771
 800affc:	0800b091 	.word	0x0800b091
 800b000:	54485244 	.word	0x54485244
 800b004:	20001c9c 	.word	0x20001c9c
 800b008:	20001c98 	.word	0x20001c98
 800b00c:	20001d28 	.word	0x20001d28
 800b010:	2000000c 	.word	0x2000000c
 800b014:	20001c94 	.word	0x20001c94

0800b018 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800b01c:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <_tx_thread_initialize+0x50>)
 800b01e:	2200      	movs	r2, #0
 800b020:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800b022:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <_tx_thread_initialize+0x54>)
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800b028:	4b11      	ldr	r3, [pc, #68]	@ (800b070 <_tx_thread_initialize+0x58>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b02e:	4b11      	ldr	r3, [pc, #68]	@ (800b074 <_tx_thread_initialize+0x5c>)
 800b030:	2220      	movs	r2, #32
 800b032:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800b034:	2280      	movs	r2, #128	@ 0x80
 800b036:	2100      	movs	r1, #0
 800b038:	480f      	ldr	r0, [pc, #60]	@ (800b078 <_tx_thread_initialize+0x60>)
 800b03a:	f001 ff80 	bl	800cf3e <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800b03e:	4b0f      	ldr	r3, [pc, #60]	@ (800b07c <_tx_thread_initialize+0x64>)
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800b044:	4b0e      	ldr	r3, [pc, #56]	@ (800b080 <_tx_thread_initialize+0x68>)
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800b04a:	4b0e      	ldr	r3, [pc, #56]	@ (800b084 <_tx_thread_initialize+0x6c>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800b050:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <_tx_thread_initialize+0x70>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800b056:	4b0d      	ldr	r3, [pc, #52]	@ (800b08c <_tx_thread_initialize+0x74>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 800b05e:	4a0b      	ldr	r2, [pc, #44]	@ (800b08c <_tx_thread_initialize+0x74>)
 800b060:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800b062:	bf00      	nop
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20001c90 	.word	0x20001c90
 800b06c:	20001c94 	.word	0x20001c94
 800b070:	20001ca0 	.word	0x20001ca0
 800b074:	20001ca4 	.word	0x20001ca4
 800b078:	20001ca8 	.word	0x20001ca8
 800b07c:	20001c98 	.word	0x20001c98
 800b080:	20001c9c 	.word	0x20001c9c
 800b084:	20001d28 	.word	0x20001d28
 800b088:	20001d2c 	.word	0x20001d2c
 800b08c:	20001d30 	.word	0x20001d30

0800b090 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b096:	4b21      	ldr	r3, [pc, #132]	@ (800b11c <_tx_thread_shell_entry+0x8c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b0a4:	4610      	mov	r0, r2
 800b0a6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b120 <_tx_thread_shell_entry+0x90>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b0b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b120 <_tx_thread_shell_entry+0x90>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	69f8      	ldr	r0, [r7, #28]
 800b0b6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0bc:	607b      	str	r3, [r7, #4]
    return(posture);
 800b0be:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b0c0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0c2:	b672      	cpsid	i
    return(int_posture);
 800b0c4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800b0c6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b0da:	4b12      	ldr	r3, [pc, #72]	@ (800b124 <_tx_thread_shell_entry+0x94>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3301      	adds	r3, #1
 800b0e0:	4a10      	ldr	r2, [pc, #64]	@ (800b124 <_tx_thread_shell_entry+0x94>)
 800b0e2:	6013      	str	r3, [r2, #0]
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f383 8810 	msr	PRIMASK, r3
}
 800b0ee:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b0f0:	f3ef 8314 	mrs	r3, CONTROL
 800b0f4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b0f6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f023 0304 	bic.w	r3, r3, #4
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	f383 8814 	msr	CONTROL, r3
}
 800b10c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b10e:	69f8      	ldr	r0, [r7, #28]
 800b110:	f000 f9c4 	bl	800b49c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b114:	bf00      	nop
 800b116:	3720      	adds	r7, #32
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20001c90 	.word	0x20001c90
 800b120:	20001d2c 	.word	0x20001d2c
 800b124:	20001d28 	.word	0x20001d28

0800b128 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08e      	sub	sp, #56	@ 0x38
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b130:	f3ef 8310 	mrs	r3, PRIMASK
 800b134:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800b138:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800b13a:	b672      	cpsid	i
    return(int_posture);
 800b13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b13e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b140:	4b35      	ldr	r3, [pc, #212]	@ (800b218 <_tx_thread_sleep+0xf0>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800b146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d108      	bne.n	800b15e <_tx_thread_sleep+0x36>
 800b14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	f383 8810 	msr	PRIMASK, r3
}
 800b156:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b158:	2313      	movs	r3, #19
 800b15a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b15c:	e056      	b.n	800b20c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b15e:	f3ef 8305 	mrs	r3, IPSR
 800b162:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800b164:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800b166:	4b2d      	ldr	r3, [pc, #180]	@ (800b21c <_tx_thread_sleep+0xf4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d008      	beq.n	800b182 <_tx_thread_sleep+0x5a>
 800b170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b172:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	f383 8810 	msr	PRIMASK, r3
}
 800b17a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b17c:	2313      	movs	r3, #19
 800b17e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b180:	e044      	b.n	800b20c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800b182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b184:	4a26      	ldr	r2, [pc, #152]	@ (800b220 <_tx_thread_sleep+0xf8>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d108      	bne.n	800b19c <_tx_thread_sleep+0x74>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b18c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f383 8810 	msr	PRIMASK, r3
}
 800b194:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800b196:	2313      	movs	r3, #19
 800b198:	637b      	str	r3, [r7, #52]	@ 0x34
 800b19a:	e037      	b.n	800b20c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d108      	bne.n	800b1b4 <_tx_thread_sleep+0x8c>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b2:	e02b      	b.n	800b20c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800b1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b224 <_tx_thread_sleep+0xfc>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <_tx_thread_sleep+0xa6>
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f383 8810 	msr	PRIMASK, r3
}
 800b1c6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800b1c8:	2313      	movs	r3, #19
 800b1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1cc:	e01e      	b.n	800b20c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800b1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d0:	2204      	movs	r2, #4
 800b1d2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800b1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800b1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b224 <_tx_thread_sleep+0xfc>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	4a0d      	ldr	r2, [pc, #52]	@ (800b224 <_tx_thread_sleep+0xfc>)
 800b1f0:	6013      	str	r3, [r2, #0]
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f383 8810 	msr	PRIMASK, r3
}
 800b1fc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800b1fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b200:	f000 f94c 	bl	800b49c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800b204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b20a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800b20c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3738      	adds	r7, #56	@ 0x38
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20001c90 	.word	0x20001c90
 800b21c:	2000000c 	.word	0x2000000c
 800b220:	20001dd8 	.word	0x20001dd8
 800b224:	20001d28 	.word	0x20001d28

0800b228 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b228:	b480      	push	{r7}
 800b22a:	b089      	sub	sp, #36	@ 0x24
 800b22c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b22e:	4b17      	ldr	r3, [pc, #92]	@ (800b28c <_tx_thread_system_preempt_check+0x64>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d121      	bne.n	800b27e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b23a:	4b15      	ldr	r3, [pc, #84]	@ (800b290 <_tx_thread_system_preempt_check+0x68>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b240:	4b14      	ldr	r3, [pc, #80]	@ (800b294 <_tx_thread_system_preempt_check+0x6c>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d017      	beq.n	800b27e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b24e:	4b12      	ldr	r3, [pc, #72]	@ (800b298 <_tx_thread_system_preempt_check+0x70>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b256:	f3ef 8305 	mrs	r3, IPSR
 800b25a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b25c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10c      	bne.n	800b27c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b262:	f3ef 8310 	mrs	r3, PRIMASK
 800b266:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b268:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b26a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b26c:	b662      	cpsie	i
}
 800b26e:	bf00      	nop
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f383 8810 	msr	PRIMASK, r3
}
 800b27a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b27c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b27e:	bf00      	nop
 800b280:	3724      	adds	r7, #36	@ 0x24
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20001d28 	.word	0x20001d28
 800b290:	20001c90 	.word	0x20001c90
 800b294:	20001c94 	.word	0x20001c94
 800b298:	e000ed04 	.word	0xe000ed04

0800b29c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b096      	sub	sp, #88	@ 0x58
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a8:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800b2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800b2ac:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b2ae:	b672      	cpsid	i
    return(int_posture);
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b2b2:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	334c      	adds	r3, #76	@ 0x4c
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 fbaf 	bl	800ba24 <_tx_timer_system_deactivate>
 800b2c6:	e002      	b.n	800b2ce <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b2ce:	4b6c      	ldr	r3, [pc, #432]	@ (800b480 <_tx_thread_system_resume+0x1e4>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	4a6a      	ldr	r2, [pc, #424]	@ (800b480 <_tx_thread_system_resume+0x1e4>)
 800b2d6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f040 8083 	bne.w	800b3e8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8097 	beq.w	800b41a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d172      	bne.n	800b3da <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fe:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b300:	4a60      	ldr	r2, [pc, #384]	@ (800b484 <_tx_thread_system_resume+0x1e8>)
 800b302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b308:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800b30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d154      	bne.n	800b3ba <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b310:	495c      	ldr	r1, [pc, #368]	@ (800b484 <_tx_thread_system_resume+0x1e8>)
 800b312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b326:	2201      	movs	r2, #1
 800b328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b32a:	fa02 f303 	lsl.w	r3, r2, r3
 800b32e:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b330:	4b55      	ldr	r3, [pc, #340]	@ (800b488 <_tx_thread_system_resume+0x1ec>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b336:	4313      	orrs	r3, r2
 800b338:	4a53      	ldr	r2, [pc, #332]	@ (800b488 <_tx_thread_system_resume+0x1ec>)
 800b33a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b33c:	4b53      	ldr	r3, [pc, #332]	@ (800b48c <_tx_thread_system_resume+0x1f0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b342:	429a      	cmp	r2, r3
 800b344:	d269      	bcs.n	800b41a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b346:	4a51      	ldr	r2, [pc, #324]	@ (800b48c <_tx_thread_system_resume+0x1f0>)
 800b348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b34a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b34c:	4b50      	ldr	r3, [pc, #320]	@ (800b490 <_tx_thread_system_resume+0x1f4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b354:	2b00      	cmp	r3, #0
 800b356:	d103      	bne.n	800b360 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b358:	4a4d      	ldr	r2, [pc, #308]	@ (800b490 <_tx_thread_system_resume+0x1f4>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	e05c      	b.n	800b41a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b360:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b364:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b366:	429a      	cmp	r2, r3
 800b368:	d257      	bcs.n	800b41a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b36a:	4a49      	ldr	r2, [pc, #292]	@ (800b490 <_tx_thread_system_resume+0x1f4>)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b376:	f383 8810 	msr	PRIMASK, r3
}
 800b37a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b37c:	4b40      	ldr	r3, [pc, #256]	@ (800b480 <_tx_thread_system_resume+0x1e4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d174      	bne.n	800b472 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b388:	4b42      	ldr	r3, [pc, #264]	@ (800b494 <_tx_thread_system_resume+0x1f8>)
 800b38a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b390:	f3ef 8305 	mrs	r3, IPSR
 800b394:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800b396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (_tx_ipsr_get() == 0)
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10c      	bne.n	800b3b6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b39c:	f3ef 8310 	mrs	r3, PRIMASK
 800b3a0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 800b3a4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b3a6:	b662      	cpsie	i
}
 800b3a8:	bf00      	nop
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	f383 8810 	msr	PRIMASK, r3
}
 800b3b4:	bf00      	nop
}
 800b3b6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b3b8:	e05b      	b.n	800b472 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b3c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3d0:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3d6:	621a      	str	r2, [r3, #32]
 800b3d8:	e01f      	b.n	800b41a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2203      	movs	r2, #3
 800b3e4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b3e6:	e018      	b.n	800b41a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d014      	beq.n	800b41a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d010      	beq.n	800b41a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d106      	bne.n	800b40e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b40c:	e005      	b.n	800b41a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2203      	movs	r2, #3
 800b418:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b41a:	4b1f      	ldr	r3, [pc, #124]	@ (800b498 <_tx_thread_system_resume+0x1fc>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b422:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	f383 8810 	msr	PRIMASK, r3
}
 800b42a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b42c:	4b18      	ldr	r3, [pc, #96]	@ (800b490 <_tx_thread_system_resume+0x1f4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b432:	429a      	cmp	r2, r3
 800b434:	d020      	beq.n	800b478 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b436:	4b12      	ldr	r3, [pc, #72]	@ (800b480 <_tx_thread_system_resume+0x1e4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 800b43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11a      	bne.n	800b478 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b442:	4b14      	ldr	r3, [pc, #80]	@ (800b494 <_tx_thread_system_resume+0x1f8>)
 800b444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b448:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b44a:	f3ef 8305 	mrs	r3, IPSR
 800b44e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b450:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10f      	bne.n	800b476 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b456:	f3ef 8310 	mrs	r3, PRIMASK
 800b45a:	613b      	str	r3, [r7, #16]
    return(posture);
 800b45c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b45e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b460:	b662      	cpsie	i
}
 800b462:	bf00      	nop
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f383 8810 	msr	PRIMASK, r3
}
 800b46e:	bf00      	nop
}
 800b470:	e001      	b.n	800b476 <_tx_thread_system_resume+0x1da>
                                return;
 800b472:	bf00      	nop
 800b474:	e000      	b.n	800b478 <_tx_thread_system_resume+0x1dc>
 800b476:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b478:	3758      	adds	r7, #88	@ 0x58
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20001d28 	.word	0x20001d28
 800b484:	20001ca8 	.word	0x20001ca8
 800b488:	20001ca0 	.word	0x20001ca0
 800b48c:	20001ca4 	.word	0x20001ca4
 800b490:	20001c94 	.word	0x20001c94
 800b494:	e000ed04 	.word	0xe000ed04
 800b498:	20001c90 	.word	0x20001c90

0800b49c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b09e      	sub	sp, #120	@ 0x78
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b4a4:	4b81      	ldr	r3, [pc, #516]	@ (800b6ac <_tx_thread_system_suspend+0x210>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4aa:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b4b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b4b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b4b4:	b672      	cpsid	i
    return(int_posture);
 800b4b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b4b8:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d112      	bne.n	800b4e8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b4c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d4:	d004      	beq.n	800b4e0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	334c      	adds	r3, #76	@ 0x4c
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fa40 	bl	800b960 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	4a72      	ldr	r2, [pc, #456]	@ (800b6b0 <_tx_thread_system_suspend+0x214>)
 800b4e6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b4e8:	4b72      	ldr	r3, [pc, #456]	@ (800b6b4 <_tx_thread_system_suspend+0x218>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	4a71      	ldr	r2, [pc, #452]	@ (800b6b4 <_tx_thread_system_suspend+0x218>)
 800b4f0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	f040 80a6 	bne.w	800b648 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b506:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b50e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	429a      	cmp	r2, r3
 800b514:	d015      	beq.n	800b542 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b51a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b51c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b51e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b520:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b524:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b526:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b528:	4a63      	ldr	r2, [pc, #396]	@ (800b6b8 <_tx_thread_system_suspend+0x21c>)
 800b52a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d157      	bne.n	800b5e6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b536:	4960      	ldr	r1, [pc, #384]	@ (800b6b8 <_tx_thread_system_suspend+0x21c>)
 800b538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b53a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b53c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b540:	e051      	b.n	800b5e6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b542:	4a5d      	ldr	r2, [pc, #372]	@ (800b6b8 <_tx_thread_system_suspend+0x21c>)
 800b544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b546:	2100      	movs	r1, #0
 800b548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b54c:	2201      	movs	r2, #1
 800b54e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b550:	fa02 f303 	lsl.w	r3, r2, r3
 800b554:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b556:	4b59      	ldr	r3, [pc, #356]	@ (800b6bc <_tx_thread_system_suspend+0x220>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b55c:	43db      	mvns	r3, r3
 800b55e:	4013      	ands	r3, r2
 800b560:	4a56      	ldr	r2, [pc, #344]	@ (800b6bc <_tx_thread_system_suspend+0x220>)
 800b562:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b564:	2300      	movs	r3, #0
 800b566:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b568:	4b54      	ldr	r3, [pc, #336]	@ (800b6bc <_tx_thread_system_suspend+0x220>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b56e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b570:	2b00      	cmp	r3, #0
 800b572:	d12b      	bne.n	800b5cc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b574:	4b52      	ldr	r3, [pc, #328]	@ (800b6c0 <_tx_thread_system_suspend+0x224>)
 800b576:	2220      	movs	r2, #32
 800b578:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b57a:	4b52      	ldr	r3, [pc, #328]	@ (800b6c4 <_tx_thread_system_suspend+0x228>)
 800b57c:	2200      	movs	r2, #0
 800b57e:	601a      	str	r2, [r3, #0]
 800b580:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b582:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b586:	f383 8810 	msr	PRIMASK, r3
}
 800b58a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b58c:	4b49      	ldr	r3, [pc, #292]	@ (800b6b4 <_tx_thread_system_suspend+0x218>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 800b592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b594:	2b00      	cmp	r3, #0
 800b596:	f040 8081 	bne.w	800b69c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b59a:	4b4b      	ldr	r3, [pc, #300]	@ (800b6c8 <_tx_thread_system_suspend+0x22c>)
 800b59c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b5a2:	f3ef 8305 	mrs	r3, IPSR
 800b5a6:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10c      	bne.n	800b5c8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ae:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 800b5b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 800b5b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b5b8:	b662      	cpsie	i
}
 800b5ba:	bf00      	nop
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5c2:	f383 8810 	msr	PRIMASK, r3
}
 800b5c6:	bf00      	nop
}
 800b5c8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b5ca:	e067      	b.n	800b69c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b5cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5ce:	fa93 f3a3 	rbit	r3, r3
 800b5d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5d6:	fab3 f383 	clz	r3, r3
 800b5da:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b5dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b5de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5e0:	4413      	add	r3, r2
 800b5e2:	4a37      	ldr	r2, [pc, #220]	@ (800b6c0 <_tx_thread_system_suspend+0x224>)
 800b5e4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b5e6:	4b37      	ldr	r3, [pc, #220]	@ (800b6c4 <_tx_thread_system_suspend+0x228>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d12b      	bne.n	800b648 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b5f0:	4b33      	ldr	r3, [pc, #204]	@ (800b6c0 <_tx_thread_system_suspend+0x224>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a30      	ldr	r2, [pc, #192]	@ (800b6b8 <_tx_thread_system_suspend+0x21c>)
 800b5f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5fa:	4a32      	ldr	r2, [pc, #200]	@ (800b6c4 <_tx_thread_system_suspend+0x228>)
 800b5fc:	6013      	str	r3, [r2, #0]
 800b5fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b600:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	f383 8810 	msr	PRIMASK, r3
}
 800b608:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b60a:	4b2a      	ldr	r3, [pc, #168]	@ (800b6b4 <_tx_thread_system_suspend+0x218>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 800b610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b612:	2b00      	cmp	r3, #0
 800b614:	d144      	bne.n	800b6a0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b616:	4b2c      	ldr	r3, [pc, #176]	@ (800b6c8 <_tx_thread_system_suspend+0x22c>)
 800b618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b61c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b61e:	f3ef 8305 	mrs	r3, IPSR
 800b622:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800b624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10c      	bne.n	800b644 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b62a:	f3ef 8310 	mrs	r3, PRIMASK
 800b62e:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 800b632:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b634:	b662      	cpsie	i
}
 800b636:	bf00      	nop
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	f383 8810 	msr	PRIMASK, r3
}
 800b642:	bf00      	nop
}
 800b644:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b646:	e02b      	b.n	800b6a0 <_tx_thread_system_suspend+0x204>
 800b648:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b64a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	f383 8810 	msr	PRIMASK, r3
}
 800b652:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b654:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c4 <_tx_thread_system_suspend+0x228>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d022      	beq.n	800b6a4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b65e:	4b15      	ldr	r3, [pc, #84]	@ (800b6b4 <_tx_thread_system_suspend+0x218>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 800b664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b666:	2b00      	cmp	r3, #0
 800b668:	d11c      	bne.n	800b6a4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b66a:	4b17      	ldr	r3, [pc, #92]	@ (800b6c8 <_tx_thread_system_suspend+0x22c>)
 800b66c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b670:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b672:	f3ef 8305 	mrs	r3, IPSR
 800b676:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b678:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10c      	bne.n	800b698 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b67e:	f3ef 8310 	mrs	r3, PRIMASK
 800b682:	617b      	str	r3, [r7, #20]
    return(posture);
 800b684:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b686:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b688:	b662      	cpsie	i
}
 800b68a:	bf00      	nop
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f383 8810 	msr	PRIMASK, r3
}
 800b696:	bf00      	nop
}
 800b698:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b69a:	e003      	b.n	800b6a4 <_tx_thread_system_suspend+0x208>
                return;
 800b69c:	bf00      	nop
 800b69e:	e002      	b.n	800b6a6 <_tx_thread_system_suspend+0x20a>
            return;
 800b6a0:	bf00      	nop
 800b6a2:	e000      	b.n	800b6a6 <_tx_thread_system_suspend+0x20a>
    return;
 800b6a4:	bf00      	nop
}
 800b6a6:	3778      	adds	r7, #120	@ 0x78
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20001c90 	.word	0x20001c90
 800b6b0:	20002294 	.word	0x20002294
 800b6b4:	20001d28 	.word	0x20001d28
 800b6b8:	20001ca8 	.word	0x20001ca8
 800b6bc:	20001ca0 	.word	0x20001ca0
 800b6c0:	20001ca4 	.word	0x20001ca4
 800b6c4:	20001c94 	.word	0x20001c94
 800b6c8:	e000ed04 	.word	0xe000ed04

0800b6cc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b6d2:	4b21      	ldr	r3, [pc, #132]	@ (800b758 <_tx_thread_time_slice+0x8c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b6dc:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b6de:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b6e0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6e2:	b672      	cpsid	i
    return(int_posture);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b6e6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b6e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b75c <_tx_thread_time_slice+0x90>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d024      	beq.n	800b73e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d120      	bne.n	800b73e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	69da      	ldr	r2, [r3, #28]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	4a15      	ldr	r2, [pc, #84]	@ (800b760 <_tx_thread_time_slice+0x94>)
 800b70a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	6a1b      	ldr	r3, [r3, #32]
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	429a      	cmp	r2, r3
 800b714:	d013      	beq.n	800b73e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b71e:	429a      	cmp	r2, r3
 800b720:	d10d      	bne.n	800b73e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	6a12      	ldr	r2, [r2, #32]
 800b72a:	490e      	ldr	r1, [pc, #56]	@ (800b764 <_tx_thread_time_slice+0x98>)
 800b72c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b730:	4b0d      	ldr	r3, [pc, #52]	@ (800b768 <_tx_thread_time_slice+0x9c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a0b      	ldr	r2, [pc, #44]	@ (800b764 <_tx_thread_time_slice+0x98>)
 800b736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b73a:	4a0c      	ldr	r2, [pc, #48]	@ (800b76c <_tx_thread_time_slice+0xa0>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f383 8810 	msr	PRIMASK, r3
}
 800b748:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b74a:	bf00      	nop
 800b74c:	371c      	adds	r7, #28
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20001c90 	.word	0x20001c90
 800b75c:	20001d38 	.word	0x20001d38
 800b760:	20002294 	.word	0x20002294
 800b764:	20001ca8 	.word	0x20001ca8
 800b768:	20001ca4 	.word	0x20001ca4
 800b76c:	20001c94 	.word	0x20001c94

0800b770 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	@ 0x28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b77c:	f3ef 8310 	mrs	r3, PRIMASK
 800b780:	617b      	str	r3, [r7, #20]
    return(posture);
 800b782:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b784:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b786:	b672      	cpsid	i
    return(int_posture);
 800b788:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b78a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b790:	2b04      	cmp	r3, #4
 800b792:	d10e      	bne.n	800b7b2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b794:	4b13      	ldr	r3, [pc, #76]	@ (800b7e4 <_tx_thread_timeout+0x74>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3301      	adds	r3, #1
 800b79a:	4a12      	ldr	r2, [pc, #72]	@ (800b7e4 <_tx_thread_timeout+0x74>)
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f383 8810 	msr	PRIMASK, r3
}
 800b7a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b7aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7ac:	f7ff fd76 	bl	800b29c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b7b0:	e013      	b.n	800b7da <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b7b6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b7be:	61bb      	str	r3, [r7, #24]
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	f383 8810 	msr	PRIMASK, r3
}
 800b7ca:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	69b9      	ldr	r1, [r7, #24]
 800b7d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7d8:	4798      	blx	r3
}
 800b7da:	bf00      	nop
 800b7dc:	3728      	adds	r7, #40	@ 0x28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20001d28 	.word	0x20001d28

0800b7e8 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b7f2:	60bb      	str	r3, [r7, #8]
    return(posture);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 800b7f6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b7f8:	b672      	cpsid	i
    return(int_posture);
 800b7fa:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 800b7fc:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 800b7fe:	4b08      	ldr	r3, [pc, #32]	@ (800b820 <_tx_time_get+0x38>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f383 8810 	msr	PRIMASK, r3
}
 800b80e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 800b810:	693b      	ldr	r3, [r7, #16]
}
 800b812:	4618      	mov	r0, r3
 800b814:	371c      	adds	r7, #28
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	20001d34 	.word	0x20001d34

0800b824 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b82a:	f3ef 8310 	mrs	r3, PRIMASK
 800b82e:	607b      	str	r3, [r7, #4]
    return(posture);
 800b830:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b832:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b834:	b672      	cpsid	i
    return(int_posture);
 800b836:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b838:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b83a:	4b09      	ldr	r3, [pc, #36]	@ (800b860 <_tx_timer_expiration_process+0x3c>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3301      	adds	r3, #1
 800b840:	4a07      	ldr	r2, [pc, #28]	@ (800b860 <_tx_timer_expiration_process+0x3c>)
 800b842:	6013      	str	r3, [r2, #0]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f383 8810 	msr	PRIMASK, r3
}
 800b84e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b850:	4804      	ldr	r0, [pc, #16]	@ (800b864 <_tx_timer_expiration_process+0x40>)
 800b852:	f7ff fd23 	bl	800b29c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	20001d28 	.word	0x20001d28
 800b864:	20001dd8 	.word	0x20001dd8

0800b868 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b089      	sub	sp, #36	@ 0x24
 800b86c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b86e:	4b28      	ldr	r3, [pc, #160]	@ (800b910 <_tx_timer_initialize+0xa8>)
 800b870:	2200      	movs	r2, #0
 800b872:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b874:	4b27      	ldr	r3, [pc, #156]	@ (800b914 <_tx_timer_initialize+0xac>)
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b87a:	4b27      	ldr	r3, [pc, #156]	@ (800b918 <_tx_timer_initialize+0xb0>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b880:	4b26      	ldr	r3, [pc, #152]	@ (800b91c <_tx_timer_initialize+0xb4>)
 800b882:	2200      	movs	r2, #0
 800b884:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b886:	4b26      	ldr	r3, [pc, #152]	@ (800b920 <_tx_timer_initialize+0xb8>)
 800b888:	2200      	movs	r2, #0
 800b88a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b88c:	2280      	movs	r2, #128	@ 0x80
 800b88e:	2100      	movs	r1, #0
 800b890:	4824      	ldr	r0, [pc, #144]	@ (800b924 <_tx_timer_initialize+0xbc>)
 800b892:	f001 fb54 	bl	800cf3e <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b896:	4b24      	ldr	r3, [pc, #144]	@ (800b928 <_tx_timer_initialize+0xc0>)
 800b898:	4a22      	ldr	r2, [pc, #136]	@ (800b924 <_tx_timer_initialize+0xbc>)
 800b89a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b89c:	4b23      	ldr	r3, [pc, #140]	@ (800b92c <_tx_timer_initialize+0xc4>)
 800b89e:	4a21      	ldr	r2, [pc, #132]	@ (800b924 <_tx_timer_initialize+0xbc>)
 800b8a0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b8a2:	4b23      	ldr	r3, [pc, #140]	@ (800b930 <_tx_timer_initialize+0xc8>)
 800b8a4:	4a23      	ldr	r2, [pc, #140]	@ (800b934 <_tx_timer_initialize+0xcc>)
 800b8a6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b8a8:	4b21      	ldr	r3, [pc, #132]	@ (800b930 <_tx_timer_initialize+0xc8>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4a20      	ldr	r2, [pc, #128]	@ (800b930 <_tx_timer_initialize+0xc8>)
 800b8b0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b8b2:	4b21      	ldr	r3, [pc, #132]	@ (800b938 <_tx_timer_initialize+0xd0>)
 800b8b4:	4a21      	ldr	r2, [pc, #132]	@ (800b93c <_tx_timer_initialize+0xd4>)
 800b8b6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b8b8:	4b21      	ldr	r3, [pc, #132]	@ (800b940 <_tx_timer_initialize+0xd8>)
 800b8ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b8be:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b8c0:	4b20      	ldr	r3, [pc, #128]	@ (800b944 <_tx_timer_initialize+0xdc>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b8c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b938 <_tx_timer_initialize+0xd0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1d      	ldr	r2, [pc, #116]	@ (800b940 <_tx_timer_initialize+0xd8>)
 800b8cc:	6812      	ldr	r2, [r2, #0]
 800b8ce:	491d      	ldr	r1, [pc, #116]	@ (800b944 <_tx_timer_initialize+0xdc>)
 800b8d0:	6809      	ldr	r1, [r1, #0]
 800b8d2:	481c      	ldr	r0, [pc, #112]	@ (800b944 <_tx_timer_initialize+0xdc>)
 800b8d4:	6800      	ldr	r0, [r0, #0]
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	9405      	str	r4, [sp, #20]
 800b8da:	2400      	movs	r4, #0
 800b8dc:	9404      	str	r4, [sp, #16]
 800b8de:	9003      	str	r0, [sp, #12]
 800b8e0:	9102      	str	r1, [sp, #8]
 800b8e2:	9201      	str	r2, [sp, #4]
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	4b18      	ldr	r3, [pc, #96]	@ (800b948 <_tx_timer_initialize+0xe0>)
 800b8e8:	4a18      	ldr	r2, [pc, #96]	@ (800b94c <_tx_timer_initialize+0xe4>)
 800b8ea:	4919      	ldr	r1, [pc, #100]	@ (800b950 <_tx_timer_initialize+0xe8>)
 800b8ec:	4819      	ldr	r0, [pc, #100]	@ (800b954 <_tx_timer_initialize+0xec>)
 800b8ee:	f7ff fa9d 	bl	800ae2c <_tx_thread_create>
 800b8f2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e5      	bne.n	800b8c6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b8fa:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <_tx_timer_initialize+0xf0>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b900:	4b16      	ldr	r3, [pc, #88]	@ (800b95c <_tx_timer_initialize+0xf4>)
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd90      	pop	{r4, r7, pc}
 800b90e:	bf00      	nop
 800b910:	20001d34 	.word	0x20001d34
 800b914:	20002294 	.word	0x20002294
 800b918:	20001d38 	.word	0x20001d38
 800b91c:	20001dc8 	.word	0x20001dc8
 800b920:	20001dd4 	.word	0x20001dd4
 800b924:	20001d3c 	.word	0x20001d3c
 800b928:	20001dbc 	.word	0x20001dbc
 800b92c:	20001dc4 	.word	0x20001dc4
 800b930:	20001dc0 	.word	0x20001dc0
 800b934:	20001db8 	.word	0x20001db8
 800b938:	20001e88 	.word	0x20001e88
 800b93c:	20001e94 	.word	0x20001e94
 800b940:	20001e8c 	.word	0x20001e8c
 800b944:	20001e90 	.word	0x20001e90
 800b948:	4154494d 	.word	0x4154494d
 800b94c:	0800ba95 	.word	0x0800ba95
 800b950:	08010874 	.word	0x08010874
 800b954:	20001dd8 	.word	0x20001dd8
 800b958:	20001dcc 	.word	0x20001dcc
 800b95c:	20001dd0 	.word	0x20001dd0

0800b960 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b960:	b480      	push	{r7}
 800b962:	b089      	sub	sp, #36	@ 0x24
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d04a      	beq.n	800ba0a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d046      	beq.n	800ba0a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d142      	bne.n	800ba0a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	2b20      	cmp	r3, #32
 800b988:	d902      	bls.n	800b990 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b98a:	231f      	movs	r3, #31
 800b98c:	61bb      	str	r3, [r7, #24]
 800b98e:	e002      	b.n	800b996 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	3b01      	subs	r3, #1
 800b994:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b996:	4b20      	ldr	r3, [pc, #128]	@ (800ba18 <_tx_timer_system_activate+0xb8>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b9a2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba1c <_tx_timer_system_activate+0xbc>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69fa      	ldr	r2, [r7, #28]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d30b      	bcc.n	800b9c4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b9ac:	4b1b      	ldr	r3, [pc, #108]	@ (800ba1c <_tx_timer_system_activate+0xbc>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	69fa      	ldr	r2, [r7, #28]
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	109b      	asrs	r3, r3, #2
 800b9b6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b9b8:	4b19      	ldr	r3, [pc, #100]	@ (800ba20 <_tx_timer_system_activate+0xc0>)
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d109      	bne.n	800b9e0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	687a      	ldr	r2, [r7, #4]
 800b9d0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e011      	b.n	800ba04 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	69fa      	ldr	r2, [r7, #28]
 800ba08:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800ba0a:	bf00      	nop
 800ba0c:	3724      	adds	r7, #36	@ 0x24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	20001dc4 	.word	0x20001dc4
 800ba1c:	20001dc0 	.word	0x20001dc0
 800ba20:	20001dbc 	.word	0x20001dbc

0800ba24 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b087      	sub	sp, #28
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d026      	beq.n	800ba86 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d108      	bne.n	800ba58 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d117      	bne.n	800ba80 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2200      	movs	r2, #0
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	e013      	b.n	800ba80 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d105      	bne.n	800ba80 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	619a      	str	r2, [r3, #24]
    }
}
 800ba86:	bf00      	nop
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
	...

0800ba94 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b098      	sub	sp, #96	@ 0x60
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a73      	ldr	r2, [pc, #460]	@ (800bc70 <_tx_timer_thread_entry+0x1dc>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	f040 80de 	bne.w	800bc66 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800baaa:	f3ef 8310 	mrs	r3, PRIMASK
 800baae:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 800bab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800bab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800bab4:	b672      	cpsid	i
    return(int_posture);
 800bab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800bab8:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800baba:	4b6e      	ldr	r3, [pc, #440]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d003      	beq.n	800bad0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f107 020c 	add.w	r2, r7, #12
 800bace:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800bad0:	4b68      	ldr	r3, [pc, #416]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800bad8:	4b66      	ldr	r3, [pc, #408]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3304      	adds	r3, #4
 800bade:	4a65      	ldr	r2, [pc, #404]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800bae0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800bae2:	4b64      	ldr	r3, [pc, #400]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b64      	ldr	r3, [pc, #400]	@ (800bc78 <_tx_timer_thread_entry+0x1e4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d103      	bne.n	800baf6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800baee:	4b63      	ldr	r3, [pc, #396]	@ (800bc7c <_tx_timer_thread_entry+0x1e8>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a60      	ldr	r2, [pc, #384]	@ (800bc74 <_tx_timer_thread_entry+0x1e0>)
 800baf4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800baf6:	4b62      	ldr	r3, [pc, #392]	@ (800bc80 <_tx_timer_thread_entry+0x1ec>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bafe:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb02:	f383 8810 	msr	PRIMASK, r3
}
 800bb06:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb08:	f3ef 8310 	mrs	r3, PRIMASK
 800bb0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800bb10:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb12:	b672      	cpsid	i
    return(int_posture);
 800bb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800bb16:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800bb18:	e07f      	b.n	800bc1a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800bb24:	2300      	movs	r3, #0
 800bb26:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800bb28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d102      	bne.n	800bb36 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
 800bb34:	e00e      	b.n	800bb54 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800bb36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800bb3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb40:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800bb42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb46:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800bb48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb4a:	f107 020c 	add.w	r2, r7, #12
 800bb4e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800bb50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb52:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800bb54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b20      	cmp	r3, #32
 800bb5a:	d911      	bls.n	800bb80 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800bb5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800bb64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb66:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800bb6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb6e:	f107 0208 	add.w	r2, r7, #8
 800bb72:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800bb74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb78:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800bb7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb7c:	60bb      	str	r3, [r7, #8]
 800bb7e:	e01a      	b.n	800bbb6 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800bb80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800bb86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800bb8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb92:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800bb94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d009      	beq.n	800bbb0 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb9e:	f107 0208 	add.w	r2, r7, #8
 800bba2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800bba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bba8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbac:	60bb      	str	r3, [r7, #8]
 800bbae:	e002      	b.n	800bbb6 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800bbb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800bbb6:	4a33      	ldr	r2, [pc, #204]	@ (800bc84 <_tx_timer_thread_entry+0x1f0>)
 800bbb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc2:	f383 8810 	msr	PRIMASK, r3
}
 800bbc6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800bbc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800bbce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbd0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bbd2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800bbd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800bbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800bbdc:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bbde:	b672      	cpsid	i
    return(int_posture);
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bbe2:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800bbe4:	4b27      	ldr	r3, [pc, #156]	@ (800bc84 <_tx_timer_thread_entry+0x1f0>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d105      	bne.n	800bbfe <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800bbf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800bbf8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bbfa:	f7ff feb1 	bl	800b960 <_tx_timer_system_activate>
 800bbfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc00:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	f383 8810 	msr	PRIMASK, r3
}
 800bc08:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc0a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc0e:	623b      	str	r3, [r7, #32]
    return(posture);
 800bc10:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bc12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc14:	b672      	cpsid	i
    return(int_posture);
 800bc16:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bc18:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f af7c 	bne.w	800bb1a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bc22:	4b17      	ldr	r3, [pc, #92]	@ (800bc80 <_tx_timer_thread_entry+0x1ec>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d116      	bne.n	800bc58 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bc2a:	4b17      	ldr	r3, [pc, #92]	@ (800bc88 <_tx_timer_thread_entry+0x1f4>)
 800bc2c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bc2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc30:	2203      	movs	r2, #3
 800bc32:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc36:	2201      	movs	r2, #1
 800bc38:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bc3a:	4b14      	ldr	r3, [pc, #80]	@ (800bc8c <_tx_timer_thread_entry+0x1f8>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	4a12      	ldr	r2, [pc, #72]	@ (800bc8c <_tx_timer_thread_entry+0x1f8>)
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc46:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f383 8810 	msr	PRIMASK, r3
}
 800bc4e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bc50:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bc52:	f7ff fc23 	bl	800b49c <_tx_thread_system_suspend>
 800bc56:	e728      	b.n	800baaa <_tx_timer_thread_entry+0x16>
 800bc58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f383 8810 	msr	PRIMASK, r3
}
 800bc62:	bf00      	nop
            TX_DISABLE
 800bc64:	e721      	b.n	800baaa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bc66:	bf00      	nop
 800bc68:	3760      	adds	r7, #96	@ 0x60
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	4154494d 	.word	0x4154494d
 800bc74:	20001dc4 	.word	0x20001dc4
 800bc78:	20001dc0 	.word	0x20001dc0
 800bc7c:	20001dbc 	.word	0x20001dbc
 800bc80:	20001dc8 	.word	0x20001dc8
 800bc84:	20001dd4 	.word	0x20001dd4
 800bc88:	20001dd8 	.word	0x20001dd8
 800bc8c:	20001d28 	.word	0x20001d28

0800bc90 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b092      	sub	sp, #72	@ 0x48
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d102      	bne.n	800bcae <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bca8:	2302      	movs	r3, #2
 800bcaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcac:	e075      	b.n	800bd9a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bcae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcb0:	2b34      	cmp	r3, #52	@ 0x34
 800bcb2:	d002      	beq.n	800bcba <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcb8:	e06f      	b.n	800bd9a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcba:	f3ef 8310 	mrs	r3, PRIMASK
 800bcbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800bcc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800bcc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcc4:	b672      	cpsid	i
    return(int_posture);
 800bcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bcc8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bcca:	4b3b      	ldr	r3, [pc, #236]	@ (800bdb8 <_txe_byte_pool_create+0x128>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	4a39      	ldr	r2, [pc, #228]	@ (800bdb8 <_txe_byte_pool_create+0x128>)
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcda:	f383 8810 	msr	PRIMASK, r3
}
 800bcde:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bce0:	4b36      	ldr	r3, [pc, #216]	@ (800bdbc <_txe_byte_pool_create+0x12c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bce6:	2300      	movs	r3, #0
 800bce8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bcea:	e009      	b.n	800bd00 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d00b      	beq.n	800bd0c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bcf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd00:	4b2f      	ldr	r3, [pc, #188]	@ (800bdc0 <_txe_byte_pool_create+0x130>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d3f0      	bcc.n	800bcec <_txe_byte_pool_create+0x5c>
 800bd0a:	e000      	b.n	800bd0e <_txe_byte_pool_create+0x7e>
                break;
 800bd0c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd0e:	f3ef 8310 	mrs	r3, PRIMASK
 800bd12:	623b      	str	r3, [r7, #32]
    return(posture);
 800bd14:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bd16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd18:	b672      	cpsid	i
    return(int_posture);
 800bd1a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bd1c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bd1e:	4b26      	ldr	r3, [pc, #152]	@ (800bdb8 <_txe_byte_pool_create+0x128>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3b01      	subs	r3, #1
 800bd24:	4a24      	ldr	r2, [pc, #144]	@ (800bdb8 <_txe_byte_pool_create+0x128>)
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2e:	f383 8810 	msr	PRIMASK, r3
}
 800bd32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bd34:	f7ff fa78 	bl	800b228 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d102      	bne.n	800bd46 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bd40:	2302      	movs	r3, #2
 800bd42:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd44:	e029      	b.n	800bd9a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d102      	bne.n	800bd52 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd50:	e023      	b.n	800bd9a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b63      	cmp	r3, #99	@ 0x63
 800bd56:	d802      	bhi.n	800bd5e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bd58:	2305      	movs	r3, #5
 800bd5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd5c:	e01d      	b.n	800bd9a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd5e:	4b19      	ldr	r3, [pc, #100]	@ (800bdc4 <_txe_byte_pool_create+0x134>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd66:	4a18      	ldr	r2, [pc, #96]	@ (800bdc8 <_txe_byte_pool_create+0x138>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d101      	bne.n	800bd70 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd6c:	2313      	movs	r3, #19
 800bd6e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd70:	f3ef 8305 	mrs	r3, IPSR
 800bd74:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bd76:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd78:	4b14      	ldr	r3, [pc, #80]	@ (800bdcc <_txe_byte_pool_create+0x13c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d00b      	beq.n	800bd9a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd82:	f3ef 8305 	mrs	r3, IPSR
 800bd86:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bd88:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bd8a:	4b10      	ldr	r3, [pc, #64]	@ (800bdcc <_txe_byte_pool_create+0x13c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bd94:	d201      	bcs.n	800bd9a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bd96:	2313      	movs	r3, #19
 800bd98:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bd9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	68f8      	ldr	r0, [r7, #12]
 800bda8:	f7fe ff3c 	bl	800ac24 <_tx_byte_pool_create>
 800bdac:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 800bdae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3748      	adds	r7, #72	@ 0x48
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20001d28 	.word	0x20001d28
 800bdbc:	20001c80 	.word	0x20001c80
 800bdc0:	20001c84 	.word	0x20001c84
 800bdc4:	20001c90 	.word	0x20001c90
 800bdc8:	20001dd8 	.word	0x20001dd8
 800bdcc:	2000000c 	.word	0x2000000c

0800bdd0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b09a      	sub	sp, #104	@ 0x68
 800bdd4:	af06      	add	r7, sp, #24
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	607a      	str	r2, [r7, #4]
 800bddc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bdde:	2300      	movs	r3, #0
 800bde0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d102      	bne.n	800bdee <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bde8:	230e      	movs	r3, #14
 800bdea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdec:	e0bb      	b.n	800bf66 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800bdee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bdf0:	2bb0      	cmp	r3, #176	@ 0xb0
 800bdf2:	d002      	beq.n	800bdfa <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bdf4:	230e      	movs	r3, #14
 800bdf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdf8:	e0b5      	b.n	800bf66 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bdfa:	f3ef 8310 	mrs	r3, PRIMASK
 800bdfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800be00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800be02:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800be04:	b672      	cpsid	i
    return(int_posture);
 800be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800be08:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800be0a:	4b64      	ldr	r3, [pc, #400]	@ (800bf9c <_txe_thread_create+0x1cc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3301      	adds	r3, #1
 800be10:	4a62      	ldr	r2, [pc, #392]	@ (800bf9c <_txe_thread_create+0x1cc>)
 800be12:	6013      	str	r3, [r2, #0]
 800be14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1a:	f383 8810 	msr	PRIMASK, r3
}
 800be1e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800be20:	2300      	movs	r3, #0
 800be22:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800be24:	4b5e      	ldr	r3, [pc, #376]	@ (800bfa0 <_txe_thread_create+0x1d0>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800be2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be2c:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800be2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be30:	3b01      	subs	r3, #1
 800be32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be34:	4413      	add	r3, r2
 800be36:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800be3c:	2300      	movs	r3, #0
 800be3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800be40:	e02b      	b.n	800be9a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be46:	429a      	cmp	r2, r3
 800be48:	d101      	bne.n	800be4e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800be4a:	2301      	movs	r3, #1
 800be4c:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800be4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be50:	2b01      	cmp	r3, #1
 800be52:	d028      	beq.n	800bea6 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800be54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d308      	bcc.n	800be70 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800be5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be64:	429a      	cmp	r2, r3
 800be66:	d203      	bcs.n	800be70 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800be6c:	2301      	movs	r3, #1
 800be6e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800be70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be76:	429a      	cmp	r2, r3
 800be78:	d308      	bcc.n	800be8c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800be7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be80:	429a      	cmp	r2, r3
 800be82:	d203      	bcs.n	800be8c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800be84:	2300      	movs	r3, #0
 800be86:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800be88:	2301      	movs	r3, #1
 800be8a:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800be8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be92:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800be94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be96:	3301      	adds	r3, #1
 800be98:	647b      	str	r3, [r7, #68]	@ 0x44
 800be9a:	4b42      	ldr	r3, [pc, #264]	@ (800bfa4 <_txe_thread_create+0x1d4>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d3ce      	bcc.n	800be42 <_txe_thread_create+0x72>
 800bea4:	e000      	b.n	800bea8 <_txe_thread_create+0xd8>
                break;
 800bea6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bea8:	f3ef 8310 	mrs	r3, PRIMASK
 800beac:	61fb      	str	r3, [r7, #28]
    return(posture);
 800beae:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800beb0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800beb2:	b672      	cpsid	i
    return(int_posture);
 800beb4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800beb6:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800beb8:	4b38      	ldr	r3, [pc, #224]	@ (800bf9c <_txe_thread_create+0x1cc>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	4a37      	ldr	r2, [pc, #220]	@ (800bf9c <_txe_thread_create+0x1cc>)
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bec4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	f383 8810 	msr	PRIMASK, r3
}
 800becc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bece:	f7ff f9ab 	bl	800b228 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d102      	bne.n	800bee0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800beda:	230e      	movs	r3, #14
 800bedc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bede:	e042      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800bee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d102      	bne.n	800beec <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800bee6:	2303      	movs	r3, #3
 800bee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beea:	e03c      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800bef2:	2303      	movs	r3, #3
 800bef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bef6:	e036      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800bef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800befa:	2bc7      	cmp	r3, #199	@ 0xc7
 800befc:	d802      	bhi.n	800bf04 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800befe:	2305      	movs	r3, #5
 800bf00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf02:	e030      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800bf04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf06:	2b1f      	cmp	r3, #31
 800bf08:	d902      	bls.n	800bf10 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800bf0a:	230f      	movs	r3, #15
 800bf0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf0e:	e02a      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800bf10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d902      	bls.n	800bf1e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800bf18:	2318      	movs	r3, #24
 800bf1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf1c:	e023      	b.n	800bf66 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800bf1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d902      	bls.n	800bf2a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800bf24:	2310      	movs	r3, #16
 800bf26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf28:	e01d      	b.n	800bf66 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800bf2a:	4b1f      	ldr	r3, [pc, #124]	@ (800bfa8 <_txe_thread_create+0x1d8>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf32:	4a1e      	ldr	r2, [pc, #120]	@ (800bfac <_txe_thread_create+0x1dc>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d101      	bne.n	800bf3c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bf38:	2313      	movs	r3, #19
 800bf3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf3c:	f3ef 8305 	mrs	r3, IPSR
 800bf40:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bf42:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bf44:	4b1a      	ldr	r3, [pc, #104]	@ (800bfb0 <_txe_thread_create+0x1e0>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00b      	beq.n	800bf66 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf4e:	f3ef 8305 	mrs	r3, IPSR
 800bf52:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bf54:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bf56:	4b16      	ldr	r3, [pc, #88]	@ (800bfb0 <_txe_thread_create+0x1e0>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800bf60:	d201      	bcs.n	800bf66 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bf62:	2313      	movs	r3, #19
 800bf64:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bf66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d112      	bne.n	800bf92 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800bf6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf6e:	9305      	str	r3, [sp, #20]
 800bf70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf76:	9303      	str	r3, [sp, #12]
 800bf78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf7a:	9302      	str	r3, [sp, #8]
 800bf7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	68b9      	ldr	r1, [r7, #8]
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7fe ff4e 	bl	800ae2c <_tx_thread_create>
 800bf90:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800bf92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3750      	adds	r7, #80	@ 0x50
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	20001d28 	.word	0x20001d28
 800bfa0:	20001c98 	.word	0x20001c98
 800bfa4:	20001c9c 	.word	0x20001c9c
 800bfa8:	20001c90 	.word	0x20001c90
 800bfac:	20001dd8 	.word	0x20001dd8
 800bfb0:	2000000c 	.word	0x2000000c

0800bfb4 <__cvt>:
 800bfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfb8:	ec57 6b10 	vmov	r6, r7, d0
 800bfbc:	2f00      	cmp	r7, #0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	463b      	mov	r3, r7
 800bfc4:	bfb4      	ite	lt
 800bfc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bfca:	2300      	movge	r3, #0
 800bfcc:	4691      	mov	r9, r2
 800bfce:	bfbf      	itttt	lt
 800bfd0:	4632      	movlt	r2, r6
 800bfd2:	461f      	movlt	r7, r3
 800bfd4:	232d      	movlt	r3, #45	@ 0x2d
 800bfd6:	4616      	movlt	r6, r2
 800bfd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bfdc:	700b      	strb	r3, [r1, #0]
 800bfde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bfe0:	f023 0820 	bic.w	r8, r3, #32
 800bfe4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bfe8:	d005      	beq.n	800bff6 <__cvt+0x42>
 800bfea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bfee:	d100      	bne.n	800bff2 <__cvt+0x3e>
 800bff0:	3401      	adds	r4, #1
 800bff2:	2102      	movs	r1, #2
 800bff4:	e000      	b.n	800bff8 <__cvt+0x44>
 800bff6:	2103      	movs	r1, #3
 800bff8:	ab03      	add	r3, sp, #12
 800bffa:	4622      	mov	r2, r4
 800bffc:	9301      	str	r3, [sp, #4]
 800bffe:	ab02      	add	r3, sp, #8
 800c000:	ec47 6b10 	vmov	d0, r6, r7
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	4653      	mov	r3, sl
 800c008:	f001 f8be 	bl	800d188 <_dtoa_r>
 800c00c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c010:	4605      	mov	r5, r0
 800c012:	d119      	bne.n	800c048 <__cvt+0x94>
 800c014:	f019 0f01 	tst.w	r9, #1
 800c018:	d00e      	beq.n	800c038 <__cvt+0x84>
 800c01a:	eb00 0904 	add.w	r9, r0, r4
 800c01e:	2200      	movs	r2, #0
 800c020:	2300      	movs	r3, #0
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 fe81 	bl	8000d2c <__aeabi_dcmpeq>
 800c02a:	b108      	cbz	r0, 800c030 <__cvt+0x7c>
 800c02c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c030:	2230      	movs	r2, #48	@ 0x30
 800c032:	9b03      	ldr	r3, [sp, #12]
 800c034:	454b      	cmp	r3, r9
 800c036:	d31e      	bcc.n	800c076 <__cvt+0xc2>
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	4628      	mov	r0, r5
 800c03c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c03e:	1b5b      	subs	r3, r3, r5
 800c040:	6013      	str	r3, [r2, #0]
 800c042:	b004      	add	sp, #16
 800c044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c04c:	eb00 0904 	add.w	r9, r0, r4
 800c050:	d1e5      	bne.n	800c01e <__cvt+0x6a>
 800c052:	7803      	ldrb	r3, [r0, #0]
 800c054:	2b30      	cmp	r3, #48	@ 0x30
 800c056:	d10a      	bne.n	800c06e <__cvt+0xba>
 800c058:	2200      	movs	r2, #0
 800c05a:	2300      	movs	r3, #0
 800c05c:	4630      	mov	r0, r6
 800c05e:	4639      	mov	r1, r7
 800c060:	f7f4 fe64 	bl	8000d2c <__aeabi_dcmpeq>
 800c064:	b918      	cbnz	r0, 800c06e <__cvt+0xba>
 800c066:	f1c4 0401 	rsb	r4, r4, #1
 800c06a:	f8ca 4000 	str.w	r4, [sl]
 800c06e:	f8da 3000 	ldr.w	r3, [sl]
 800c072:	4499      	add	r9, r3
 800c074:	e7d3      	b.n	800c01e <__cvt+0x6a>
 800c076:	1c59      	adds	r1, r3, #1
 800c078:	9103      	str	r1, [sp, #12]
 800c07a:	701a      	strb	r2, [r3, #0]
 800c07c:	e7d9      	b.n	800c032 <__cvt+0x7e>

0800c07e <__exponent>:
 800c07e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c080:	2900      	cmp	r1, #0
 800c082:	7002      	strb	r2, [r0, #0]
 800c084:	bfba      	itte	lt
 800c086:	4249      	neglt	r1, r1
 800c088:	232d      	movlt	r3, #45	@ 0x2d
 800c08a:	232b      	movge	r3, #43	@ 0x2b
 800c08c:	2909      	cmp	r1, #9
 800c08e:	7043      	strb	r3, [r0, #1]
 800c090:	dd28      	ble.n	800c0e4 <__exponent+0x66>
 800c092:	f10d 0307 	add.w	r3, sp, #7
 800c096:	270a      	movs	r7, #10
 800c098:	461d      	mov	r5, r3
 800c09a:	461a      	mov	r2, r3
 800c09c:	3b01      	subs	r3, #1
 800c09e:	fbb1 f6f7 	udiv	r6, r1, r7
 800c0a2:	fb07 1416 	mls	r4, r7, r6, r1
 800c0a6:	3430      	adds	r4, #48	@ 0x30
 800c0a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c0ac:	460c      	mov	r4, r1
 800c0ae:	4631      	mov	r1, r6
 800c0b0:	2c63      	cmp	r4, #99	@ 0x63
 800c0b2:	dcf2      	bgt.n	800c09a <__exponent+0x1c>
 800c0b4:	3130      	adds	r1, #48	@ 0x30
 800c0b6:	1e94      	subs	r4, r2, #2
 800c0b8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0bc:	1c41      	adds	r1, r0, #1
 800c0be:	4623      	mov	r3, r4
 800c0c0:	42ab      	cmp	r3, r5
 800c0c2:	d30a      	bcc.n	800c0da <__exponent+0x5c>
 800c0c4:	f10d 0309 	add.w	r3, sp, #9
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	42ac      	cmp	r4, r5
 800c0cc:	bf88      	it	hi
 800c0ce:	2300      	movhi	r3, #0
 800c0d0:	3302      	adds	r3, #2
 800c0d2:	4403      	add	r3, r0
 800c0d4:	1a18      	subs	r0, r3, r0
 800c0d6:	b003      	add	sp, #12
 800c0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0da:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c0de:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c0e2:	e7ed      	b.n	800c0c0 <__exponent+0x42>
 800c0e4:	2330      	movs	r3, #48	@ 0x30
 800c0e6:	3130      	adds	r1, #48	@ 0x30
 800c0e8:	7083      	strb	r3, [r0, #2]
 800c0ea:	1d03      	adds	r3, r0, #4
 800c0ec:	70c1      	strb	r1, [r0, #3]
 800c0ee:	e7f1      	b.n	800c0d4 <__exponent+0x56>

0800c0f0 <_printf_float>:
 800c0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f4:	b08d      	sub	sp, #52	@ 0x34
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	461f      	mov	r7, r3
 800c0fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c100:	4605      	mov	r5, r0
 800c102:	f000 ff25 	bl	800cf50 <_localeconv_r>
 800c106:	6803      	ldr	r3, [r0, #0]
 800c108:	4618      	mov	r0, r3
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	f7f4 f9e2 	bl	80004d4 <strlen>
 800c110:	2300      	movs	r3, #0
 800c112:	9005      	str	r0, [sp, #20]
 800c114:	930a      	str	r3, [sp, #40]	@ 0x28
 800c116:	f8d8 3000 	ldr.w	r3, [r8]
 800c11a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c11e:	3307      	adds	r3, #7
 800c120:	f8d4 b000 	ldr.w	fp, [r4]
 800c124:	f023 0307 	bic.w	r3, r3, #7
 800c128:	f103 0208 	add.w	r2, r3, #8
 800c12c:	f8c8 2000 	str.w	r2, [r8]
 800c130:	f04f 32ff 	mov.w	r2, #4294967295
 800c134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c138:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c13c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c140:	9307      	str	r3, [sp, #28]
 800c142:	4b9d      	ldr	r3, [pc, #628]	@ (800c3b8 <_printf_float+0x2c8>)
 800c144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c148:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c14c:	f7f4 fe20 	bl	8000d90 <__aeabi_dcmpun>
 800c150:	bb70      	cbnz	r0, 800c1b0 <_printf_float+0xc0>
 800c152:	f04f 32ff 	mov.w	r2, #4294967295
 800c156:	4b98      	ldr	r3, [pc, #608]	@ (800c3b8 <_printf_float+0x2c8>)
 800c158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c15c:	f7f4 fdfa 	bl	8000d54 <__aeabi_dcmple>
 800c160:	bb30      	cbnz	r0, 800c1b0 <_printf_float+0xc0>
 800c162:	2200      	movs	r2, #0
 800c164:	2300      	movs	r3, #0
 800c166:	4640      	mov	r0, r8
 800c168:	4649      	mov	r1, r9
 800c16a:	f7f4 fde9 	bl	8000d40 <__aeabi_dcmplt>
 800c16e:	b110      	cbz	r0, 800c176 <_printf_float+0x86>
 800c170:	232d      	movs	r3, #45	@ 0x2d
 800c172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c176:	4a91      	ldr	r2, [pc, #580]	@ (800c3bc <_printf_float+0x2cc>)
 800c178:	4b91      	ldr	r3, [pc, #580]	@ (800c3c0 <_printf_float+0x2d0>)
 800c17a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c17e:	bf94      	ite	ls
 800c180:	4690      	movls	r8, r2
 800c182:	4698      	movhi	r8, r3
 800c184:	2303      	movs	r3, #3
 800c186:	f04f 0900 	mov.w	r9, #0
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	f02b 0304 	bic.w	r3, fp, #4
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	4633      	mov	r3, r6
 800c194:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	9700      	str	r7, [sp, #0]
 800c19c:	f000 f9d2 	bl	800c544 <_printf_common>
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f040 808d 	bne.w	800c2c0 <_printf_float+0x1d0>
 800c1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1aa:	b00d      	add	sp, #52	@ 0x34
 800c1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	f7f4 fdea 	bl	8000d90 <__aeabi_dcmpun>
 800c1bc:	b140      	cbz	r0, 800c1d0 <_printf_float+0xe0>
 800c1be:	464b      	mov	r3, r9
 800c1c0:	4a80      	ldr	r2, [pc, #512]	@ (800c3c4 <_printf_float+0x2d4>)
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bfbc      	itt	lt
 800c1c6:	232d      	movlt	r3, #45	@ 0x2d
 800c1c8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c1cc:	4b7e      	ldr	r3, [pc, #504]	@ (800c3c8 <_printf_float+0x2d8>)
 800c1ce:	e7d4      	b.n	800c17a <_printf_float+0x8a>
 800c1d0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c1d4:	6863      	ldr	r3, [r4, #4]
 800c1d6:	9206      	str	r2, [sp, #24]
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	d13b      	bne.n	800c254 <_printf_float+0x164>
 800c1dc:	2306      	movs	r3, #6
 800c1de:	6063      	str	r3, [r4, #4]
 800c1e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	6022      	str	r2, [r4, #0]
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	ab0a      	add	r3, sp, #40	@ 0x28
 800c1ee:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c1f2:	ab09      	add	r3, sp, #36	@ 0x24
 800c1f4:	ec49 8b10 	vmov	d0, r8, r9
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c1fe:	6861      	ldr	r1, [r4, #4]
 800c200:	f7ff fed8 	bl	800bfb4 <__cvt>
 800c204:	9b06      	ldr	r3, [sp, #24]
 800c206:	4680      	mov	r8, r0
 800c208:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c20a:	2b47      	cmp	r3, #71	@ 0x47
 800c20c:	d129      	bne.n	800c262 <_printf_float+0x172>
 800c20e:	1cc8      	adds	r0, r1, #3
 800c210:	db02      	blt.n	800c218 <_printf_float+0x128>
 800c212:	6863      	ldr	r3, [r4, #4]
 800c214:	4299      	cmp	r1, r3
 800c216:	dd41      	ble.n	800c29c <_printf_float+0x1ac>
 800c218:	f1aa 0a02 	sub.w	sl, sl, #2
 800c21c:	fa5f fa8a 	uxtb.w	sl, sl
 800c220:	3901      	subs	r1, #1
 800c222:	4652      	mov	r2, sl
 800c224:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c228:	9109      	str	r1, [sp, #36]	@ 0x24
 800c22a:	f7ff ff28 	bl	800c07e <__exponent>
 800c22e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c230:	4681      	mov	r9, r0
 800c232:	1813      	adds	r3, r2, r0
 800c234:	2a01      	cmp	r2, #1
 800c236:	6123      	str	r3, [r4, #16]
 800c238:	dc02      	bgt.n	800c240 <_printf_float+0x150>
 800c23a:	6822      	ldr	r2, [r4, #0]
 800c23c:	07d2      	lsls	r2, r2, #31
 800c23e:	d501      	bpl.n	800c244 <_printf_float+0x154>
 800c240:	3301      	adds	r3, #1
 800c242:	6123      	str	r3, [r4, #16]
 800c244:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0a2      	beq.n	800c192 <_printf_float+0xa2>
 800c24c:	232d      	movs	r3, #45	@ 0x2d
 800c24e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c252:	e79e      	b.n	800c192 <_printf_float+0xa2>
 800c254:	9a06      	ldr	r2, [sp, #24]
 800c256:	2a47      	cmp	r2, #71	@ 0x47
 800c258:	d1c2      	bne.n	800c1e0 <_printf_float+0xf0>
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1c0      	bne.n	800c1e0 <_printf_float+0xf0>
 800c25e:	2301      	movs	r3, #1
 800c260:	e7bd      	b.n	800c1de <_printf_float+0xee>
 800c262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c266:	d9db      	bls.n	800c220 <_printf_float+0x130>
 800c268:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c26c:	d118      	bne.n	800c2a0 <_printf_float+0x1b0>
 800c26e:	2900      	cmp	r1, #0
 800c270:	6863      	ldr	r3, [r4, #4]
 800c272:	dd0b      	ble.n	800c28c <_printf_float+0x19c>
 800c274:	6121      	str	r1, [r4, #16]
 800c276:	b913      	cbnz	r3, 800c27e <_printf_float+0x18e>
 800c278:	6822      	ldr	r2, [r4, #0]
 800c27a:	07d0      	lsls	r0, r2, #31
 800c27c:	d502      	bpl.n	800c284 <_printf_float+0x194>
 800c27e:	3301      	adds	r3, #1
 800c280:	440b      	add	r3, r1
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	f04f 0900 	mov.w	r9, #0
 800c288:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c28a:	e7db      	b.n	800c244 <_printf_float+0x154>
 800c28c:	b913      	cbnz	r3, 800c294 <_printf_float+0x1a4>
 800c28e:	6822      	ldr	r2, [r4, #0]
 800c290:	07d2      	lsls	r2, r2, #31
 800c292:	d501      	bpl.n	800c298 <_printf_float+0x1a8>
 800c294:	3302      	adds	r3, #2
 800c296:	e7f4      	b.n	800c282 <_printf_float+0x192>
 800c298:	2301      	movs	r3, #1
 800c29a:	e7f2      	b.n	800c282 <_printf_float+0x192>
 800c29c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2a2:	4299      	cmp	r1, r3
 800c2a4:	db05      	blt.n	800c2b2 <_printf_float+0x1c2>
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	6121      	str	r1, [r4, #16]
 800c2aa:	07d8      	lsls	r0, r3, #31
 800c2ac:	d5ea      	bpl.n	800c284 <_printf_float+0x194>
 800c2ae:	1c4b      	adds	r3, r1, #1
 800c2b0:	e7e7      	b.n	800c282 <_printf_float+0x192>
 800c2b2:	2900      	cmp	r1, #0
 800c2b4:	bfd4      	ite	le
 800c2b6:	f1c1 0202 	rsble	r2, r1, #2
 800c2ba:	2201      	movgt	r2, #1
 800c2bc:	4413      	add	r3, r2
 800c2be:	e7e0      	b.n	800c282 <_printf_float+0x192>
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	055a      	lsls	r2, r3, #21
 800c2c4:	d407      	bmi.n	800c2d6 <_printf_float+0x1e6>
 800c2c6:	6923      	ldr	r3, [r4, #16]
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	47b8      	blx	r7
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d12b      	bne.n	800c32c <_printf_float+0x23c>
 800c2d4:	e767      	b.n	800c1a6 <_printf_float+0xb6>
 800c2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c2da:	f240 80dd 	bls.w	800c498 <_printf_float+0x3a8>
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c2e6:	f7f4 fd21 	bl	8000d2c <__aeabi_dcmpeq>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d033      	beq.n	800c356 <_printf_float+0x266>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4a36      	ldr	r2, [pc, #216]	@ (800c3cc <_printf_float+0x2dc>)
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	47b8      	blx	r7
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	f43f af54 	beq.w	800c1a6 <_printf_float+0xb6>
 800c2fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c302:	4543      	cmp	r3, r8
 800c304:	db02      	blt.n	800c30c <_printf_float+0x21c>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	07d8      	lsls	r0, r3, #31
 800c30a:	d50f      	bpl.n	800c32c <_printf_float+0x23c>
 800c30c:	4631      	mov	r1, r6
 800c30e:	4628      	mov	r0, r5
 800c310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c314:	47b8      	blx	r7
 800c316:	3001      	adds	r0, #1
 800c318:	f43f af45 	beq.w	800c1a6 <_printf_float+0xb6>
 800c31c:	f04f 0900 	mov.w	r9, #0
 800c320:	f108 38ff 	add.w	r8, r8, #4294967295
 800c324:	f104 0a1a 	add.w	sl, r4, #26
 800c328:	45c8      	cmp	r8, r9
 800c32a:	dc09      	bgt.n	800c340 <_printf_float+0x250>
 800c32c:	6823      	ldr	r3, [r4, #0]
 800c32e:	079b      	lsls	r3, r3, #30
 800c330:	f100 8103 	bmi.w	800c53a <_printf_float+0x44a>
 800c334:	68e0      	ldr	r0, [r4, #12]
 800c336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c338:	4298      	cmp	r0, r3
 800c33a:	bfb8      	it	lt
 800c33c:	4618      	movlt	r0, r3
 800c33e:	e734      	b.n	800c1aa <_printf_float+0xba>
 800c340:	2301      	movs	r3, #1
 800c342:	4652      	mov	r2, sl
 800c344:	4631      	mov	r1, r6
 800c346:	4628      	mov	r0, r5
 800c348:	47b8      	blx	r7
 800c34a:	3001      	adds	r0, #1
 800c34c:	f43f af2b 	beq.w	800c1a6 <_printf_float+0xb6>
 800c350:	f109 0901 	add.w	r9, r9, #1
 800c354:	e7e8      	b.n	800c328 <_printf_float+0x238>
 800c356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dc39      	bgt.n	800c3d0 <_printf_float+0x2e0>
 800c35c:	2301      	movs	r3, #1
 800c35e:	4a1b      	ldr	r2, [pc, #108]	@ (800c3cc <_printf_float+0x2dc>)
 800c360:	4631      	mov	r1, r6
 800c362:	4628      	mov	r0, r5
 800c364:	47b8      	blx	r7
 800c366:	3001      	adds	r0, #1
 800c368:	f43f af1d 	beq.w	800c1a6 <_printf_float+0xb6>
 800c36c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c370:	ea59 0303 	orrs.w	r3, r9, r3
 800c374:	d102      	bne.n	800c37c <_printf_float+0x28c>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	07d9      	lsls	r1, r3, #31
 800c37a:	d5d7      	bpl.n	800c32c <_printf_float+0x23c>
 800c37c:	4631      	mov	r1, r6
 800c37e:	4628      	mov	r0, r5
 800c380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c384:	47b8      	blx	r7
 800c386:	3001      	adds	r0, #1
 800c388:	f43f af0d 	beq.w	800c1a6 <_printf_float+0xb6>
 800c38c:	f04f 0a00 	mov.w	sl, #0
 800c390:	f104 0b1a 	add.w	fp, r4, #26
 800c394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c396:	425b      	negs	r3, r3
 800c398:	4553      	cmp	r3, sl
 800c39a:	dc01      	bgt.n	800c3a0 <_printf_float+0x2b0>
 800c39c:	464b      	mov	r3, r9
 800c39e:	e793      	b.n	800c2c8 <_printf_float+0x1d8>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	465a      	mov	r2, fp
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	47b8      	blx	r7
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	f43f aefb 	beq.w	800c1a6 <_printf_float+0xb6>
 800c3b0:	f10a 0a01 	add.w	sl, sl, #1
 800c3b4:	e7ee      	b.n	800c394 <_printf_float+0x2a4>
 800c3b6:	bf00      	nop
 800c3b8:	7fefffff 	.word	0x7fefffff
 800c3bc:	080108c8 	.word	0x080108c8
 800c3c0:	080108cc 	.word	0x080108cc
 800c3c4:	080108d0 	.word	0x080108d0
 800c3c8:	080108d4 	.word	0x080108d4
 800c3cc:	080108d8 	.word	0x080108d8
 800c3d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c3d6:	4553      	cmp	r3, sl
 800c3d8:	bfa8      	it	ge
 800c3da:	4653      	movge	r3, sl
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	4699      	mov	r9, r3
 800c3e0:	dc36      	bgt.n	800c450 <_printf_float+0x360>
 800c3e2:	f04f 0b00 	mov.w	fp, #0
 800c3e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c3ea:	f104 021a 	add.w	r2, r4, #26
 800c3ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3f0:	9306      	str	r3, [sp, #24]
 800c3f2:	eba3 0309 	sub.w	r3, r3, r9
 800c3f6:	455b      	cmp	r3, fp
 800c3f8:	dc31      	bgt.n	800c45e <_printf_float+0x36e>
 800c3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fc:	459a      	cmp	sl, r3
 800c3fe:	dc3a      	bgt.n	800c476 <_printf_float+0x386>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	07da      	lsls	r2, r3, #31
 800c404:	d437      	bmi.n	800c476 <_printf_float+0x386>
 800c406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c408:	ebaa 0903 	sub.w	r9, sl, r3
 800c40c:	9b06      	ldr	r3, [sp, #24]
 800c40e:	ebaa 0303 	sub.w	r3, sl, r3
 800c412:	4599      	cmp	r9, r3
 800c414:	bfa8      	it	ge
 800c416:	4699      	movge	r9, r3
 800c418:	f1b9 0f00 	cmp.w	r9, #0
 800c41c:	dc33      	bgt.n	800c486 <_printf_float+0x396>
 800c41e:	f04f 0800 	mov.w	r8, #0
 800c422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c426:	f104 0b1a 	add.w	fp, r4, #26
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	ebaa 0303 	sub.w	r3, sl, r3
 800c430:	eba3 0309 	sub.w	r3, r3, r9
 800c434:	4543      	cmp	r3, r8
 800c436:	f77f af79 	ble.w	800c32c <_printf_float+0x23c>
 800c43a:	2301      	movs	r3, #1
 800c43c:	465a      	mov	r2, fp
 800c43e:	4631      	mov	r1, r6
 800c440:	4628      	mov	r0, r5
 800c442:	47b8      	blx	r7
 800c444:	3001      	adds	r0, #1
 800c446:	f43f aeae 	beq.w	800c1a6 <_printf_float+0xb6>
 800c44a:	f108 0801 	add.w	r8, r8, #1
 800c44e:	e7ec      	b.n	800c42a <_printf_float+0x33a>
 800c450:	4642      	mov	r2, r8
 800c452:	4631      	mov	r1, r6
 800c454:	4628      	mov	r0, r5
 800c456:	47b8      	blx	r7
 800c458:	3001      	adds	r0, #1
 800c45a:	d1c2      	bne.n	800c3e2 <_printf_float+0x2f2>
 800c45c:	e6a3      	b.n	800c1a6 <_printf_float+0xb6>
 800c45e:	2301      	movs	r3, #1
 800c460:	4631      	mov	r1, r6
 800c462:	4628      	mov	r0, r5
 800c464:	9206      	str	r2, [sp, #24]
 800c466:	47b8      	blx	r7
 800c468:	3001      	adds	r0, #1
 800c46a:	f43f ae9c 	beq.w	800c1a6 <_printf_float+0xb6>
 800c46e:	f10b 0b01 	add.w	fp, fp, #1
 800c472:	9a06      	ldr	r2, [sp, #24]
 800c474:	e7bb      	b.n	800c3ee <_printf_float+0x2fe>
 800c476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c47a:	4631      	mov	r1, r6
 800c47c:	4628      	mov	r0, r5
 800c47e:	47b8      	blx	r7
 800c480:	3001      	adds	r0, #1
 800c482:	d1c0      	bne.n	800c406 <_printf_float+0x316>
 800c484:	e68f      	b.n	800c1a6 <_printf_float+0xb6>
 800c486:	9a06      	ldr	r2, [sp, #24]
 800c488:	464b      	mov	r3, r9
 800c48a:	4631      	mov	r1, r6
 800c48c:	4628      	mov	r0, r5
 800c48e:	4442      	add	r2, r8
 800c490:	47b8      	blx	r7
 800c492:	3001      	adds	r0, #1
 800c494:	d1c3      	bne.n	800c41e <_printf_float+0x32e>
 800c496:	e686      	b.n	800c1a6 <_printf_float+0xb6>
 800c498:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c49c:	f1ba 0f01 	cmp.w	sl, #1
 800c4a0:	dc01      	bgt.n	800c4a6 <_printf_float+0x3b6>
 800c4a2:	07db      	lsls	r3, r3, #31
 800c4a4:	d536      	bpl.n	800c514 <_printf_float+0x424>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4642      	mov	r2, r8
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f ae78 	beq.w	800c1a6 <_printf_float+0xb6>
 800c4b6:	4631      	mov	r1, r6
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4be:	47b8      	blx	r7
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f43f ae70 	beq.w	800c1a6 <_printf_float+0xb6>
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c4d2:	f7f4 fc2b 	bl	8000d2c <__aeabi_dcmpeq>
 800c4d6:	b9c0      	cbnz	r0, 800c50a <_printf_float+0x41a>
 800c4d8:	4653      	mov	r3, sl
 800c4da:	f108 0201 	add.w	r2, r8, #1
 800c4de:	4631      	mov	r1, r6
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	47b8      	blx	r7
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	d10c      	bne.n	800c502 <_printf_float+0x412>
 800c4e8:	e65d      	b.n	800c1a6 <_printf_float+0xb6>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	465a      	mov	r2, fp
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b8      	blx	r7
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	f43f ae56 	beq.w	800c1a6 <_printf_float+0xb6>
 800c4fa:	f108 0801 	add.w	r8, r8, #1
 800c4fe:	45d0      	cmp	r8, sl
 800c500:	dbf3      	blt.n	800c4ea <_printf_float+0x3fa>
 800c502:	464b      	mov	r3, r9
 800c504:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c508:	e6df      	b.n	800c2ca <_printf_float+0x1da>
 800c50a:	f04f 0800 	mov.w	r8, #0
 800c50e:	f104 0b1a 	add.w	fp, r4, #26
 800c512:	e7f4      	b.n	800c4fe <_printf_float+0x40e>
 800c514:	2301      	movs	r3, #1
 800c516:	4642      	mov	r2, r8
 800c518:	e7e1      	b.n	800c4de <_printf_float+0x3ee>
 800c51a:	2301      	movs	r3, #1
 800c51c:	464a      	mov	r2, r9
 800c51e:	4631      	mov	r1, r6
 800c520:	4628      	mov	r0, r5
 800c522:	47b8      	blx	r7
 800c524:	3001      	adds	r0, #1
 800c526:	f43f ae3e 	beq.w	800c1a6 <_printf_float+0xb6>
 800c52a:	f108 0801 	add.w	r8, r8, #1
 800c52e:	68e3      	ldr	r3, [r4, #12]
 800c530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c532:	1a5b      	subs	r3, r3, r1
 800c534:	4543      	cmp	r3, r8
 800c536:	dcf0      	bgt.n	800c51a <_printf_float+0x42a>
 800c538:	e6fc      	b.n	800c334 <_printf_float+0x244>
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	f104 0919 	add.w	r9, r4, #25
 800c542:	e7f4      	b.n	800c52e <_printf_float+0x43e>

0800c544 <_printf_common>:
 800c544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c548:	4616      	mov	r6, r2
 800c54a:	4698      	mov	r8, r3
 800c54c:	688a      	ldr	r2, [r1, #8]
 800c54e:	4607      	mov	r7, r0
 800c550:	690b      	ldr	r3, [r1, #16]
 800c552:	460c      	mov	r4, r1
 800c554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c558:	4293      	cmp	r3, r2
 800c55a:	bfb8      	it	lt
 800c55c:	4613      	movlt	r3, r2
 800c55e:	6033      	str	r3, [r6, #0]
 800c560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c564:	b10a      	cbz	r2, 800c56a <_printf_common+0x26>
 800c566:	3301      	adds	r3, #1
 800c568:	6033      	str	r3, [r6, #0]
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	0699      	lsls	r1, r3, #26
 800c56e:	bf42      	ittt	mi
 800c570:	6833      	ldrmi	r3, [r6, #0]
 800c572:	3302      	addmi	r3, #2
 800c574:	6033      	strmi	r3, [r6, #0]
 800c576:	6825      	ldr	r5, [r4, #0]
 800c578:	f015 0506 	ands.w	r5, r5, #6
 800c57c:	d106      	bne.n	800c58c <_printf_common+0x48>
 800c57e:	f104 0a19 	add.w	sl, r4, #25
 800c582:	68e3      	ldr	r3, [r4, #12]
 800c584:	6832      	ldr	r2, [r6, #0]
 800c586:	1a9b      	subs	r3, r3, r2
 800c588:	42ab      	cmp	r3, r5
 800c58a:	dc2b      	bgt.n	800c5e4 <_printf_common+0xa0>
 800c58c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c590:	6822      	ldr	r2, [r4, #0]
 800c592:	3b00      	subs	r3, #0
 800c594:	bf18      	it	ne
 800c596:	2301      	movne	r3, #1
 800c598:	0692      	lsls	r2, r2, #26
 800c59a:	d430      	bmi.n	800c5fe <_printf_common+0xba>
 800c59c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	47c8      	blx	r9
 800c5a6:	3001      	adds	r0, #1
 800c5a8:	d023      	beq.n	800c5f2 <_printf_common+0xae>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	341a      	adds	r4, #26
 800c5ae:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c5b2:	f003 0306 	and.w	r3, r3, #6
 800c5b6:	2b04      	cmp	r3, #4
 800c5b8:	bf0a      	itet	eq
 800c5ba:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c5be:	2500      	movne	r5, #0
 800c5c0:	6833      	ldreq	r3, [r6, #0]
 800c5c2:	f04f 0600 	mov.w	r6, #0
 800c5c6:	bf08      	it	eq
 800c5c8:	1aed      	subeq	r5, r5, r3
 800c5ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c5ce:	bf08      	it	eq
 800c5d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	bfc4      	itt	gt
 800c5d8:	1a9b      	subgt	r3, r3, r2
 800c5da:	18ed      	addgt	r5, r5, r3
 800c5dc:	42b5      	cmp	r5, r6
 800c5de:	d11a      	bne.n	800c616 <_printf_common+0xd2>
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e008      	b.n	800c5f6 <_printf_common+0xb2>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4652      	mov	r2, sl
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4638      	mov	r0, r7
 800c5ec:	47c8      	blx	r9
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	d103      	bne.n	800c5fa <_printf_common+0xb6>
 800c5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5fa:	3501      	adds	r5, #1
 800c5fc:	e7c1      	b.n	800c582 <_printf_common+0x3e>
 800c5fe:	18e1      	adds	r1, r4, r3
 800c600:	1c5a      	adds	r2, r3, #1
 800c602:	2030      	movs	r0, #48	@ 0x30
 800c604:	3302      	adds	r3, #2
 800c606:	4422      	add	r2, r4
 800c608:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c60c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c614:	e7c2      	b.n	800c59c <_printf_common+0x58>
 800c616:	2301      	movs	r3, #1
 800c618:	4622      	mov	r2, r4
 800c61a:	4641      	mov	r1, r8
 800c61c:	4638      	mov	r0, r7
 800c61e:	47c8      	blx	r9
 800c620:	3001      	adds	r0, #1
 800c622:	d0e6      	beq.n	800c5f2 <_printf_common+0xae>
 800c624:	3601      	adds	r6, #1
 800c626:	e7d9      	b.n	800c5dc <_printf_common+0x98>

0800c628 <_printf_i>:
 800c628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c62c:	7e0f      	ldrb	r7, [r1, #24]
 800c62e:	4691      	mov	r9, r2
 800c630:	4680      	mov	r8, r0
 800c632:	460c      	mov	r4, r1
 800c634:	2f78      	cmp	r7, #120	@ 0x78
 800c636:	469a      	mov	sl, r3
 800c638:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c63a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c63e:	d807      	bhi.n	800c650 <_printf_i+0x28>
 800c640:	2f62      	cmp	r7, #98	@ 0x62
 800c642:	d80a      	bhi.n	800c65a <_printf_i+0x32>
 800c644:	2f00      	cmp	r7, #0
 800c646:	f000 80d2 	beq.w	800c7ee <_printf_i+0x1c6>
 800c64a:	2f58      	cmp	r7, #88	@ 0x58
 800c64c:	f000 80b9 	beq.w	800c7c2 <_printf_i+0x19a>
 800c650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c654:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c658:	e03a      	b.n	800c6d0 <_printf_i+0xa8>
 800c65a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c65e:	2b15      	cmp	r3, #21
 800c660:	d8f6      	bhi.n	800c650 <_printf_i+0x28>
 800c662:	a101      	add	r1, pc, #4	@ (adr r1, 800c668 <_printf_i+0x40>)
 800c664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c668:	0800c6c1 	.word	0x0800c6c1
 800c66c:	0800c6d5 	.word	0x0800c6d5
 800c670:	0800c651 	.word	0x0800c651
 800c674:	0800c651 	.word	0x0800c651
 800c678:	0800c651 	.word	0x0800c651
 800c67c:	0800c651 	.word	0x0800c651
 800c680:	0800c6d5 	.word	0x0800c6d5
 800c684:	0800c651 	.word	0x0800c651
 800c688:	0800c651 	.word	0x0800c651
 800c68c:	0800c651 	.word	0x0800c651
 800c690:	0800c651 	.word	0x0800c651
 800c694:	0800c7d5 	.word	0x0800c7d5
 800c698:	0800c6ff 	.word	0x0800c6ff
 800c69c:	0800c78f 	.word	0x0800c78f
 800c6a0:	0800c651 	.word	0x0800c651
 800c6a4:	0800c651 	.word	0x0800c651
 800c6a8:	0800c7f7 	.word	0x0800c7f7
 800c6ac:	0800c651 	.word	0x0800c651
 800c6b0:	0800c6ff 	.word	0x0800c6ff
 800c6b4:	0800c651 	.word	0x0800c651
 800c6b8:	0800c651 	.word	0x0800c651
 800c6bc:	0800c797 	.word	0x0800c797
 800c6c0:	6833      	ldr	r3, [r6, #0]
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	6032      	str	r2, [r6, #0]
 800c6c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e09d      	b.n	800c810 <_printf_i+0x1e8>
 800c6d4:	6833      	ldr	r3, [r6, #0]
 800c6d6:	6820      	ldr	r0, [r4, #0]
 800c6d8:	1d19      	adds	r1, r3, #4
 800c6da:	6031      	str	r1, [r6, #0]
 800c6dc:	0606      	lsls	r6, r0, #24
 800c6de:	d501      	bpl.n	800c6e4 <_printf_i+0xbc>
 800c6e0:	681d      	ldr	r5, [r3, #0]
 800c6e2:	e003      	b.n	800c6ec <_printf_i+0xc4>
 800c6e4:	0645      	lsls	r5, r0, #25
 800c6e6:	d5fb      	bpl.n	800c6e0 <_printf_i+0xb8>
 800c6e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6ec:	2d00      	cmp	r5, #0
 800c6ee:	da03      	bge.n	800c6f8 <_printf_i+0xd0>
 800c6f0:	232d      	movs	r3, #45	@ 0x2d
 800c6f2:	426d      	negs	r5, r5
 800c6f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6f8:	4859      	ldr	r0, [pc, #356]	@ (800c860 <_printf_i+0x238>)
 800c6fa:	230a      	movs	r3, #10
 800c6fc:	e011      	b.n	800c722 <_printf_i+0xfa>
 800c6fe:	6821      	ldr	r1, [r4, #0]
 800c700:	6833      	ldr	r3, [r6, #0]
 800c702:	0608      	lsls	r0, r1, #24
 800c704:	f853 5b04 	ldr.w	r5, [r3], #4
 800c708:	d402      	bmi.n	800c710 <_printf_i+0xe8>
 800c70a:	0649      	lsls	r1, r1, #25
 800c70c:	bf48      	it	mi
 800c70e:	b2ad      	uxthmi	r5, r5
 800c710:	2f6f      	cmp	r7, #111	@ 0x6f
 800c712:	6033      	str	r3, [r6, #0]
 800c714:	4852      	ldr	r0, [pc, #328]	@ (800c860 <_printf_i+0x238>)
 800c716:	bf14      	ite	ne
 800c718:	230a      	movne	r3, #10
 800c71a:	2308      	moveq	r3, #8
 800c71c:	2100      	movs	r1, #0
 800c71e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c722:	6866      	ldr	r6, [r4, #4]
 800c724:	2e00      	cmp	r6, #0
 800c726:	60a6      	str	r6, [r4, #8]
 800c728:	bfa2      	ittt	ge
 800c72a:	6821      	ldrge	r1, [r4, #0]
 800c72c:	f021 0104 	bicge.w	r1, r1, #4
 800c730:	6021      	strge	r1, [r4, #0]
 800c732:	b90d      	cbnz	r5, 800c738 <_printf_i+0x110>
 800c734:	2e00      	cmp	r6, #0
 800c736:	d04b      	beq.n	800c7d0 <_printf_i+0x1a8>
 800c738:	4616      	mov	r6, r2
 800c73a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c73e:	fb03 5711 	mls	r7, r3, r1, r5
 800c742:	5dc7      	ldrb	r7, [r0, r7]
 800c744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c748:	462f      	mov	r7, r5
 800c74a:	460d      	mov	r5, r1
 800c74c:	42bb      	cmp	r3, r7
 800c74e:	d9f4      	bls.n	800c73a <_printf_i+0x112>
 800c750:	2b08      	cmp	r3, #8
 800c752:	d10b      	bne.n	800c76c <_printf_i+0x144>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	07df      	lsls	r7, r3, #31
 800c758:	d508      	bpl.n	800c76c <_printf_i+0x144>
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	6861      	ldr	r1, [r4, #4]
 800c75e:	4299      	cmp	r1, r3
 800c760:	bfde      	ittt	le
 800c762:	2330      	movle	r3, #48	@ 0x30
 800c764:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c76c:	1b92      	subs	r2, r2, r6
 800c76e:	6122      	str	r2, [r4, #16]
 800c770:	464b      	mov	r3, r9
 800c772:	aa03      	add	r2, sp, #12
 800c774:	4621      	mov	r1, r4
 800c776:	4640      	mov	r0, r8
 800c778:	f8cd a000 	str.w	sl, [sp]
 800c77c:	f7ff fee2 	bl	800c544 <_printf_common>
 800c780:	3001      	adds	r0, #1
 800c782:	d14a      	bne.n	800c81a <_printf_i+0x1f2>
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	b004      	add	sp, #16
 800c78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	f043 0320 	orr.w	r3, r3, #32
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	2778      	movs	r7, #120	@ 0x78
 800c798:	4832      	ldr	r0, [pc, #200]	@ (800c864 <_printf_i+0x23c>)
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7a0:	061f      	lsls	r7, r3, #24
 800c7a2:	6831      	ldr	r1, [r6, #0]
 800c7a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7a8:	d402      	bmi.n	800c7b0 <_printf_i+0x188>
 800c7aa:	065f      	lsls	r7, r3, #25
 800c7ac:	bf48      	it	mi
 800c7ae:	b2ad      	uxthmi	r5, r5
 800c7b0:	6031      	str	r1, [r6, #0]
 800c7b2:	07d9      	lsls	r1, r3, #31
 800c7b4:	bf44      	itt	mi
 800c7b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c7ba:	6023      	strmi	r3, [r4, #0]
 800c7bc:	b11d      	cbz	r5, 800c7c6 <_printf_i+0x19e>
 800c7be:	2310      	movs	r3, #16
 800c7c0:	e7ac      	b.n	800c71c <_printf_i+0xf4>
 800c7c2:	4827      	ldr	r0, [pc, #156]	@ (800c860 <_printf_i+0x238>)
 800c7c4:	e7e9      	b.n	800c79a <_printf_i+0x172>
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	f023 0320 	bic.w	r3, r3, #32
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	e7f6      	b.n	800c7be <_printf_i+0x196>
 800c7d0:	4616      	mov	r6, r2
 800c7d2:	e7bd      	b.n	800c750 <_printf_i+0x128>
 800c7d4:	6833      	ldr	r3, [r6, #0]
 800c7d6:	6825      	ldr	r5, [r4, #0]
 800c7d8:	1d18      	adds	r0, r3, #4
 800c7da:	6961      	ldr	r1, [r4, #20]
 800c7dc:	6030      	str	r0, [r6, #0]
 800c7de:	062e      	lsls	r6, r5, #24
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	d501      	bpl.n	800c7e8 <_printf_i+0x1c0>
 800c7e4:	6019      	str	r1, [r3, #0]
 800c7e6:	e002      	b.n	800c7ee <_printf_i+0x1c6>
 800c7e8:	0668      	lsls	r0, r5, #25
 800c7ea:	d5fb      	bpl.n	800c7e4 <_printf_i+0x1bc>
 800c7ec:	8019      	strh	r1, [r3, #0]
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	4616      	mov	r6, r2
 800c7f2:	6123      	str	r3, [r4, #16]
 800c7f4:	e7bc      	b.n	800c770 <_printf_i+0x148>
 800c7f6:	6833      	ldr	r3, [r6, #0]
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	1d1a      	adds	r2, r3, #4
 800c7fc:	6032      	str	r2, [r6, #0]
 800c7fe:	681e      	ldr	r6, [r3, #0]
 800c800:	6862      	ldr	r2, [r4, #4]
 800c802:	4630      	mov	r0, r6
 800c804:	f000 fc1b 	bl	800d03e <memchr>
 800c808:	b108      	cbz	r0, 800c80e <_printf_i+0x1e6>
 800c80a:	1b80      	subs	r0, r0, r6
 800c80c:	6060      	str	r0, [r4, #4]
 800c80e:	6863      	ldr	r3, [r4, #4]
 800c810:	6123      	str	r3, [r4, #16]
 800c812:	2300      	movs	r3, #0
 800c814:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c818:	e7aa      	b.n	800c770 <_printf_i+0x148>
 800c81a:	6923      	ldr	r3, [r4, #16]
 800c81c:	4632      	mov	r2, r6
 800c81e:	4649      	mov	r1, r9
 800c820:	4640      	mov	r0, r8
 800c822:	47d0      	blx	sl
 800c824:	3001      	adds	r0, #1
 800c826:	d0ad      	beq.n	800c784 <_printf_i+0x15c>
 800c828:	6823      	ldr	r3, [r4, #0]
 800c82a:	079b      	lsls	r3, r3, #30
 800c82c:	d413      	bmi.n	800c856 <_printf_i+0x22e>
 800c82e:	68e0      	ldr	r0, [r4, #12]
 800c830:	9b03      	ldr	r3, [sp, #12]
 800c832:	4298      	cmp	r0, r3
 800c834:	bfb8      	it	lt
 800c836:	4618      	movlt	r0, r3
 800c838:	e7a6      	b.n	800c788 <_printf_i+0x160>
 800c83a:	2301      	movs	r3, #1
 800c83c:	4632      	mov	r2, r6
 800c83e:	4649      	mov	r1, r9
 800c840:	4640      	mov	r0, r8
 800c842:	47d0      	blx	sl
 800c844:	3001      	adds	r0, #1
 800c846:	d09d      	beq.n	800c784 <_printf_i+0x15c>
 800c848:	3501      	adds	r5, #1
 800c84a:	68e3      	ldr	r3, [r4, #12]
 800c84c:	9903      	ldr	r1, [sp, #12]
 800c84e:	1a5b      	subs	r3, r3, r1
 800c850:	42ab      	cmp	r3, r5
 800c852:	dcf2      	bgt.n	800c83a <_printf_i+0x212>
 800c854:	e7eb      	b.n	800c82e <_printf_i+0x206>
 800c856:	2500      	movs	r5, #0
 800c858:	f104 0619 	add.w	r6, r4, #25
 800c85c:	e7f5      	b.n	800c84a <_printf_i+0x222>
 800c85e:	bf00      	nop
 800c860:	080108da 	.word	0x080108da
 800c864:	080108eb 	.word	0x080108eb

0800c868 <_scanf_float>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	b087      	sub	sp, #28
 800c86e:	4617      	mov	r7, r2
 800c870:	4680      	mov	r8, r0
 800c872:	460c      	mov	r4, r1
 800c874:	9303      	str	r3, [sp, #12]
 800c876:	688b      	ldr	r3, [r1, #8]
 800c878:	1e5a      	subs	r2, r3, #1
 800c87a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c87e:	460a      	mov	r2, r1
 800c880:	bf89      	itett	hi
 800c882:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c886:	f04f 0b00 	movls.w	fp, #0
 800c88a:	eb03 0b05 	addhi.w	fp, r3, r5
 800c88e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c892:	f04f 0500 	mov.w	r5, #0
 800c896:	bf88      	it	hi
 800c898:	608b      	strhi	r3, [r1, #8]
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	46aa      	mov	sl, r5
 800c89e:	46a9      	mov	r9, r5
 800c8a0:	9502      	str	r5, [sp, #8]
 800c8a2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c8a6:	f842 3b1c 	str.w	r3, [r2], #28
 800c8aa:	4616      	mov	r6, r2
 800c8ac:	9201      	str	r2, [sp, #4]
 800c8ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8b2:	68a2      	ldr	r2, [r4, #8]
 800c8b4:	b152      	cbz	r2, 800c8cc <_scanf_float+0x64>
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b4e      	cmp	r3, #78	@ 0x4e
 800c8bc:	d864      	bhi.n	800c988 <_scanf_float+0x120>
 800c8be:	2b40      	cmp	r3, #64	@ 0x40
 800c8c0:	d83c      	bhi.n	800c93c <_scanf_float+0xd4>
 800c8c2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c8c6:	b2c8      	uxtb	r0, r1
 800c8c8:	280e      	cmp	r0, #14
 800c8ca:	d93a      	bls.n	800c942 <_scanf_float+0xda>
 800c8cc:	f1b9 0f00 	cmp.w	r9, #0
 800c8d0:	d003      	beq.n	800c8da <_scanf_float+0x72>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8de:	f1ba 0f01 	cmp.w	sl, #1
 800c8e2:	f200 8117 	bhi.w	800cb14 <_scanf_float+0x2ac>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	f200 8108 	bhi.w	800cafe <_scanf_float+0x296>
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	b007      	add	sp, #28
 800c8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c8fa:	2a0d      	cmp	r2, #13
 800c8fc:	d8e6      	bhi.n	800c8cc <_scanf_float+0x64>
 800c8fe:	a101      	add	r1, pc, #4	@ (adr r1, 800c904 <_scanf_float+0x9c>)
 800c900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c904:	0800ca4b 	.word	0x0800ca4b
 800c908:	0800c8cd 	.word	0x0800c8cd
 800c90c:	0800c8cd 	.word	0x0800c8cd
 800c910:	0800c8cd 	.word	0x0800c8cd
 800c914:	0800caab 	.word	0x0800caab
 800c918:	0800ca83 	.word	0x0800ca83
 800c91c:	0800c8cd 	.word	0x0800c8cd
 800c920:	0800c8cd 	.word	0x0800c8cd
 800c924:	0800ca59 	.word	0x0800ca59
 800c928:	0800c8cd 	.word	0x0800c8cd
 800c92c:	0800c8cd 	.word	0x0800c8cd
 800c930:	0800c8cd 	.word	0x0800c8cd
 800c934:	0800c8cd 	.word	0x0800c8cd
 800c938:	0800ca11 	.word	0x0800ca11
 800c93c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c940:	e7db      	b.n	800c8fa <_scanf_float+0x92>
 800c942:	290e      	cmp	r1, #14
 800c944:	d8c2      	bhi.n	800c8cc <_scanf_float+0x64>
 800c946:	a001      	add	r0, pc, #4	@ (adr r0, 800c94c <_scanf_float+0xe4>)
 800c948:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c94c:	0800ca01 	.word	0x0800ca01
 800c950:	0800c8cd 	.word	0x0800c8cd
 800c954:	0800ca01 	.word	0x0800ca01
 800c958:	0800ca97 	.word	0x0800ca97
 800c95c:	0800c8cd 	.word	0x0800c8cd
 800c960:	0800c9a9 	.word	0x0800c9a9
 800c964:	0800c9e7 	.word	0x0800c9e7
 800c968:	0800c9e7 	.word	0x0800c9e7
 800c96c:	0800c9e7 	.word	0x0800c9e7
 800c970:	0800c9e7 	.word	0x0800c9e7
 800c974:	0800c9e7 	.word	0x0800c9e7
 800c978:	0800c9e7 	.word	0x0800c9e7
 800c97c:	0800c9e7 	.word	0x0800c9e7
 800c980:	0800c9e7 	.word	0x0800c9e7
 800c984:	0800c9e7 	.word	0x0800c9e7
 800c988:	2b6e      	cmp	r3, #110	@ 0x6e
 800c98a:	d809      	bhi.n	800c9a0 <_scanf_float+0x138>
 800c98c:	2b60      	cmp	r3, #96	@ 0x60
 800c98e:	d8b2      	bhi.n	800c8f6 <_scanf_float+0x8e>
 800c990:	2b54      	cmp	r3, #84	@ 0x54
 800c992:	d07b      	beq.n	800ca8c <_scanf_float+0x224>
 800c994:	2b59      	cmp	r3, #89	@ 0x59
 800c996:	d199      	bne.n	800c8cc <_scanf_float+0x64>
 800c998:	2d07      	cmp	r5, #7
 800c99a:	d197      	bne.n	800c8cc <_scanf_float+0x64>
 800c99c:	2508      	movs	r5, #8
 800c99e:	e02c      	b.n	800c9fa <_scanf_float+0x192>
 800c9a0:	2b74      	cmp	r3, #116	@ 0x74
 800c9a2:	d073      	beq.n	800ca8c <_scanf_float+0x224>
 800c9a4:	2b79      	cmp	r3, #121	@ 0x79
 800c9a6:	e7f6      	b.n	800c996 <_scanf_float+0x12e>
 800c9a8:	6821      	ldr	r1, [r4, #0]
 800c9aa:	05c8      	lsls	r0, r1, #23
 800c9ac:	d51b      	bpl.n	800c9e6 <_scanf_float+0x17e>
 800c9ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c9b2:	f109 0901 	add.w	r9, r9, #1
 800c9b6:	6021      	str	r1, [r4, #0]
 800c9b8:	f1bb 0f00 	cmp.w	fp, #0
 800c9bc:	d003      	beq.n	800c9c6 <_scanf_float+0x15e>
 800c9be:	3201      	adds	r2, #1
 800c9c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9c4:	60a2      	str	r2, [r4, #8]
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	6123      	str	r3, [r4, #16]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	f340 8087 	ble.w	800caec <_scanf_float+0x284>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	603b      	str	r3, [r7, #0]
 800c9e4:	e765      	b.n	800c8b2 <_scanf_float+0x4a>
 800c9e6:	eb1a 0105 	adds.w	r1, sl, r5
 800c9ea:	f47f af6f 	bne.w	800c8cc <_scanf_float+0x64>
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	460d      	mov	r5, r1
 800c9f2:	468a      	mov	sl, r1
 800c9f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c9f8:	6022      	str	r2, [r4, #0]
 800c9fa:	f806 3b01 	strb.w	r3, [r6], #1
 800c9fe:	e7e2      	b.n	800c9c6 <_scanf_float+0x15e>
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	0610      	lsls	r0, r2, #24
 800ca04:	f57f af62 	bpl.w	800c8cc <_scanf_float+0x64>
 800ca08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca0c:	6022      	str	r2, [r4, #0]
 800ca0e:	e7f4      	b.n	800c9fa <_scanf_float+0x192>
 800ca10:	f1ba 0f00 	cmp.w	sl, #0
 800ca14:	d10e      	bne.n	800ca34 <_scanf_float+0x1cc>
 800ca16:	f1b9 0f00 	cmp.w	r9, #0
 800ca1a:	d10e      	bne.n	800ca3a <_scanf_float+0x1d2>
 800ca1c:	6822      	ldr	r2, [r4, #0]
 800ca1e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca22:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca26:	d108      	bne.n	800ca3a <_scanf_float+0x1d2>
 800ca28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca2c:	f04f 0a01 	mov.w	sl, #1
 800ca30:	6022      	str	r2, [r4, #0]
 800ca32:	e7e2      	b.n	800c9fa <_scanf_float+0x192>
 800ca34:	f1ba 0f02 	cmp.w	sl, #2
 800ca38:	d055      	beq.n	800cae6 <_scanf_float+0x27e>
 800ca3a:	2d01      	cmp	r5, #1
 800ca3c:	d002      	beq.n	800ca44 <_scanf_float+0x1dc>
 800ca3e:	2d04      	cmp	r5, #4
 800ca40:	f47f af44 	bne.w	800c8cc <_scanf_float+0x64>
 800ca44:	3501      	adds	r5, #1
 800ca46:	b2ed      	uxtb	r5, r5
 800ca48:	e7d7      	b.n	800c9fa <_scanf_float+0x192>
 800ca4a:	f1ba 0f01 	cmp.w	sl, #1
 800ca4e:	f47f af3d 	bne.w	800c8cc <_scanf_float+0x64>
 800ca52:	f04f 0a02 	mov.w	sl, #2
 800ca56:	e7d0      	b.n	800c9fa <_scanf_float+0x192>
 800ca58:	b97d      	cbnz	r5, 800ca7a <_scanf_float+0x212>
 800ca5a:	f1b9 0f00 	cmp.w	r9, #0
 800ca5e:	f47f af38 	bne.w	800c8d2 <_scanf_float+0x6a>
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca6c:	f040 8107 	bne.w	800cc7e <_scanf_float+0x416>
 800ca70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca74:	2501      	movs	r5, #1
 800ca76:	6022      	str	r2, [r4, #0]
 800ca78:	e7bf      	b.n	800c9fa <_scanf_float+0x192>
 800ca7a:	2d03      	cmp	r5, #3
 800ca7c:	d0e2      	beq.n	800ca44 <_scanf_float+0x1dc>
 800ca7e:	2d05      	cmp	r5, #5
 800ca80:	e7de      	b.n	800ca40 <_scanf_float+0x1d8>
 800ca82:	2d02      	cmp	r5, #2
 800ca84:	f47f af22 	bne.w	800c8cc <_scanf_float+0x64>
 800ca88:	2503      	movs	r5, #3
 800ca8a:	e7b6      	b.n	800c9fa <_scanf_float+0x192>
 800ca8c:	2d06      	cmp	r5, #6
 800ca8e:	f47f af1d 	bne.w	800c8cc <_scanf_float+0x64>
 800ca92:	2507      	movs	r5, #7
 800ca94:	e7b1      	b.n	800c9fa <_scanf_float+0x192>
 800ca96:	6822      	ldr	r2, [r4, #0]
 800ca98:	0591      	lsls	r1, r2, #22
 800ca9a:	f57f af17 	bpl.w	800c8cc <_scanf_float+0x64>
 800ca9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800caa2:	f8cd 9008 	str.w	r9, [sp, #8]
 800caa6:	6022      	str	r2, [r4, #0]
 800caa8:	e7a7      	b.n	800c9fa <_scanf_float+0x192>
 800caaa:	6822      	ldr	r2, [r4, #0]
 800caac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cab0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cab4:	d006      	beq.n	800cac4 <_scanf_float+0x25c>
 800cab6:	0550      	lsls	r0, r2, #21
 800cab8:	f57f af08 	bpl.w	800c8cc <_scanf_float+0x64>
 800cabc:	f1b9 0f00 	cmp.w	r9, #0
 800cac0:	f000 80dd 	beq.w	800cc7e <_scanf_float+0x416>
 800cac4:	0591      	lsls	r1, r2, #22
 800cac6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800caca:	bf58      	it	pl
 800cacc:	9902      	ldrpl	r1, [sp, #8]
 800cace:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cad2:	bf58      	it	pl
 800cad4:	eba9 0101 	subpl.w	r1, r9, r1
 800cad8:	6022      	str	r2, [r4, #0]
 800cada:	f04f 0900 	mov.w	r9, #0
 800cade:	bf58      	it	pl
 800cae0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cae4:	e789      	b.n	800c9fa <_scanf_float+0x192>
 800cae6:	f04f 0a03 	mov.w	sl, #3
 800caea:	e786      	b.n	800c9fa <_scanf_float+0x192>
 800caec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800caf0:	4639      	mov	r1, r7
 800caf2:	4640      	mov	r0, r8
 800caf4:	4798      	blx	r3
 800caf6:	2800      	cmp	r0, #0
 800caf8:	f43f aedb 	beq.w	800c8b2 <_scanf_float+0x4a>
 800cafc:	e6e6      	b.n	800c8cc <_scanf_float+0x64>
 800cafe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb02:	463a      	mov	r2, r7
 800cb04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4798      	blx	r3
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	6123      	str	r3, [r4, #16]
 800cb12:	e6e8      	b.n	800c8e6 <_scanf_float+0x7e>
 800cb14:	1e6b      	subs	r3, r5, #1
 800cb16:	2b06      	cmp	r3, #6
 800cb18:	d824      	bhi.n	800cb64 <_scanf_float+0x2fc>
 800cb1a:	2d02      	cmp	r5, #2
 800cb1c:	d836      	bhi.n	800cb8c <_scanf_float+0x324>
 800cb1e:	9b01      	ldr	r3, [sp, #4]
 800cb20:	429e      	cmp	r6, r3
 800cb22:	f67f aee4 	bls.w	800c8ee <_scanf_float+0x86>
 800cb26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb30:	4640      	mov	r0, r8
 800cb32:	4798      	blx	r3
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	6123      	str	r3, [r4, #16]
 800cb3a:	e7f0      	b.n	800cb1e <_scanf_float+0x2b6>
 800cb3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb40:	463a      	mov	r2, r7
 800cb42:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb46:	4640      	mov	r0, r8
 800cb48:	4798      	blx	r3
 800cb4a:	6923      	ldr	r3, [r4, #16]
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	6123      	str	r3, [r4, #16]
 800cb50:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb54:	fa5f fa8a 	uxtb.w	sl, sl
 800cb58:	f1ba 0f02 	cmp.w	sl, #2
 800cb5c:	d1ee      	bne.n	800cb3c <_scanf_float+0x2d4>
 800cb5e:	3d03      	subs	r5, #3
 800cb60:	b2ed      	uxtb	r5, r5
 800cb62:	1b76      	subs	r6, r6, r5
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	05da      	lsls	r2, r3, #23
 800cb68:	d52f      	bpl.n	800cbca <_scanf_float+0x362>
 800cb6a:	055b      	lsls	r3, r3, #21
 800cb6c:	d511      	bpl.n	800cb92 <_scanf_float+0x32a>
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	429e      	cmp	r6, r3
 800cb72:	f67f aebc 	bls.w	800c8ee <_scanf_float+0x86>
 800cb76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb7a:	463a      	mov	r2, r7
 800cb7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb80:	4640      	mov	r0, r8
 800cb82:	4798      	blx	r3
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	e7f0      	b.n	800cb6e <_scanf_float+0x306>
 800cb8c:	46aa      	mov	sl, r5
 800cb8e:	46b3      	mov	fp, r6
 800cb90:	e7de      	b.n	800cb50 <_scanf_float+0x2e8>
 800cb92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cb96:	1e75      	subs	r5, r6, #1
 800cb98:	6923      	ldr	r3, [r4, #16]
 800cb9a:	2965      	cmp	r1, #101	@ 0x65
 800cb9c:	f103 33ff 	add.w	r3, r3, #4294967295
 800cba0:	6123      	str	r3, [r4, #16]
 800cba2:	d00c      	beq.n	800cbbe <_scanf_float+0x356>
 800cba4:	2945      	cmp	r1, #69	@ 0x45
 800cba6:	d00a      	beq.n	800cbbe <_scanf_float+0x356>
 800cba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbac:	463a      	mov	r2, r7
 800cbae:	4640      	mov	r0, r8
 800cbb0:	1eb5      	subs	r5, r6, #2
 800cbb2:	4798      	blx	r3
 800cbb4:	6923      	ldr	r3, [r4, #16]
 800cbb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	6123      	str	r3, [r4, #16]
 800cbbe:	462e      	mov	r6, r5
 800cbc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbc4:	463a      	mov	r2, r7
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4798      	blx	r3
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	f012 0210 	ands.w	r2, r2, #16
 800cbd0:	d001      	beq.n	800cbd6 <_scanf_float+0x36e>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	e68c      	b.n	800c8f0 <_scanf_float+0x88>
 800cbd6:	7032      	strb	r2, [r6, #0]
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cbde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbe2:	d11c      	bne.n	800cc1e <_scanf_float+0x3b6>
 800cbe4:	9b02      	ldr	r3, [sp, #8]
 800cbe6:	454b      	cmp	r3, r9
 800cbe8:	eba3 0209 	sub.w	r2, r3, r9
 800cbec:	d123      	bne.n	800cc36 <_scanf_float+0x3ce>
 800cbee:	2200      	movs	r2, #0
 800cbf0:	9901      	ldr	r1, [sp, #4]
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	f002 fc4c 	bl	800f490 <_strtod_r>
 800cbf8:	6821      	ldr	r1, [r4, #0]
 800cbfa:	9b03      	ldr	r3, [sp, #12]
 800cbfc:	f011 0f02 	tst.w	r1, #2
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	ec57 6b10 	vmov	r6, r7, d0
 800cc06:	f103 0204 	add.w	r2, r3, #4
 800cc0a:	d01f      	beq.n	800cc4c <_scanf_float+0x3e4>
 800cc0c:	9903      	ldr	r1, [sp, #12]
 800cc0e:	600a      	str	r2, [r1, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	e9c3 6700 	strd	r6, r7, [r3]
 800cc16:	68e3      	ldr	r3, [r4, #12]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	60e3      	str	r3, [r4, #12]
 800cc1c:	e7d9      	b.n	800cbd2 <_scanf_float+0x36a>
 800cc1e:	9b04      	ldr	r3, [sp, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0e4      	beq.n	800cbee <_scanf_float+0x386>
 800cc24:	9905      	ldr	r1, [sp, #20]
 800cc26:	230a      	movs	r3, #10
 800cc28:	4640      	mov	r0, r8
 800cc2a:	3101      	adds	r1, #1
 800cc2c:	f002 fcb0 	bl	800f590 <_strtol_r>
 800cc30:	9b04      	ldr	r3, [sp, #16]
 800cc32:	9e05      	ldr	r6, [sp, #20]
 800cc34:	1ac2      	subs	r2, r0, r3
 800cc36:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc3a:	4912      	ldr	r1, [pc, #72]	@ (800cc84 <_scanf_float+0x41c>)
 800cc3c:	429e      	cmp	r6, r3
 800cc3e:	bf28      	it	cs
 800cc40:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc44:	4630      	mov	r0, r6
 800cc46:	f000 f917 	bl	800ce78 <siprintf>
 800cc4a:	e7d0      	b.n	800cbee <_scanf_float+0x386>
 800cc4c:	f011 0f04 	tst.w	r1, #4
 800cc50:	9903      	ldr	r1, [sp, #12]
 800cc52:	600a      	str	r2, [r1, #0]
 800cc54:	d1dc      	bne.n	800cc10 <_scanf_float+0x3a8>
 800cc56:	681d      	ldr	r5, [r3, #0]
 800cc58:	4632      	mov	r2, r6
 800cc5a:	463b      	mov	r3, r7
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	4639      	mov	r1, r7
 800cc60:	f7f4 f896 	bl	8000d90 <__aeabi_dcmpun>
 800cc64:	b128      	cbz	r0, 800cc72 <_scanf_float+0x40a>
 800cc66:	4808      	ldr	r0, [pc, #32]	@ (800cc88 <_scanf_float+0x420>)
 800cc68:	f000 f9f8 	bl	800d05c <nanf>
 800cc6c:	ed85 0a00 	vstr	s0, [r5]
 800cc70:	e7d1      	b.n	800cc16 <_scanf_float+0x3ae>
 800cc72:	4630      	mov	r0, r6
 800cc74:	4639      	mov	r1, r7
 800cc76:	f7f4 f8e9 	bl	8000e4c <__aeabi_d2f>
 800cc7a:	6028      	str	r0, [r5, #0]
 800cc7c:	e7cb      	b.n	800cc16 <_scanf_float+0x3ae>
 800cc7e:	f04f 0900 	mov.w	r9, #0
 800cc82:	e62a      	b.n	800c8da <_scanf_float+0x72>
 800cc84:	080108fc 	.word	0x080108fc
 800cc88:	08010c95 	.word	0x08010c95

0800cc8c <std>:
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	b510      	push	{r4, lr}
 800cc90:	4604      	mov	r4, r0
 800cc92:	6083      	str	r3, [r0, #8]
 800cc94:	8181      	strh	r1, [r0, #12]
 800cc96:	4619      	mov	r1, r3
 800cc98:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc9a:	81c2      	strh	r2, [r0, #14]
 800cc9c:	2208      	movs	r2, #8
 800cc9e:	6183      	str	r3, [r0, #24]
 800cca0:	e9c0 3300 	strd	r3, r3, [r0]
 800cca4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cca8:	305c      	adds	r0, #92	@ 0x5c
 800ccaa:	f000 f948 	bl	800cf3e <memset>
 800ccae:	4b0d      	ldr	r3, [pc, #52]	@ (800cce4 <std+0x58>)
 800ccb0:	6224      	str	r4, [r4, #32]
 800ccb2:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccb4:	4b0c      	ldr	r3, [pc, #48]	@ (800cce8 <std+0x5c>)
 800ccb6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccb8:	4b0c      	ldr	r3, [pc, #48]	@ (800ccec <std+0x60>)
 800ccba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccbc:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <std+0x64>)
 800ccbe:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccc0:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf4 <std+0x68>)
 800ccc2:	429c      	cmp	r4, r3
 800ccc4:	d006      	beq.n	800ccd4 <std+0x48>
 800ccc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccca:	4294      	cmp	r4, r2
 800cccc:	d002      	beq.n	800ccd4 <std+0x48>
 800ccce:	33d0      	adds	r3, #208	@ 0xd0
 800ccd0:	429c      	cmp	r4, r3
 800ccd2:	d105      	bne.n	800cce0 <std+0x54>
 800ccd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccdc:	f000 b9ac 	b.w	800d038 <__retarget_lock_init_recursive>
 800cce0:	bd10      	pop	{r4, pc}
 800cce2:	bf00      	nop
 800cce4:	0800ceb9 	.word	0x0800ceb9
 800cce8:	0800cedb 	.word	0x0800cedb
 800ccec:	0800cf13 	.word	0x0800cf13
 800ccf0:	0800cf37 	.word	0x0800cf37
 800ccf4:	20002298 	.word	0x20002298

0800ccf8 <stdio_exit_handler>:
 800ccf8:	4a02      	ldr	r2, [pc, #8]	@ (800cd04 <stdio_exit_handler+0xc>)
 800ccfa:	4903      	ldr	r1, [pc, #12]	@ (800cd08 <stdio_exit_handler+0x10>)
 800ccfc:	4803      	ldr	r0, [pc, #12]	@ (800cd0c <stdio_exit_handler+0x14>)
 800ccfe:	f000 b869 	b.w	800cdd4 <_fwalk_sglue>
 800cd02:	bf00      	nop
 800cd04:	20000010 	.word	0x20000010
 800cd08:	0800f94d 	.word	0x0800f94d
 800cd0c:	20000020 	.word	0x20000020

0800cd10 <cleanup_stdio>:
 800cd10:	6841      	ldr	r1, [r0, #4]
 800cd12:	4b0c      	ldr	r3, [pc, #48]	@ (800cd44 <cleanup_stdio+0x34>)
 800cd14:	4299      	cmp	r1, r3
 800cd16:	b510      	push	{r4, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	d001      	beq.n	800cd20 <cleanup_stdio+0x10>
 800cd1c:	f002 fe16 	bl	800f94c <_fflush_r>
 800cd20:	68a1      	ldr	r1, [r4, #8]
 800cd22:	4b09      	ldr	r3, [pc, #36]	@ (800cd48 <cleanup_stdio+0x38>)
 800cd24:	4299      	cmp	r1, r3
 800cd26:	d002      	beq.n	800cd2e <cleanup_stdio+0x1e>
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f002 fe0f 	bl	800f94c <_fflush_r>
 800cd2e:	68e1      	ldr	r1, [r4, #12]
 800cd30:	4b06      	ldr	r3, [pc, #24]	@ (800cd4c <cleanup_stdio+0x3c>)
 800cd32:	4299      	cmp	r1, r3
 800cd34:	d004      	beq.n	800cd40 <cleanup_stdio+0x30>
 800cd36:	4620      	mov	r0, r4
 800cd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd3c:	f002 be06 	b.w	800f94c <_fflush_r>
 800cd40:	bd10      	pop	{r4, pc}
 800cd42:	bf00      	nop
 800cd44:	20002298 	.word	0x20002298
 800cd48:	20002300 	.word	0x20002300
 800cd4c:	20002368 	.word	0x20002368

0800cd50 <global_stdio_init.part.0>:
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4b0b      	ldr	r3, [pc, #44]	@ (800cd80 <global_stdio_init.part.0+0x30>)
 800cd54:	2104      	movs	r1, #4
 800cd56:	4c0b      	ldr	r4, [pc, #44]	@ (800cd84 <global_stdio_init.part.0+0x34>)
 800cd58:	4a0b      	ldr	r2, [pc, #44]	@ (800cd88 <global_stdio_init.part.0+0x38>)
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	601a      	str	r2, [r3, #0]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f7ff ff94 	bl	800cc8c <std>
 800cd64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd68:	2201      	movs	r2, #1
 800cd6a:	2109      	movs	r1, #9
 800cd6c:	f7ff ff8e 	bl	800cc8c <std>
 800cd70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd74:	2202      	movs	r2, #2
 800cd76:	2112      	movs	r1, #18
 800cd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7c:	f7ff bf86 	b.w	800cc8c <std>
 800cd80:	200023d0 	.word	0x200023d0
 800cd84:	20002298 	.word	0x20002298
 800cd88:	0800ccf9 	.word	0x0800ccf9

0800cd8c <__sfp_lock_acquire>:
 800cd8c:	4801      	ldr	r0, [pc, #4]	@ (800cd94 <__sfp_lock_acquire+0x8>)
 800cd8e:	f000 b954 	b.w	800d03a <__retarget_lock_acquire_recursive>
 800cd92:	bf00      	nop
 800cd94:	200023d9 	.word	0x200023d9

0800cd98 <__sfp_lock_release>:
 800cd98:	4801      	ldr	r0, [pc, #4]	@ (800cda0 <__sfp_lock_release+0x8>)
 800cd9a:	f000 b94f 	b.w	800d03c <__retarget_lock_release_recursive>
 800cd9e:	bf00      	nop
 800cda0:	200023d9 	.word	0x200023d9

0800cda4 <__sinit>:
 800cda4:	b510      	push	{r4, lr}
 800cda6:	4604      	mov	r4, r0
 800cda8:	f7ff fff0 	bl	800cd8c <__sfp_lock_acquire>
 800cdac:	6a23      	ldr	r3, [r4, #32]
 800cdae:	b11b      	cbz	r3, 800cdb8 <__sinit+0x14>
 800cdb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb4:	f7ff bff0 	b.w	800cd98 <__sfp_lock_release>
 800cdb8:	4b04      	ldr	r3, [pc, #16]	@ (800cdcc <__sinit+0x28>)
 800cdba:	6223      	str	r3, [r4, #32]
 800cdbc:	4b04      	ldr	r3, [pc, #16]	@ (800cdd0 <__sinit+0x2c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1f5      	bne.n	800cdb0 <__sinit+0xc>
 800cdc4:	f7ff ffc4 	bl	800cd50 <global_stdio_init.part.0>
 800cdc8:	e7f2      	b.n	800cdb0 <__sinit+0xc>
 800cdca:	bf00      	nop
 800cdcc:	0800cd11 	.word	0x0800cd11
 800cdd0:	200023d0 	.word	0x200023d0

0800cdd4 <_fwalk_sglue>:
 800cdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	4607      	mov	r7, r0
 800cdda:	4688      	mov	r8, r1
 800cddc:	4614      	mov	r4, r2
 800cdde:	2600      	movs	r6, #0
 800cde0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cde4:	f1b9 0901 	subs.w	r9, r9, #1
 800cde8:	d505      	bpl.n	800cdf6 <_fwalk_sglue+0x22>
 800cdea:	6824      	ldr	r4, [r4, #0]
 800cdec:	2c00      	cmp	r4, #0
 800cdee:	d1f7      	bne.n	800cde0 <_fwalk_sglue+0xc>
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf6:	89ab      	ldrh	r3, [r5, #12]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d907      	bls.n	800ce0c <_fwalk_sglue+0x38>
 800cdfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce00:	3301      	adds	r3, #1
 800ce02:	d003      	beq.n	800ce0c <_fwalk_sglue+0x38>
 800ce04:	4629      	mov	r1, r5
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c0      	blx	r8
 800ce0a:	4306      	orrs	r6, r0
 800ce0c:	3568      	adds	r5, #104	@ 0x68
 800ce0e:	e7e9      	b.n	800cde4 <_fwalk_sglue+0x10>

0800ce10 <sniprintf>:
 800ce10:	b40c      	push	{r2, r3}
 800ce12:	4b18      	ldr	r3, [pc, #96]	@ (800ce74 <sniprintf+0x64>)
 800ce14:	b530      	push	{r4, r5, lr}
 800ce16:	1e0c      	subs	r4, r1, #0
 800ce18:	b09d      	sub	sp, #116	@ 0x74
 800ce1a:	681d      	ldr	r5, [r3, #0]
 800ce1c:	da08      	bge.n	800ce30 <sniprintf+0x20>
 800ce1e:	238b      	movs	r3, #139	@ 0x8b
 800ce20:	f04f 30ff 	mov.w	r0, #4294967295
 800ce24:	602b      	str	r3, [r5, #0]
 800ce26:	b01d      	add	sp, #116	@ 0x74
 800ce28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce2c:	b002      	add	sp, #8
 800ce2e:	4770      	bx	lr
 800ce30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce34:	9002      	str	r0, [sp, #8]
 800ce36:	9006      	str	r0, [sp, #24]
 800ce38:	a902      	add	r1, sp, #8
 800ce3a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce3e:	bf14      	ite	ne
 800ce40:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce44:	4623      	moveq	r3, r4
 800ce46:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ce48:	4628      	mov	r0, r5
 800ce4a:	9304      	str	r3, [sp, #16]
 800ce4c:	9307      	str	r3, [sp, #28]
 800ce4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce52:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce56:	ab21      	add	r3, sp, #132	@ 0x84
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	f002 fbf7 	bl	800f64c <_svfiprintf_r>
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	bfbc      	itt	lt
 800ce62:	238b      	movlt	r3, #139	@ 0x8b
 800ce64:	602b      	strlt	r3, [r5, #0]
 800ce66:	2c00      	cmp	r4, #0
 800ce68:	d0dd      	beq.n	800ce26 <sniprintf+0x16>
 800ce6a:	9b02      	ldr	r3, [sp, #8]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	701a      	strb	r2, [r3, #0]
 800ce70:	e7d9      	b.n	800ce26 <sniprintf+0x16>
 800ce72:	bf00      	nop
 800ce74:	2000001c 	.word	0x2000001c

0800ce78 <siprintf>:
 800ce78:	b40e      	push	{r1, r2, r3}
 800ce7a:	b500      	push	{lr}
 800ce7c:	b09c      	sub	sp, #112	@ 0x70
 800ce7e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce82:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce84:	9002      	str	r0, [sp, #8]
 800ce86:	9006      	str	r0, [sp, #24]
 800ce88:	9107      	str	r1, [sp, #28]
 800ce8a:	9104      	str	r1, [sp, #16]
 800ce8c:	4808      	ldr	r0, [pc, #32]	@ (800ceb0 <siprintf+0x38>)
 800ce8e:	4909      	ldr	r1, [pc, #36]	@ (800ceb4 <siprintf+0x3c>)
 800ce90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce94:	9105      	str	r1, [sp, #20]
 800ce96:	a902      	add	r1, sp, #8
 800ce98:	6800      	ldr	r0, [r0, #0]
 800ce9a:	9301      	str	r3, [sp, #4]
 800ce9c:	f002 fbd6 	bl	800f64c <_svfiprintf_r>
 800cea0:	9b02      	ldr	r3, [sp, #8]
 800cea2:	2200      	movs	r2, #0
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	b01c      	add	sp, #112	@ 0x70
 800cea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ceac:	b003      	add	sp, #12
 800ceae:	4770      	bx	lr
 800ceb0:	2000001c 	.word	0x2000001c
 800ceb4:	ffff0208 	.word	0xffff0208

0800ceb8 <__sread>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	460c      	mov	r4, r1
 800cebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec0:	f000 f86c 	bl	800cf9c <_read_r>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	bfab      	itete	ge
 800cec8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ceca:	89a3      	ldrhlt	r3, [r4, #12]
 800cecc:	181b      	addge	r3, r3, r0
 800cece:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ced2:	bfac      	ite	ge
 800ced4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ced6:	81a3      	strhlt	r3, [r4, #12]
 800ced8:	bd10      	pop	{r4, pc}

0800ceda <__swrite>:
 800ceda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cede:	461f      	mov	r7, r3
 800cee0:	898b      	ldrh	r3, [r1, #12]
 800cee2:	4605      	mov	r5, r0
 800cee4:	460c      	mov	r4, r1
 800cee6:	05db      	lsls	r3, r3, #23
 800cee8:	4616      	mov	r6, r2
 800ceea:	d505      	bpl.n	800cef8 <__swrite+0x1e>
 800ceec:	2302      	movs	r3, #2
 800ceee:	2200      	movs	r2, #0
 800cef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef4:	f000 f840 	bl	800cf78 <_lseek_r>
 800cef8:	89a3      	ldrh	r3, [r4, #12]
 800cefa:	4632      	mov	r2, r6
 800cefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf00:	4628      	mov	r0, r5
 800cf02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	463b      	mov	r3, r7
 800cf0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0e:	f000 b857 	b.w	800cfc0 <_write_r>

0800cf12 <__sseek>:
 800cf12:	b510      	push	{r4, lr}
 800cf14:	460c      	mov	r4, r1
 800cf16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1a:	f000 f82d 	bl	800cf78 <_lseek_r>
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	89a3      	ldrh	r3, [r4, #12]
 800cf22:	bf15      	itete	ne
 800cf24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf2e:	81a3      	strheq	r3, [r4, #12]
 800cf30:	bf18      	it	ne
 800cf32:	81a3      	strhne	r3, [r4, #12]
 800cf34:	bd10      	pop	{r4, pc}

0800cf36 <__sclose>:
 800cf36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3a:	f000 b80d 	b.w	800cf58 <_close_r>

0800cf3e <memset>:
 800cf3e:	4402      	add	r2, r0
 800cf40:	4603      	mov	r3, r0
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d100      	bne.n	800cf48 <memset+0xa>
 800cf46:	4770      	bx	lr
 800cf48:	f803 1b01 	strb.w	r1, [r3], #1
 800cf4c:	e7f9      	b.n	800cf42 <memset+0x4>
	...

0800cf50 <_localeconv_r>:
 800cf50:	4800      	ldr	r0, [pc, #0]	@ (800cf54 <_localeconv_r+0x4>)
 800cf52:	4770      	bx	lr
 800cf54:	2000015c 	.word	0x2000015c

0800cf58 <_close_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	4d05      	ldr	r5, [pc, #20]	@ (800cf74 <_close_r+0x1c>)
 800cf5e:	4604      	mov	r4, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	f7f5 fcbc 	bl	80028e0 <_close>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_close_r+0x1a>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_close_r+0x1a>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	200023d4 	.word	0x200023d4

0800cf78 <_lseek_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	4d06      	ldr	r5, [pc, #24]	@ (800cf98 <_lseek_r+0x20>)
 800cf7e:	4608      	mov	r0, r1
 800cf80:	4611      	mov	r1, r2
 800cf82:	2200      	movs	r2, #0
 800cf84:	602a      	str	r2, [r5, #0]
 800cf86:	461a      	mov	r2, r3
 800cf88:	f7f5 fcd1 	bl	800292e <_lseek>
 800cf8c:	1c43      	adds	r3, r0, #1
 800cf8e:	d102      	bne.n	800cf96 <_lseek_r+0x1e>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	b103      	cbz	r3, 800cf96 <_lseek_r+0x1e>
 800cf94:	6023      	str	r3, [r4, #0]
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	200023d4 	.word	0x200023d4

0800cf9c <_read_r>:
 800cf9c:	b538      	push	{r3, r4, r5, lr}
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4d06      	ldr	r5, [pc, #24]	@ (800cfbc <_read_r+0x20>)
 800cfa2:	4608      	mov	r0, r1
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	602a      	str	r2, [r5, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	f7f5 fc5f 	bl	800286e <_read>
 800cfb0:	1c43      	adds	r3, r0, #1
 800cfb2:	d102      	bne.n	800cfba <_read_r+0x1e>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	b103      	cbz	r3, 800cfba <_read_r+0x1e>
 800cfb8:	6023      	str	r3, [r4, #0]
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
 800cfbc:	200023d4 	.word	0x200023d4

0800cfc0 <_write_r>:
 800cfc0:	b538      	push	{r3, r4, r5, lr}
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4d06      	ldr	r5, [pc, #24]	@ (800cfe0 <_write_r+0x20>)
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4611      	mov	r1, r2
 800cfca:	2200      	movs	r2, #0
 800cfcc:	602a      	str	r2, [r5, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f7f5 fc6a 	bl	80028a8 <_write>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_write_r+0x1e>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_write_r+0x1e>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200023d4 	.word	0x200023d4

0800cfe4 <__errno>:
 800cfe4:	4b01      	ldr	r3, [pc, #4]	@ (800cfec <__errno+0x8>)
 800cfe6:	6818      	ldr	r0, [r3, #0]
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	2000001c 	.word	0x2000001c

0800cff0 <__libc_init_array>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	4d0d      	ldr	r5, [pc, #52]	@ (800d028 <__libc_init_array+0x38>)
 800cff4:	2600      	movs	r6, #0
 800cff6:	4c0d      	ldr	r4, [pc, #52]	@ (800d02c <__libc_init_array+0x3c>)
 800cff8:	1b64      	subs	r4, r4, r5
 800cffa:	10a4      	asrs	r4, r4, #2
 800cffc:	42a6      	cmp	r6, r4
 800cffe:	d109      	bne.n	800d014 <__libc_init_array+0x24>
 800d000:	4d0b      	ldr	r5, [pc, #44]	@ (800d030 <__libc_init_array+0x40>)
 800d002:	2600      	movs	r6, #0
 800d004:	4c0b      	ldr	r4, [pc, #44]	@ (800d034 <__libc_init_array+0x44>)
 800d006:	f003 fbd3 	bl	80107b0 <_init>
 800d00a:	1b64      	subs	r4, r4, r5
 800d00c:	10a4      	asrs	r4, r4, #2
 800d00e:	42a6      	cmp	r6, r4
 800d010:	d105      	bne.n	800d01e <__libc_init_array+0x2e>
 800d012:	bd70      	pop	{r4, r5, r6, pc}
 800d014:	f855 3b04 	ldr.w	r3, [r5], #4
 800d018:	3601      	adds	r6, #1
 800d01a:	4798      	blx	r3
 800d01c:	e7ee      	b.n	800cffc <__libc_init_array+0xc>
 800d01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d022:	3601      	adds	r6, #1
 800d024:	4798      	blx	r3
 800d026:	e7f2      	b.n	800d00e <__libc_init_array+0x1e>
 800d028:	08010d00 	.word	0x08010d00
 800d02c:	08010d00 	.word	0x08010d00
 800d030:	08010d00 	.word	0x08010d00
 800d034:	08010d04 	.word	0x08010d04

0800d038 <__retarget_lock_init_recursive>:
 800d038:	4770      	bx	lr

0800d03a <__retarget_lock_acquire_recursive>:
 800d03a:	4770      	bx	lr

0800d03c <__retarget_lock_release_recursive>:
 800d03c:	4770      	bx	lr

0800d03e <memchr>:
 800d03e:	b2c9      	uxtb	r1, r1
 800d040:	4603      	mov	r3, r0
 800d042:	4402      	add	r2, r0
 800d044:	b510      	push	{r4, lr}
 800d046:	4293      	cmp	r3, r2
 800d048:	4618      	mov	r0, r3
 800d04a:	d101      	bne.n	800d050 <memchr+0x12>
 800d04c:	2000      	movs	r0, #0
 800d04e:	e003      	b.n	800d058 <memchr+0x1a>
 800d050:	7804      	ldrb	r4, [r0, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	428c      	cmp	r4, r1
 800d056:	d1f6      	bne.n	800d046 <memchr+0x8>
 800d058:	bd10      	pop	{r4, pc}
	...

0800d05c <nanf>:
 800d05c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d064 <nanf+0x8>
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	7fc00000 	.word	0x7fc00000

0800d068 <quorem>:
 800d068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	6903      	ldr	r3, [r0, #16]
 800d06e:	4607      	mov	r7, r0
 800d070:	690c      	ldr	r4, [r1, #16]
 800d072:	42a3      	cmp	r3, r4
 800d074:	f2c0 8083 	blt.w	800d17e <quorem+0x116>
 800d078:	3c01      	subs	r4, #1
 800d07a:	f100 0514 	add.w	r5, r0, #20
 800d07e:	f101 0814 	add.w	r8, r1, #20
 800d082:	00a3      	lsls	r3, r4, #2
 800d084:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d088:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d092:	9301      	str	r3, [sp, #4]
 800d094:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d098:	3301      	adds	r3, #1
 800d09a:	429a      	cmp	r2, r3
 800d09c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0a0:	d331      	bcc.n	800d106 <quorem+0x9e>
 800d0a2:	f04f 0a00 	mov.w	sl, #0
 800d0a6:	46c4      	mov	ip, r8
 800d0a8:	46ae      	mov	lr, r5
 800d0aa:	46d3      	mov	fp, sl
 800d0ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0b0:	b298      	uxth	r0, r3
 800d0b2:	45e1      	cmp	r9, ip
 800d0b4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d0b8:	fb06 a000 	mla	r0, r6, r0, sl
 800d0bc:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d0c0:	b280      	uxth	r0, r0
 800d0c2:	fb06 2303 	mla	r3, r6, r3, r2
 800d0c6:	f8de 2000 	ldr.w	r2, [lr]
 800d0ca:	b292      	uxth	r2, r2
 800d0cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0d0:	eba2 0200 	sub.w	r2, r2, r0
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f8de 0000 	ldr.w	r0, [lr]
 800d0da:	445a      	add	r2, fp
 800d0dc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d0e0:	b292      	uxth	r2, r2
 800d0e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d0e6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d0ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0ee:	f84e 2b04 	str.w	r2, [lr], #4
 800d0f2:	d2db      	bcs.n	800d0ac <quorem+0x44>
 800d0f4:	9b00      	ldr	r3, [sp, #0]
 800d0f6:	58eb      	ldr	r3, [r5, r3]
 800d0f8:	b92b      	cbnz	r3, 800d106 <quorem+0x9e>
 800d0fa:	9b01      	ldr	r3, [sp, #4]
 800d0fc:	3b04      	subs	r3, #4
 800d0fe:	429d      	cmp	r5, r3
 800d100:	461a      	mov	r2, r3
 800d102:	d330      	bcc.n	800d166 <quorem+0xfe>
 800d104:	613c      	str	r4, [r7, #16]
 800d106:	4638      	mov	r0, r7
 800d108:	f001 f9c8 	bl	800e49c <__mcmp>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	db26      	blt.n	800d15e <quorem+0xf6>
 800d110:	4629      	mov	r1, r5
 800d112:	2000      	movs	r0, #0
 800d114:	f858 2b04 	ldr.w	r2, [r8], #4
 800d118:	f8d1 c000 	ldr.w	ip, [r1]
 800d11c:	fa1f fe82 	uxth.w	lr, r2
 800d120:	45c1      	cmp	r9, r8
 800d122:	fa1f f38c 	uxth.w	r3, ip
 800d126:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d12a:	eba3 030e 	sub.w	r3, r3, lr
 800d12e:	4403      	add	r3, r0
 800d130:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d134:	b29b      	uxth	r3, r3
 800d136:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d13a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d13e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d142:	f841 3b04 	str.w	r3, [r1], #4
 800d146:	d2e5      	bcs.n	800d114 <quorem+0xac>
 800d148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d14c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d150:	b922      	cbnz	r2, 800d15c <quorem+0xf4>
 800d152:	3b04      	subs	r3, #4
 800d154:	429d      	cmp	r5, r3
 800d156:	461a      	mov	r2, r3
 800d158:	d30b      	bcc.n	800d172 <quorem+0x10a>
 800d15a:	613c      	str	r4, [r7, #16]
 800d15c:	3601      	adds	r6, #1
 800d15e:	4630      	mov	r0, r6
 800d160:	b003      	add	sp, #12
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	6812      	ldr	r2, [r2, #0]
 800d168:	3b04      	subs	r3, #4
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	d1ca      	bne.n	800d104 <quorem+0x9c>
 800d16e:	3c01      	subs	r4, #1
 800d170:	e7c5      	b.n	800d0fe <quorem+0x96>
 800d172:	6812      	ldr	r2, [r2, #0]
 800d174:	3b04      	subs	r3, #4
 800d176:	2a00      	cmp	r2, #0
 800d178:	d1ef      	bne.n	800d15a <quorem+0xf2>
 800d17a:	3c01      	subs	r4, #1
 800d17c:	e7ea      	b.n	800d154 <quorem+0xec>
 800d17e:	2000      	movs	r0, #0
 800d180:	e7ee      	b.n	800d160 <quorem+0xf8>
 800d182:	0000      	movs	r0, r0
 800d184:	0000      	movs	r0, r0
	...

0800d188 <_dtoa_r>:
 800d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	69c7      	ldr	r7, [r0, #28]
 800d18e:	b099      	sub	sp, #100	@ 0x64
 800d190:	4683      	mov	fp, r0
 800d192:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d194:	9109      	str	r1, [sp, #36]	@ 0x24
 800d196:	920e      	str	r2, [sp, #56]	@ 0x38
 800d198:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d19a:	ec55 4b10 	vmov	r4, r5, d0
 800d19e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1a2:	b97f      	cbnz	r7, 800d1c4 <_dtoa_r+0x3c>
 800d1a4:	2010      	movs	r0, #16
 800d1a6:	f000 fdfd 	bl	800dda4 <malloc>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800d1b0:	b920      	cbnz	r0, 800d1bc <_dtoa_r+0x34>
 800d1b2:	4ba7      	ldr	r3, [pc, #668]	@ (800d450 <_dtoa_r+0x2c8>)
 800d1b4:	21ef      	movs	r1, #239	@ 0xef
 800d1b6:	48a7      	ldr	r0, [pc, #668]	@ (800d454 <_dtoa_r+0x2cc>)
 800d1b8:	f002 fc42 	bl	800fa40 <__assert_func>
 800d1bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1c0:	6007      	str	r7, [r0, #0]
 800d1c2:	60c7      	str	r7, [r0, #12]
 800d1c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1c8:	6819      	ldr	r1, [r3, #0]
 800d1ca:	b159      	cbz	r1, 800d1e4 <_dtoa_r+0x5c>
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	4658      	mov	r0, fp
 800d1d2:	4093      	lsls	r3, r2
 800d1d4:	604a      	str	r2, [r1, #4]
 800d1d6:	608b      	str	r3, [r1, #8]
 800d1d8:	f000 feda 	bl	800df90 <_Bfree>
 800d1dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	1e2b      	subs	r3, r5, #0
 800d1e6:	bfb7      	itett	lt
 800d1e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d1ec:	2300      	movge	r3, #0
 800d1ee:	2201      	movlt	r2, #1
 800d1f0:	9303      	strlt	r3, [sp, #12]
 800d1f2:	bfa8      	it	ge
 800d1f4:	6033      	strge	r3, [r6, #0]
 800d1f6:	9f03      	ldr	r7, [sp, #12]
 800d1f8:	4b97      	ldr	r3, [pc, #604]	@ (800d458 <_dtoa_r+0x2d0>)
 800d1fa:	bfb8      	it	lt
 800d1fc:	6032      	strlt	r2, [r6, #0]
 800d1fe:	43bb      	bics	r3, r7
 800d200:	d112      	bne.n	800d228 <_dtoa_r+0xa0>
 800d202:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d20e:	4323      	orrs	r3, r4
 800d210:	f000 854c 	beq.w	800dcac <_dtoa_r+0xb24>
 800d214:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d216:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d46c <_dtoa_r+0x2e4>
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 854e 	beq.w	800dcbc <_dtoa_r+0xb34>
 800d220:	f10a 0303 	add.w	r3, sl, #3
 800d224:	f000 bd48 	b.w	800dcb8 <_dtoa_r+0xb30>
 800d228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d22c:	2200      	movs	r2, #0
 800d22e:	2300      	movs	r3, #0
 800d230:	ec51 0b17 	vmov	r0, r1, d7
 800d234:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d238:	f7f3 fd78 	bl	8000d2c <__aeabi_dcmpeq>
 800d23c:	4680      	mov	r8, r0
 800d23e:	b158      	cbz	r0, 800d258 <_dtoa_r+0xd0>
 800d240:	2301      	movs	r3, #1
 800d242:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d248:	b113      	cbz	r3, 800d250 <_dtoa_r+0xc8>
 800d24a:	4b84      	ldr	r3, [pc, #528]	@ (800d45c <_dtoa_r+0x2d4>)
 800d24c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800d470 <_dtoa_r+0x2e8>
 800d254:	f000 bd32 	b.w	800dcbc <_dtoa_r+0xb34>
 800d258:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d25c:	aa16      	add	r2, sp, #88	@ 0x58
 800d25e:	a917      	add	r1, sp, #92	@ 0x5c
 800d260:	4658      	mov	r0, fp
 800d262:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d266:	f001 fa41 	bl	800e6ec <__d2b>
 800d26a:	4681      	mov	r9, r0
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	d075      	beq.n	800d35c <_dtoa_r+0x1d4>
 800d270:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d272:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d276:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d27a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d27e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d282:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d286:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d28a:	4619      	mov	r1, r3
 800d28c:	2200      	movs	r2, #0
 800d28e:	4b74      	ldr	r3, [pc, #464]	@ (800d460 <_dtoa_r+0x2d8>)
 800d290:	f7f3 f92c 	bl	80004ec <__aeabi_dsub>
 800d294:	a368      	add	r3, pc, #416	@ (adr r3, 800d438 <_dtoa_r+0x2b0>)
 800d296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29a:	f7f3 fadf 	bl	800085c <__aeabi_dmul>
 800d29e:	a368      	add	r3, pc, #416	@ (adr r3, 800d440 <_dtoa_r+0x2b8>)
 800d2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a4:	f7f3 f924 	bl	80004f0 <__adddf3>
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	460d      	mov	r5, r1
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7f3 fa6b 	bl	8000788 <__aeabi_i2d>
 800d2b2:	a365      	add	r3, pc, #404	@ (adr r3, 800d448 <_dtoa_r+0x2c0>)
 800d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b8:	f7f3 fad0 	bl	800085c <__aeabi_dmul>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	f7f3 f914 	bl	80004f0 <__adddf3>
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	f7f3 fd76 	bl	8000dbc <__aeabi_d2iz>
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	4607      	mov	r7, r0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	4629      	mov	r1, r5
 800d2da:	f7f3 fd31 	bl	8000d40 <__aeabi_dcmplt>
 800d2de:	b140      	cbz	r0, 800d2f2 <_dtoa_r+0x16a>
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f7f3 fa51 	bl	8000788 <__aeabi_i2d>
 800d2e6:	4622      	mov	r2, r4
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	f7f3 fd1f 	bl	8000d2c <__aeabi_dcmpeq>
 800d2ee:	b900      	cbnz	r0, 800d2f2 <_dtoa_r+0x16a>
 800d2f0:	3f01      	subs	r7, #1
 800d2f2:	2f16      	cmp	r7, #22
 800d2f4:	d851      	bhi.n	800d39a <_dtoa_r+0x212>
 800d2f6:	4b5b      	ldr	r3, [pc, #364]	@ (800d464 <_dtoa_r+0x2dc>)
 800d2f8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	f7f3 fd1c 	bl	8000d40 <__aeabi_dcmplt>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d048      	beq.n	800d39e <_dtoa_r+0x216>
 800d30c:	3f01      	subs	r7, #1
 800d30e:	2300      	movs	r3, #0
 800d310:	9312      	str	r3, [sp, #72]	@ 0x48
 800d312:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d314:	1b9b      	subs	r3, r3, r6
 800d316:	1e5a      	subs	r2, r3, #1
 800d318:	bf46      	itte	mi
 800d31a:	f1c3 0801 	rsbmi	r8, r3, #1
 800d31e:	2300      	movmi	r3, #0
 800d320:	f04f 0800 	movpl.w	r8, #0
 800d324:	9208      	str	r2, [sp, #32]
 800d326:	bf48      	it	mi
 800d328:	9308      	strmi	r3, [sp, #32]
 800d32a:	2f00      	cmp	r7, #0
 800d32c:	db39      	blt.n	800d3a2 <_dtoa_r+0x21a>
 800d32e:	9b08      	ldr	r3, [sp, #32]
 800d330:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d332:	443b      	add	r3, r7
 800d334:	9308      	str	r3, [sp, #32]
 800d336:	2300      	movs	r3, #0
 800d338:	930a      	str	r3, [sp, #40]	@ 0x28
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	d864      	bhi.n	800d40a <_dtoa_r+0x282>
 800d340:	2b05      	cmp	r3, #5
 800d342:	bfc5      	ittet	gt
 800d344:	3b04      	subgt	r3, #4
 800d346:	2400      	movgt	r4, #0
 800d348:	2401      	movle	r4, #1
 800d34a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34e:	3b02      	subs	r3, #2
 800d350:	2b03      	cmp	r3, #3
 800d352:	d865      	bhi.n	800d420 <_dtoa_r+0x298>
 800d354:	e8df f003 	tbb	[pc, r3]
 800d358:	5737392c 	.word	0x5737392c
 800d35c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d360:	441e      	add	r6, r3
 800d362:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d366:	2b20      	cmp	r3, #32
 800d368:	bfc9      	itett	gt
 800d36a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d36e:	f1c3 0320 	rsble	r3, r3, #32
 800d372:	409f      	lslgt	r7, r3
 800d374:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d378:	bfd8      	it	le
 800d37a:	fa04 f003 	lslle.w	r0, r4, r3
 800d37e:	f106 36ff 	add.w	r6, r6, #4294967295
 800d382:	bfc4      	itt	gt
 800d384:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d388:	ea47 0003 	orrgt.w	r0, r7, r3
 800d38c:	f7f3 f9ec 	bl	8000768 <__aeabi_ui2d>
 800d390:	2201      	movs	r2, #1
 800d392:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d396:	9214      	str	r2, [sp, #80]	@ 0x50
 800d398:	e777      	b.n	800d28a <_dtoa_r+0x102>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e7b8      	b.n	800d310 <_dtoa_r+0x188>
 800d39e:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3a0:	e7b7      	b.n	800d312 <_dtoa_r+0x18a>
 800d3a2:	427b      	negs	r3, r7
 800d3a4:	eba8 0807 	sub.w	r8, r8, r7
 800d3a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3ae:	e7c4      	b.n	800d33a <_dtoa_r+0x1b2>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	dc35      	bgt.n	800d426 <_dtoa_r+0x29e>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	461a      	mov	r2, r3
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	9307      	str	r3, [sp, #28]
 800d3c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3c4:	e00b      	b.n	800d3de <_dtoa_r+0x256>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e7f3      	b.n	800d3b2 <_dtoa_r+0x22a>
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3d0:	18fb      	adds	r3, r7, r3
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	9307      	str	r3, [sp, #28]
 800d3da:	bfb8      	it	lt
 800d3dc:	2301      	movlt	r3, #1
 800d3de:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	f102 0514 	add.w	r5, r2, #20
 800d3ea:	429d      	cmp	r5, r3
 800d3ec:	d91f      	bls.n	800d42e <_dtoa_r+0x2a6>
 800d3ee:	6041      	str	r1, [r0, #4]
 800d3f0:	4658      	mov	r0, fp
 800d3f2:	f000 fd8d 	bl	800df10 <_Balloc>
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	2800      	cmp	r0, #0
 800d3fa:	d13b      	bne.n	800d474 <_dtoa_r+0x2ec>
 800d3fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d468 <_dtoa_r+0x2e0>)
 800d3fe:	4602      	mov	r2, r0
 800d400:	f240 11af 	movw	r1, #431	@ 0x1af
 800d404:	e6d7      	b.n	800d1b6 <_dtoa_r+0x2e>
 800d406:	2301      	movs	r3, #1
 800d408:	e7e0      	b.n	800d3cc <_dtoa_r+0x244>
 800d40a:	2401      	movs	r4, #1
 800d40c:	2300      	movs	r3, #0
 800d40e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d410:	9309      	str	r3, [sp, #36]	@ 0x24
 800d412:	f04f 33ff 	mov.w	r3, #4294967295
 800d416:	2200      	movs	r2, #0
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	9307      	str	r3, [sp, #28]
 800d41c:	2312      	movs	r3, #18
 800d41e:	e7d0      	b.n	800d3c2 <_dtoa_r+0x23a>
 800d420:	2301      	movs	r3, #1
 800d422:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d424:	e7f5      	b.n	800d412 <_dtoa_r+0x28a>
 800d426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	9307      	str	r3, [sp, #28]
 800d42c:	e7d7      	b.n	800d3de <_dtoa_r+0x256>
 800d42e:	3101      	adds	r1, #1
 800d430:	0052      	lsls	r2, r2, #1
 800d432:	e7d8      	b.n	800d3e6 <_dtoa_r+0x25e>
 800d434:	f3af 8000 	nop.w
 800d438:	636f4361 	.word	0x636f4361
 800d43c:	3fd287a7 	.word	0x3fd287a7
 800d440:	8b60c8b3 	.word	0x8b60c8b3
 800d444:	3fc68a28 	.word	0x3fc68a28
 800d448:	509f79fb 	.word	0x509f79fb
 800d44c:	3fd34413 	.word	0x3fd34413
 800d450:	0801090e 	.word	0x0801090e
 800d454:	08010925 	.word	0x08010925
 800d458:	7ff00000 	.word	0x7ff00000
 800d45c:	080108d9 	.word	0x080108d9
 800d460:	3ff80000 	.word	0x3ff80000
 800d464:	08010a20 	.word	0x08010a20
 800d468:	0801097d 	.word	0x0801097d
 800d46c:	0801090a 	.word	0x0801090a
 800d470:	080108d8 	.word	0x080108d8
 800d474:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d478:	6018      	str	r0, [r3, #0]
 800d47a:	9b07      	ldr	r3, [sp, #28]
 800d47c:	2b0e      	cmp	r3, #14
 800d47e:	f200 80a4 	bhi.w	800d5ca <_dtoa_r+0x442>
 800d482:	2c00      	cmp	r4, #0
 800d484:	f000 80a1 	beq.w	800d5ca <_dtoa_r+0x442>
 800d488:	2f00      	cmp	r7, #0
 800d48a:	dd33      	ble.n	800d4f4 <_dtoa_r+0x36c>
 800d48c:	f007 020f 	and.w	r2, r7, #15
 800d490:	4bac      	ldr	r3, [pc, #688]	@ (800d744 <_dtoa_r+0x5bc>)
 800d492:	05f8      	lsls	r0, r7, #23
 800d494:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d49c:	ed93 7b00 	vldr	d7, [r3]
 800d4a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4a4:	d516      	bpl.n	800d4d4 <_dtoa_r+0x34c>
 800d4a6:	4ba8      	ldr	r3, [pc, #672]	@ (800d748 <_dtoa_r+0x5c0>)
 800d4a8:	f004 040f 	and.w	r4, r4, #15
 800d4ac:	2603      	movs	r6, #3
 800d4ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4b6:	f7f3 fafb 	bl	8000ab0 <__aeabi_ddiv>
 800d4ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4be:	4da2      	ldr	r5, [pc, #648]	@ (800d748 <_dtoa_r+0x5c0>)
 800d4c0:	b954      	cbnz	r4, 800d4d8 <_dtoa_r+0x350>
 800d4c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ca:	f7f3 faf1 	bl	8000ab0 <__aeabi_ddiv>
 800d4ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4d2:	e028      	b.n	800d526 <_dtoa_r+0x39e>
 800d4d4:	2602      	movs	r6, #2
 800d4d6:	e7f2      	b.n	800d4be <_dtoa_r+0x336>
 800d4d8:	07e1      	lsls	r1, r4, #31
 800d4da:	d508      	bpl.n	800d4ee <_dtoa_r+0x366>
 800d4dc:	3601      	adds	r6, #1
 800d4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4e6:	f7f3 f9b9 	bl	800085c <__aeabi_dmul>
 800d4ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4ee:	1064      	asrs	r4, r4, #1
 800d4f0:	3508      	adds	r5, #8
 800d4f2:	e7e5      	b.n	800d4c0 <_dtoa_r+0x338>
 800d4f4:	f000 80d2 	beq.w	800d69c <_dtoa_r+0x514>
 800d4f8:	427c      	negs	r4, r7
 800d4fa:	4b92      	ldr	r3, [pc, #584]	@ (800d744 <_dtoa_r+0x5bc>)
 800d4fc:	4d92      	ldr	r5, [pc, #584]	@ (800d748 <_dtoa_r+0x5c0>)
 800d4fe:	2602      	movs	r6, #2
 800d500:	f004 020f 	and.w	r2, r4, #15
 800d504:	1124      	asrs	r4, r4, #4
 800d506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d50a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d512:	f7f3 f9a3 	bl	800085c <__aeabi_dmul>
 800d516:	2300      	movs	r3, #0
 800d518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d51c:	2c00      	cmp	r4, #0
 800d51e:	f040 80b2 	bne.w	800d686 <_dtoa_r+0x4fe>
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1d3      	bne.n	800d4ce <_dtoa_r+0x346>
 800d526:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d528:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80b7 	beq.w	800d6a0 <_dtoa_r+0x518>
 800d532:	2200      	movs	r2, #0
 800d534:	4b85      	ldr	r3, [pc, #532]	@ (800d74c <_dtoa_r+0x5c4>)
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f3 fc01 	bl	8000d40 <__aeabi_dcmplt>
 800d53e:	2800      	cmp	r0, #0
 800d540:	f000 80ae 	beq.w	800d6a0 <_dtoa_r+0x518>
 800d544:	9b07      	ldr	r3, [sp, #28]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f000 80aa 	beq.w	800d6a0 <_dtoa_r+0x518>
 800d54c:	9b00      	ldr	r3, [sp, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	dd37      	ble.n	800d5c2 <_dtoa_r+0x43a>
 800d552:	1e7b      	subs	r3, r7, #1
 800d554:	4620      	mov	r0, r4
 800d556:	2200      	movs	r2, #0
 800d558:	4629      	mov	r1, r5
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	3601      	adds	r6, #1
 800d55e:	4b7c      	ldr	r3, [pc, #496]	@ (800d750 <_dtoa_r+0x5c8>)
 800d560:	f7f3 f97c 	bl	800085c <__aeabi_dmul>
 800d564:	9c00      	ldr	r4, [sp, #0]
 800d566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d56a:	4630      	mov	r0, r6
 800d56c:	f7f3 f90c 	bl	8000788 <__aeabi_i2d>
 800d570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d574:	f7f3 f972 	bl	800085c <__aeabi_dmul>
 800d578:	2200      	movs	r2, #0
 800d57a:	4b76      	ldr	r3, [pc, #472]	@ (800d754 <_dtoa_r+0x5cc>)
 800d57c:	f7f2 ffb8 	bl	80004f0 <__adddf3>
 800d580:	4605      	mov	r5, r0
 800d582:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d586:	2c00      	cmp	r4, #0
 800d588:	f040 808d 	bne.w	800d6a6 <_dtoa_r+0x51e>
 800d58c:	2200      	movs	r2, #0
 800d58e:	4b72      	ldr	r3, [pc, #456]	@ (800d758 <_dtoa_r+0x5d0>)
 800d590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d594:	f7f2 ffaa 	bl	80004ec <__aeabi_dsub>
 800d598:	4602      	mov	r2, r0
 800d59a:	460b      	mov	r3, r1
 800d59c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5a0:	462a      	mov	r2, r5
 800d5a2:	4633      	mov	r3, r6
 800d5a4:	f7f3 fbea 	bl	8000d7c <__aeabi_dcmpgt>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	f040 828b 	bne.w	800dac4 <_dtoa_r+0x93c>
 800d5ae:	462a      	mov	r2, r5
 800d5b0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5b8:	f7f3 fbc2 	bl	8000d40 <__aeabi_dcmplt>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	f040 8128 	bne.w	800d812 <_dtoa_r+0x68a>
 800d5c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d5ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f2c0 815a 	blt.w	800d886 <_dtoa_r+0x6fe>
 800d5d2:	2f0e      	cmp	r7, #14
 800d5d4:	f300 8157 	bgt.w	800d886 <_dtoa_r+0x6fe>
 800d5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800d744 <_dtoa_r+0x5bc>)
 800d5da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5de:	ed93 7b00 	vldr	d7, [r3]
 800d5e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	ed8d 7b00 	vstr	d7, [sp]
 800d5ea:	da03      	bge.n	800d5f4 <_dtoa_r+0x46c>
 800d5ec:	9b07      	ldr	r3, [sp, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f340 8101 	ble.w	800d7f6 <_dtoa_r+0x66e>
 800d5f4:	4656      	mov	r6, sl
 800d5f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f3 fa55 	bl	8000ab0 <__aeabi_ddiv>
 800d606:	f7f3 fbd9 	bl	8000dbc <__aeabi_d2iz>
 800d60a:	4680      	mov	r8, r0
 800d60c:	f7f3 f8bc 	bl	8000788 <__aeabi_i2d>
 800d610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d614:	f7f3 f922 	bl	800085c <__aeabi_dmul>
 800d618:	4602      	mov	r2, r0
 800d61a:	4620      	mov	r0, r4
 800d61c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d620:	460b      	mov	r3, r1
 800d622:	4629      	mov	r1, r5
 800d624:	f7f2 ff62 	bl	80004ec <__aeabi_dsub>
 800d628:	9d07      	ldr	r5, [sp, #28]
 800d62a:	f806 4b01 	strb.w	r4, [r6], #1
 800d62e:	eba6 040a 	sub.w	r4, r6, sl
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	42a5      	cmp	r5, r4
 800d638:	f040 8117 	bne.w	800d86a <_dtoa_r+0x6e2>
 800d63c:	f7f2 ff58 	bl	80004f0 <__adddf3>
 800d640:	4604      	mov	r4, r0
 800d642:	460d      	mov	r5, r1
 800d644:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d648:	f7f3 fb98 	bl	8000d7c <__aeabi_dcmpgt>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f040 80f9 	bne.w	800d844 <_dtoa_r+0x6bc>
 800d652:	4620      	mov	r0, r4
 800d654:	4629      	mov	r1, r5
 800d656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d65a:	f7f3 fb67 	bl	8000d2c <__aeabi_dcmpeq>
 800d65e:	b118      	cbz	r0, 800d668 <_dtoa_r+0x4e0>
 800d660:	f018 0f01 	tst.w	r8, #1
 800d664:	f040 80ee 	bne.w	800d844 <_dtoa_r+0x6bc>
 800d668:	4649      	mov	r1, r9
 800d66a:	4658      	mov	r0, fp
 800d66c:	f000 fc90 	bl	800df90 <_Bfree>
 800d670:	2300      	movs	r3, #0
 800d672:	3701      	adds	r7, #1
 800d674:	7033      	strb	r3, [r6, #0]
 800d676:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d678:	601f      	str	r7, [r3, #0]
 800d67a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 831d 	beq.w	800dcbc <_dtoa_r+0xb34>
 800d682:	601e      	str	r6, [r3, #0]
 800d684:	e31a      	b.n	800dcbc <_dtoa_r+0xb34>
 800d686:	07e2      	lsls	r2, r4, #31
 800d688:	d505      	bpl.n	800d696 <_dtoa_r+0x50e>
 800d68a:	3601      	adds	r6, #1
 800d68c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d690:	f7f3 f8e4 	bl	800085c <__aeabi_dmul>
 800d694:	2301      	movs	r3, #1
 800d696:	1064      	asrs	r4, r4, #1
 800d698:	3508      	adds	r5, #8
 800d69a:	e73f      	b.n	800d51c <_dtoa_r+0x394>
 800d69c:	2602      	movs	r6, #2
 800d69e:	e742      	b.n	800d526 <_dtoa_r+0x39e>
 800d6a0:	9c07      	ldr	r4, [sp, #28]
 800d6a2:	9704      	str	r7, [sp, #16]
 800d6a4:	e761      	b.n	800d56a <_dtoa_r+0x3e2>
 800d6a6:	4b27      	ldr	r3, [pc, #156]	@ (800d744 <_dtoa_r+0x5bc>)
 800d6a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6ae:	4454      	add	r4, sl
 800d6b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d053      	beq.n	800d760 <_dtoa_r+0x5d8>
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	4928      	ldr	r1, [pc, #160]	@ (800d75c <_dtoa_r+0x5d4>)
 800d6bc:	f7f3 f9f8 	bl	8000ab0 <__aeabi_ddiv>
 800d6c0:	4633      	mov	r3, r6
 800d6c2:	4656      	mov	r6, sl
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	f7f2 ff11 	bl	80004ec <__aeabi_dsub>
 800d6ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6d2:	f7f3 fb73 	bl	8000dbc <__aeabi_d2iz>
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	f7f3 f856 	bl	8000788 <__aeabi_i2d>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	460b      	mov	r3, r1
 800d6e0:	3530      	adds	r5, #48	@ 0x30
 800d6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6e6:	f7f2 ff01 	bl	80004ec <__aeabi_dsub>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	f806 5b01 	strb.w	r5, [r6], #1
 800d6f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6fa:	f7f3 fb21 	bl	8000d40 <__aeabi_dcmplt>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d171      	bne.n	800d7e6 <_dtoa_r+0x65e>
 800d702:	2000      	movs	r0, #0
 800d704:	4911      	ldr	r1, [pc, #68]	@ (800d74c <_dtoa_r+0x5c4>)
 800d706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d70a:	f7f2 feef 	bl	80004ec <__aeabi_dsub>
 800d70e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d712:	f7f3 fb15 	bl	8000d40 <__aeabi_dcmplt>
 800d716:	2800      	cmp	r0, #0
 800d718:	f040 8095 	bne.w	800d846 <_dtoa_r+0x6be>
 800d71c:	42a6      	cmp	r6, r4
 800d71e:	f43f af50 	beq.w	800d5c2 <_dtoa_r+0x43a>
 800d722:	2200      	movs	r2, #0
 800d724:	4b0a      	ldr	r3, [pc, #40]	@ (800d750 <_dtoa_r+0x5c8>)
 800d726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d72a:	f7f3 f897 	bl	800085c <__aeabi_dmul>
 800d72e:	2200      	movs	r2, #0
 800d730:	4b07      	ldr	r3, [pc, #28]	@ (800d750 <_dtoa_r+0x5c8>)
 800d732:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d73a:	f7f3 f88f 	bl	800085c <__aeabi_dmul>
 800d73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d742:	e7c4      	b.n	800d6ce <_dtoa_r+0x546>
 800d744:	08010a20 	.word	0x08010a20
 800d748:	080109f8 	.word	0x080109f8
 800d74c:	3ff00000 	.word	0x3ff00000
 800d750:	40240000 	.word	0x40240000
 800d754:	401c0000 	.word	0x401c0000
 800d758:	40140000 	.word	0x40140000
 800d75c:	3fe00000 	.word	0x3fe00000
 800d760:	4631      	mov	r1, r6
 800d762:	4656      	mov	r6, sl
 800d764:	4628      	mov	r0, r5
 800d766:	f7f3 f879 	bl	800085c <__aeabi_dmul>
 800d76a:	9415      	str	r4, [sp, #84]	@ 0x54
 800d76c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d770:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d774:	f7f3 fb22 	bl	8000dbc <__aeabi_d2iz>
 800d778:	4605      	mov	r5, r0
 800d77a:	f7f3 f805 	bl	8000788 <__aeabi_i2d>
 800d77e:	4602      	mov	r2, r0
 800d780:	3530      	adds	r5, #48	@ 0x30
 800d782:	460b      	mov	r3, r1
 800d784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d788:	f7f2 feb0 	bl	80004ec <__aeabi_dsub>
 800d78c:	f806 5b01 	strb.w	r5, [r6], #1
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	42a6      	cmp	r6, r4
 800d796:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d79a:	f04f 0200 	mov.w	r2, #0
 800d79e:	d124      	bne.n	800d7ea <_dtoa_r+0x662>
 800d7a0:	4bac      	ldr	r3, [pc, #688]	@ (800da54 <_dtoa_r+0x8cc>)
 800d7a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7a6:	f7f2 fea3 	bl	80004f0 <__adddf3>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b2:	f7f3 fae3 	bl	8000d7c <__aeabi_dcmpgt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d145      	bne.n	800d846 <_dtoa_r+0x6be>
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	49a5      	ldr	r1, [pc, #660]	@ (800da54 <_dtoa_r+0x8cc>)
 800d7be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7c2:	f7f2 fe93 	bl	80004ec <__aeabi_dsub>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ce:	f7f3 fab7 	bl	8000d40 <__aeabi_dcmplt>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f43f aef5 	beq.w	800d5c2 <_dtoa_r+0x43a>
 800d7d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d7da:	1e73      	subs	r3, r6, #1
 800d7dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d7e2:	2b30      	cmp	r3, #48	@ 0x30
 800d7e4:	d0f8      	beq.n	800d7d8 <_dtoa_r+0x650>
 800d7e6:	9f04      	ldr	r7, [sp, #16]
 800d7e8:	e73e      	b.n	800d668 <_dtoa_r+0x4e0>
 800d7ea:	4b9b      	ldr	r3, [pc, #620]	@ (800da58 <_dtoa_r+0x8d0>)
 800d7ec:	f7f3 f836 	bl	800085c <__aeabi_dmul>
 800d7f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f4:	e7bc      	b.n	800d770 <_dtoa_r+0x5e8>
 800d7f6:	d10c      	bne.n	800d812 <_dtoa_r+0x68a>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4b98      	ldr	r3, [pc, #608]	@ (800da5c <_dtoa_r+0x8d4>)
 800d7fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d800:	f7f3 f82c 	bl	800085c <__aeabi_dmul>
 800d804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d808:	f7f3 faae 	bl	8000d68 <__aeabi_dcmpge>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	f000 8157 	beq.w	800dac0 <_dtoa_r+0x938>
 800d812:	2400      	movs	r4, #0
 800d814:	4625      	mov	r5, r4
 800d816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d818:	4656      	mov	r6, sl
 800d81a:	43db      	mvns	r3, r3
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	2700      	movs	r7, #0
 800d820:	4621      	mov	r1, r4
 800d822:	4658      	mov	r0, fp
 800d824:	f000 fbb4 	bl	800df90 <_Bfree>
 800d828:	2d00      	cmp	r5, #0
 800d82a:	d0dc      	beq.n	800d7e6 <_dtoa_r+0x65e>
 800d82c:	b12f      	cbz	r7, 800d83a <_dtoa_r+0x6b2>
 800d82e:	42af      	cmp	r7, r5
 800d830:	d003      	beq.n	800d83a <_dtoa_r+0x6b2>
 800d832:	4639      	mov	r1, r7
 800d834:	4658      	mov	r0, fp
 800d836:	f000 fbab 	bl	800df90 <_Bfree>
 800d83a:	4629      	mov	r1, r5
 800d83c:	4658      	mov	r0, fp
 800d83e:	f000 fba7 	bl	800df90 <_Bfree>
 800d842:	e7d0      	b.n	800d7e6 <_dtoa_r+0x65e>
 800d844:	9704      	str	r7, [sp, #16]
 800d846:	4633      	mov	r3, r6
 800d848:	461e      	mov	r6, r3
 800d84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d84e:	2a39      	cmp	r2, #57	@ 0x39
 800d850:	d107      	bne.n	800d862 <_dtoa_r+0x6da>
 800d852:	459a      	cmp	sl, r3
 800d854:	d1f8      	bne.n	800d848 <_dtoa_r+0x6c0>
 800d856:	9a04      	ldr	r2, [sp, #16]
 800d858:	3201      	adds	r2, #1
 800d85a:	9204      	str	r2, [sp, #16]
 800d85c:	2230      	movs	r2, #48	@ 0x30
 800d85e:	f88a 2000 	strb.w	r2, [sl]
 800d862:	781a      	ldrb	r2, [r3, #0]
 800d864:	3201      	adds	r2, #1
 800d866:	701a      	strb	r2, [r3, #0]
 800d868:	e7bd      	b.n	800d7e6 <_dtoa_r+0x65e>
 800d86a:	2200      	movs	r2, #0
 800d86c:	4b7a      	ldr	r3, [pc, #488]	@ (800da58 <_dtoa_r+0x8d0>)
 800d86e:	f7f2 fff5 	bl	800085c <__aeabi_dmul>
 800d872:	2200      	movs	r2, #0
 800d874:	2300      	movs	r3, #0
 800d876:	4604      	mov	r4, r0
 800d878:	460d      	mov	r5, r1
 800d87a:	f7f3 fa57 	bl	8000d2c <__aeabi_dcmpeq>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f43f aebb 	beq.w	800d5fa <_dtoa_r+0x472>
 800d884:	e6f0      	b.n	800d668 <_dtoa_r+0x4e0>
 800d886:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d888:	2a00      	cmp	r2, #0
 800d88a:	f000 80db 	beq.w	800da44 <_dtoa_r+0x8bc>
 800d88e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d890:	2a01      	cmp	r2, #1
 800d892:	f300 80bf 	bgt.w	800da14 <_dtoa_r+0x88c>
 800d896:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d898:	2a00      	cmp	r2, #0
 800d89a:	f000 80b7 	beq.w	800da0c <_dtoa_r+0x884>
 800d89e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8a4:	4646      	mov	r6, r8
 800d8a6:	9a08      	ldr	r2, [sp, #32]
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	4658      	mov	r0, fp
 800d8ac:	4498      	add	r8, r3
 800d8ae:	441a      	add	r2, r3
 800d8b0:	9208      	str	r2, [sp, #32]
 800d8b2:	f000 fc6d 	bl	800e190 <__i2b>
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	b15e      	cbz	r6, 800d8d2 <_dtoa_r+0x74a>
 800d8ba:	9b08      	ldr	r3, [sp, #32]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	dd08      	ble.n	800d8d2 <_dtoa_r+0x74a>
 800d8c0:	42b3      	cmp	r3, r6
 800d8c2:	9a08      	ldr	r2, [sp, #32]
 800d8c4:	bfa8      	it	ge
 800d8c6:	4633      	movge	r3, r6
 800d8c8:	eba8 0803 	sub.w	r8, r8, r3
 800d8cc:	1af6      	subs	r6, r6, r3
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	9308      	str	r3, [sp, #32]
 800d8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8d4:	b1f3      	cbz	r3, 800d914 <_dtoa_r+0x78c>
 800d8d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f000 80b7 	beq.w	800da4c <_dtoa_r+0x8c4>
 800d8de:	b18c      	cbz	r4, 800d904 <_dtoa_r+0x77c>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	4658      	mov	r0, fp
 800d8e6:	f000 fd13 	bl	800e310 <__pow5mult>
 800d8ea:	464a      	mov	r2, r9
 800d8ec:	4601      	mov	r1, r0
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	4658      	mov	r0, fp
 800d8f2:	f000 fc63 	bl	800e1bc <__multiply>
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	9004      	str	r0, [sp, #16]
 800d8fa:	4658      	mov	r0, fp
 800d8fc:	f000 fb48 	bl	800df90 <_Bfree>
 800d900:	9b04      	ldr	r3, [sp, #16]
 800d902:	4699      	mov	r9, r3
 800d904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d906:	1b1a      	subs	r2, r3, r4
 800d908:	d004      	beq.n	800d914 <_dtoa_r+0x78c>
 800d90a:	4649      	mov	r1, r9
 800d90c:	4658      	mov	r0, fp
 800d90e:	f000 fcff 	bl	800e310 <__pow5mult>
 800d912:	4681      	mov	r9, r0
 800d914:	2101      	movs	r1, #1
 800d916:	4658      	mov	r0, fp
 800d918:	f000 fc3a 	bl	800e190 <__i2b>
 800d91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d91e:	4604      	mov	r4, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	f000 81cf 	beq.w	800dcc4 <_dtoa_r+0xb3c>
 800d926:	461a      	mov	r2, r3
 800d928:	4601      	mov	r1, r0
 800d92a:	4658      	mov	r0, fp
 800d92c:	f000 fcf0 	bl	800e310 <__pow5mult>
 800d930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d932:	4604      	mov	r4, r0
 800d934:	2b01      	cmp	r3, #1
 800d936:	f300 8095 	bgt.w	800da64 <_dtoa_r+0x8dc>
 800d93a:	9b02      	ldr	r3, [sp, #8]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f040 8087 	bne.w	800da50 <_dtoa_r+0x8c8>
 800d942:	9b03      	ldr	r3, [sp, #12]
 800d944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f040 8089 	bne.w	800da60 <_dtoa_r+0x8d8>
 800d94e:	9b03      	ldr	r3, [sp, #12]
 800d950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d954:	0d1b      	lsrs	r3, r3, #20
 800d956:	051b      	lsls	r3, r3, #20
 800d958:	b12b      	cbz	r3, 800d966 <_dtoa_r+0x7de>
 800d95a:	9b08      	ldr	r3, [sp, #32]
 800d95c:	f108 0801 	add.w	r8, r8, #1
 800d960:	3301      	adds	r3, #1
 800d962:	9308      	str	r3, [sp, #32]
 800d964:	2301      	movs	r3, #1
 800d966:	930a      	str	r3, [sp, #40]	@ 0x28
 800d968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f000 81b0 	beq.w	800dcd0 <_dtoa_r+0xb48>
 800d970:	6923      	ldr	r3, [r4, #16]
 800d972:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d976:	6918      	ldr	r0, [r3, #16]
 800d978:	f000 fbbe 	bl	800e0f8 <__hi0bits>
 800d97c:	f1c0 0020 	rsb	r0, r0, #32
 800d980:	9b08      	ldr	r3, [sp, #32]
 800d982:	4418      	add	r0, r3
 800d984:	f010 001f 	ands.w	r0, r0, #31
 800d988:	d077      	beq.n	800da7a <_dtoa_r+0x8f2>
 800d98a:	f1c0 0320 	rsb	r3, r0, #32
 800d98e:	2b04      	cmp	r3, #4
 800d990:	dd6b      	ble.n	800da6a <_dtoa_r+0x8e2>
 800d992:	f1c0 001c 	rsb	r0, r0, #28
 800d996:	9b08      	ldr	r3, [sp, #32]
 800d998:	4480      	add	r8, r0
 800d99a:	4403      	add	r3, r0
 800d99c:	4406      	add	r6, r0
 800d99e:	9308      	str	r3, [sp, #32]
 800d9a0:	f1b8 0f00 	cmp.w	r8, #0
 800d9a4:	dd05      	ble.n	800d9b2 <_dtoa_r+0x82a>
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	4642      	mov	r2, r8
 800d9aa:	4658      	mov	r0, fp
 800d9ac:	f000 fd0a 	bl	800e3c4 <__lshift>
 800d9b0:	4681      	mov	r9, r0
 800d9b2:	9b08      	ldr	r3, [sp, #32]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dd05      	ble.n	800d9c4 <_dtoa_r+0x83c>
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	4658      	mov	r0, fp
 800d9be:	f000 fd01 	bl	800e3c4 <__lshift>
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d059      	beq.n	800da7e <_dtoa_r+0x8f6>
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	4648      	mov	r0, r9
 800d9ce:	f000 fd65 	bl	800e49c <__mcmp>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	da53      	bge.n	800da7e <_dtoa_r+0x8f6>
 800d9d6:	1e7b      	subs	r3, r7, #1
 800d9d8:	4649      	mov	r1, r9
 800d9da:	220a      	movs	r2, #10
 800d9dc:	4658      	mov	r0, fp
 800d9de:	9304      	str	r3, [sp, #16]
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f000 faf7 	bl	800dfd4 <__multadd>
 800d9e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9e8:	4681      	mov	r9, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 8172 	beq.w	800dcd4 <_dtoa_r+0xb4c>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	220a      	movs	r2, #10
 800d9f6:	4658      	mov	r0, fp
 800d9f8:	f000 faec 	bl	800dfd4 <__multadd>
 800d9fc:	9b00      	ldr	r3, [sp, #0]
 800d9fe:	4605      	mov	r5, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	dc67      	bgt.n	800dad4 <_dtoa_r+0x94c>
 800da04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da06:	2b02      	cmp	r3, #2
 800da08:	dc41      	bgt.n	800da8e <_dtoa_r+0x906>
 800da0a:	e063      	b.n	800dad4 <_dtoa_r+0x94c>
 800da0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da12:	e746      	b.n	800d8a2 <_dtoa_r+0x71a>
 800da14:	9b07      	ldr	r3, [sp, #28]
 800da16:	1e5c      	subs	r4, r3, #1
 800da18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da1a:	42a3      	cmp	r3, r4
 800da1c:	bfb7      	itett	lt
 800da1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da20:	1b1c      	subge	r4, r3, r4
 800da22:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da24:	1ae3      	sublt	r3, r4, r3
 800da26:	bfbe      	ittt	lt
 800da28:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da2a:	2400      	movlt	r4, #0
 800da2c:	18d2      	addlt	r2, r2, r3
 800da2e:	9b07      	ldr	r3, [sp, #28]
 800da30:	bfb8      	it	lt
 800da32:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da34:	2b00      	cmp	r3, #0
 800da36:	bfb5      	itete	lt
 800da38:	eba8 0603 	sublt.w	r6, r8, r3
 800da3c:	4646      	movge	r6, r8
 800da3e:	2300      	movlt	r3, #0
 800da40:	9b07      	ldrge	r3, [sp, #28]
 800da42:	e730      	b.n	800d8a6 <_dtoa_r+0x71e>
 800da44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da46:	4646      	mov	r6, r8
 800da48:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da4a:	e735      	b.n	800d8b8 <_dtoa_r+0x730>
 800da4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da4e:	e75c      	b.n	800d90a <_dtoa_r+0x782>
 800da50:	2300      	movs	r3, #0
 800da52:	e788      	b.n	800d966 <_dtoa_r+0x7de>
 800da54:	3fe00000 	.word	0x3fe00000
 800da58:	40240000 	.word	0x40240000
 800da5c:	40140000 	.word	0x40140000
 800da60:	9b02      	ldr	r3, [sp, #8]
 800da62:	e780      	b.n	800d966 <_dtoa_r+0x7de>
 800da64:	2300      	movs	r3, #0
 800da66:	930a      	str	r3, [sp, #40]	@ 0x28
 800da68:	e782      	b.n	800d970 <_dtoa_r+0x7e8>
 800da6a:	d099      	beq.n	800d9a0 <_dtoa_r+0x818>
 800da6c:	331c      	adds	r3, #28
 800da6e:	9a08      	ldr	r2, [sp, #32]
 800da70:	441a      	add	r2, r3
 800da72:	4498      	add	r8, r3
 800da74:	441e      	add	r6, r3
 800da76:	9208      	str	r2, [sp, #32]
 800da78:	e792      	b.n	800d9a0 <_dtoa_r+0x818>
 800da7a:	4603      	mov	r3, r0
 800da7c:	e7f6      	b.n	800da6c <_dtoa_r+0x8e4>
 800da7e:	9b07      	ldr	r3, [sp, #28]
 800da80:	9704      	str	r7, [sp, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	dc20      	bgt.n	800dac8 <_dtoa_r+0x940>
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	dd1e      	ble.n	800dacc <_dtoa_r+0x944>
 800da8e:	9b00      	ldr	r3, [sp, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f47f aec0 	bne.w	800d816 <_dtoa_r+0x68e>
 800da96:	4621      	mov	r1, r4
 800da98:	2205      	movs	r2, #5
 800da9a:	4658      	mov	r0, fp
 800da9c:	f000 fa9a 	bl	800dfd4 <__multadd>
 800daa0:	4601      	mov	r1, r0
 800daa2:	4604      	mov	r4, r0
 800daa4:	4648      	mov	r0, r9
 800daa6:	f000 fcf9 	bl	800e49c <__mcmp>
 800daaa:	2800      	cmp	r0, #0
 800daac:	f77f aeb3 	ble.w	800d816 <_dtoa_r+0x68e>
 800dab0:	2331      	movs	r3, #49	@ 0x31
 800dab2:	4656      	mov	r6, sl
 800dab4:	f806 3b01 	strb.w	r3, [r6], #1
 800dab8:	9b04      	ldr	r3, [sp, #16]
 800daba:	3301      	adds	r3, #1
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	e6ae      	b.n	800d81e <_dtoa_r+0x696>
 800dac0:	9c07      	ldr	r4, [sp, #28]
 800dac2:	9704      	str	r7, [sp, #16]
 800dac4:	4625      	mov	r5, r4
 800dac6:	e7f3      	b.n	800dab0 <_dtoa_r+0x928>
 800dac8:	9b07      	ldr	r3, [sp, #28]
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 8104 	beq.w	800dcdc <_dtoa_r+0xb54>
 800dad4:	2e00      	cmp	r6, #0
 800dad6:	dd05      	ble.n	800dae4 <_dtoa_r+0x95c>
 800dad8:	4629      	mov	r1, r5
 800dada:	4632      	mov	r2, r6
 800dadc:	4658      	mov	r0, fp
 800dade:	f000 fc71 	bl	800e3c4 <__lshift>
 800dae2:	4605      	mov	r5, r0
 800dae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d05a      	beq.n	800dba0 <_dtoa_r+0xa18>
 800daea:	6869      	ldr	r1, [r5, #4]
 800daec:	4658      	mov	r0, fp
 800daee:	f000 fa0f 	bl	800df10 <_Balloc>
 800daf2:	4606      	mov	r6, r0
 800daf4:	b928      	cbnz	r0, 800db02 <_dtoa_r+0x97a>
 800daf6:	4b84      	ldr	r3, [pc, #528]	@ (800dd08 <_dtoa_r+0xb80>)
 800daf8:	4602      	mov	r2, r0
 800dafa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dafe:	f7ff bb5a 	b.w	800d1b6 <_dtoa_r+0x2e>
 800db02:	692a      	ldr	r2, [r5, #16]
 800db04:	f105 010c 	add.w	r1, r5, #12
 800db08:	300c      	adds	r0, #12
 800db0a:	3202      	adds	r2, #2
 800db0c:	0092      	lsls	r2, r2, #2
 800db0e:	f001 ff81 	bl	800fa14 <memcpy>
 800db12:	2201      	movs	r2, #1
 800db14:	4631      	mov	r1, r6
 800db16:	4658      	mov	r0, fp
 800db18:	f000 fc54 	bl	800e3c4 <__lshift>
 800db1c:	f10a 0301 	add.w	r3, sl, #1
 800db20:	462f      	mov	r7, r5
 800db22:	4605      	mov	r5, r0
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	9b00      	ldr	r3, [sp, #0]
 800db28:	4453      	add	r3, sl
 800db2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db2c:	9b02      	ldr	r3, [sp, #8]
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	930a      	str	r3, [sp, #40]	@ 0x28
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	4621      	mov	r1, r4
 800db38:	4648      	mov	r0, r9
 800db3a:	3b01      	subs	r3, #1
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	f7ff fa93 	bl	800d068 <quorem>
 800db42:	4639      	mov	r1, r7
 800db44:	9002      	str	r0, [sp, #8]
 800db46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db4a:	4648      	mov	r0, r9
 800db4c:	f000 fca6 	bl	800e49c <__mcmp>
 800db50:	462a      	mov	r2, r5
 800db52:	9008      	str	r0, [sp, #32]
 800db54:	4621      	mov	r1, r4
 800db56:	4658      	mov	r0, fp
 800db58:	f000 fcbc 	bl	800e4d4 <__mdiff>
 800db5c:	68c2      	ldr	r2, [r0, #12]
 800db5e:	4606      	mov	r6, r0
 800db60:	bb02      	cbnz	r2, 800dba4 <_dtoa_r+0xa1c>
 800db62:	4601      	mov	r1, r0
 800db64:	4648      	mov	r0, r9
 800db66:	f000 fc99 	bl	800e49c <__mcmp>
 800db6a:	4602      	mov	r2, r0
 800db6c:	4631      	mov	r1, r6
 800db6e:	4658      	mov	r0, fp
 800db70:	920e      	str	r2, [sp, #56]	@ 0x38
 800db72:	f000 fa0d 	bl	800df90 <_Bfree>
 800db76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db7a:	9e07      	ldr	r6, [sp, #28]
 800db7c:	ea43 0102 	orr.w	r1, r3, r2
 800db80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db82:	4319      	orrs	r1, r3
 800db84:	d110      	bne.n	800dba8 <_dtoa_r+0xa20>
 800db86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db8a:	d029      	beq.n	800dbe0 <_dtoa_r+0xa58>
 800db8c:	9b08      	ldr	r3, [sp, #32]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	dd02      	ble.n	800db98 <_dtoa_r+0xa10>
 800db92:	9b02      	ldr	r3, [sp, #8]
 800db94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db98:	9b00      	ldr	r3, [sp, #0]
 800db9a:	f883 8000 	strb.w	r8, [r3]
 800db9e:	e63f      	b.n	800d820 <_dtoa_r+0x698>
 800dba0:	4628      	mov	r0, r5
 800dba2:	e7bb      	b.n	800db1c <_dtoa_r+0x994>
 800dba4:	2201      	movs	r2, #1
 800dba6:	e7e1      	b.n	800db6c <_dtoa_r+0x9e4>
 800dba8:	9b08      	ldr	r3, [sp, #32]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	db04      	blt.n	800dbb8 <_dtoa_r+0xa30>
 800dbae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbb0:	430b      	orrs	r3, r1
 800dbb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbb4:	430b      	orrs	r3, r1
 800dbb6:	d120      	bne.n	800dbfa <_dtoa_r+0xa72>
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	dded      	ble.n	800db98 <_dtoa_r+0xa10>
 800dbbc:	4649      	mov	r1, r9
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	4658      	mov	r0, fp
 800dbc2:	f000 fbff 	bl	800e3c4 <__lshift>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4681      	mov	r9, r0
 800dbca:	f000 fc67 	bl	800e49c <__mcmp>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	dc03      	bgt.n	800dbda <_dtoa_r+0xa52>
 800dbd2:	d1e1      	bne.n	800db98 <_dtoa_r+0xa10>
 800dbd4:	f018 0f01 	tst.w	r8, #1
 800dbd8:	d0de      	beq.n	800db98 <_dtoa_r+0xa10>
 800dbda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbde:	d1d8      	bne.n	800db92 <_dtoa_r+0xa0a>
 800dbe0:	2339      	movs	r3, #57	@ 0x39
 800dbe2:	9a00      	ldr	r2, [sp, #0]
 800dbe4:	7013      	strb	r3, [r2, #0]
 800dbe6:	4633      	mov	r3, r6
 800dbe8:	461e      	mov	r6, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dbf0:	2a39      	cmp	r2, #57	@ 0x39
 800dbf2:	d052      	beq.n	800dc9a <_dtoa_r+0xb12>
 800dbf4:	3201      	adds	r2, #1
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	e612      	b.n	800d820 <_dtoa_r+0x698>
 800dbfa:	2a00      	cmp	r2, #0
 800dbfc:	dd07      	ble.n	800dc0e <_dtoa_r+0xa86>
 800dbfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc02:	d0ed      	beq.n	800dbe0 <_dtoa_r+0xa58>
 800dc04:	f108 0301 	add.w	r3, r8, #1
 800dc08:	9a00      	ldr	r2, [sp, #0]
 800dc0a:	7013      	strb	r3, [r2, #0]
 800dc0c:	e608      	b.n	800d820 <_dtoa_r+0x698>
 800dc0e:	9b07      	ldr	r3, [sp, #28]
 800dc10:	9a07      	ldr	r2, [sp, #28]
 800dc12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d028      	beq.n	800dc6e <_dtoa_r+0xae6>
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	2300      	movs	r3, #0
 800dc20:	220a      	movs	r2, #10
 800dc22:	4658      	mov	r0, fp
 800dc24:	f000 f9d6 	bl	800dfd4 <__multadd>
 800dc28:	42af      	cmp	r7, r5
 800dc2a:	4681      	mov	r9, r0
 800dc2c:	f04f 0300 	mov.w	r3, #0
 800dc30:	f04f 020a 	mov.w	r2, #10
 800dc34:	4639      	mov	r1, r7
 800dc36:	4658      	mov	r0, fp
 800dc38:	d107      	bne.n	800dc4a <_dtoa_r+0xac2>
 800dc3a:	f000 f9cb 	bl	800dfd4 <__multadd>
 800dc3e:	4607      	mov	r7, r0
 800dc40:	4605      	mov	r5, r0
 800dc42:	9b07      	ldr	r3, [sp, #28]
 800dc44:	3301      	adds	r3, #1
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	e774      	b.n	800db34 <_dtoa_r+0x9ac>
 800dc4a:	f000 f9c3 	bl	800dfd4 <__multadd>
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4607      	mov	r7, r0
 800dc52:	2300      	movs	r3, #0
 800dc54:	220a      	movs	r2, #10
 800dc56:	4658      	mov	r0, fp
 800dc58:	f000 f9bc 	bl	800dfd4 <__multadd>
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	e7f0      	b.n	800dc42 <_dtoa_r+0xaba>
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	2700      	movs	r7, #0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	bfcc      	ite	gt
 800dc68:	461e      	movgt	r6, r3
 800dc6a:	2601      	movle	r6, #1
 800dc6c:	4456      	add	r6, sl
 800dc6e:	4649      	mov	r1, r9
 800dc70:	2201      	movs	r2, #1
 800dc72:	4658      	mov	r0, fp
 800dc74:	f000 fba6 	bl	800e3c4 <__lshift>
 800dc78:	4621      	mov	r1, r4
 800dc7a:	4681      	mov	r9, r0
 800dc7c:	f000 fc0e 	bl	800e49c <__mcmp>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	dcb0      	bgt.n	800dbe6 <_dtoa_r+0xa5e>
 800dc84:	d102      	bne.n	800dc8c <_dtoa_r+0xb04>
 800dc86:	f018 0f01 	tst.w	r8, #1
 800dc8a:	d1ac      	bne.n	800dbe6 <_dtoa_r+0xa5e>
 800dc8c:	4633      	mov	r3, r6
 800dc8e:	461e      	mov	r6, r3
 800dc90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc94:	2a30      	cmp	r2, #48	@ 0x30
 800dc96:	d0fa      	beq.n	800dc8e <_dtoa_r+0xb06>
 800dc98:	e5c2      	b.n	800d820 <_dtoa_r+0x698>
 800dc9a:	459a      	cmp	sl, r3
 800dc9c:	d1a4      	bne.n	800dbe8 <_dtoa_r+0xa60>
 800dc9e:	9b04      	ldr	r3, [sp, #16]
 800dca0:	3301      	adds	r3, #1
 800dca2:	9304      	str	r3, [sp, #16]
 800dca4:	2331      	movs	r3, #49	@ 0x31
 800dca6:	f88a 3000 	strb.w	r3, [sl]
 800dcaa:	e5b9      	b.n	800d820 <_dtoa_r+0x698>
 800dcac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dd0c <_dtoa_r+0xb84>
 800dcb2:	b11b      	cbz	r3, 800dcbc <_dtoa_r+0xb34>
 800dcb4:	f10a 0308 	add.w	r3, sl, #8
 800dcb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	b019      	add	sp, #100	@ 0x64
 800dcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	f77f ae37 	ble.w	800d93a <_dtoa_r+0x7b2>
 800dccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	e655      	b.n	800d980 <_dtoa_r+0x7f8>
 800dcd4:	9b00      	ldr	r3, [sp, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f77f aed6 	ble.w	800da88 <_dtoa_r+0x900>
 800dcdc:	4656      	mov	r6, sl
 800dcde:	4621      	mov	r1, r4
 800dce0:	4648      	mov	r0, r9
 800dce2:	f7ff f9c1 	bl	800d068 <quorem>
 800dce6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dcea:	9b00      	ldr	r3, [sp, #0]
 800dcec:	f806 8b01 	strb.w	r8, [r6], #1
 800dcf0:	eba6 020a 	sub.w	r2, r6, sl
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	ddb3      	ble.n	800dc60 <_dtoa_r+0xad8>
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	220a      	movs	r2, #10
 800dcfe:	4658      	mov	r0, fp
 800dd00:	f000 f968 	bl	800dfd4 <__multadd>
 800dd04:	4681      	mov	r9, r0
 800dd06:	e7ea      	b.n	800dcde <_dtoa_r+0xb56>
 800dd08:	0801097d 	.word	0x0801097d
 800dd0c:	08010901 	.word	0x08010901

0800dd10 <_free_r>:
 800dd10:	b538      	push	{r3, r4, r5, lr}
 800dd12:	4605      	mov	r5, r0
 800dd14:	2900      	cmp	r1, #0
 800dd16:	d041      	beq.n	800dd9c <_free_r+0x8c>
 800dd18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd1c:	1f0c      	subs	r4, r1, #4
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	bfb8      	it	lt
 800dd22:	18e4      	addlt	r4, r4, r3
 800dd24:	f000 f8e8 	bl	800def8 <__malloc_lock>
 800dd28:	4a1d      	ldr	r2, [pc, #116]	@ (800dda0 <_free_r+0x90>)
 800dd2a:	6813      	ldr	r3, [r2, #0]
 800dd2c:	b933      	cbnz	r3, 800dd3c <_free_r+0x2c>
 800dd2e:	6063      	str	r3, [r4, #4]
 800dd30:	6014      	str	r4, [r2, #0]
 800dd32:	4628      	mov	r0, r5
 800dd34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd38:	f000 b8e4 	b.w	800df04 <__malloc_unlock>
 800dd3c:	42a3      	cmp	r3, r4
 800dd3e:	d908      	bls.n	800dd52 <_free_r+0x42>
 800dd40:	6820      	ldr	r0, [r4, #0]
 800dd42:	1821      	adds	r1, r4, r0
 800dd44:	428b      	cmp	r3, r1
 800dd46:	bf01      	itttt	eq
 800dd48:	6819      	ldreq	r1, [r3, #0]
 800dd4a:	685b      	ldreq	r3, [r3, #4]
 800dd4c:	1809      	addeq	r1, r1, r0
 800dd4e:	6021      	streq	r1, [r4, #0]
 800dd50:	e7ed      	b.n	800dd2e <_free_r+0x1e>
 800dd52:	461a      	mov	r2, r3
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	b10b      	cbz	r3, 800dd5c <_free_r+0x4c>
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	d9fa      	bls.n	800dd52 <_free_r+0x42>
 800dd5c:	6811      	ldr	r1, [r2, #0]
 800dd5e:	1850      	adds	r0, r2, r1
 800dd60:	42a0      	cmp	r0, r4
 800dd62:	d10b      	bne.n	800dd7c <_free_r+0x6c>
 800dd64:	6820      	ldr	r0, [r4, #0]
 800dd66:	4401      	add	r1, r0
 800dd68:	1850      	adds	r0, r2, r1
 800dd6a:	6011      	str	r1, [r2, #0]
 800dd6c:	4283      	cmp	r3, r0
 800dd6e:	d1e0      	bne.n	800dd32 <_free_r+0x22>
 800dd70:	6818      	ldr	r0, [r3, #0]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	4408      	add	r0, r1
 800dd76:	6053      	str	r3, [r2, #4]
 800dd78:	6010      	str	r0, [r2, #0]
 800dd7a:	e7da      	b.n	800dd32 <_free_r+0x22>
 800dd7c:	d902      	bls.n	800dd84 <_free_r+0x74>
 800dd7e:	230c      	movs	r3, #12
 800dd80:	602b      	str	r3, [r5, #0]
 800dd82:	e7d6      	b.n	800dd32 <_free_r+0x22>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	1821      	adds	r1, r4, r0
 800dd88:	428b      	cmp	r3, r1
 800dd8a:	bf02      	ittt	eq
 800dd8c:	6819      	ldreq	r1, [r3, #0]
 800dd8e:	685b      	ldreq	r3, [r3, #4]
 800dd90:	1809      	addeq	r1, r1, r0
 800dd92:	6063      	str	r3, [r4, #4]
 800dd94:	bf08      	it	eq
 800dd96:	6021      	streq	r1, [r4, #0]
 800dd98:	6054      	str	r4, [r2, #4]
 800dd9a:	e7ca      	b.n	800dd32 <_free_r+0x22>
 800dd9c:	bd38      	pop	{r3, r4, r5, pc}
 800dd9e:	bf00      	nop
 800dda0:	200023e0 	.word	0x200023e0

0800dda4 <malloc>:
 800dda4:	4b02      	ldr	r3, [pc, #8]	@ (800ddb0 <malloc+0xc>)
 800dda6:	4601      	mov	r1, r0
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	f000 b825 	b.w	800ddf8 <_malloc_r>
 800ddae:	bf00      	nop
 800ddb0:	2000001c 	.word	0x2000001c

0800ddb4 <sbrk_aligned>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	4e0f      	ldr	r6, [pc, #60]	@ (800ddf4 <sbrk_aligned+0x40>)
 800ddb8:	460c      	mov	r4, r1
 800ddba:	4605      	mov	r5, r0
 800ddbc:	6831      	ldr	r1, [r6, #0]
 800ddbe:	b911      	cbnz	r1, 800ddc6 <sbrk_aligned+0x12>
 800ddc0:	f001 fe18 	bl	800f9f4 <_sbrk_r>
 800ddc4:	6030      	str	r0, [r6, #0]
 800ddc6:	4621      	mov	r1, r4
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f001 fe13 	bl	800f9f4 <_sbrk_r>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d103      	bne.n	800ddda <sbrk_aligned+0x26>
 800ddd2:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}
 800ddda:	1cc4      	adds	r4, r0, #3
 800dddc:	f024 0403 	bic.w	r4, r4, #3
 800dde0:	42a0      	cmp	r0, r4
 800dde2:	d0f8      	beq.n	800ddd6 <sbrk_aligned+0x22>
 800dde4:	1a21      	subs	r1, r4, r0
 800dde6:	4628      	mov	r0, r5
 800dde8:	f001 fe04 	bl	800f9f4 <_sbrk_r>
 800ddec:	3001      	adds	r0, #1
 800ddee:	d1f2      	bne.n	800ddd6 <sbrk_aligned+0x22>
 800ddf0:	e7ef      	b.n	800ddd2 <sbrk_aligned+0x1e>
 800ddf2:	bf00      	nop
 800ddf4:	200023dc 	.word	0x200023dc

0800ddf8 <_malloc_r>:
 800ddf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddfc:	1ccd      	adds	r5, r1, #3
 800ddfe:	4606      	mov	r6, r0
 800de00:	f025 0503 	bic.w	r5, r5, #3
 800de04:	3508      	adds	r5, #8
 800de06:	2d0c      	cmp	r5, #12
 800de08:	bf38      	it	cc
 800de0a:	250c      	movcc	r5, #12
 800de0c:	2d00      	cmp	r5, #0
 800de0e:	db01      	blt.n	800de14 <_malloc_r+0x1c>
 800de10:	42a9      	cmp	r1, r5
 800de12:	d904      	bls.n	800de1e <_malloc_r+0x26>
 800de14:	230c      	movs	r3, #12
 800de16:	6033      	str	r3, [r6, #0]
 800de18:	2000      	movs	r0, #0
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800def4 <_malloc_r+0xfc>
 800de22:	f000 f869 	bl	800def8 <__malloc_lock>
 800de26:	f8d8 3000 	ldr.w	r3, [r8]
 800de2a:	461c      	mov	r4, r3
 800de2c:	bb44      	cbnz	r4, 800de80 <_malloc_r+0x88>
 800de2e:	4629      	mov	r1, r5
 800de30:	4630      	mov	r0, r6
 800de32:	f7ff ffbf 	bl	800ddb4 <sbrk_aligned>
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	4604      	mov	r4, r0
 800de3a:	d158      	bne.n	800deee <_malloc_r+0xf6>
 800de3c:	f8d8 4000 	ldr.w	r4, [r8]
 800de40:	4627      	mov	r7, r4
 800de42:	2f00      	cmp	r7, #0
 800de44:	d143      	bne.n	800dece <_malloc_r+0xd6>
 800de46:	2c00      	cmp	r4, #0
 800de48:	d04b      	beq.n	800dee2 <_malloc_r+0xea>
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	4639      	mov	r1, r7
 800de4e:	4630      	mov	r0, r6
 800de50:	eb04 0903 	add.w	r9, r4, r3
 800de54:	f001 fdce 	bl	800f9f4 <_sbrk_r>
 800de58:	4581      	cmp	r9, r0
 800de5a:	d142      	bne.n	800dee2 <_malloc_r+0xea>
 800de5c:	6821      	ldr	r1, [r4, #0]
 800de5e:	4630      	mov	r0, r6
 800de60:	1a6d      	subs	r5, r5, r1
 800de62:	4629      	mov	r1, r5
 800de64:	f7ff ffa6 	bl	800ddb4 <sbrk_aligned>
 800de68:	3001      	adds	r0, #1
 800de6a:	d03a      	beq.n	800dee2 <_malloc_r+0xea>
 800de6c:	6823      	ldr	r3, [r4, #0]
 800de6e:	442b      	add	r3, r5
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	f8d8 3000 	ldr.w	r3, [r8]
 800de76:	685a      	ldr	r2, [r3, #4]
 800de78:	bb62      	cbnz	r2, 800ded4 <_malloc_r+0xdc>
 800de7a:	f8c8 7000 	str.w	r7, [r8]
 800de7e:	e00f      	b.n	800dea0 <_malloc_r+0xa8>
 800de80:	6822      	ldr	r2, [r4, #0]
 800de82:	1b52      	subs	r2, r2, r5
 800de84:	d420      	bmi.n	800dec8 <_malloc_r+0xd0>
 800de86:	2a0b      	cmp	r2, #11
 800de88:	d917      	bls.n	800deba <_malloc_r+0xc2>
 800de8a:	1961      	adds	r1, r4, r5
 800de8c:	42a3      	cmp	r3, r4
 800de8e:	6025      	str	r5, [r4, #0]
 800de90:	bf18      	it	ne
 800de92:	6059      	strne	r1, [r3, #4]
 800de94:	6863      	ldr	r3, [r4, #4]
 800de96:	bf08      	it	eq
 800de98:	f8c8 1000 	streq.w	r1, [r8]
 800de9c:	5162      	str	r2, [r4, r5]
 800de9e:	604b      	str	r3, [r1, #4]
 800dea0:	4630      	mov	r0, r6
 800dea2:	f000 f82f 	bl	800df04 <__malloc_unlock>
 800dea6:	f104 000b 	add.w	r0, r4, #11
 800deaa:	1d23      	adds	r3, r4, #4
 800deac:	f020 0007 	bic.w	r0, r0, #7
 800deb0:	1ac2      	subs	r2, r0, r3
 800deb2:	bf1c      	itt	ne
 800deb4:	1a1b      	subne	r3, r3, r0
 800deb6:	50a3      	strne	r3, [r4, r2]
 800deb8:	e7af      	b.n	800de1a <_malloc_r+0x22>
 800deba:	6862      	ldr	r2, [r4, #4]
 800debc:	42a3      	cmp	r3, r4
 800debe:	bf0c      	ite	eq
 800dec0:	f8c8 2000 	streq.w	r2, [r8]
 800dec4:	605a      	strne	r2, [r3, #4]
 800dec6:	e7eb      	b.n	800dea0 <_malloc_r+0xa8>
 800dec8:	4623      	mov	r3, r4
 800deca:	6864      	ldr	r4, [r4, #4]
 800decc:	e7ae      	b.n	800de2c <_malloc_r+0x34>
 800dece:	463c      	mov	r4, r7
 800ded0:	687f      	ldr	r7, [r7, #4]
 800ded2:	e7b6      	b.n	800de42 <_malloc_r+0x4a>
 800ded4:	461a      	mov	r2, r3
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	42a3      	cmp	r3, r4
 800deda:	d1fb      	bne.n	800ded4 <_malloc_r+0xdc>
 800dedc:	2300      	movs	r3, #0
 800dede:	6053      	str	r3, [r2, #4]
 800dee0:	e7de      	b.n	800dea0 <_malloc_r+0xa8>
 800dee2:	230c      	movs	r3, #12
 800dee4:	4630      	mov	r0, r6
 800dee6:	6033      	str	r3, [r6, #0]
 800dee8:	f000 f80c 	bl	800df04 <__malloc_unlock>
 800deec:	e794      	b.n	800de18 <_malloc_r+0x20>
 800deee:	6005      	str	r5, [r0, #0]
 800def0:	e7d6      	b.n	800dea0 <_malloc_r+0xa8>
 800def2:	bf00      	nop
 800def4:	200023e0 	.word	0x200023e0

0800def8 <__malloc_lock>:
 800def8:	4801      	ldr	r0, [pc, #4]	@ (800df00 <__malloc_lock+0x8>)
 800defa:	f7ff b89e 	b.w	800d03a <__retarget_lock_acquire_recursive>
 800defe:	bf00      	nop
 800df00:	200023d8 	.word	0x200023d8

0800df04 <__malloc_unlock>:
 800df04:	4801      	ldr	r0, [pc, #4]	@ (800df0c <__malloc_unlock+0x8>)
 800df06:	f7ff b899 	b.w	800d03c <__retarget_lock_release_recursive>
 800df0a:	bf00      	nop
 800df0c:	200023d8 	.word	0x200023d8

0800df10 <_Balloc>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	69c6      	ldr	r6, [r0, #28]
 800df14:	4604      	mov	r4, r0
 800df16:	460d      	mov	r5, r1
 800df18:	b976      	cbnz	r6, 800df38 <_Balloc+0x28>
 800df1a:	2010      	movs	r0, #16
 800df1c:	f7ff ff42 	bl	800dda4 <malloc>
 800df20:	4602      	mov	r2, r0
 800df22:	61e0      	str	r0, [r4, #28]
 800df24:	b920      	cbnz	r0, 800df30 <_Balloc+0x20>
 800df26:	4b18      	ldr	r3, [pc, #96]	@ (800df88 <_Balloc+0x78>)
 800df28:	216b      	movs	r1, #107	@ 0x6b
 800df2a:	4818      	ldr	r0, [pc, #96]	@ (800df8c <_Balloc+0x7c>)
 800df2c:	f001 fd88 	bl	800fa40 <__assert_func>
 800df30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df34:	6006      	str	r6, [r0, #0]
 800df36:	60c6      	str	r6, [r0, #12]
 800df38:	69e6      	ldr	r6, [r4, #28]
 800df3a:	68f3      	ldr	r3, [r6, #12]
 800df3c:	b183      	cbz	r3, 800df60 <_Balloc+0x50>
 800df3e:	69e3      	ldr	r3, [r4, #28]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df46:	b9b8      	cbnz	r0, 800df78 <_Balloc+0x68>
 800df48:	2101      	movs	r1, #1
 800df4a:	4620      	mov	r0, r4
 800df4c:	fa01 f605 	lsl.w	r6, r1, r5
 800df50:	1d72      	adds	r2, r6, #5
 800df52:	0092      	lsls	r2, r2, #2
 800df54:	f001 fd92 	bl	800fa7c <_calloc_r>
 800df58:	b160      	cbz	r0, 800df74 <_Balloc+0x64>
 800df5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df5e:	e00e      	b.n	800df7e <_Balloc+0x6e>
 800df60:	2221      	movs	r2, #33	@ 0x21
 800df62:	2104      	movs	r1, #4
 800df64:	4620      	mov	r0, r4
 800df66:	f001 fd89 	bl	800fa7c <_calloc_r>
 800df6a:	69e3      	ldr	r3, [r4, #28]
 800df6c:	60f0      	str	r0, [r6, #12]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e4      	bne.n	800df3e <_Balloc+0x2e>
 800df74:	2000      	movs	r0, #0
 800df76:	bd70      	pop	{r4, r5, r6, pc}
 800df78:	6802      	ldr	r2, [r0, #0]
 800df7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df7e:	2300      	movs	r3, #0
 800df80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df84:	e7f7      	b.n	800df76 <_Balloc+0x66>
 800df86:	bf00      	nop
 800df88:	0801090e 	.word	0x0801090e
 800df8c:	0801098e 	.word	0x0801098e

0800df90 <_Bfree>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	69c6      	ldr	r6, [r0, #28]
 800df94:	4605      	mov	r5, r0
 800df96:	460c      	mov	r4, r1
 800df98:	b976      	cbnz	r6, 800dfb8 <_Bfree+0x28>
 800df9a:	2010      	movs	r0, #16
 800df9c:	f7ff ff02 	bl	800dda4 <malloc>
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	61e8      	str	r0, [r5, #28]
 800dfa4:	b920      	cbnz	r0, 800dfb0 <_Bfree+0x20>
 800dfa6:	4b09      	ldr	r3, [pc, #36]	@ (800dfcc <_Bfree+0x3c>)
 800dfa8:	218f      	movs	r1, #143	@ 0x8f
 800dfaa:	4809      	ldr	r0, [pc, #36]	@ (800dfd0 <_Bfree+0x40>)
 800dfac:	f001 fd48 	bl	800fa40 <__assert_func>
 800dfb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfb4:	6006      	str	r6, [r0, #0]
 800dfb6:	60c6      	str	r6, [r0, #12]
 800dfb8:	b13c      	cbz	r4, 800dfca <_Bfree+0x3a>
 800dfba:	69eb      	ldr	r3, [r5, #28]
 800dfbc:	6862      	ldr	r2, [r4, #4]
 800dfbe:	68db      	ldr	r3, [r3, #12]
 800dfc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfc4:	6021      	str	r1, [r4, #0]
 800dfc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dfca:	bd70      	pop	{r4, r5, r6, pc}
 800dfcc:	0801090e 	.word	0x0801090e
 800dfd0:	0801098e 	.word	0x0801098e

0800dfd4 <__multadd>:
 800dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	f101 0c14 	add.w	ip, r1, #20
 800dfdc:	4607      	mov	r7, r0
 800dfde:	460c      	mov	r4, r1
 800dfe0:	461e      	mov	r6, r3
 800dfe2:	690d      	ldr	r5, [r1, #16]
 800dfe4:	2000      	movs	r0, #0
 800dfe6:	f8dc 3000 	ldr.w	r3, [ip]
 800dfea:	3001      	adds	r0, #1
 800dfec:	b299      	uxth	r1, r3
 800dfee:	4285      	cmp	r5, r0
 800dff0:	fb02 6101 	mla	r1, r2, r1, r6
 800dff4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dff8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800dffc:	b289      	uxth	r1, r1
 800dffe:	fb02 3306 	mla	r3, r2, r6, r3
 800e002:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e00a:	f84c 1b04 	str.w	r1, [ip], #4
 800e00e:	dcea      	bgt.n	800dfe6 <__multadd+0x12>
 800e010:	b30e      	cbz	r6, 800e056 <__multadd+0x82>
 800e012:	68a3      	ldr	r3, [r4, #8]
 800e014:	42ab      	cmp	r3, r5
 800e016:	dc19      	bgt.n	800e04c <__multadd+0x78>
 800e018:	6861      	ldr	r1, [r4, #4]
 800e01a:	4638      	mov	r0, r7
 800e01c:	3101      	adds	r1, #1
 800e01e:	f7ff ff77 	bl	800df10 <_Balloc>
 800e022:	4680      	mov	r8, r0
 800e024:	b928      	cbnz	r0, 800e032 <__multadd+0x5e>
 800e026:	4602      	mov	r2, r0
 800e028:	4b0c      	ldr	r3, [pc, #48]	@ (800e05c <__multadd+0x88>)
 800e02a:	21ba      	movs	r1, #186	@ 0xba
 800e02c:	480c      	ldr	r0, [pc, #48]	@ (800e060 <__multadd+0x8c>)
 800e02e:	f001 fd07 	bl	800fa40 <__assert_func>
 800e032:	6922      	ldr	r2, [r4, #16]
 800e034:	f104 010c 	add.w	r1, r4, #12
 800e038:	300c      	adds	r0, #12
 800e03a:	3202      	adds	r2, #2
 800e03c:	0092      	lsls	r2, r2, #2
 800e03e:	f001 fce9 	bl	800fa14 <memcpy>
 800e042:	4621      	mov	r1, r4
 800e044:	4644      	mov	r4, r8
 800e046:	4638      	mov	r0, r7
 800e048:	f7ff ffa2 	bl	800df90 <_Bfree>
 800e04c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e050:	3501      	adds	r5, #1
 800e052:	615e      	str	r6, [r3, #20]
 800e054:	6125      	str	r5, [r4, #16]
 800e056:	4620      	mov	r0, r4
 800e058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e05c:	0801097d 	.word	0x0801097d
 800e060:	0801098e 	.word	0x0801098e

0800e064 <__s2b>:
 800e064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e068:	4615      	mov	r5, r2
 800e06a:	461f      	mov	r7, r3
 800e06c:	2209      	movs	r2, #9
 800e06e:	3308      	adds	r3, #8
 800e070:	460c      	mov	r4, r1
 800e072:	4606      	mov	r6, r0
 800e074:	2100      	movs	r1, #0
 800e076:	fb93 f3f2 	sdiv	r3, r3, r2
 800e07a:	2201      	movs	r2, #1
 800e07c:	429a      	cmp	r2, r3
 800e07e:	db09      	blt.n	800e094 <__s2b+0x30>
 800e080:	4630      	mov	r0, r6
 800e082:	f7ff ff45 	bl	800df10 <_Balloc>
 800e086:	b940      	cbnz	r0, 800e09a <__s2b+0x36>
 800e088:	4602      	mov	r2, r0
 800e08a:	4b19      	ldr	r3, [pc, #100]	@ (800e0f0 <__s2b+0x8c>)
 800e08c:	21d3      	movs	r1, #211	@ 0xd3
 800e08e:	4819      	ldr	r0, [pc, #100]	@ (800e0f4 <__s2b+0x90>)
 800e090:	f001 fcd6 	bl	800fa40 <__assert_func>
 800e094:	0052      	lsls	r2, r2, #1
 800e096:	3101      	adds	r1, #1
 800e098:	e7f0      	b.n	800e07c <__s2b+0x18>
 800e09a:	9b08      	ldr	r3, [sp, #32]
 800e09c:	2d09      	cmp	r5, #9
 800e09e:	6143      	str	r3, [r0, #20]
 800e0a0:	f04f 0301 	mov.w	r3, #1
 800e0a4:	6103      	str	r3, [r0, #16]
 800e0a6:	dd16      	ble.n	800e0d6 <__s2b+0x72>
 800e0a8:	f104 0909 	add.w	r9, r4, #9
 800e0ac:	442c      	add	r4, r5
 800e0ae:	46c8      	mov	r8, r9
 800e0b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0b4:	4601      	mov	r1, r0
 800e0b6:	220a      	movs	r2, #10
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	3b30      	subs	r3, #48	@ 0x30
 800e0bc:	f7ff ff8a 	bl	800dfd4 <__multadd>
 800e0c0:	45a0      	cmp	r8, r4
 800e0c2:	d1f5      	bne.n	800e0b0 <__s2b+0x4c>
 800e0c4:	f1a5 0408 	sub.w	r4, r5, #8
 800e0c8:	444c      	add	r4, r9
 800e0ca:	1b2d      	subs	r5, r5, r4
 800e0cc:	1963      	adds	r3, r4, r5
 800e0ce:	42bb      	cmp	r3, r7
 800e0d0:	db04      	blt.n	800e0dc <__s2b+0x78>
 800e0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0d6:	340a      	adds	r4, #10
 800e0d8:	2509      	movs	r5, #9
 800e0da:	e7f6      	b.n	800e0ca <__s2b+0x66>
 800e0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	220a      	movs	r2, #10
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	3b30      	subs	r3, #48	@ 0x30
 800e0e8:	f7ff ff74 	bl	800dfd4 <__multadd>
 800e0ec:	e7ee      	b.n	800e0cc <__s2b+0x68>
 800e0ee:	bf00      	nop
 800e0f0:	0801097d 	.word	0x0801097d
 800e0f4:	0801098e 	.word	0x0801098e

0800e0f8 <__hi0bits>:
 800e0f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	bf36      	itet	cc
 800e100:	0403      	lslcc	r3, r0, #16
 800e102:	2000      	movcs	r0, #0
 800e104:	2010      	movcc	r0, #16
 800e106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e10a:	bf3c      	itt	cc
 800e10c:	021b      	lslcc	r3, r3, #8
 800e10e:	3008      	addcc	r0, #8
 800e110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e114:	bf3c      	itt	cc
 800e116:	011b      	lslcc	r3, r3, #4
 800e118:	3004      	addcc	r0, #4
 800e11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e11e:	bf3c      	itt	cc
 800e120:	009b      	lslcc	r3, r3, #2
 800e122:	3002      	addcc	r0, #2
 800e124:	2b00      	cmp	r3, #0
 800e126:	db05      	blt.n	800e134 <__hi0bits+0x3c>
 800e128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e12c:	f100 0001 	add.w	r0, r0, #1
 800e130:	bf08      	it	eq
 800e132:	2020      	moveq	r0, #32
 800e134:	4770      	bx	lr

0800e136 <__lo0bits>:
 800e136:	6803      	ldr	r3, [r0, #0]
 800e138:	4602      	mov	r2, r0
 800e13a:	f013 0007 	ands.w	r0, r3, #7
 800e13e:	d00b      	beq.n	800e158 <__lo0bits+0x22>
 800e140:	07d9      	lsls	r1, r3, #31
 800e142:	d421      	bmi.n	800e188 <__lo0bits+0x52>
 800e144:	0798      	lsls	r0, r3, #30
 800e146:	bf47      	ittee	mi
 800e148:	085b      	lsrmi	r3, r3, #1
 800e14a:	2001      	movmi	r0, #1
 800e14c:	089b      	lsrpl	r3, r3, #2
 800e14e:	2002      	movpl	r0, #2
 800e150:	bf4c      	ite	mi
 800e152:	6013      	strmi	r3, [r2, #0]
 800e154:	6013      	strpl	r3, [r2, #0]
 800e156:	4770      	bx	lr
 800e158:	b299      	uxth	r1, r3
 800e15a:	b909      	cbnz	r1, 800e160 <__lo0bits+0x2a>
 800e15c:	0c1b      	lsrs	r3, r3, #16
 800e15e:	2010      	movs	r0, #16
 800e160:	b2d9      	uxtb	r1, r3
 800e162:	b909      	cbnz	r1, 800e168 <__lo0bits+0x32>
 800e164:	3008      	adds	r0, #8
 800e166:	0a1b      	lsrs	r3, r3, #8
 800e168:	0719      	lsls	r1, r3, #28
 800e16a:	bf04      	itt	eq
 800e16c:	091b      	lsreq	r3, r3, #4
 800e16e:	3004      	addeq	r0, #4
 800e170:	0799      	lsls	r1, r3, #30
 800e172:	bf04      	itt	eq
 800e174:	089b      	lsreq	r3, r3, #2
 800e176:	3002      	addeq	r0, #2
 800e178:	07d9      	lsls	r1, r3, #31
 800e17a:	d403      	bmi.n	800e184 <__lo0bits+0x4e>
 800e17c:	085b      	lsrs	r3, r3, #1
 800e17e:	f100 0001 	add.w	r0, r0, #1
 800e182:	d003      	beq.n	800e18c <__lo0bits+0x56>
 800e184:	6013      	str	r3, [r2, #0]
 800e186:	4770      	bx	lr
 800e188:	2000      	movs	r0, #0
 800e18a:	4770      	bx	lr
 800e18c:	2020      	movs	r0, #32
 800e18e:	4770      	bx	lr

0800e190 <__i2b>:
 800e190:	b510      	push	{r4, lr}
 800e192:	460c      	mov	r4, r1
 800e194:	2101      	movs	r1, #1
 800e196:	f7ff febb 	bl	800df10 <_Balloc>
 800e19a:	4602      	mov	r2, r0
 800e19c:	b928      	cbnz	r0, 800e1aa <__i2b+0x1a>
 800e19e:	4b05      	ldr	r3, [pc, #20]	@ (800e1b4 <__i2b+0x24>)
 800e1a0:	f240 1145 	movw	r1, #325	@ 0x145
 800e1a4:	4804      	ldr	r0, [pc, #16]	@ (800e1b8 <__i2b+0x28>)
 800e1a6:	f001 fc4b 	bl	800fa40 <__assert_func>
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	6144      	str	r4, [r0, #20]
 800e1ae:	6103      	str	r3, [r0, #16]
 800e1b0:	bd10      	pop	{r4, pc}
 800e1b2:	bf00      	nop
 800e1b4:	0801097d 	.word	0x0801097d
 800e1b8:	0801098e 	.word	0x0801098e

0800e1bc <__multiply>:
 800e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c0:	4614      	mov	r4, r2
 800e1c2:	690a      	ldr	r2, [r1, #16]
 800e1c4:	460f      	mov	r7, r1
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	bfa2      	ittt	ge
 800e1ce:	4623      	movge	r3, r4
 800e1d0:	460c      	movge	r4, r1
 800e1d2:	461f      	movge	r7, r3
 800e1d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e1d8:	68a3      	ldr	r3, [r4, #8]
 800e1da:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e1de:	6861      	ldr	r1, [r4, #4]
 800e1e0:	eb0a 0609 	add.w	r6, sl, r9
 800e1e4:	42b3      	cmp	r3, r6
 800e1e6:	bfb8      	it	lt
 800e1e8:	3101      	addlt	r1, #1
 800e1ea:	f7ff fe91 	bl	800df10 <_Balloc>
 800e1ee:	b930      	cbnz	r0, 800e1fe <__multiply+0x42>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	4b45      	ldr	r3, [pc, #276]	@ (800e308 <__multiply+0x14c>)
 800e1f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e1f8:	4844      	ldr	r0, [pc, #272]	@ (800e30c <__multiply+0x150>)
 800e1fa:	f001 fc21 	bl	800fa40 <__assert_func>
 800e1fe:	f100 0514 	add.w	r5, r0, #20
 800e202:	2200      	movs	r2, #0
 800e204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e208:	462b      	mov	r3, r5
 800e20a:	4543      	cmp	r3, r8
 800e20c:	d321      	bcc.n	800e252 <__multiply+0x96>
 800e20e:	f107 0114 	add.w	r1, r7, #20
 800e212:	f104 0214 	add.w	r2, r4, #20
 800e216:	f104 0715 	add.w	r7, r4, #21
 800e21a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e21e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e222:	9302      	str	r3, [sp, #8]
 800e224:	1b13      	subs	r3, r2, r4
 800e226:	3b15      	subs	r3, #21
 800e228:	f023 0303 	bic.w	r3, r3, #3
 800e22c:	3304      	adds	r3, #4
 800e22e:	42ba      	cmp	r2, r7
 800e230:	bf38      	it	cc
 800e232:	2304      	movcc	r3, #4
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	9103      	str	r1, [sp, #12]
 800e23a:	428b      	cmp	r3, r1
 800e23c:	d80c      	bhi.n	800e258 <__multiply+0x9c>
 800e23e:	2e00      	cmp	r6, #0
 800e240:	dd03      	ble.n	800e24a <__multiply+0x8e>
 800e242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e246:	2b00      	cmp	r3, #0
 800e248:	d05b      	beq.n	800e302 <__multiply+0x146>
 800e24a:	6106      	str	r6, [r0, #16]
 800e24c:	b005      	add	sp, #20
 800e24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e252:	f843 2b04 	str.w	r2, [r3], #4
 800e256:	e7d8      	b.n	800e20a <__multiply+0x4e>
 800e258:	f8b1 a000 	ldrh.w	sl, [r1]
 800e25c:	f1ba 0f00 	cmp.w	sl, #0
 800e260:	d024      	beq.n	800e2ac <__multiply+0xf0>
 800e262:	f104 0e14 	add.w	lr, r4, #20
 800e266:	46a9      	mov	r9, r5
 800e268:	f04f 0c00 	mov.w	ip, #0
 800e26c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e270:	f8d9 3000 	ldr.w	r3, [r9]
 800e274:	fa1f fb87 	uxth.w	fp, r7
 800e278:	4572      	cmp	r2, lr
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e284:	f8d9 7000 	ldr.w	r7, [r9]
 800e288:	4463      	add	r3, ip
 800e28a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e28e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e296:	b29b      	uxth	r3, r3
 800e298:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e29c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2a0:	f849 3b04 	str.w	r3, [r9], #4
 800e2a4:	d8e2      	bhi.n	800e26c <__multiply+0xb0>
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	f845 c003 	str.w	ip, [r5, r3]
 800e2ac:	9b03      	ldr	r3, [sp, #12]
 800e2ae:	3104      	adds	r1, #4
 800e2b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2b4:	f1b9 0f00 	cmp.w	r9, #0
 800e2b8:	d021      	beq.n	800e2fe <__multiply+0x142>
 800e2ba:	682b      	ldr	r3, [r5, #0]
 800e2bc:	f104 0c14 	add.w	ip, r4, #20
 800e2c0:	46ae      	mov	lr, r5
 800e2c2:	f04f 0a00 	mov.w	sl, #0
 800e2c6:	f8bc b000 	ldrh.w	fp, [ip]
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2d0:	fb09 770b 	mla	r7, r9, fp, r7
 800e2d4:	4457      	add	r7, sl
 800e2d6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2da:	f84e 3b04 	str.w	r3, [lr], #4
 800e2de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e2e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2e6:	f8be 3000 	ldrh.w	r3, [lr]
 800e2ea:	4562      	cmp	r2, ip
 800e2ec:	fb09 330a 	mla	r3, r9, sl, r3
 800e2f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e2f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2f8:	d8e5      	bhi.n	800e2c6 <__multiply+0x10a>
 800e2fa:	9f01      	ldr	r7, [sp, #4]
 800e2fc:	51eb      	str	r3, [r5, r7]
 800e2fe:	3504      	adds	r5, #4
 800e300:	e799      	b.n	800e236 <__multiply+0x7a>
 800e302:	3e01      	subs	r6, #1
 800e304:	e79b      	b.n	800e23e <__multiply+0x82>
 800e306:	bf00      	nop
 800e308:	0801097d 	.word	0x0801097d
 800e30c:	0801098e 	.word	0x0801098e

0800e310 <__pow5mult>:
 800e310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e314:	4615      	mov	r5, r2
 800e316:	f012 0203 	ands.w	r2, r2, #3
 800e31a:	4607      	mov	r7, r0
 800e31c:	460e      	mov	r6, r1
 800e31e:	d007      	beq.n	800e330 <__pow5mult+0x20>
 800e320:	3a01      	subs	r2, #1
 800e322:	4c25      	ldr	r4, [pc, #148]	@ (800e3b8 <__pow5mult+0xa8>)
 800e324:	2300      	movs	r3, #0
 800e326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e32a:	f7ff fe53 	bl	800dfd4 <__multadd>
 800e32e:	4606      	mov	r6, r0
 800e330:	10ad      	asrs	r5, r5, #2
 800e332:	d03d      	beq.n	800e3b0 <__pow5mult+0xa0>
 800e334:	69fc      	ldr	r4, [r7, #28]
 800e336:	b97c      	cbnz	r4, 800e358 <__pow5mult+0x48>
 800e338:	2010      	movs	r0, #16
 800e33a:	f7ff fd33 	bl	800dda4 <malloc>
 800e33e:	4602      	mov	r2, r0
 800e340:	61f8      	str	r0, [r7, #28]
 800e342:	b928      	cbnz	r0, 800e350 <__pow5mult+0x40>
 800e344:	4b1d      	ldr	r3, [pc, #116]	@ (800e3bc <__pow5mult+0xac>)
 800e346:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e34a:	481d      	ldr	r0, [pc, #116]	@ (800e3c0 <__pow5mult+0xb0>)
 800e34c:	f001 fb78 	bl	800fa40 <__assert_func>
 800e350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e354:	6004      	str	r4, [r0, #0]
 800e356:	60c4      	str	r4, [r0, #12]
 800e358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e360:	b94c      	cbnz	r4, 800e376 <__pow5mult+0x66>
 800e362:	f240 2171 	movw	r1, #625	@ 0x271
 800e366:	4638      	mov	r0, r7
 800e368:	f7ff ff12 	bl	800e190 <__i2b>
 800e36c:	2300      	movs	r3, #0
 800e36e:	4604      	mov	r4, r0
 800e370:	f8c8 0008 	str.w	r0, [r8, #8]
 800e374:	6003      	str	r3, [r0, #0]
 800e376:	f04f 0900 	mov.w	r9, #0
 800e37a:	07eb      	lsls	r3, r5, #31
 800e37c:	d50a      	bpl.n	800e394 <__pow5mult+0x84>
 800e37e:	4631      	mov	r1, r6
 800e380:	4622      	mov	r2, r4
 800e382:	4638      	mov	r0, r7
 800e384:	f7ff ff1a 	bl	800e1bc <__multiply>
 800e388:	4680      	mov	r8, r0
 800e38a:	4631      	mov	r1, r6
 800e38c:	4638      	mov	r0, r7
 800e38e:	4646      	mov	r6, r8
 800e390:	f7ff fdfe 	bl	800df90 <_Bfree>
 800e394:	106d      	asrs	r5, r5, #1
 800e396:	d00b      	beq.n	800e3b0 <__pow5mult+0xa0>
 800e398:	6820      	ldr	r0, [r4, #0]
 800e39a:	b938      	cbnz	r0, 800e3ac <__pow5mult+0x9c>
 800e39c:	4622      	mov	r2, r4
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	f7ff ff0b 	bl	800e1bc <__multiply>
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	f8c0 9000 	str.w	r9, [r0]
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	e7e4      	b.n	800e37a <__pow5mult+0x6a>
 800e3b0:	4630      	mov	r0, r6
 800e3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3b6:	bf00      	nop
 800e3b8:	080109e8 	.word	0x080109e8
 800e3bc:	0801090e 	.word	0x0801090e
 800e3c0:	0801098e 	.word	0x0801098e

0800e3c4 <__lshift>:
 800e3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	460c      	mov	r4, r1
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	4691      	mov	r9, r2
 800e3ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3d2:	6923      	ldr	r3, [r4, #16]
 800e3d4:	6849      	ldr	r1, [r1, #4]
 800e3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3da:	68a3      	ldr	r3, [r4, #8]
 800e3dc:	f108 0601 	add.w	r6, r8, #1
 800e3e0:	42b3      	cmp	r3, r6
 800e3e2:	db0b      	blt.n	800e3fc <__lshift+0x38>
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7ff fd93 	bl	800df10 <_Balloc>
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	b948      	cbnz	r0, 800e402 <__lshift+0x3e>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	4b28      	ldr	r3, [pc, #160]	@ (800e494 <__lshift+0xd0>)
 800e3f2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e3f6:	4828      	ldr	r0, [pc, #160]	@ (800e498 <__lshift+0xd4>)
 800e3f8:	f001 fb22 	bl	800fa40 <__assert_func>
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	e7ee      	b.n	800e3e0 <__lshift+0x1c>
 800e402:	2300      	movs	r3, #0
 800e404:	f100 0114 	add.w	r1, r0, #20
 800e408:	f100 0210 	add.w	r2, r0, #16
 800e40c:	4618      	mov	r0, r3
 800e40e:	4553      	cmp	r3, sl
 800e410:	db33      	blt.n	800e47a <__lshift+0xb6>
 800e412:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e416:	f104 0314 	add.w	r3, r4, #20
 800e41a:	6920      	ldr	r0, [r4, #16]
 800e41c:	f019 091f 	ands.w	r9, r9, #31
 800e420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e428:	d02b      	beq.n	800e482 <__lshift+0xbe>
 800e42a:	f1c9 0e20 	rsb	lr, r9, #32
 800e42e:	468a      	mov	sl, r1
 800e430:	2200      	movs	r2, #0
 800e432:	6818      	ldr	r0, [r3, #0]
 800e434:	fa00 f009 	lsl.w	r0, r0, r9
 800e438:	4310      	orrs	r0, r2
 800e43a:	f84a 0b04 	str.w	r0, [sl], #4
 800e43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e442:	459c      	cmp	ip, r3
 800e444:	fa22 f20e 	lsr.w	r2, r2, lr
 800e448:	d8f3      	bhi.n	800e432 <__lshift+0x6e>
 800e44a:	ebac 0304 	sub.w	r3, ip, r4
 800e44e:	f104 0015 	add.w	r0, r4, #21
 800e452:	3b15      	subs	r3, #21
 800e454:	f023 0303 	bic.w	r3, r3, #3
 800e458:	3304      	adds	r3, #4
 800e45a:	4584      	cmp	ip, r0
 800e45c:	bf38      	it	cc
 800e45e:	2304      	movcc	r3, #4
 800e460:	50ca      	str	r2, [r1, r3]
 800e462:	b10a      	cbz	r2, 800e468 <__lshift+0xa4>
 800e464:	f108 0602 	add.w	r6, r8, #2
 800e468:	3e01      	subs	r6, #1
 800e46a:	4638      	mov	r0, r7
 800e46c:	4621      	mov	r1, r4
 800e46e:	612e      	str	r6, [r5, #16]
 800e470:	f7ff fd8e 	bl	800df90 <_Bfree>
 800e474:	4628      	mov	r0, r5
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	3301      	adds	r3, #1
 800e47c:	f842 0f04 	str.w	r0, [r2, #4]!
 800e480:	e7c5      	b.n	800e40e <__lshift+0x4a>
 800e482:	3904      	subs	r1, #4
 800e484:	f853 2b04 	ldr.w	r2, [r3], #4
 800e488:	459c      	cmp	ip, r3
 800e48a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e48e:	d8f9      	bhi.n	800e484 <__lshift+0xc0>
 800e490:	e7ea      	b.n	800e468 <__lshift+0xa4>
 800e492:	bf00      	nop
 800e494:	0801097d 	.word	0x0801097d
 800e498:	0801098e 	.word	0x0801098e

0800e49c <__mcmp>:
 800e49c:	4603      	mov	r3, r0
 800e49e:	690a      	ldr	r2, [r1, #16]
 800e4a0:	6900      	ldr	r0, [r0, #16]
 800e4a2:	1a80      	subs	r0, r0, r2
 800e4a4:	b530      	push	{r4, r5, lr}
 800e4a6:	d10e      	bne.n	800e4c6 <__mcmp+0x2a>
 800e4a8:	3314      	adds	r3, #20
 800e4aa:	3114      	adds	r1, #20
 800e4ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4bc:	4295      	cmp	r5, r2
 800e4be:	d003      	beq.n	800e4c8 <__mcmp+0x2c>
 800e4c0:	d205      	bcs.n	800e4ce <__mcmp+0x32>
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c6:	bd30      	pop	{r4, r5, pc}
 800e4c8:	42a3      	cmp	r3, r4
 800e4ca:	d3f3      	bcc.n	800e4b4 <__mcmp+0x18>
 800e4cc:	e7fb      	b.n	800e4c6 <__mcmp+0x2a>
 800e4ce:	2001      	movs	r0, #1
 800e4d0:	e7f9      	b.n	800e4c6 <__mcmp+0x2a>
	...

0800e4d4 <__mdiff>:
 800e4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	4689      	mov	r9, r1
 800e4da:	4606      	mov	r6, r0
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4614      	mov	r4, r2
 800e4e0:	4648      	mov	r0, r9
 800e4e2:	f7ff ffdb 	bl	800e49c <__mcmp>
 800e4e6:	1e05      	subs	r5, r0, #0
 800e4e8:	d112      	bne.n	800e510 <__mdiff+0x3c>
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	f7ff fd0f 	bl	800df10 <_Balloc>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	b928      	cbnz	r0, 800e502 <__mdiff+0x2e>
 800e4f6:	4b41      	ldr	r3, [pc, #260]	@ (800e5fc <__mdiff+0x128>)
 800e4f8:	f240 2137 	movw	r1, #567	@ 0x237
 800e4fc:	4840      	ldr	r0, [pc, #256]	@ (800e600 <__mdiff+0x12c>)
 800e4fe:	f001 fa9f 	bl	800fa40 <__assert_func>
 800e502:	2301      	movs	r3, #1
 800e504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e508:	4610      	mov	r0, r2
 800e50a:	b003      	add	sp, #12
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	bfbc      	itt	lt
 800e512:	464b      	movlt	r3, r9
 800e514:	46a1      	movlt	r9, r4
 800e516:	4630      	mov	r0, r6
 800e518:	bfb8      	it	lt
 800e51a:	2501      	movlt	r5, #1
 800e51c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e520:	bfb4      	ite	lt
 800e522:	461c      	movlt	r4, r3
 800e524:	2500      	movge	r5, #0
 800e526:	f7ff fcf3 	bl	800df10 <_Balloc>
 800e52a:	4602      	mov	r2, r0
 800e52c:	b918      	cbnz	r0, 800e536 <__mdiff+0x62>
 800e52e:	4b33      	ldr	r3, [pc, #204]	@ (800e5fc <__mdiff+0x128>)
 800e530:	f240 2145 	movw	r1, #581	@ 0x245
 800e534:	e7e2      	b.n	800e4fc <__mdiff+0x28>
 800e536:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e53a:	f104 0e14 	add.w	lr, r4, #20
 800e53e:	6926      	ldr	r6, [r4, #16]
 800e540:	f100 0b14 	add.w	fp, r0, #20
 800e544:	60c5      	str	r5, [r0, #12]
 800e546:	f109 0514 	add.w	r5, r9, #20
 800e54a:	f109 0310 	add.w	r3, r9, #16
 800e54e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e552:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e556:	46d9      	mov	r9, fp
 800e558:	f04f 0c00 	mov.w	ip, #0
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	9b01      	ldr	r3, [sp, #4]
 800e560:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e564:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e568:	4576      	cmp	r6, lr
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	fa1f f38a 	uxth.w	r3, sl
 800e570:	4619      	mov	r1, r3
 800e572:	b283      	uxth	r3, r0
 800e574:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800e578:	eba1 0303 	sub.w	r3, r1, r3
 800e57c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e580:	4463      	add	r3, ip
 800e582:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e586:	b29b      	uxth	r3, r3
 800e588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e58c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e590:	f849 3b04 	str.w	r3, [r9], #4
 800e594:	d8e3      	bhi.n	800e55e <__mdiff+0x8a>
 800e596:	1b33      	subs	r3, r6, r4
 800e598:	3415      	adds	r4, #21
 800e59a:	3b15      	subs	r3, #21
 800e59c:	f023 0303 	bic.w	r3, r3, #3
 800e5a0:	3304      	adds	r3, #4
 800e5a2:	42a6      	cmp	r6, r4
 800e5a4:	bf38      	it	cc
 800e5a6:	2304      	movcc	r3, #4
 800e5a8:	441d      	add	r5, r3
 800e5aa:	445b      	add	r3, fp
 800e5ac:	462c      	mov	r4, r5
 800e5ae:	461e      	mov	r6, r3
 800e5b0:	4544      	cmp	r4, r8
 800e5b2:	d30e      	bcc.n	800e5d2 <__mdiff+0xfe>
 800e5b4:	f108 0103 	add.w	r1, r8, #3
 800e5b8:	1b49      	subs	r1, r1, r5
 800e5ba:	3d03      	subs	r5, #3
 800e5bc:	f021 0103 	bic.w	r1, r1, #3
 800e5c0:	45a8      	cmp	r8, r5
 800e5c2:	bf38      	it	cc
 800e5c4:	2100      	movcc	r1, #0
 800e5c6:	440b      	add	r3, r1
 800e5c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5cc:	b199      	cbz	r1, 800e5f6 <__mdiff+0x122>
 800e5ce:	6117      	str	r7, [r2, #16]
 800e5d0:	e79a      	b.n	800e508 <__mdiff+0x34>
 800e5d2:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5d6:	46e6      	mov	lr, ip
 800e5d8:	fa1f fc81 	uxth.w	ip, r1
 800e5dc:	0c08      	lsrs	r0, r1, #16
 800e5de:	4471      	add	r1, lr
 800e5e0:	44f4      	add	ip, lr
 800e5e2:	b289      	uxth	r1, r1
 800e5e4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e5e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e5ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5f0:	f846 1b04 	str.w	r1, [r6], #4
 800e5f4:	e7dc      	b.n	800e5b0 <__mdiff+0xdc>
 800e5f6:	3f01      	subs	r7, #1
 800e5f8:	e7e6      	b.n	800e5c8 <__mdiff+0xf4>
 800e5fa:	bf00      	nop
 800e5fc:	0801097d 	.word	0x0801097d
 800e600:	0801098e 	.word	0x0801098e

0800e604 <__ulp>:
 800e604:	b082      	sub	sp, #8
 800e606:	4b11      	ldr	r3, [pc, #68]	@ (800e64c <__ulp+0x48>)
 800e608:	ed8d 0b00 	vstr	d0, [sp]
 800e60c:	9a01      	ldr	r2, [sp, #4]
 800e60e:	4013      	ands	r3, r2
 800e610:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e614:	2b00      	cmp	r3, #0
 800e616:	dc08      	bgt.n	800e62a <__ulp+0x26>
 800e618:	425b      	negs	r3, r3
 800e61a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e61e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e622:	da04      	bge.n	800e62e <__ulp+0x2a>
 800e624:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e628:	4113      	asrs	r3, r2
 800e62a:	2200      	movs	r2, #0
 800e62c:	e008      	b.n	800e640 <__ulp+0x3c>
 800e62e:	f1a2 0314 	sub.w	r3, r2, #20
 800e632:	2b1e      	cmp	r3, #30
 800e634:	bfd6      	itet	le
 800e636:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e63a:	2201      	movgt	r2, #1
 800e63c:	40da      	lsrle	r2, r3
 800e63e:	2300      	movs	r3, #0
 800e640:	4619      	mov	r1, r3
 800e642:	4610      	mov	r0, r2
 800e644:	ec41 0b10 	vmov	d0, r0, r1
 800e648:	b002      	add	sp, #8
 800e64a:	4770      	bx	lr
 800e64c:	7ff00000 	.word	0x7ff00000

0800e650 <__b2d>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	6906      	ldr	r6, [r0, #16]
 800e656:	f100 0814 	add.w	r8, r0, #20
 800e65a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e65e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e662:	1f37      	subs	r7, r6, #4
 800e664:	4610      	mov	r0, r2
 800e666:	f7ff fd47 	bl	800e0f8 <__hi0bits>
 800e66a:	f1c0 0320 	rsb	r3, r0, #32
 800e66e:	280a      	cmp	r0, #10
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	491d      	ldr	r1, [pc, #116]	@ (800e6e8 <__b2d+0x98>)
 800e674:	dc16      	bgt.n	800e6a4 <__b2d+0x54>
 800e676:	f1c0 0c0b 	rsb	ip, r0, #11
 800e67a:	45b8      	cmp	r8, r7
 800e67c:	f100 0015 	add.w	r0, r0, #21
 800e680:	fa22 f30c 	lsr.w	r3, r2, ip
 800e684:	fa02 f000 	lsl.w	r0, r2, r0
 800e688:	ea43 0501 	orr.w	r5, r3, r1
 800e68c:	bf34      	ite	cc
 800e68e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e692:	2300      	movcs	r3, #0
 800e694:	fa23 f30c 	lsr.w	r3, r3, ip
 800e698:	4303      	orrs	r3, r0
 800e69a:	461c      	mov	r4, r3
 800e69c:	ec45 4b10 	vmov	d0, r4, r5
 800e6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a4:	45b8      	cmp	r8, r7
 800e6a6:	bf3a      	itte	cc
 800e6a8:	f1a6 0708 	subcc.w	r7, r6, #8
 800e6ac:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e6b0:	2300      	movcs	r3, #0
 800e6b2:	380b      	subs	r0, #11
 800e6b4:	d014      	beq.n	800e6e0 <__b2d+0x90>
 800e6b6:	f1c0 0120 	rsb	r1, r0, #32
 800e6ba:	4082      	lsls	r2, r0
 800e6bc:	4547      	cmp	r7, r8
 800e6be:	fa23 f401 	lsr.w	r4, r3, r1
 800e6c2:	fa03 f300 	lsl.w	r3, r3, r0
 800e6c6:	ea42 0204 	orr.w	r2, r2, r4
 800e6ca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e6ce:	bf8c      	ite	hi
 800e6d0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e6d4:	2200      	movls	r2, #0
 800e6d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e6da:	40ca      	lsrs	r2, r1
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	e7dc      	b.n	800e69a <__b2d+0x4a>
 800e6e0:	ea42 0501 	orr.w	r5, r2, r1
 800e6e4:	e7d9      	b.n	800e69a <__b2d+0x4a>
 800e6e6:	bf00      	nop
 800e6e8:	3ff00000 	.word	0x3ff00000

0800e6ec <__d2b>:
 800e6ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6f0:	460f      	mov	r7, r1
 800e6f2:	2101      	movs	r1, #1
 800e6f4:	4616      	mov	r6, r2
 800e6f6:	ec59 8b10 	vmov	r8, r9, d0
 800e6fa:	f7ff fc09 	bl	800df10 <_Balloc>
 800e6fe:	4604      	mov	r4, r0
 800e700:	b930      	cbnz	r0, 800e710 <__d2b+0x24>
 800e702:	4602      	mov	r2, r0
 800e704:	4b23      	ldr	r3, [pc, #140]	@ (800e794 <__d2b+0xa8>)
 800e706:	f240 310f 	movw	r1, #783	@ 0x30f
 800e70a:	4823      	ldr	r0, [pc, #140]	@ (800e798 <__d2b+0xac>)
 800e70c:	f001 f998 	bl	800fa40 <__assert_func>
 800e710:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e718:	b10d      	cbz	r5, 800e71e <__d2b+0x32>
 800e71a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e71e:	9301      	str	r3, [sp, #4]
 800e720:	f1b8 0300 	subs.w	r3, r8, #0
 800e724:	d023      	beq.n	800e76e <__d2b+0x82>
 800e726:	4668      	mov	r0, sp
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	f7ff fd04 	bl	800e136 <__lo0bits>
 800e72e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e732:	b1d0      	cbz	r0, 800e76a <__d2b+0x7e>
 800e734:	f1c0 0320 	rsb	r3, r0, #32
 800e738:	fa02 f303 	lsl.w	r3, r2, r3
 800e73c:	40c2      	lsrs	r2, r0
 800e73e:	430b      	orrs	r3, r1
 800e740:	9201      	str	r2, [sp, #4]
 800e742:	6163      	str	r3, [r4, #20]
 800e744:	9b01      	ldr	r3, [sp, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	61a3      	str	r3, [r4, #24]
 800e74a:	bf0c      	ite	eq
 800e74c:	2201      	moveq	r2, #1
 800e74e:	2202      	movne	r2, #2
 800e750:	6122      	str	r2, [r4, #16]
 800e752:	b1a5      	cbz	r5, 800e77e <__d2b+0x92>
 800e754:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e758:	4405      	add	r5, r0
 800e75a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e75e:	603d      	str	r5, [r7, #0]
 800e760:	6030      	str	r0, [r6, #0]
 800e762:	4620      	mov	r0, r4
 800e764:	b003      	add	sp, #12
 800e766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e76a:	6161      	str	r1, [r4, #20]
 800e76c:	e7ea      	b.n	800e744 <__d2b+0x58>
 800e76e:	a801      	add	r0, sp, #4
 800e770:	f7ff fce1 	bl	800e136 <__lo0bits>
 800e774:	9b01      	ldr	r3, [sp, #4]
 800e776:	3020      	adds	r0, #32
 800e778:	2201      	movs	r2, #1
 800e77a:	6163      	str	r3, [r4, #20]
 800e77c:	e7e8      	b.n	800e750 <__d2b+0x64>
 800e77e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e782:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e786:	6038      	str	r0, [r7, #0]
 800e788:	6918      	ldr	r0, [r3, #16]
 800e78a:	f7ff fcb5 	bl	800e0f8 <__hi0bits>
 800e78e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e792:	e7e5      	b.n	800e760 <__d2b+0x74>
 800e794:	0801097d 	.word	0x0801097d
 800e798:	0801098e 	.word	0x0801098e

0800e79c <__ratio>:
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	b085      	sub	sp, #20
 800e7a2:	e9cd 1000 	strd	r1, r0, [sp]
 800e7a6:	a902      	add	r1, sp, #8
 800e7a8:	f7ff ff52 	bl	800e650 <__b2d>
 800e7ac:	a903      	add	r1, sp, #12
 800e7ae:	9800      	ldr	r0, [sp, #0]
 800e7b0:	ec55 4b10 	vmov	r4, r5, d0
 800e7b4:	f7ff ff4c 	bl	800e650 <__b2d>
 800e7b8:	9b01      	ldr	r3, [sp, #4]
 800e7ba:	462f      	mov	r7, r5
 800e7bc:	4620      	mov	r0, r4
 800e7be:	6919      	ldr	r1, [r3, #16]
 800e7c0:	9b00      	ldr	r3, [sp, #0]
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	1ac9      	subs	r1, r1, r3
 800e7c6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7ca:	ec5b ab10 	vmov	sl, fp, d0
 800e7ce:	1a9b      	subs	r3, r3, r2
 800e7d0:	46d9      	mov	r9, fp
 800e7d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bfcd      	iteet	gt
 800e7da:	462a      	movgt	r2, r5
 800e7dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7e0:	465a      	movle	r2, fp
 800e7e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e7e6:	bfd8      	it	le
 800e7e8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e7ec:	4652      	mov	r2, sl
 800e7ee:	4639      	mov	r1, r7
 800e7f0:	464b      	mov	r3, r9
 800e7f2:	f7f2 f95d 	bl	8000ab0 <__aeabi_ddiv>
 800e7f6:	ec41 0b10 	vmov	d0, r0, r1
 800e7fa:	b005      	add	sp, #20
 800e7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e800 <__copybits>:
 800e800:	3901      	subs	r1, #1
 800e802:	f102 0314 	add.w	r3, r2, #20
 800e806:	1149      	asrs	r1, r1, #5
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	3101      	adds	r1, #1
 800e80c:	6914      	ldr	r4, [r2, #16]
 800e80e:	1f05      	subs	r5, r0, #4
 800e810:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e814:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e818:	42a3      	cmp	r3, r4
 800e81a:	d30c      	bcc.n	800e836 <__copybits+0x36>
 800e81c:	1aa3      	subs	r3, r4, r2
 800e81e:	3211      	adds	r2, #17
 800e820:	3b11      	subs	r3, #17
 800e822:	f023 0303 	bic.w	r3, r3, #3
 800e826:	42a2      	cmp	r2, r4
 800e828:	bf88      	it	hi
 800e82a:	2300      	movhi	r3, #0
 800e82c:	4418      	add	r0, r3
 800e82e:	2300      	movs	r3, #0
 800e830:	4288      	cmp	r0, r1
 800e832:	d305      	bcc.n	800e840 <__copybits+0x40>
 800e834:	bd70      	pop	{r4, r5, r6, pc}
 800e836:	f853 6b04 	ldr.w	r6, [r3], #4
 800e83a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e83e:	e7eb      	b.n	800e818 <__copybits+0x18>
 800e840:	f840 3b04 	str.w	r3, [r0], #4
 800e844:	e7f4      	b.n	800e830 <__copybits+0x30>

0800e846 <__any_on>:
 800e846:	f100 0214 	add.w	r2, r0, #20
 800e84a:	114b      	asrs	r3, r1, #5
 800e84c:	6900      	ldr	r0, [r0, #16]
 800e84e:	4298      	cmp	r0, r3
 800e850:	b510      	push	{r4, lr}
 800e852:	db11      	blt.n	800e878 <__any_on+0x32>
 800e854:	dd0a      	ble.n	800e86c <__any_on+0x26>
 800e856:	f011 011f 	ands.w	r1, r1, #31
 800e85a:	d007      	beq.n	800e86c <__any_on+0x26>
 800e85c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e860:	fa24 f001 	lsr.w	r0, r4, r1
 800e864:	fa00 f101 	lsl.w	r1, r0, r1
 800e868:	428c      	cmp	r4, r1
 800e86a:	d10b      	bne.n	800e884 <__any_on+0x3e>
 800e86c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e870:	4293      	cmp	r3, r2
 800e872:	d803      	bhi.n	800e87c <__any_on+0x36>
 800e874:	2000      	movs	r0, #0
 800e876:	bd10      	pop	{r4, pc}
 800e878:	4603      	mov	r3, r0
 800e87a:	e7f7      	b.n	800e86c <__any_on+0x26>
 800e87c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e880:	2900      	cmp	r1, #0
 800e882:	d0f5      	beq.n	800e870 <__any_on+0x2a>
 800e884:	2001      	movs	r0, #1
 800e886:	e7f6      	b.n	800e876 <__any_on+0x30>

0800e888 <sulp>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	4604      	mov	r4, r0
 800e88c:	460d      	mov	r5, r1
 800e88e:	4616      	mov	r6, r2
 800e890:	ec45 4b10 	vmov	d0, r4, r5
 800e894:	f7ff feb6 	bl	800e604 <__ulp>
 800e898:	ec51 0b10 	vmov	r0, r1, d0
 800e89c:	b17e      	cbz	r6, 800e8be <sulp+0x36>
 800e89e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e8a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	dd09      	ble.n	800e8be <sulp+0x36>
 800e8aa:	051b      	lsls	r3, r3, #20
 800e8ac:	2400      	movs	r4, #0
 800e8ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e8b2:	4622      	mov	r2, r4
 800e8b4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e8b8:	462b      	mov	r3, r5
 800e8ba:	f7f1 ffcf 	bl	800085c <__aeabi_dmul>
 800e8be:	ec41 0b10 	vmov	d0, r0, r1
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	0000      	movs	r0, r0
	...

0800e8c8 <_strtod_l>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	b09f      	sub	sp, #124	@ 0x7c
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	f04f 0a00 	mov.w	sl, #0
 800e8d4:	f04f 0b00 	mov.w	fp, #0
 800e8d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e8da:	2200      	movs	r2, #0
 800e8dc:	9005      	str	r0, [sp, #20]
 800e8de:	921a      	str	r2, [sp, #104]	@ 0x68
 800e8e0:	460a      	mov	r2, r1
 800e8e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8e4:	7811      	ldrb	r1, [r2, #0]
 800e8e6:	292b      	cmp	r1, #43	@ 0x2b
 800e8e8:	d04a      	beq.n	800e980 <_strtod_l+0xb8>
 800e8ea:	d838      	bhi.n	800e95e <_strtod_l+0x96>
 800e8ec:	290d      	cmp	r1, #13
 800e8ee:	d832      	bhi.n	800e956 <_strtod_l+0x8e>
 800e8f0:	2908      	cmp	r1, #8
 800e8f2:	d832      	bhi.n	800e95a <_strtod_l+0x92>
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	d03b      	beq.n	800e970 <_strtod_l+0xa8>
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e8fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e8fe:	782a      	ldrb	r2, [r5, #0]
 800e900:	2a30      	cmp	r2, #48	@ 0x30
 800e902:	f040 80b3 	bne.w	800ea6c <_strtod_l+0x1a4>
 800e906:	786a      	ldrb	r2, [r5, #1]
 800e908:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e90c:	2a58      	cmp	r2, #88	@ 0x58
 800e90e:	d16e      	bne.n	800e9ee <_strtod_l+0x126>
 800e910:	9302      	str	r3, [sp, #8]
 800e912:	a919      	add	r1, sp, #100	@ 0x64
 800e914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e916:	4a90      	ldr	r2, [pc, #576]	@ (800eb58 <_strtod_l+0x290>)
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	ab1a      	add	r3, sp, #104	@ 0x68
 800e91c:	9805      	ldr	r0, [sp, #20]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e922:	f001 f925 	bl	800fb70 <__gethex>
 800e926:	f010 060f 	ands.w	r6, r0, #15
 800e92a:	4604      	mov	r4, r0
 800e92c:	d005      	beq.n	800e93a <_strtod_l+0x72>
 800e92e:	2e06      	cmp	r6, #6
 800e930:	d128      	bne.n	800e984 <_strtod_l+0xbc>
 800e932:	3501      	adds	r5, #1
 800e934:	2300      	movs	r3, #0
 800e936:	9519      	str	r5, [sp, #100]	@ 0x64
 800e938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e93a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f040 858e 	bne.w	800f45e <_strtod_l+0xb96>
 800e942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e944:	b1cb      	cbz	r3, 800e97a <_strtod_l+0xb2>
 800e946:	4652      	mov	r2, sl
 800e948:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e94c:	ec43 2b10 	vmov	d0, r2, r3
 800e950:	b01f      	add	sp, #124	@ 0x7c
 800e952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e956:	2920      	cmp	r1, #32
 800e958:	d1ce      	bne.n	800e8f8 <_strtod_l+0x30>
 800e95a:	3201      	adds	r2, #1
 800e95c:	e7c1      	b.n	800e8e2 <_strtod_l+0x1a>
 800e95e:	292d      	cmp	r1, #45	@ 0x2d
 800e960:	d1ca      	bne.n	800e8f8 <_strtod_l+0x30>
 800e962:	2101      	movs	r1, #1
 800e964:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e966:	1c51      	adds	r1, r2, #1
 800e968:	9119      	str	r1, [sp, #100]	@ 0x64
 800e96a:	7852      	ldrb	r2, [r2, #1]
 800e96c:	2a00      	cmp	r2, #0
 800e96e:	d1c5      	bne.n	800e8fc <_strtod_l+0x34>
 800e970:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e972:	9419      	str	r4, [sp, #100]	@ 0x64
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 8570 	bne.w	800f45a <_strtod_l+0xb92>
 800e97a:	4652      	mov	r2, sl
 800e97c:	465b      	mov	r3, fp
 800e97e:	e7e5      	b.n	800e94c <_strtod_l+0x84>
 800e980:	2100      	movs	r1, #0
 800e982:	e7ef      	b.n	800e964 <_strtod_l+0x9c>
 800e984:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e986:	b13a      	cbz	r2, 800e998 <_strtod_l+0xd0>
 800e988:	2135      	movs	r1, #53	@ 0x35
 800e98a:	a81c      	add	r0, sp, #112	@ 0x70
 800e98c:	f7ff ff38 	bl	800e800 <__copybits>
 800e990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e992:	9805      	ldr	r0, [sp, #20]
 800e994:	f7ff fafc 	bl	800df90 <_Bfree>
 800e998:	3e01      	subs	r6, #1
 800e99a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e99c:	2e04      	cmp	r6, #4
 800e99e:	d806      	bhi.n	800e9ae <_strtod_l+0xe6>
 800e9a0:	e8df f006 	tbb	[pc, r6]
 800e9a4:	201d0314 	.word	0x201d0314
 800e9a8:	14          	.byte	0x14
 800e9a9:	00          	.byte	0x00
 800e9aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e9ae:	05e1      	lsls	r1, r4, #23
 800e9b0:	bf48      	it	mi
 800e9b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e9b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e9ba:	0d1b      	lsrs	r3, r3, #20
 800e9bc:	051b      	lsls	r3, r3, #20
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1bb      	bne.n	800e93a <_strtod_l+0x72>
 800e9c2:	f7fe fb0f 	bl	800cfe4 <__errno>
 800e9c6:	2322      	movs	r3, #34	@ 0x22
 800e9c8:	6003      	str	r3, [r0, #0]
 800e9ca:	e7b6      	b.n	800e93a <_strtod_l+0x72>
 800e9cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e9d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e9d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e9d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e9dc:	e7e7      	b.n	800e9ae <_strtod_l+0xe6>
 800e9de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800eb60 <_strtod_l+0x298>
 800e9e2:	e7e4      	b.n	800e9ae <_strtod_l+0xe6>
 800e9e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e9e8:	f04f 3aff 	mov.w	sl, #4294967295
 800e9ec:	e7df      	b.n	800e9ae <_strtod_l+0xe6>
 800e9ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9f4:	785b      	ldrb	r3, [r3, #1]
 800e9f6:	2b30      	cmp	r3, #48	@ 0x30
 800e9f8:	d0f9      	beq.n	800e9ee <_strtod_l+0x126>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d09d      	beq.n	800e93a <_strtod_l+0x72>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea02:	220a      	movs	r2, #10
 800ea04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea06:	930c      	str	r3, [sp, #48]	@ 0x30
 800ea08:	2300      	movs	r3, #0
 800ea0a:	461f      	mov	r7, r3
 800ea0c:	9308      	str	r3, [sp, #32]
 800ea0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea10:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ea12:	7805      	ldrb	r5, [r0, #0]
 800ea14:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ea18:	b2d9      	uxtb	r1, r3
 800ea1a:	2909      	cmp	r1, #9
 800ea1c:	d928      	bls.n	800ea70 <_strtod_l+0x1a8>
 800ea1e:	2201      	movs	r2, #1
 800ea20:	494e      	ldr	r1, [pc, #312]	@ (800eb5c <_strtod_l+0x294>)
 800ea22:	f000 ffd5 	bl	800f9d0 <strncmp>
 800ea26:	2800      	cmp	r0, #0
 800ea28:	d033      	beq.n	800ea92 <_strtod_l+0x1ca>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	463d      	mov	r5, r7
 800ea30:	4681      	mov	r9, r0
 800ea32:	4603      	mov	r3, r0
 800ea34:	2a65      	cmp	r2, #101	@ 0x65
 800ea36:	d001      	beq.n	800ea3c <_strtod_l+0x174>
 800ea38:	2a45      	cmp	r2, #69	@ 0x45
 800ea3a:	d114      	bne.n	800ea66 <_strtod_l+0x19e>
 800ea3c:	b91d      	cbnz	r5, 800ea46 <_strtod_l+0x17e>
 800ea3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea40:	4302      	orrs	r2, r0
 800ea42:	d095      	beq.n	800e970 <_strtod_l+0xa8>
 800ea44:	2500      	movs	r5, #0
 800ea46:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ea48:	1c62      	adds	r2, r4, #1
 800ea4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea4c:	7862      	ldrb	r2, [r4, #1]
 800ea4e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ea50:	d078      	beq.n	800eb44 <_strtod_l+0x27c>
 800ea52:	2a2d      	cmp	r2, #45	@ 0x2d
 800ea54:	d07c      	beq.n	800eb50 <_strtod_l+0x288>
 800ea56:	f04f 0c00 	mov.w	ip, #0
 800ea5a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ea5e:	2909      	cmp	r1, #9
 800ea60:	f240 8084 	bls.w	800eb6c <_strtod_l+0x2a4>
 800ea64:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea66:	f04f 0800 	mov.w	r8, #0
 800ea6a:	e0a4      	b.n	800ebb6 <_strtod_l+0x2ee>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	e7c7      	b.n	800ea00 <_strtod_l+0x138>
 800ea70:	2f08      	cmp	r7, #8
 800ea72:	f100 0001 	add.w	r0, r0, #1
 800ea76:	f107 0701 	add.w	r7, r7, #1
 800ea7a:	bfd5      	itete	le
 800ea7c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ea7e:	9908      	ldrgt	r1, [sp, #32]
 800ea80:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea84:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ea88:	bfd4      	ite	le
 800ea8a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ea8c:	9308      	strgt	r3, [sp, #32]
 800ea8e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ea90:	e7be      	b.n	800ea10 <_strtod_l+0x148>
 800ea92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea98:	785a      	ldrb	r2, [r3, #1]
 800ea9a:	b37f      	cbz	r7, 800eafc <_strtod_l+0x234>
 800ea9c:	4681      	mov	r9, r0
 800ea9e:	463d      	mov	r5, r7
 800eaa0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eaa4:	2b09      	cmp	r3, #9
 800eaa6:	d912      	bls.n	800eace <_strtod_l+0x206>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e7c3      	b.n	800ea34 <_strtod_l+0x16c>
 800eaac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaae:	3001      	adds	r0, #1
 800eab0:	1c5a      	adds	r2, r3, #1
 800eab2:	9219      	str	r2, [sp, #100]	@ 0x64
 800eab4:	785a      	ldrb	r2, [r3, #1]
 800eab6:	2a30      	cmp	r2, #48	@ 0x30
 800eab8:	d0f8      	beq.n	800eaac <_strtod_l+0x1e4>
 800eaba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eabe:	2b08      	cmp	r3, #8
 800eac0:	f200 84d2 	bhi.w	800f468 <_strtod_l+0xba0>
 800eac4:	4681      	mov	r9, r0
 800eac6:	2000      	movs	r0, #0
 800eac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eaca:	4605      	mov	r5, r0
 800eacc:	930c      	str	r3, [sp, #48]	@ 0x30
 800eace:	3a30      	subs	r2, #48	@ 0x30
 800ead0:	f100 0301 	add.w	r3, r0, #1
 800ead4:	d02a      	beq.n	800eb2c <_strtod_l+0x264>
 800ead6:	4499      	add	r9, r3
 800ead8:	eb00 0c05 	add.w	ip, r0, r5
 800eadc:	462b      	mov	r3, r5
 800eade:	210a      	movs	r1, #10
 800eae0:	4563      	cmp	r3, ip
 800eae2:	d10d      	bne.n	800eb00 <_strtod_l+0x238>
 800eae4:	1c69      	adds	r1, r5, #1
 800eae6:	4401      	add	r1, r0
 800eae8:	4428      	add	r0, r5
 800eaea:	2808      	cmp	r0, #8
 800eaec:	dc16      	bgt.n	800eb1c <_strtod_l+0x254>
 800eaee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800eaf0:	230a      	movs	r3, #10
 800eaf2:	fb03 2300 	mla	r3, r3, r0, r2
 800eaf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e018      	b.n	800eb2e <_strtod_l+0x266>
 800eafc:	4638      	mov	r0, r7
 800eafe:	e7da      	b.n	800eab6 <_strtod_l+0x1ee>
 800eb00:	2b08      	cmp	r3, #8
 800eb02:	f103 0301 	add.w	r3, r3, #1
 800eb06:	dc03      	bgt.n	800eb10 <_strtod_l+0x248>
 800eb08:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800eb0a:	434e      	muls	r6, r1
 800eb0c:	960a      	str	r6, [sp, #40]	@ 0x28
 800eb0e:	e7e7      	b.n	800eae0 <_strtod_l+0x218>
 800eb10:	2b10      	cmp	r3, #16
 800eb12:	bfde      	ittt	le
 800eb14:	9e08      	ldrle	r6, [sp, #32]
 800eb16:	434e      	mulle	r6, r1
 800eb18:	9608      	strle	r6, [sp, #32]
 800eb1a:	e7e1      	b.n	800eae0 <_strtod_l+0x218>
 800eb1c:	280f      	cmp	r0, #15
 800eb1e:	dceb      	bgt.n	800eaf8 <_strtod_l+0x230>
 800eb20:	9808      	ldr	r0, [sp, #32]
 800eb22:	230a      	movs	r3, #10
 800eb24:	fb03 2300 	mla	r3, r3, r0, r2
 800eb28:	9308      	str	r3, [sp, #32]
 800eb2a:	e7e5      	b.n	800eaf8 <_strtod_l+0x230>
 800eb2c:	4629      	mov	r1, r5
 800eb2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb30:	460d      	mov	r5, r1
 800eb32:	1c50      	adds	r0, r2, #1
 800eb34:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb36:	4618      	mov	r0, r3
 800eb38:	7852      	ldrb	r2, [r2, #1]
 800eb3a:	e7b1      	b.n	800eaa0 <_strtod_l+0x1d8>
 800eb3c:	f04f 0900 	mov.w	r9, #0
 800eb40:	2301      	movs	r3, #1
 800eb42:	e77c      	b.n	800ea3e <_strtod_l+0x176>
 800eb44:	f04f 0c00 	mov.w	ip, #0
 800eb48:	1ca2      	adds	r2, r4, #2
 800eb4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb4c:	78a2      	ldrb	r2, [r4, #2]
 800eb4e:	e784      	b.n	800ea5a <_strtod_l+0x192>
 800eb50:	f04f 0c01 	mov.w	ip, #1
 800eb54:	e7f8      	b.n	800eb48 <_strtod_l+0x280>
 800eb56:	bf00      	nop
 800eb58:	08010b00 	.word	0x08010b00
 800eb5c:	08010ae8 	.word	0x08010ae8
 800eb60:	7ff00000 	.word	0x7ff00000
 800eb64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb66:	1c51      	adds	r1, r2, #1
 800eb68:	9119      	str	r1, [sp, #100]	@ 0x64
 800eb6a:	7852      	ldrb	r2, [r2, #1]
 800eb6c:	2a30      	cmp	r2, #48	@ 0x30
 800eb6e:	d0f9      	beq.n	800eb64 <_strtod_l+0x29c>
 800eb70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800eb74:	2908      	cmp	r1, #8
 800eb76:	f63f af76 	bhi.w	800ea66 <_strtod_l+0x19e>
 800eb7a:	3a30      	subs	r2, #48	@ 0x30
 800eb7c:	f04f 080a 	mov.w	r8, #10
 800eb80:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eb86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eb88:	1c56      	adds	r6, r2, #1
 800eb8a:	9619      	str	r6, [sp, #100]	@ 0x64
 800eb8c:	7852      	ldrb	r2, [r2, #1]
 800eb8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eb92:	f1be 0f09 	cmp.w	lr, #9
 800eb96:	d939      	bls.n	800ec0c <_strtod_l+0x344>
 800eb98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eb9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eb9e:	1a76      	subs	r6, r6, r1
 800eba0:	2e08      	cmp	r6, #8
 800eba2:	dc03      	bgt.n	800ebac <_strtod_l+0x2e4>
 800eba4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eba6:	4588      	cmp	r8, r1
 800eba8:	bfa8      	it	ge
 800ebaa:	4688      	movge	r8, r1
 800ebac:	f1bc 0f00 	cmp.w	ip, #0
 800ebb0:	d001      	beq.n	800ebb6 <_strtod_l+0x2ee>
 800ebb2:	f1c8 0800 	rsb	r8, r8, #0
 800ebb6:	2d00      	cmp	r5, #0
 800ebb8:	d14e      	bne.n	800ec58 <_strtod_l+0x390>
 800ebba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebbc:	4308      	orrs	r0, r1
 800ebbe:	f47f aebc 	bne.w	800e93a <_strtod_l+0x72>
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f47f aed4 	bne.w	800e970 <_strtod_l+0xa8>
 800ebc8:	2a69      	cmp	r2, #105	@ 0x69
 800ebca:	d028      	beq.n	800ec1e <_strtod_l+0x356>
 800ebcc:	dc25      	bgt.n	800ec1a <_strtod_l+0x352>
 800ebce:	2a49      	cmp	r2, #73	@ 0x49
 800ebd0:	d025      	beq.n	800ec1e <_strtod_l+0x356>
 800ebd2:	2a4e      	cmp	r2, #78	@ 0x4e
 800ebd4:	f47f aecc 	bne.w	800e970 <_strtod_l+0xa8>
 800ebd8:	499b      	ldr	r1, [pc, #620]	@ (800ee48 <_strtod_l+0x580>)
 800ebda:	a819      	add	r0, sp, #100	@ 0x64
 800ebdc:	f001 f9e8 	bl	800ffb0 <__match>
 800ebe0:	2800      	cmp	r0, #0
 800ebe2:	f43f aec5 	beq.w	800e970 <_strtod_l+0xa8>
 800ebe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b28      	cmp	r3, #40	@ 0x28
 800ebec:	d12e      	bne.n	800ec4c <_strtod_l+0x384>
 800ebee:	aa1c      	add	r2, sp, #112	@ 0x70
 800ebf0:	4996      	ldr	r1, [pc, #600]	@ (800ee4c <_strtod_l+0x584>)
 800ebf2:	a819      	add	r0, sp, #100	@ 0x64
 800ebf4:	f001 f9f0 	bl	800ffd8 <__hexnan>
 800ebf8:	2805      	cmp	r0, #5
 800ebfa:	d127      	bne.n	800ec4c <_strtod_l+0x384>
 800ebfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ebfe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ec02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ec06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ec0a:	e696      	b.n	800e93a <_strtod_l+0x72>
 800ec0c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ec0e:	fb08 2101 	mla	r1, r8, r1, r2
 800ec12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ec16:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec18:	e7b5      	b.n	800eb86 <_strtod_l+0x2be>
 800ec1a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ec1c:	e7da      	b.n	800ebd4 <_strtod_l+0x30c>
 800ec1e:	498c      	ldr	r1, [pc, #560]	@ (800ee50 <_strtod_l+0x588>)
 800ec20:	a819      	add	r0, sp, #100	@ 0x64
 800ec22:	f001 f9c5 	bl	800ffb0 <__match>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f43f aea2 	beq.w	800e970 <_strtod_l+0xa8>
 800ec2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec2e:	a819      	add	r0, sp, #100	@ 0x64
 800ec30:	4988      	ldr	r1, [pc, #544]	@ (800ee54 <_strtod_l+0x58c>)
 800ec32:	3b01      	subs	r3, #1
 800ec34:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec36:	f001 f9bb 	bl	800ffb0 <__match>
 800ec3a:	b910      	cbnz	r0, 800ec42 <_strtod_l+0x37a>
 800ec3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec3e:	3301      	adds	r3, #1
 800ec40:	9319      	str	r3, [sp, #100]	@ 0x64
 800ec42:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ee64 <_strtod_l+0x59c>
 800ec46:	f04f 0a00 	mov.w	sl, #0
 800ec4a:	e676      	b.n	800e93a <_strtod_l+0x72>
 800ec4c:	4882      	ldr	r0, [pc, #520]	@ (800ee58 <_strtod_l+0x590>)
 800ec4e:	f000 feef 	bl	800fa30 <nan>
 800ec52:	ec5b ab10 	vmov	sl, fp, d0
 800ec56:	e670      	b.n	800e93a <_strtod_l+0x72>
 800ec58:	eba8 0309 	sub.w	r3, r8, r9
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	bf08      	it	eq
 800ec60:	462f      	moveq	r7, r5
 800ec62:	2d10      	cmp	r5, #16
 800ec64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ec66:	462c      	mov	r4, r5
 800ec68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec6a:	bfa8      	it	ge
 800ec6c:	2410      	movge	r4, #16
 800ec6e:	f7f1 fd7b 	bl	8000768 <__aeabi_ui2d>
 800ec72:	2d09      	cmp	r5, #9
 800ec74:	4682      	mov	sl, r0
 800ec76:	468b      	mov	fp, r1
 800ec78:	dc13      	bgt.n	800eca2 <_strtod_l+0x3da>
 800ec7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f43f ae5c 	beq.w	800e93a <_strtod_l+0x72>
 800ec82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec84:	dd78      	ble.n	800ed78 <_strtod_l+0x4b0>
 800ec86:	2b16      	cmp	r3, #22
 800ec88:	dc5f      	bgt.n	800ed4a <_strtod_l+0x482>
 800ec8a:	4974      	ldr	r1, [pc, #464]	@ (800ee5c <_strtod_l+0x594>)
 800ec8c:	4652      	mov	r2, sl
 800ec8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec92:	465b      	mov	r3, fp
 800ec94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec98:	f7f1 fde0 	bl	800085c <__aeabi_dmul>
 800ec9c:	4682      	mov	sl, r0
 800ec9e:	468b      	mov	fp, r1
 800eca0:	e64b      	b.n	800e93a <_strtod_l+0x72>
 800eca2:	4b6e      	ldr	r3, [pc, #440]	@ (800ee5c <_strtod_l+0x594>)
 800eca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eca8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ecac:	f7f1 fdd6 	bl	800085c <__aeabi_dmul>
 800ecb0:	4682      	mov	sl, r0
 800ecb2:	468b      	mov	fp, r1
 800ecb4:	9808      	ldr	r0, [sp, #32]
 800ecb6:	f7f1 fd57 	bl	8000768 <__aeabi_ui2d>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4650      	mov	r0, sl
 800ecc0:	4659      	mov	r1, fp
 800ecc2:	f7f1 fc15 	bl	80004f0 <__adddf3>
 800ecc6:	2d0f      	cmp	r5, #15
 800ecc8:	4682      	mov	sl, r0
 800ecca:	468b      	mov	fp, r1
 800eccc:	ddd5      	ble.n	800ec7a <_strtod_l+0x3b2>
 800ecce:	1b2c      	subs	r4, r5, r4
 800ecd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecd2:	441c      	add	r4, r3
 800ecd4:	2c00      	cmp	r4, #0
 800ecd6:	f340 8096 	ble.w	800ee06 <_strtod_l+0x53e>
 800ecda:	f014 030f 	ands.w	r3, r4, #15
 800ecde:	d00a      	beq.n	800ecf6 <_strtod_l+0x42e>
 800ece0:	495e      	ldr	r1, [pc, #376]	@ (800ee5c <_strtod_l+0x594>)
 800ece2:	4652      	mov	r2, sl
 800ece4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ece8:	465b      	mov	r3, fp
 800ecea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecee:	f7f1 fdb5 	bl	800085c <__aeabi_dmul>
 800ecf2:	4682      	mov	sl, r0
 800ecf4:	468b      	mov	fp, r1
 800ecf6:	f034 040f 	bics.w	r4, r4, #15
 800ecfa:	d073      	beq.n	800ede4 <_strtod_l+0x51c>
 800ecfc:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ed00:	dd48      	ble.n	800ed94 <_strtod_l+0x4cc>
 800ed02:	2400      	movs	r4, #0
 800ed04:	46a0      	mov	r8, r4
 800ed06:	46a1      	mov	r9, r4
 800ed08:	940a      	str	r4, [sp, #40]	@ 0x28
 800ed0a:	2322      	movs	r3, #34	@ 0x22
 800ed0c:	9a05      	ldr	r2, [sp, #20]
 800ed0e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ee64 <_strtod_l+0x59c>
 800ed12:	f04f 0a00 	mov.w	sl, #0
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f43f ae0d 	beq.w	800e93a <_strtod_l+0x72>
 800ed20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed22:	9805      	ldr	r0, [sp, #20]
 800ed24:	f7ff f934 	bl	800df90 <_Bfree>
 800ed28:	4649      	mov	r1, r9
 800ed2a:	9805      	ldr	r0, [sp, #20]
 800ed2c:	f7ff f930 	bl	800df90 <_Bfree>
 800ed30:	4641      	mov	r1, r8
 800ed32:	9805      	ldr	r0, [sp, #20]
 800ed34:	f7ff f92c 	bl	800df90 <_Bfree>
 800ed38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed3a:	9805      	ldr	r0, [sp, #20]
 800ed3c:	f7ff f928 	bl	800df90 <_Bfree>
 800ed40:	4621      	mov	r1, r4
 800ed42:	9805      	ldr	r0, [sp, #20]
 800ed44:	f7ff f924 	bl	800df90 <_Bfree>
 800ed48:	e5f7      	b.n	800e93a <_strtod_l+0x72>
 800ed4a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ed4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed50:	4293      	cmp	r3, r2
 800ed52:	dbbc      	blt.n	800ecce <_strtod_l+0x406>
 800ed54:	f1c5 050f 	rsb	r5, r5, #15
 800ed58:	4c40      	ldr	r4, [pc, #256]	@ (800ee5c <_strtod_l+0x594>)
 800ed5a:	4652      	mov	r2, sl
 800ed5c:	465b      	mov	r3, fp
 800ed5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ed62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed66:	f7f1 fd79 	bl	800085c <__aeabi_dmul>
 800ed6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed6c:	1b5d      	subs	r5, r3, r5
 800ed6e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ed72:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed76:	e78f      	b.n	800ec98 <_strtod_l+0x3d0>
 800ed78:	3316      	adds	r3, #22
 800ed7a:	dba8      	blt.n	800ecce <_strtod_l+0x406>
 800ed7c:	eba9 0808 	sub.w	r8, r9, r8
 800ed80:	4b36      	ldr	r3, [pc, #216]	@ (800ee5c <_strtod_l+0x594>)
 800ed82:	4650      	mov	r0, sl
 800ed84:	4659      	mov	r1, fp
 800ed86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ed8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ed8e:	f7f1 fe8f 	bl	8000ab0 <__aeabi_ddiv>
 800ed92:	e783      	b.n	800ec9c <_strtod_l+0x3d4>
 800ed94:	4b32      	ldr	r3, [pc, #200]	@ (800ee60 <_strtod_l+0x598>)
 800ed96:	1124      	asrs	r4, r4, #4
 800ed98:	4650      	mov	r0, sl
 800ed9a:	4659      	mov	r1, fp
 800ed9c:	9308      	str	r3, [sp, #32]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	461e      	mov	r6, r3
 800eda2:	2c01      	cmp	r4, #1
 800eda4:	dc21      	bgt.n	800edea <_strtod_l+0x522>
 800eda6:	b10b      	cbz	r3, 800edac <_strtod_l+0x4e4>
 800eda8:	4682      	mov	sl, r0
 800edaa:	468b      	mov	fp, r1
 800edac:	492c      	ldr	r1, [pc, #176]	@ (800ee60 <_strtod_l+0x598>)
 800edae:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800edb2:	4652      	mov	r2, sl
 800edb4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800edb8:	465b      	mov	r3, fp
 800edba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edbe:	f7f1 fd4d 	bl	800085c <__aeabi_dmul>
 800edc2:	4b28      	ldr	r3, [pc, #160]	@ (800ee64 <_strtod_l+0x59c>)
 800edc4:	460a      	mov	r2, r1
 800edc6:	4682      	mov	sl, r0
 800edc8:	400b      	ands	r3, r1
 800edca:	4927      	ldr	r1, [pc, #156]	@ (800ee68 <_strtod_l+0x5a0>)
 800edcc:	428b      	cmp	r3, r1
 800edce:	d898      	bhi.n	800ed02 <_strtod_l+0x43a>
 800edd0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800edd4:	428b      	cmp	r3, r1
 800edd6:	bf86      	itte	hi
 800edd8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ee6c <_strtod_l+0x5a4>
 800eddc:	f04f 3aff 	movhi.w	sl, #4294967295
 800ede0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ede4:	2300      	movs	r3, #0
 800ede6:	9308      	str	r3, [sp, #32]
 800ede8:	e07a      	b.n	800eee0 <_strtod_l+0x618>
 800edea:	07e2      	lsls	r2, r4, #31
 800edec:	d505      	bpl.n	800edfa <_strtod_l+0x532>
 800edee:	9b08      	ldr	r3, [sp, #32]
 800edf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf4:	f7f1 fd32 	bl	800085c <__aeabi_dmul>
 800edf8:	2301      	movs	r3, #1
 800edfa:	9a08      	ldr	r2, [sp, #32]
 800edfc:	3601      	adds	r6, #1
 800edfe:	1064      	asrs	r4, r4, #1
 800ee00:	3208      	adds	r2, #8
 800ee02:	9208      	str	r2, [sp, #32]
 800ee04:	e7cd      	b.n	800eda2 <_strtod_l+0x4da>
 800ee06:	d0ed      	beq.n	800ede4 <_strtod_l+0x51c>
 800ee08:	4264      	negs	r4, r4
 800ee0a:	f014 020f 	ands.w	r2, r4, #15
 800ee0e:	d00a      	beq.n	800ee26 <_strtod_l+0x55e>
 800ee10:	4b12      	ldr	r3, [pc, #72]	@ (800ee5c <_strtod_l+0x594>)
 800ee12:	4650      	mov	r0, sl
 800ee14:	4659      	mov	r1, fp
 800ee16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1e:	f7f1 fe47 	bl	8000ab0 <__aeabi_ddiv>
 800ee22:	4682      	mov	sl, r0
 800ee24:	468b      	mov	fp, r1
 800ee26:	1124      	asrs	r4, r4, #4
 800ee28:	d0dc      	beq.n	800ede4 <_strtod_l+0x51c>
 800ee2a:	2c1f      	cmp	r4, #31
 800ee2c:	dd20      	ble.n	800ee70 <_strtod_l+0x5a8>
 800ee2e:	2400      	movs	r4, #0
 800ee30:	46a0      	mov	r8, r4
 800ee32:	46a1      	mov	r9, r4
 800ee34:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee36:	2322      	movs	r3, #34	@ 0x22
 800ee38:	9a05      	ldr	r2, [sp, #20]
 800ee3a:	f04f 0a00 	mov.w	sl, #0
 800ee3e:	f04f 0b00 	mov.w	fp, #0
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	e768      	b.n	800ed18 <_strtod_l+0x450>
 800ee46:	bf00      	nop
 800ee48:	080108d5 	.word	0x080108d5
 800ee4c:	08010aec 	.word	0x08010aec
 800ee50:	080108cd 	.word	0x080108cd
 800ee54:	08010904 	.word	0x08010904
 800ee58:	08010c95 	.word	0x08010c95
 800ee5c:	08010a20 	.word	0x08010a20
 800ee60:	080109f8 	.word	0x080109f8
 800ee64:	7ff00000 	.word	0x7ff00000
 800ee68:	7ca00000 	.word	0x7ca00000
 800ee6c:	7fefffff 	.word	0x7fefffff
 800ee70:	f014 0310 	ands.w	r3, r4, #16
 800ee74:	4650      	mov	r0, sl
 800ee76:	4659      	mov	r1, fp
 800ee78:	4ea9      	ldr	r6, [pc, #676]	@ (800f120 <_strtod_l+0x858>)
 800ee7a:	bf18      	it	ne
 800ee7c:	236a      	movne	r3, #106	@ 0x6a
 800ee7e:	9308      	str	r3, [sp, #32]
 800ee80:	2300      	movs	r3, #0
 800ee82:	07e2      	lsls	r2, r4, #31
 800ee84:	d504      	bpl.n	800ee90 <_strtod_l+0x5c8>
 800ee86:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ee8a:	f7f1 fce7 	bl	800085c <__aeabi_dmul>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	1064      	asrs	r4, r4, #1
 800ee92:	f106 0608 	add.w	r6, r6, #8
 800ee96:	d1f4      	bne.n	800ee82 <_strtod_l+0x5ba>
 800ee98:	b10b      	cbz	r3, 800ee9e <_strtod_l+0x5d6>
 800ee9a:	4682      	mov	sl, r0
 800ee9c:	468b      	mov	fp, r1
 800ee9e:	9b08      	ldr	r3, [sp, #32]
 800eea0:	b1b3      	cbz	r3, 800eed0 <_strtod_l+0x608>
 800eea2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eea6:	4659      	mov	r1, fp
 800eea8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	dd0f      	ble.n	800eed0 <_strtod_l+0x608>
 800eeb0:	2b1f      	cmp	r3, #31
 800eeb2:	dd55      	ble.n	800ef60 <_strtod_l+0x698>
 800eeb4:	2b34      	cmp	r3, #52	@ 0x34
 800eeb6:	f04f 0a00 	mov.w	sl, #0
 800eeba:	bfdb      	ittet	le
 800eebc:	f04f 33ff 	movle.w	r3, #4294967295
 800eec0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eec4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eec8:	4093      	lslle	r3, r2
 800eeca:	bfd8      	it	le
 800eecc:	ea03 0b01 	andle.w	fp, r3, r1
 800eed0:	2200      	movs	r2, #0
 800eed2:	2300      	movs	r3, #0
 800eed4:	4650      	mov	r0, sl
 800eed6:	4659      	mov	r1, fp
 800eed8:	f7f1 ff28 	bl	8000d2c <__aeabi_dcmpeq>
 800eedc:	2800      	cmp	r0, #0
 800eede:	d1a6      	bne.n	800ee2e <_strtod_l+0x566>
 800eee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eee2:	463a      	mov	r2, r7
 800eee4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	462b      	mov	r3, r5
 800eeea:	9805      	ldr	r0, [sp, #20]
 800eeec:	f7ff f8ba 	bl	800e064 <__s2b>
 800eef0:	900a      	str	r0, [sp, #40]	@ 0x28
 800eef2:	2800      	cmp	r0, #0
 800eef4:	f43f af05 	beq.w	800ed02 <_strtod_l+0x43a>
 800eef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eefa:	eba9 0308 	sub.w	r3, r9, r8
 800eefe:	2400      	movs	r4, #0
 800ef00:	2a00      	cmp	r2, #0
 800ef02:	46a0      	mov	r8, r4
 800ef04:	bfa8      	it	ge
 800ef06:	2300      	movge	r3, #0
 800ef08:	9312      	str	r3, [sp, #72]	@ 0x48
 800ef0a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ef0e:	9316      	str	r3, [sp, #88]	@ 0x58
 800ef10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef12:	9805      	ldr	r0, [sp, #20]
 800ef14:	6859      	ldr	r1, [r3, #4]
 800ef16:	f7fe fffb 	bl	800df10 <_Balloc>
 800ef1a:	4681      	mov	r9, r0
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	f43f aef4 	beq.w	800ed0a <_strtod_l+0x442>
 800ef22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef24:	300c      	adds	r0, #12
 800ef26:	691a      	ldr	r2, [r3, #16]
 800ef28:	f103 010c 	add.w	r1, r3, #12
 800ef2c:	3202      	adds	r2, #2
 800ef2e:	0092      	lsls	r2, r2, #2
 800ef30:	f000 fd70 	bl	800fa14 <memcpy>
 800ef34:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef36:	a91b      	add	r1, sp, #108	@ 0x6c
 800ef38:	9805      	ldr	r0, [sp, #20]
 800ef3a:	ec4b ab10 	vmov	d0, sl, fp
 800ef3e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ef42:	f7ff fbd3 	bl	800e6ec <__d2b>
 800ef46:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef48:	2800      	cmp	r0, #0
 800ef4a:	f43f aede 	beq.w	800ed0a <_strtod_l+0x442>
 800ef4e:	2101      	movs	r1, #1
 800ef50:	9805      	ldr	r0, [sp, #20]
 800ef52:	f7ff f91d 	bl	800e190 <__i2b>
 800ef56:	4680      	mov	r8, r0
 800ef58:	b948      	cbnz	r0, 800ef6e <_strtod_l+0x6a6>
 800ef5a:	f04f 0800 	mov.w	r8, #0
 800ef5e:	e6d4      	b.n	800ed0a <_strtod_l+0x442>
 800ef60:	f04f 32ff 	mov.w	r2, #4294967295
 800ef64:	fa02 f303 	lsl.w	r3, r2, r3
 800ef68:	ea03 0a0a 	and.w	sl, r3, sl
 800ef6c:	e7b0      	b.n	800eed0 <_strtod_l+0x608>
 800ef6e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ef70:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ef72:	2d00      	cmp	r5, #0
 800ef74:	bfa9      	itett	ge
 800ef76:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ef78:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ef7a:	18ef      	addge	r7, r5, r3
 800ef7c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ef7e:	bfb8      	it	lt
 800ef80:	1b5e      	sublt	r6, r3, r5
 800ef82:	9b08      	ldr	r3, [sp, #32]
 800ef84:	bfb8      	it	lt
 800ef86:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ef88:	1aed      	subs	r5, r5, r3
 800ef8a:	4b66      	ldr	r3, [pc, #408]	@ (800f124 <_strtod_l+0x85c>)
 800ef8c:	4415      	add	r5, r2
 800ef8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ef92:	3d01      	subs	r5, #1
 800ef94:	429d      	cmp	r5, r3
 800ef96:	da4f      	bge.n	800f038 <_strtod_l+0x770>
 800ef98:	1b5b      	subs	r3, r3, r5
 800ef9a:	2101      	movs	r1, #1
 800ef9c:	2b1f      	cmp	r3, #31
 800ef9e:	eba2 0203 	sub.w	r2, r2, r3
 800efa2:	dc3d      	bgt.n	800f020 <_strtod_l+0x758>
 800efa4:	fa01 f303 	lsl.w	r3, r1, r3
 800efa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800efaa:	2300      	movs	r3, #0
 800efac:	9310      	str	r3, [sp, #64]	@ 0x40
 800efae:	18bd      	adds	r5, r7, r2
 800efb0:	9b08      	ldr	r3, [sp, #32]
 800efb2:	4416      	add	r6, r2
 800efb4:	42af      	cmp	r7, r5
 800efb6:	441e      	add	r6, r3
 800efb8:	463b      	mov	r3, r7
 800efba:	bfa8      	it	ge
 800efbc:	462b      	movge	r3, r5
 800efbe:	42b3      	cmp	r3, r6
 800efc0:	bfa8      	it	ge
 800efc2:	4633      	movge	r3, r6
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfc2      	ittt	gt
 800efc8:	1aed      	subgt	r5, r5, r3
 800efca:	1af6      	subgt	r6, r6, r3
 800efcc:	1aff      	subgt	r7, r7, r3
 800efce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	dd16      	ble.n	800f002 <_strtod_l+0x73a>
 800efd4:	4641      	mov	r1, r8
 800efd6:	461a      	mov	r2, r3
 800efd8:	9805      	ldr	r0, [sp, #20]
 800efda:	f7ff f999 	bl	800e310 <__pow5mult>
 800efde:	4680      	mov	r8, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d0ba      	beq.n	800ef5a <_strtod_l+0x692>
 800efe4:	4601      	mov	r1, r0
 800efe6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800efe8:	9805      	ldr	r0, [sp, #20]
 800efea:	f7ff f8e7 	bl	800e1bc <__multiply>
 800efee:	900e      	str	r0, [sp, #56]	@ 0x38
 800eff0:	2800      	cmp	r0, #0
 800eff2:	f43f ae8a 	beq.w	800ed0a <_strtod_l+0x442>
 800eff6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eff8:	9805      	ldr	r0, [sp, #20]
 800effa:	f7fe ffc9 	bl	800df90 <_Bfree>
 800effe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f000:	931a      	str	r3, [sp, #104]	@ 0x68
 800f002:	2d00      	cmp	r5, #0
 800f004:	dc1d      	bgt.n	800f042 <_strtod_l+0x77a>
 800f006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f008:	2b00      	cmp	r3, #0
 800f00a:	dd23      	ble.n	800f054 <_strtod_l+0x78c>
 800f00c:	4649      	mov	r1, r9
 800f00e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f010:	9805      	ldr	r0, [sp, #20]
 800f012:	f7ff f97d 	bl	800e310 <__pow5mult>
 800f016:	4681      	mov	r9, r0
 800f018:	b9e0      	cbnz	r0, 800f054 <_strtod_l+0x78c>
 800f01a:	f04f 0900 	mov.w	r9, #0
 800f01e:	e674      	b.n	800ed0a <_strtod_l+0x442>
 800f020:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f024:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f026:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f02a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f02e:	35e2      	adds	r5, #226	@ 0xe2
 800f030:	fa01 f305 	lsl.w	r3, r1, r5
 800f034:	9310      	str	r3, [sp, #64]	@ 0x40
 800f036:	e7ba      	b.n	800efae <_strtod_l+0x6e6>
 800f038:	2300      	movs	r3, #0
 800f03a:	9310      	str	r3, [sp, #64]	@ 0x40
 800f03c:	2301      	movs	r3, #1
 800f03e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f040:	e7b5      	b.n	800efae <_strtod_l+0x6e6>
 800f042:	462a      	mov	r2, r5
 800f044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f046:	9805      	ldr	r0, [sp, #20]
 800f048:	f7ff f9bc 	bl	800e3c4 <__lshift>
 800f04c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f04e:	2800      	cmp	r0, #0
 800f050:	d1d9      	bne.n	800f006 <_strtod_l+0x73e>
 800f052:	e65a      	b.n	800ed0a <_strtod_l+0x442>
 800f054:	2e00      	cmp	r6, #0
 800f056:	dd07      	ble.n	800f068 <_strtod_l+0x7a0>
 800f058:	4649      	mov	r1, r9
 800f05a:	4632      	mov	r2, r6
 800f05c:	9805      	ldr	r0, [sp, #20]
 800f05e:	f7ff f9b1 	bl	800e3c4 <__lshift>
 800f062:	4681      	mov	r9, r0
 800f064:	2800      	cmp	r0, #0
 800f066:	d0d8      	beq.n	800f01a <_strtod_l+0x752>
 800f068:	2f00      	cmp	r7, #0
 800f06a:	dd08      	ble.n	800f07e <_strtod_l+0x7b6>
 800f06c:	4641      	mov	r1, r8
 800f06e:	463a      	mov	r2, r7
 800f070:	9805      	ldr	r0, [sp, #20]
 800f072:	f7ff f9a7 	bl	800e3c4 <__lshift>
 800f076:	4680      	mov	r8, r0
 800f078:	2800      	cmp	r0, #0
 800f07a:	f43f ae46 	beq.w	800ed0a <_strtod_l+0x442>
 800f07e:	464a      	mov	r2, r9
 800f080:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f082:	9805      	ldr	r0, [sp, #20]
 800f084:	f7ff fa26 	bl	800e4d4 <__mdiff>
 800f088:	4604      	mov	r4, r0
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f43f ae3d 	beq.w	800ed0a <_strtod_l+0x442>
 800f090:	68c3      	ldr	r3, [r0, #12]
 800f092:	4641      	mov	r1, r8
 800f094:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f096:	2300      	movs	r3, #0
 800f098:	60c3      	str	r3, [r0, #12]
 800f09a:	f7ff f9ff 	bl	800e49c <__mcmp>
 800f09e:	2800      	cmp	r0, #0
 800f0a0:	da46      	bge.n	800f130 <_strtod_l+0x868>
 800f0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0a4:	ea53 030a 	orrs.w	r3, r3, sl
 800f0a8:	d16c      	bne.n	800f184 <_strtod_l+0x8bc>
 800f0aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d168      	bne.n	800f184 <_strtod_l+0x8bc>
 800f0b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0b6:	0d1b      	lsrs	r3, r3, #20
 800f0b8:	051b      	lsls	r3, r3, #20
 800f0ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f0be:	d961      	bls.n	800f184 <_strtod_l+0x8bc>
 800f0c0:	6963      	ldr	r3, [r4, #20]
 800f0c2:	b913      	cbnz	r3, 800f0ca <_strtod_l+0x802>
 800f0c4:	6923      	ldr	r3, [r4, #16]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	dd5c      	ble.n	800f184 <_strtod_l+0x8bc>
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	9805      	ldr	r0, [sp, #20]
 800f0d0:	f7ff f978 	bl	800e3c4 <__lshift>
 800f0d4:	4641      	mov	r1, r8
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	f7ff f9e0 	bl	800e49c <__mcmp>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	dd51      	ble.n	800f184 <_strtod_l+0x8bc>
 800f0e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0e4:	9a08      	ldr	r2, [sp, #32]
 800f0e6:	0d1b      	lsrs	r3, r3, #20
 800f0e8:	051b      	lsls	r3, r3, #20
 800f0ea:	2a00      	cmp	r2, #0
 800f0ec:	d06b      	beq.n	800f1c6 <_strtod_l+0x8fe>
 800f0ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f0f2:	d868      	bhi.n	800f1c6 <_strtod_l+0x8fe>
 800f0f4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f0f8:	f67f ae9d 	bls.w	800ee36 <_strtod_l+0x56e>
 800f0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800f128 <_strtod_l+0x860>)
 800f0fe:	4650      	mov	r0, sl
 800f100:	4659      	mov	r1, fp
 800f102:	2200      	movs	r2, #0
 800f104:	f7f1 fbaa 	bl	800085c <__aeabi_dmul>
 800f108:	4b08      	ldr	r3, [pc, #32]	@ (800f12c <_strtod_l+0x864>)
 800f10a:	4682      	mov	sl, r0
 800f10c:	468b      	mov	fp, r1
 800f10e:	400b      	ands	r3, r1
 800f110:	2b00      	cmp	r3, #0
 800f112:	f47f ae05 	bne.w	800ed20 <_strtod_l+0x458>
 800f116:	2322      	movs	r3, #34	@ 0x22
 800f118:	9a05      	ldr	r2, [sp, #20]
 800f11a:	6013      	str	r3, [r2, #0]
 800f11c:	e600      	b.n	800ed20 <_strtod_l+0x458>
 800f11e:	bf00      	nop
 800f120:	08010b18 	.word	0x08010b18
 800f124:	fffffc02 	.word	0xfffffc02
 800f128:	39500000 	.word	0x39500000
 800f12c:	7ff00000 	.word	0x7ff00000
 800f130:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f134:	d165      	bne.n	800f202 <_strtod_l+0x93a>
 800f136:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f138:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f13c:	b35a      	cbz	r2, 800f196 <_strtod_l+0x8ce>
 800f13e:	4a9e      	ldr	r2, [pc, #632]	@ (800f3b8 <_strtod_l+0xaf0>)
 800f140:	4293      	cmp	r3, r2
 800f142:	d12b      	bne.n	800f19c <_strtod_l+0x8d4>
 800f144:	9b08      	ldr	r3, [sp, #32]
 800f146:	4651      	mov	r1, sl
 800f148:	b303      	cbz	r3, 800f18c <_strtod_l+0x8c4>
 800f14a:	465a      	mov	r2, fp
 800f14c:	4b9b      	ldr	r3, [pc, #620]	@ (800f3bc <_strtod_l+0xaf4>)
 800f14e:	4013      	ands	r3, r2
 800f150:	f04f 32ff 	mov.w	r2, #4294967295
 800f154:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f158:	d81b      	bhi.n	800f192 <_strtod_l+0x8ca>
 800f15a:	0d1b      	lsrs	r3, r3, #20
 800f15c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f160:	fa02 f303 	lsl.w	r3, r2, r3
 800f164:	4299      	cmp	r1, r3
 800f166:	d119      	bne.n	800f19c <_strtod_l+0x8d4>
 800f168:	4b95      	ldr	r3, [pc, #596]	@ (800f3c0 <_strtod_l+0xaf8>)
 800f16a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d102      	bne.n	800f176 <_strtod_l+0x8ae>
 800f170:	3101      	adds	r1, #1
 800f172:	f43f adca 	beq.w	800ed0a <_strtod_l+0x442>
 800f176:	4b91      	ldr	r3, [pc, #580]	@ (800f3bc <_strtod_l+0xaf4>)
 800f178:	f04f 0a00 	mov.w	sl, #0
 800f17c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f17e:	401a      	ands	r2, r3
 800f180:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f184:	9b08      	ldr	r3, [sp, #32]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1b8      	bne.n	800f0fc <_strtod_l+0x834>
 800f18a:	e5c9      	b.n	800ed20 <_strtod_l+0x458>
 800f18c:	f04f 33ff 	mov.w	r3, #4294967295
 800f190:	e7e8      	b.n	800f164 <_strtod_l+0x89c>
 800f192:	4613      	mov	r3, r2
 800f194:	e7e6      	b.n	800f164 <_strtod_l+0x89c>
 800f196:	ea53 030a 	orrs.w	r3, r3, sl
 800f19a:	d0a1      	beq.n	800f0e0 <_strtod_l+0x818>
 800f19c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f19e:	b1db      	cbz	r3, 800f1d8 <_strtod_l+0x910>
 800f1a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1a2:	4213      	tst	r3, r2
 800f1a4:	d0ee      	beq.n	800f184 <_strtod_l+0x8bc>
 800f1a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1a8:	4650      	mov	r0, sl
 800f1aa:	9a08      	ldr	r2, [sp, #32]
 800f1ac:	4659      	mov	r1, fp
 800f1ae:	b1bb      	cbz	r3, 800f1e0 <_strtod_l+0x918>
 800f1b0:	f7ff fb6a 	bl	800e888 <sulp>
 800f1b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1b8:	ec53 2b10 	vmov	r2, r3, d0
 800f1bc:	f7f1 f998 	bl	80004f0 <__adddf3>
 800f1c0:	4682      	mov	sl, r0
 800f1c2:	468b      	mov	fp, r1
 800f1c4:	e7de      	b.n	800f184 <_strtod_l+0x8bc>
 800f1c6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f1ca:	f04f 3aff 	mov.w	sl, #4294967295
 800f1ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f1d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f1d6:	e7d5      	b.n	800f184 <_strtod_l+0x8bc>
 800f1d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f1da:	ea13 0f0a 	tst.w	r3, sl
 800f1de:	e7e1      	b.n	800f1a4 <_strtod_l+0x8dc>
 800f1e0:	f7ff fb52 	bl	800e888 <sulp>
 800f1e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1e8:	ec53 2b10 	vmov	r2, r3, d0
 800f1ec:	f7f1 f97e 	bl	80004ec <__aeabi_dsub>
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4682      	mov	sl, r0
 800f1f6:	468b      	mov	fp, r1
 800f1f8:	f7f1 fd98 	bl	8000d2c <__aeabi_dcmpeq>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0c1      	beq.n	800f184 <_strtod_l+0x8bc>
 800f200:	e619      	b.n	800ee36 <_strtod_l+0x56e>
 800f202:	4641      	mov	r1, r8
 800f204:	4620      	mov	r0, r4
 800f206:	f7ff fac9 	bl	800e79c <__ratio>
 800f20a:	2200      	movs	r2, #0
 800f20c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f210:	ec57 6b10 	vmov	r6, r7, d0
 800f214:	4630      	mov	r0, r6
 800f216:	4639      	mov	r1, r7
 800f218:	f7f1 fd9c 	bl	8000d54 <__aeabi_dcmple>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d06f      	beq.n	800f300 <_strtod_l+0xa38>
 800f220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f222:	2b00      	cmp	r3, #0
 800f224:	d17a      	bne.n	800f31c <_strtod_l+0xa54>
 800f226:	f1ba 0f00 	cmp.w	sl, #0
 800f22a:	d158      	bne.n	800f2de <_strtod_l+0xa16>
 800f22c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f22e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f232:	2b00      	cmp	r3, #0
 800f234:	d15a      	bne.n	800f2ec <_strtod_l+0xa24>
 800f236:	2200      	movs	r2, #0
 800f238:	4b62      	ldr	r3, [pc, #392]	@ (800f3c4 <_strtod_l+0xafc>)
 800f23a:	4630      	mov	r0, r6
 800f23c:	4639      	mov	r1, r7
 800f23e:	f7f1 fd7f 	bl	8000d40 <__aeabi_dcmplt>
 800f242:	2800      	cmp	r0, #0
 800f244:	d159      	bne.n	800f2fa <_strtod_l+0xa32>
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	2200      	movs	r2, #0
 800f24c:	4b5e      	ldr	r3, [pc, #376]	@ (800f3c8 <_strtod_l+0xb00>)
 800f24e:	f7f1 fb05 	bl	800085c <__aeabi_dmul>
 800f252:	4606      	mov	r6, r0
 800f254:	460f      	mov	r7, r1
 800f256:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f25a:	9606      	str	r6, [sp, #24]
 800f25c:	9307      	str	r3, [sp, #28]
 800f25e:	4d57      	ldr	r5, [pc, #348]	@ (800f3bc <_strtod_l+0xaf4>)
 800f260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f264:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f26a:	401d      	ands	r5, r3
 800f26c:	4b57      	ldr	r3, [pc, #348]	@ (800f3cc <_strtod_l+0xb04>)
 800f26e:	429d      	cmp	r5, r3
 800f270:	f040 80b0 	bne.w	800f3d4 <_strtod_l+0xb0c>
 800f274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f276:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f27a:	ec4b ab10 	vmov	d0, sl, fp
 800f27e:	f7ff f9c1 	bl	800e604 <__ulp>
 800f282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f286:	ec51 0b10 	vmov	r0, r1, d0
 800f28a:	f7f1 fae7 	bl	800085c <__aeabi_dmul>
 800f28e:	4652      	mov	r2, sl
 800f290:	465b      	mov	r3, fp
 800f292:	f7f1 f92d 	bl	80004f0 <__adddf3>
 800f296:	460b      	mov	r3, r1
 800f298:	4948      	ldr	r1, [pc, #288]	@ (800f3bc <_strtod_l+0xaf4>)
 800f29a:	4682      	mov	sl, r0
 800f29c:	4a4c      	ldr	r2, [pc, #304]	@ (800f3d0 <_strtod_l+0xb08>)
 800f29e:	4019      	ands	r1, r3
 800f2a0:	4291      	cmp	r1, r2
 800f2a2:	d942      	bls.n	800f32a <_strtod_l+0xa62>
 800f2a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2a6:	4b46      	ldr	r3, [pc, #280]	@ (800f3c0 <_strtod_l+0xaf8>)
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d103      	bne.n	800f2b4 <_strtod_l+0x9ec>
 800f2ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	f43f ad2b 	beq.w	800ed0a <_strtod_l+0x442>
 800f2b4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800f3c0 <_strtod_l+0xaf8>
 800f2b8:	f04f 3aff 	mov.w	sl, #4294967295
 800f2bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2be:	9805      	ldr	r0, [sp, #20]
 800f2c0:	f7fe fe66 	bl	800df90 <_Bfree>
 800f2c4:	4649      	mov	r1, r9
 800f2c6:	9805      	ldr	r0, [sp, #20]
 800f2c8:	f7fe fe62 	bl	800df90 <_Bfree>
 800f2cc:	4641      	mov	r1, r8
 800f2ce:	9805      	ldr	r0, [sp, #20]
 800f2d0:	f7fe fe5e 	bl	800df90 <_Bfree>
 800f2d4:	4621      	mov	r1, r4
 800f2d6:	9805      	ldr	r0, [sp, #20]
 800f2d8:	f7fe fe5a 	bl	800df90 <_Bfree>
 800f2dc:	e618      	b.n	800ef10 <_strtod_l+0x648>
 800f2de:	f1ba 0f01 	cmp.w	sl, #1
 800f2e2:	d103      	bne.n	800f2ec <_strtod_l+0xa24>
 800f2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f43f ada5 	beq.w	800ee36 <_strtod_l+0x56e>
 800f2ec:	2600      	movs	r6, #0
 800f2ee:	4f35      	ldr	r7, [pc, #212]	@ (800f3c4 <_strtod_l+0xafc>)
 800f2f0:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800f398 <_strtod_l+0xad0>
 800f2f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f2f8:	e7b1      	b.n	800f25e <_strtod_l+0x996>
 800f2fa:	2600      	movs	r6, #0
 800f2fc:	4f32      	ldr	r7, [pc, #200]	@ (800f3c8 <_strtod_l+0xb00>)
 800f2fe:	e7aa      	b.n	800f256 <_strtod_l+0x98e>
 800f300:	4b31      	ldr	r3, [pc, #196]	@ (800f3c8 <_strtod_l+0xb00>)
 800f302:	4630      	mov	r0, r6
 800f304:	4639      	mov	r1, r7
 800f306:	2200      	movs	r2, #0
 800f308:	f7f1 faa8 	bl	800085c <__aeabi_dmul>
 800f30c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f30e:	4606      	mov	r6, r0
 800f310:	460f      	mov	r7, r1
 800f312:	2b00      	cmp	r3, #0
 800f314:	d09f      	beq.n	800f256 <_strtod_l+0x98e>
 800f316:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f31a:	e7a0      	b.n	800f25e <_strtod_l+0x996>
 800f31c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800f3a0 <_strtod_l+0xad8>
 800f320:	ec57 6b17 	vmov	r6, r7, d7
 800f324:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f328:	e799      	b.n	800f25e <_strtod_l+0x996>
 800f32a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f32e:	9b08      	ldr	r3, [sp, #32]
 800f330:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f334:	2b00      	cmp	r3, #0
 800f336:	d1c1      	bne.n	800f2bc <_strtod_l+0x9f4>
 800f338:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f33c:	0d1b      	lsrs	r3, r3, #20
 800f33e:	051b      	lsls	r3, r3, #20
 800f340:	429d      	cmp	r5, r3
 800f342:	d1bb      	bne.n	800f2bc <_strtod_l+0x9f4>
 800f344:	4630      	mov	r0, r6
 800f346:	4639      	mov	r1, r7
 800f348:	f7f1 fde8 	bl	8000f1c <__aeabi_d2lz>
 800f34c:	f7f1 fa58 	bl	8000800 <__aeabi_l2d>
 800f350:	4602      	mov	r2, r0
 800f352:	460b      	mov	r3, r1
 800f354:	4630      	mov	r0, r6
 800f356:	4639      	mov	r1, r7
 800f358:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f35c:	f7f1 f8c6 	bl	80004ec <__aeabi_dsub>
 800f360:	460b      	mov	r3, r1
 800f362:	4602      	mov	r2, r0
 800f364:	ea46 060a 	orr.w	r6, r6, sl
 800f368:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f36e:	431e      	orrs	r6, r3
 800f370:	d06d      	beq.n	800f44e <_strtod_l+0xb86>
 800f372:	a30d      	add	r3, pc, #52	@ (adr r3, 800f3a8 <_strtod_l+0xae0>)
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f7f1 fce2 	bl	8000d40 <__aeabi_dcmplt>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	f47f accf 	bne.w	800ed20 <_strtod_l+0x458>
 800f382:	a30b      	add	r3, pc, #44	@ (adr r3, 800f3b0 <_strtod_l+0xae8>)
 800f384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f38c:	f7f1 fcf6 	bl	8000d7c <__aeabi_dcmpgt>
 800f390:	2800      	cmp	r0, #0
 800f392:	d093      	beq.n	800f2bc <_strtod_l+0x9f4>
 800f394:	e4c4      	b.n	800ed20 <_strtod_l+0x458>
 800f396:	bf00      	nop
 800f398:	00000000 	.word	0x00000000
 800f39c:	bff00000 	.word	0xbff00000
 800f3a0:	00000000 	.word	0x00000000
 800f3a4:	3ff00000 	.word	0x3ff00000
 800f3a8:	94a03595 	.word	0x94a03595
 800f3ac:	3fdfffff 	.word	0x3fdfffff
 800f3b0:	35afe535 	.word	0x35afe535
 800f3b4:	3fe00000 	.word	0x3fe00000
 800f3b8:	000fffff 	.word	0x000fffff
 800f3bc:	7ff00000 	.word	0x7ff00000
 800f3c0:	7fefffff 	.word	0x7fefffff
 800f3c4:	3ff00000 	.word	0x3ff00000
 800f3c8:	3fe00000 	.word	0x3fe00000
 800f3cc:	7fe00000 	.word	0x7fe00000
 800f3d0:	7c9fffff 	.word	0x7c9fffff
 800f3d4:	9b08      	ldr	r3, [sp, #32]
 800f3d6:	b323      	cbz	r3, 800f422 <_strtod_l+0xb5a>
 800f3d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f3dc:	d821      	bhi.n	800f422 <_strtod_l+0xb5a>
 800f3de:	4630      	mov	r0, r6
 800f3e0:	4639      	mov	r1, r7
 800f3e2:	a327      	add	r3, pc, #156	@ (adr r3, 800f480 <_strtod_l+0xbb8>)
 800f3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e8:	f7f1 fcb4 	bl	8000d54 <__aeabi_dcmple>
 800f3ec:	b1a0      	cbz	r0, 800f418 <_strtod_l+0xb50>
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	f7f1 fd0b 	bl	8000e0c <__aeabi_d2uiz>
 800f3f6:	2801      	cmp	r0, #1
 800f3f8:	bf38      	it	cc
 800f3fa:	2001      	movcc	r0, #1
 800f3fc:	f7f1 f9b4 	bl	8000768 <__aeabi_ui2d>
 800f400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f402:	4606      	mov	r6, r0
 800f404:	460f      	mov	r7, r1
 800f406:	b9fb      	cbnz	r3, 800f448 <_strtod_l+0xb80>
 800f408:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f40c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f40e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f410:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f414:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f418:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f41a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f41e:	1b5b      	subs	r3, r3, r5
 800f420:	9311      	str	r3, [sp, #68]	@ 0x44
 800f422:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f426:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f42a:	f7ff f8eb 	bl	800e604 <__ulp>
 800f42e:	4650      	mov	r0, sl
 800f430:	4659      	mov	r1, fp
 800f432:	ec53 2b10 	vmov	r2, r3, d0
 800f436:	f7f1 fa11 	bl	800085c <__aeabi_dmul>
 800f43a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f43e:	f7f1 f857 	bl	80004f0 <__adddf3>
 800f442:	4682      	mov	sl, r0
 800f444:	468b      	mov	fp, r1
 800f446:	e772      	b.n	800f32e <_strtod_l+0xa66>
 800f448:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f44c:	e7e0      	b.n	800f410 <_strtod_l+0xb48>
 800f44e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f488 <_strtod_l+0xbc0>)
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	f7f1 fc74 	bl	8000d40 <__aeabi_dcmplt>
 800f458:	e79a      	b.n	800f390 <_strtod_l+0xac8>
 800f45a:	2300      	movs	r3, #0
 800f45c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f45e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f460:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f462:	6013      	str	r3, [r2, #0]
 800f464:	f7ff ba6d 	b.w	800e942 <_strtod_l+0x7a>
 800f468:	2a65      	cmp	r2, #101	@ 0x65
 800f46a:	f43f ab67 	beq.w	800eb3c <_strtod_l+0x274>
 800f46e:	2a45      	cmp	r2, #69	@ 0x45
 800f470:	f43f ab64 	beq.w	800eb3c <_strtod_l+0x274>
 800f474:	2301      	movs	r3, #1
 800f476:	f7ff bba0 	b.w	800ebba <_strtod_l+0x2f2>
 800f47a:	bf00      	nop
 800f47c:	f3af 8000 	nop.w
 800f480:	ffc00000 	.word	0xffc00000
 800f484:	41dfffff 	.word	0x41dfffff
 800f488:	94a03595 	.word	0x94a03595
 800f48c:	3fcfffff 	.word	0x3fcfffff

0800f490 <_strtod_r>:
 800f490:	4b01      	ldr	r3, [pc, #4]	@ (800f498 <_strtod_r+0x8>)
 800f492:	f7ff ba19 	b.w	800e8c8 <_strtod_l>
 800f496:	bf00      	nop
 800f498:	2000006c 	.word	0x2000006c

0800f49c <_strtol_l.constprop.0>:
 800f49c:	2b24      	cmp	r3, #36	@ 0x24
 800f49e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a2:	4686      	mov	lr, r0
 800f4a4:	4690      	mov	r8, r2
 800f4a6:	d801      	bhi.n	800f4ac <_strtol_l.constprop.0+0x10>
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d106      	bne.n	800f4ba <_strtol_l.constprop.0+0x1e>
 800f4ac:	f7fd fd9a 	bl	800cfe4 <__errno>
 800f4b0:	2316      	movs	r3, #22
 800f4b2:	6003      	str	r3, [r0, #0]
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	4833      	ldr	r0, [pc, #204]	@ (800f58c <_strtol_l.constprop.0+0xf0>)
 800f4be:	462a      	mov	r2, r5
 800f4c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4c4:	5d06      	ldrb	r6, [r0, r4]
 800f4c6:	f016 0608 	ands.w	r6, r6, #8
 800f4ca:	d1f8      	bne.n	800f4be <_strtol_l.constprop.0+0x22>
 800f4cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800f4ce:	d12d      	bne.n	800f52c <_strtol_l.constprop.0+0x90>
 800f4d0:	782c      	ldrb	r4, [r5, #0]
 800f4d2:	2601      	movs	r6, #1
 800f4d4:	1c95      	adds	r5, r2, #2
 800f4d6:	f033 0210 	bics.w	r2, r3, #16
 800f4da:	d109      	bne.n	800f4f0 <_strtol_l.constprop.0+0x54>
 800f4dc:	2c30      	cmp	r4, #48	@ 0x30
 800f4de:	d12a      	bne.n	800f536 <_strtol_l.constprop.0+0x9a>
 800f4e0:	782a      	ldrb	r2, [r5, #0]
 800f4e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4e6:	2a58      	cmp	r2, #88	@ 0x58
 800f4e8:	d125      	bne.n	800f536 <_strtol_l.constprop.0+0x9a>
 800f4ea:	786c      	ldrb	r4, [r5, #1]
 800f4ec:	2310      	movs	r3, #16
 800f4ee:	3502      	adds	r5, #2
 800f4f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f4fa:	4610      	mov	r0, r2
 800f4fc:	fbbc f9f3 	udiv	r9, ip, r3
 800f500:	fb03 ca19 	mls	sl, r3, r9, ip
 800f504:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f508:	2f09      	cmp	r7, #9
 800f50a:	d81b      	bhi.n	800f544 <_strtol_l.constprop.0+0xa8>
 800f50c:	463c      	mov	r4, r7
 800f50e:	42a3      	cmp	r3, r4
 800f510:	dd27      	ble.n	800f562 <_strtol_l.constprop.0+0xc6>
 800f512:	1c57      	adds	r7, r2, #1
 800f514:	d007      	beq.n	800f526 <_strtol_l.constprop.0+0x8a>
 800f516:	4581      	cmp	r9, r0
 800f518:	d320      	bcc.n	800f55c <_strtol_l.constprop.0+0xc0>
 800f51a:	d101      	bne.n	800f520 <_strtol_l.constprop.0+0x84>
 800f51c:	45a2      	cmp	sl, r4
 800f51e:	db1d      	blt.n	800f55c <_strtol_l.constprop.0+0xc0>
 800f520:	fb00 4003 	mla	r0, r0, r3, r4
 800f524:	2201      	movs	r2, #1
 800f526:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f52a:	e7eb      	b.n	800f504 <_strtol_l.constprop.0+0x68>
 800f52c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f52e:	bf04      	itt	eq
 800f530:	782c      	ldrbeq	r4, [r5, #0]
 800f532:	1c95      	addeq	r5, r2, #2
 800f534:	e7cf      	b.n	800f4d6 <_strtol_l.constprop.0+0x3a>
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1da      	bne.n	800f4f0 <_strtol_l.constprop.0+0x54>
 800f53a:	2c30      	cmp	r4, #48	@ 0x30
 800f53c:	bf0c      	ite	eq
 800f53e:	2308      	moveq	r3, #8
 800f540:	230a      	movne	r3, #10
 800f542:	e7d5      	b.n	800f4f0 <_strtol_l.constprop.0+0x54>
 800f544:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f548:	2f19      	cmp	r7, #25
 800f54a:	d801      	bhi.n	800f550 <_strtol_l.constprop.0+0xb4>
 800f54c:	3c37      	subs	r4, #55	@ 0x37
 800f54e:	e7de      	b.n	800f50e <_strtol_l.constprop.0+0x72>
 800f550:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f554:	2f19      	cmp	r7, #25
 800f556:	d804      	bhi.n	800f562 <_strtol_l.constprop.0+0xc6>
 800f558:	3c57      	subs	r4, #87	@ 0x57
 800f55a:	e7d8      	b.n	800f50e <_strtol_l.constprop.0+0x72>
 800f55c:	f04f 32ff 	mov.w	r2, #4294967295
 800f560:	e7e1      	b.n	800f526 <_strtol_l.constprop.0+0x8a>
 800f562:	1c53      	adds	r3, r2, #1
 800f564:	d108      	bne.n	800f578 <_strtol_l.constprop.0+0xdc>
 800f566:	2322      	movs	r3, #34	@ 0x22
 800f568:	4660      	mov	r0, ip
 800f56a:	f8ce 3000 	str.w	r3, [lr]
 800f56e:	f1b8 0f00 	cmp.w	r8, #0
 800f572:	d0a0      	beq.n	800f4b6 <_strtol_l.constprop.0+0x1a>
 800f574:	1e69      	subs	r1, r5, #1
 800f576:	e006      	b.n	800f586 <_strtol_l.constprop.0+0xea>
 800f578:	b106      	cbz	r6, 800f57c <_strtol_l.constprop.0+0xe0>
 800f57a:	4240      	negs	r0, r0
 800f57c:	f1b8 0f00 	cmp.w	r8, #0
 800f580:	d099      	beq.n	800f4b6 <_strtol_l.constprop.0+0x1a>
 800f582:	2a00      	cmp	r2, #0
 800f584:	d1f6      	bne.n	800f574 <_strtol_l.constprop.0+0xd8>
 800f586:	f8c8 1000 	str.w	r1, [r8]
 800f58a:	e794      	b.n	800f4b6 <_strtol_l.constprop.0+0x1a>
 800f58c:	08010b41 	.word	0x08010b41

0800f590 <_strtol_r>:
 800f590:	f7ff bf84 	b.w	800f49c <_strtol_l.constprop.0>

0800f594 <__ssputs_r>:
 800f594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	461f      	mov	r7, r3
 800f59a:	688e      	ldr	r6, [r1, #8]
 800f59c:	4682      	mov	sl, r0
 800f59e:	460c      	mov	r4, r1
 800f5a0:	42be      	cmp	r6, r7
 800f5a2:	4690      	mov	r8, r2
 800f5a4:	680b      	ldr	r3, [r1, #0]
 800f5a6:	d82d      	bhi.n	800f604 <__ssputs_r+0x70>
 800f5a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f5b0:	d026      	beq.n	800f600 <__ssputs_r+0x6c>
 800f5b2:	6965      	ldr	r5, [r4, #20]
 800f5b4:	6909      	ldr	r1, [r1, #16]
 800f5b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5ba:	eba3 0901 	sub.w	r9, r3, r1
 800f5be:	1c7b      	adds	r3, r7, #1
 800f5c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5c4:	444b      	add	r3, r9
 800f5c6:	106d      	asrs	r5, r5, #1
 800f5c8:	429d      	cmp	r5, r3
 800f5ca:	bf38      	it	cc
 800f5cc:	461d      	movcc	r5, r3
 800f5ce:	0553      	lsls	r3, r2, #21
 800f5d0:	d527      	bpl.n	800f622 <__ssputs_r+0x8e>
 800f5d2:	4629      	mov	r1, r5
 800f5d4:	f7fe fc10 	bl	800ddf8 <_malloc_r>
 800f5d8:	4606      	mov	r6, r0
 800f5da:	b360      	cbz	r0, 800f636 <__ssputs_r+0xa2>
 800f5dc:	464a      	mov	r2, r9
 800f5de:	6921      	ldr	r1, [r4, #16]
 800f5e0:	f000 fa18 	bl	800fa14 <memcpy>
 800f5e4:	89a3      	ldrh	r3, [r4, #12]
 800f5e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f5ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5ee:	81a3      	strh	r3, [r4, #12]
 800f5f0:	6126      	str	r6, [r4, #16]
 800f5f2:	444e      	add	r6, r9
 800f5f4:	6165      	str	r5, [r4, #20]
 800f5f6:	eba5 0509 	sub.w	r5, r5, r9
 800f5fa:	6026      	str	r6, [r4, #0]
 800f5fc:	463e      	mov	r6, r7
 800f5fe:	60a5      	str	r5, [r4, #8]
 800f600:	42be      	cmp	r6, r7
 800f602:	d900      	bls.n	800f606 <__ssputs_r+0x72>
 800f604:	463e      	mov	r6, r7
 800f606:	4632      	mov	r2, r6
 800f608:	4641      	mov	r1, r8
 800f60a:	6820      	ldr	r0, [r4, #0]
 800f60c:	f000 f9c6 	bl	800f99c <memmove>
 800f610:	68a3      	ldr	r3, [r4, #8]
 800f612:	2000      	movs	r0, #0
 800f614:	1b9b      	subs	r3, r3, r6
 800f616:	60a3      	str	r3, [r4, #8]
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	4433      	add	r3, r6
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f622:	462a      	mov	r2, r5
 800f624:	f000 fd85 	bl	8010132 <_realloc_r>
 800f628:	4606      	mov	r6, r0
 800f62a:	2800      	cmp	r0, #0
 800f62c:	d1e0      	bne.n	800f5f0 <__ssputs_r+0x5c>
 800f62e:	6921      	ldr	r1, [r4, #16]
 800f630:	4650      	mov	r0, sl
 800f632:	f7fe fb6d 	bl	800dd10 <_free_r>
 800f636:	230c      	movs	r3, #12
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	f8ca 3000 	str.w	r3, [sl]
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	e7e9      	b.n	800f61e <__ssputs_r+0x8a>
	...

0800f64c <_svfiprintf_r>:
 800f64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f650:	4698      	mov	r8, r3
 800f652:	898b      	ldrh	r3, [r1, #12]
 800f654:	b09d      	sub	sp, #116	@ 0x74
 800f656:	4607      	mov	r7, r0
 800f658:	061b      	lsls	r3, r3, #24
 800f65a:	460d      	mov	r5, r1
 800f65c:	4614      	mov	r4, r2
 800f65e:	d510      	bpl.n	800f682 <_svfiprintf_r+0x36>
 800f660:	690b      	ldr	r3, [r1, #16]
 800f662:	b973      	cbnz	r3, 800f682 <_svfiprintf_r+0x36>
 800f664:	2140      	movs	r1, #64	@ 0x40
 800f666:	f7fe fbc7 	bl	800ddf8 <_malloc_r>
 800f66a:	6028      	str	r0, [r5, #0]
 800f66c:	6128      	str	r0, [r5, #16]
 800f66e:	b930      	cbnz	r0, 800f67e <_svfiprintf_r+0x32>
 800f670:	230c      	movs	r3, #12
 800f672:	603b      	str	r3, [r7, #0]
 800f674:	f04f 30ff 	mov.w	r0, #4294967295
 800f678:	b01d      	add	sp, #116	@ 0x74
 800f67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67e:	2340      	movs	r3, #64	@ 0x40
 800f680:	616b      	str	r3, [r5, #20]
 800f682:	2300      	movs	r3, #0
 800f684:	f8cd 800c 	str.w	r8, [sp, #12]
 800f688:	f04f 0901 	mov.w	r9, #1
 800f68c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f830 <_svfiprintf_r+0x1e4>
 800f690:	9309      	str	r3, [sp, #36]	@ 0x24
 800f692:	2320      	movs	r3, #32
 800f694:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f698:	2330      	movs	r3, #48	@ 0x30
 800f69a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f69e:	4623      	mov	r3, r4
 800f6a0:	469a      	mov	sl, r3
 800f6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6a6:	b10a      	cbz	r2, 800f6ac <_svfiprintf_r+0x60>
 800f6a8:	2a25      	cmp	r2, #37	@ 0x25
 800f6aa:	d1f9      	bne.n	800f6a0 <_svfiprintf_r+0x54>
 800f6ac:	ebba 0b04 	subs.w	fp, sl, r4
 800f6b0:	d00b      	beq.n	800f6ca <_svfiprintf_r+0x7e>
 800f6b2:	465b      	mov	r3, fp
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	4629      	mov	r1, r5
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	f7ff ff6b 	bl	800f594 <__ssputs_r>
 800f6be:	3001      	adds	r0, #1
 800f6c0:	f000 80a7 	beq.w	800f812 <_svfiprintf_r+0x1c6>
 800f6c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f6c6:	445a      	add	r2, fp
 800f6c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 809f 	beq.w	800f812 <_svfiprintf_r+0x1c6>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6da:	f10a 0a01 	add.w	sl, sl, #1
 800f6de:	9304      	str	r3, [sp, #16]
 800f6e0:	9307      	str	r3, [sp, #28]
 800f6e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	4654      	mov	r4, sl
 800f6ee:	2205      	movs	r2, #5
 800f6f0:	484f      	ldr	r0, [pc, #316]	@ (800f830 <_svfiprintf_r+0x1e4>)
 800f6f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6f6:	f7fd fca2 	bl	800d03e <memchr>
 800f6fa:	9a04      	ldr	r2, [sp, #16]
 800f6fc:	b9d8      	cbnz	r0, 800f736 <_svfiprintf_r+0xea>
 800f6fe:	06d0      	lsls	r0, r2, #27
 800f700:	bf44      	itt	mi
 800f702:	2320      	movmi	r3, #32
 800f704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f708:	0711      	lsls	r1, r2, #28
 800f70a:	bf44      	itt	mi
 800f70c:	232b      	movmi	r3, #43	@ 0x2b
 800f70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f712:	f89a 3000 	ldrb.w	r3, [sl]
 800f716:	2b2a      	cmp	r3, #42	@ 0x2a
 800f718:	d015      	beq.n	800f746 <_svfiprintf_r+0xfa>
 800f71a:	9a07      	ldr	r2, [sp, #28]
 800f71c:	4654      	mov	r4, sl
 800f71e:	2000      	movs	r0, #0
 800f720:	f04f 0c0a 	mov.w	ip, #10
 800f724:	4621      	mov	r1, r4
 800f726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f72a:	3b30      	subs	r3, #48	@ 0x30
 800f72c:	2b09      	cmp	r3, #9
 800f72e:	d94b      	bls.n	800f7c8 <_svfiprintf_r+0x17c>
 800f730:	b1b0      	cbz	r0, 800f760 <_svfiprintf_r+0x114>
 800f732:	9207      	str	r2, [sp, #28]
 800f734:	e014      	b.n	800f760 <_svfiprintf_r+0x114>
 800f736:	eba0 0308 	sub.w	r3, r0, r8
 800f73a:	46a2      	mov	sl, r4
 800f73c:	fa09 f303 	lsl.w	r3, r9, r3
 800f740:	4313      	orrs	r3, r2
 800f742:	9304      	str	r3, [sp, #16]
 800f744:	e7d2      	b.n	800f6ec <_svfiprintf_r+0xa0>
 800f746:	9b03      	ldr	r3, [sp, #12]
 800f748:	1d19      	adds	r1, r3, #4
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	9103      	str	r1, [sp, #12]
 800f750:	bfbb      	ittet	lt
 800f752:	425b      	neglt	r3, r3
 800f754:	f042 0202 	orrlt.w	r2, r2, #2
 800f758:	9307      	strge	r3, [sp, #28]
 800f75a:	9307      	strlt	r3, [sp, #28]
 800f75c:	bfb8      	it	lt
 800f75e:	9204      	strlt	r2, [sp, #16]
 800f760:	7823      	ldrb	r3, [r4, #0]
 800f762:	2b2e      	cmp	r3, #46	@ 0x2e
 800f764:	d10a      	bne.n	800f77c <_svfiprintf_r+0x130>
 800f766:	7863      	ldrb	r3, [r4, #1]
 800f768:	2b2a      	cmp	r3, #42	@ 0x2a
 800f76a:	d132      	bne.n	800f7d2 <_svfiprintf_r+0x186>
 800f76c:	9b03      	ldr	r3, [sp, #12]
 800f76e:	3402      	adds	r4, #2
 800f770:	1d1a      	adds	r2, r3, #4
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f778:	9203      	str	r2, [sp, #12]
 800f77a:	9305      	str	r3, [sp, #20]
 800f77c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f840 <_svfiprintf_r+0x1f4>
 800f780:	2203      	movs	r2, #3
 800f782:	7821      	ldrb	r1, [r4, #0]
 800f784:	4650      	mov	r0, sl
 800f786:	f7fd fc5a 	bl	800d03e <memchr>
 800f78a:	b138      	cbz	r0, 800f79c <_svfiprintf_r+0x150>
 800f78c:	eba0 000a 	sub.w	r0, r0, sl
 800f790:	2240      	movs	r2, #64	@ 0x40
 800f792:	9b04      	ldr	r3, [sp, #16]
 800f794:	3401      	adds	r4, #1
 800f796:	4082      	lsls	r2, r0
 800f798:	4313      	orrs	r3, r2
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7a0:	2206      	movs	r2, #6
 800f7a2:	4824      	ldr	r0, [pc, #144]	@ (800f834 <_svfiprintf_r+0x1e8>)
 800f7a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f7a8:	f7fd fc49 	bl	800d03e <memchr>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d036      	beq.n	800f81e <_svfiprintf_r+0x1d2>
 800f7b0:	4b21      	ldr	r3, [pc, #132]	@ (800f838 <_svfiprintf_r+0x1ec>)
 800f7b2:	bb1b      	cbnz	r3, 800f7fc <_svfiprintf_r+0x1b0>
 800f7b4:	9b03      	ldr	r3, [sp, #12]
 800f7b6:	3307      	adds	r3, #7
 800f7b8:	f023 0307 	bic.w	r3, r3, #7
 800f7bc:	3308      	adds	r3, #8
 800f7be:	9303      	str	r3, [sp, #12]
 800f7c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c2:	4433      	add	r3, r6
 800f7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7c6:	e76a      	b.n	800f69e <_svfiprintf_r+0x52>
 800f7c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	e7a8      	b.n	800f724 <_svfiprintf_r+0xd8>
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	3401      	adds	r4, #1
 800f7d6:	f04f 0c0a 	mov.w	ip, #10
 800f7da:	4619      	mov	r1, r3
 800f7dc:	9305      	str	r3, [sp, #20]
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7e4:	3a30      	subs	r2, #48	@ 0x30
 800f7e6:	2a09      	cmp	r2, #9
 800f7e8:	d903      	bls.n	800f7f2 <_svfiprintf_r+0x1a6>
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d0c6      	beq.n	800f77c <_svfiprintf_r+0x130>
 800f7ee:	9105      	str	r1, [sp, #20]
 800f7f0:	e7c4      	b.n	800f77c <_svfiprintf_r+0x130>
 800f7f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e7f0      	b.n	800f7de <_svfiprintf_r+0x192>
 800f7fc:	ab03      	add	r3, sp, #12
 800f7fe:	462a      	mov	r2, r5
 800f800:	a904      	add	r1, sp, #16
 800f802:	4638      	mov	r0, r7
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4b0d      	ldr	r3, [pc, #52]	@ (800f83c <_svfiprintf_r+0x1f0>)
 800f808:	f7fc fc72 	bl	800c0f0 <_printf_float>
 800f80c:	1c42      	adds	r2, r0, #1
 800f80e:	4606      	mov	r6, r0
 800f810:	d1d6      	bne.n	800f7c0 <_svfiprintf_r+0x174>
 800f812:	89ab      	ldrh	r3, [r5, #12]
 800f814:	065b      	lsls	r3, r3, #25
 800f816:	f53f af2d 	bmi.w	800f674 <_svfiprintf_r+0x28>
 800f81a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f81c:	e72c      	b.n	800f678 <_svfiprintf_r+0x2c>
 800f81e:	ab03      	add	r3, sp, #12
 800f820:	462a      	mov	r2, r5
 800f822:	a904      	add	r1, sp, #16
 800f824:	4638      	mov	r0, r7
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	4b04      	ldr	r3, [pc, #16]	@ (800f83c <_svfiprintf_r+0x1f0>)
 800f82a:	f7fc fefd 	bl	800c628 <_printf_i>
 800f82e:	e7ed      	b.n	800f80c <_svfiprintf_r+0x1c0>
 800f830:	08010c41 	.word	0x08010c41
 800f834:	08010c4b 	.word	0x08010c4b
 800f838:	0800c0f1 	.word	0x0800c0f1
 800f83c:	0800f595 	.word	0x0800f595
 800f840:	08010c47 	.word	0x08010c47

0800f844 <__sflush_r>:
 800f844:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f84c:	0716      	lsls	r6, r2, #28
 800f84e:	4605      	mov	r5, r0
 800f850:	460c      	mov	r4, r1
 800f852:	d454      	bmi.n	800f8fe <__sflush_r+0xba>
 800f854:	684b      	ldr	r3, [r1, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	dc02      	bgt.n	800f860 <__sflush_r+0x1c>
 800f85a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	dd48      	ble.n	800f8f2 <__sflush_r+0xae>
 800f860:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f862:	2e00      	cmp	r6, #0
 800f864:	d045      	beq.n	800f8f2 <__sflush_r+0xae>
 800f866:	2300      	movs	r3, #0
 800f868:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f86c:	682f      	ldr	r7, [r5, #0]
 800f86e:	6a21      	ldr	r1, [r4, #32]
 800f870:	602b      	str	r3, [r5, #0]
 800f872:	d030      	beq.n	800f8d6 <__sflush_r+0x92>
 800f874:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f876:	89a3      	ldrh	r3, [r4, #12]
 800f878:	0759      	lsls	r1, r3, #29
 800f87a:	d505      	bpl.n	800f888 <__sflush_r+0x44>
 800f87c:	6863      	ldr	r3, [r4, #4]
 800f87e:	1ad2      	subs	r2, r2, r3
 800f880:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f882:	b10b      	cbz	r3, 800f888 <__sflush_r+0x44>
 800f884:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f886:	1ad2      	subs	r2, r2, r3
 800f888:	2300      	movs	r3, #0
 800f88a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f88c:	6a21      	ldr	r1, [r4, #32]
 800f88e:	4628      	mov	r0, r5
 800f890:	47b0      	blx	r6
 800f892:	1c43      	adds	r3, r0, #1
 800f894:	89a3      	ldrh	r3, [r4, #12]
 800f896:	d106      	bne.n	800f8a6 <__sflush_r+0x62>
 800f898:	6829      	ldr	r1, [r5, #0]
 800f89a:	291d      	cmp	r1, #29
 800f89c:	d82b      	bhi.n	800f8f6 <__sflush_r+0xb2>
 800f89e:	4a2a      	ldr	r2, [pc, #168]	@ (800f948 <__sflush_r+0x104>)
 800f8a0:	410a      	asrs	r2, r1
 800f8a2:	07d6      	lsls	r6, r2, #31
 800f8a4:	d427      	bmi.n	800f8f6 <__sflush_r+0xb2>
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	04d9      	lsls	r1, r3, #19
 800f8aa:	6062      	str	r2, [r4, #4]
 800f8ac:	6922      	ldr	r2, [r4, #16]
 800f8ae:	6022      	str	r2, [r4, #0]
 800f8b0:	d504      	bpl.n	800f8bc <__sflush_r+0x78>
 800f8b2:	1c42      	adds	r2, r0, #1
 800f8b4:	d101      	bne.n	800f8ba <__sflush_r+0x76>
 800f8b6:	682b      	ldr	r3, [r5, #0]
 800f8b8:	b903      	cbnz	r3, 800f8bc <__sflush_r+0x78>
 800f8ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800f8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8be:	602f      	str	r7, [r5, #0]
 800f8c0:	b1b9      	cbz	r1, 800f8f2 <__sflush_r+0xae>
 800f8c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8c6:	4299      	cmp	r1, r3
 800f8c8:	d002      	beq.n	800f8d0 <__sflush_r+0x8c>
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f7fe fa20 	bl	800dd10 <_free_r>
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8d4:	e00d      	b.n	800f8f2 <__sflush_r+0xae>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	4628      	mov	r0, r5
 800f8da:	47b0      	blx	r6
 800f8dc:	4602      	mov	r2, r0
 800f8de:	1c50      	adds	r0, r2, #1
 800f8e0:	d1c9      	bne.n	800f876 <__sflush_r+0x32>
 800f8e2:	682b      	ldr	r3, [r5, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0c6      	beq.n	800f876 <__sflush_r+0x32>
 800f8e8:	2b1d      	cmp	r3, #29
 800f8ea:	d001      	beq.n	800f8f0 <__sflush_r+0xac>
 800f8ec:	2b16      	cmp	r3, #22
 800f8ee:	d11d      	bne.n	800f92c <__sflush_r+0xe8>
 800f8f0:	602f      	str	r7, [r5, #0]
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	e021      	b.n	800f93a <__sflush_r+0xf6>
 800f8f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8fa:	b21b      	sxth	r3, r3
 800f8fc:	e01a      	b.n	800f934 <__sflush_r+0xf0>
 800f8fe:	690f      	ldr	r7, [r1, #16]
 800f900:	2f00      	cmp	r7, #0
 800f902:	d0f6      	beq.n	800f8f2 <__sflush_r+0xae>
 800f904:	0793      	lsls	r3, r2, #30
 800f906:	680e      	ldr	r6, [r1, #0]
 800f908:	600f      	str	r7, [r1, #0]
 800f90a:	bf0c      	ite	eq
 800f90c:	694b      	ldreq	r3, [r1, #20]
 800f90e:	2300      	movne	r3, #0
 800f910:	eba6 0807 	sub.w	r8, r6, r7
 800f914:	608b      	str	r3, [r1, #8]
 800f916:	f1b8 0f00 	cmp.w	r8, #0
 800f91a:	ddea      	ble.n	800f8f2 <__sflush_r+0xae>
 800f91c:	4643      	mov	r3, r8
 800f91e:	463a      	mov	r2, r7
 800f920:	6a21      	ldr	r1, [r4, #32]
 800f922:	4628      	mov	r0, r5
 800f924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f926:	47b0      	blx	r6
 800f928:	2800      	cmp	r0, #0
 800f92a:	dc08      	bgt.n	800f93e <__sflush_r+0xfa>
 800f92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f934:	f04f 30ff 	mov.w	r0, #4294967295
 800f938:	81a3      	strh	r3, [r4, #12]
 800f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93e:	4407      	add	r7, r0
 800f940:	eba8 0800 	sub.w	r8, r8, r0
 800f944:	e7e7      	b.n	800f916 <__sflush_r+0xd2>
 800f946:	bf00      	nop
 800f948:	dfbffffe 	.word	0xdfbffffe

0800f94c <_fflush_r>:
 800f94c:	b538      	push	{r3, r4, r5, lr}
 800f94e:	690b      	ldr	r3, [r1, #16]
 800f950:	4605      	mov	r5, r0
 800f952:	460c      	mov	r4, r1
 800f954:	b913      	cbnz	r3, 800f95c <_fflush_r+0x10>
 800f956:	2500      	movs	r5, #0
 800f958:	4628      	mov	r0, r5
 800f95a:	bd38      	pop	{r3, r4, r5, pc}
 800f95c:	b118      	cbz	r0, 800f966 <_fflush_r+0x1a>
 800f95e:	6a03      	ldr	r3, [r0, #32]
 800f960:	b90b      	cbnz	r3, 800f966 <_fflush_r+0x1a>
 800f962:	f7fd fa1f 	bl	800cda4 <__sinit>
 800f966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0f3      	beq.n	800f956 <_fflush_r+0xa>
 800f96e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f970:	07d0      	lsls	r0, r2, #31
 800f972:	d404      	bmi.n	800f97e <_fflush_r+0x32>
 800f974:	0599      	lsls	r1, r3, #22
 800f976:	d402      	bmi.n	800f97e <_fflush_r+0x32>
 800f978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f97a:	f7fd fb5e 	bl	800d03a <__retarget_lock_acquire_recursive>
 800f97e:	4628      	mov	r0, r5
 800f980:	4621      	mov	r1, r4
 800f982:	f7ff ff5f 	bl	800f844 <__sflush_r>
 800f986:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f988:	4605      	mov	r5, r0
 800f98a:	07da      	lsls	r2, r3, #31
 800f98c:	d4e4      	bmi.n	800f958 <_fflush_r+0xc>
 800f98e:	89a3      	ldrh	r3, [r4, #12]
 800f990:	059b      	lsls	r3, r3, #22
 800f992:	d4e1      	bmi.n	800f958 <_fflush_r+0xc>
 800f994:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f996:	f7fd fb51 	bl	800d03c <__retarget_lock_release_recursive>
 800f99a:	e7dd      	b.n	800f958 <_fflush_r+0xc>

0800f99c <memmove>:
 800f99c:	4288      	cmp	r0, r1
 800f99e:	b510      	push	{r4, lr}
 800f9a0:	eb01 0402 	add.w	r4, r1, r2
 800f9a4:	d902      	bls.n	800f9ac <memmove+0x10>
 800f9a6:	4284      	cmp	r4, r0
 800f9a8:	4623      	mov	r3, r4
 800f9aa:	d807      	bhi.n	800f9bc <memmove+0x20>
 800f9ac:	1e43      	subs	r3, r0, #1
 800f9ae:	42a1      	cmp	r1, r4
 800f9b0:	d008      	beq.n	800f9c4 <memmove+0x28>
 800f9b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f9b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f9ba:	e7f8      	b.n	800f9ae <memmove+0x12>
 800f9bc:	4402      	add	r2, r0
 800f9be:	4601      	mov	r1, r0
 800f9c0:	428a      	cmp	r2, r1
 800f9c2:	d100      	bne.n	800f9c6 <memmove+0x2a>
 800f9c4:	bd10      	pop	{r4, pc}
 800f9c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9ce:	e7f7      	b.n	800f9c0 <memmove+0x24>

0800f9d0 <strncmp>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	b16a      	cbz	r2, 800f9f0 <strncmp+0x20>
 800f9d4:	3901      	subs	r1, #1
 800f9d6:	1884      	adds	r4, r0, r2
 800f9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d103      	bne.n	800f9ec <strncmp+0x1c>
 800f9e4:	42a0      	cmp	r0, r4
 800f9e6:	d001      	beq.n	800f9ec <strncmp+0x1c>
 800f9e8:	2a00      	cmp	r2, #0
 800f9ea:	d1f5      	bne.n	800f9d8 <strncmp+0x8>
 800f9ec:	1ad0      	subs	r0, r2, r3
 800f9ee:	bd10      	pop	{r4, pc}
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	e7fc      	b.n	800f9ee <strncmp+0x1e>

0800f9f4 <_sbrk_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	4d05      	ldr	r5, [pc, #20]	@ (800fa10 <_sbrk_r+0x1c>)
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	4608      	mov	r0, r1
 800f9fe:	602b      	str	r3, [r5, #0]
 800fa00:	f7f2 ffa2 	bl	8002948 <_sbrk>
 800fa04:	1c43      	adds	r3, r0, #1
 800fa06:	d102      	bne.n	800fa0e <_sbrk_r+0x1a>
 800fa08:	682b      	ldr	r3, [r5, #0]
 800fa0a:	b103      	cbz	r3, 800fa0e <_sbrk_r+0x1a>
 800fa0c:	6023      	str	r3, [r4, #0]
 800fa0e:	bd38      	pop	{r3, r4, r5, pc}
 800fa10:	200023d4 	.word	0x200023d4

0800fa14 <memcpy>:
 800fa14:	440a      	add	r2, r1
 800fa16:	1e43      	subs	r3, r0, #1
 800fa18:	4291      	cmp	r1, r2
 800fa1a:	d100      	bne.n	800fa1e <memcpy+0xa>
 800fa1c:	4770      	bx	lr
 800fa1e:	b510      	push	{r4, lr}
 800fa20:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa24:	4291      	cmp	r1, r2
 800fa26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa2a:	d1f9      	bne.n	800fa20 <memcpy+0xc>
 800fa2c:	bd10      	pop	{r4, pc}
	...

0800fa30 <nan>:
 800fa30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fa38 <nan+0x8>
 800fa34:	4770      	bx	lr
 800fa36:	bf00      	nop
 800fa38:	00000000 	.word	0x00000000
 800fa3c:	7ff80000 	.word	0x7ff80000

0800fa40 <__assert_func>:
 800fa40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa42:	4614      	mov	r4, r2
 800fa44:	461a      	mov	r2, r3
 800fa46:	4b09      	ldr	r3, [pc, #36]	@ (800fa6c <__assert_func+0x2c>)
 800fa48:	4605      	mov	r5, r0
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	68d8      	ldr	r0, [r3, #12]
 800fa4e:	b954      	cbnz	r4, 800fa66 <__assert_func+0x26>
 800fa50:	4b07      	ldr	r3, [pc, #28]	@ (800fa70 <__assert_func+0x30>)
 800fa52:	461c      	mov	r4, r3
 800fa54:	9100      	str	r1, [sp, #0]
 800fa56:	4907      	ldr	r1, [pc, #28]	@ (800fa74 <__assert_func+0x34>)
 800fa58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fa5c:	462b      	mov	r3, r5
 800fa5e:	f000 fba3 	bl	80101a8 <fiprintf>
 800fa62:	f000 fbb3 	bl	80101cc <abort>
 800fa66:	4b04      	ldr	r3, [pc, #16]	@ (800fa78 <__assert_func+0x38>)
 800fa68:	e7f4      	b.n	800fa54 <__assert_func+0x14>
 800fa6a:	bf00      	nop
 800fa6c:	2000001c 	.word	0x2000001c
 800fa70:	08010c95 	.word	0x08010c95
 800fa74:	08010c67 	.word	0x08010c67
 800fa78:	08010c5a 	.word	0x08010c5a

0800fa7c <_calloc_r>:
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	fba1 5402 	umull	r5, r4, r1, r2
 800fa82:	b93c      	cbnz	r4, 800fa94 <_calloc_r+0x18>
 800fa84:	4629      	mov	r1, r5
 800fa86:	f7fe f9b7 	bl	800ddf8 <_malloc_r>
 800fa8a:	4606      	mov	r6, r0
 800fa8c:	b928      	cbnz	r0, 800fa9a <_calloc_r+0x1e>
 800fa8e:	2600      	movs	r6, #0
 800fa90:	4630      	mov	r0, r6
 800fa92:	bd70      	pop	{r4, r5, r6, pc}
 800fa94:	220c      	movs	r2, #12
 800fa96:	6002      	str	r2, [r0, #0]
 800fa98:	e7f9      	b.n	800fa8e <_calloc_r+0x12>
 800fa9a:	462a      	mov	r2, r5
 800fa9c:	4621      	mov	r1, r4
 800fa9e:	f7fd fa4e 	bl	800cf3e <memset>
 800faa2:	e7f5      	b.n	800fa90 <_calloc_r+0x14>

0800faa4 <rshift>:
 800faa4:	6903      	ldr	r3, [r0, #16]
 800faa6:	114a      	asrs	r2, r1, #5
 800faa8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fab0:	f100 0414 	add.w	r4, r0, #20
 800fab4:	dd45      	ble.n	800fb42 <rshift+0x9e>
 800fab6:	f011 011f 	ands.w	r1, r1, #31
 800faba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fabe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fac2:	d10c      	bne.n	800fade <rshift+0x3a>
 800fac4:	f100 0710 	add.w	r7, r0, #16
 800fac8:	4629      	mov	r1, r5
 800faca:	42b1      	cmp	r1, r6
 800facc:	d334      	bcc.n	800fb38 <rshift+0x94>
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	1eea      	subs	r2, r5, #3
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	4296      	cmp	r6, r2
 800fad6:	bf38      	it	cc
 800fad8:	2300      	movcc	r3, #0
 800fada:	4423      	add	r3, r4
 800fadc:	e015      	b.n	800fb0a <rshift+0x66>
 800fade:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fae2:	f1c1 0820 	rsb	r8, r1, #32
 800fae6:	f105 0e04 	add.w	lr, r5, #4
 800faea:	46a1      	mov	r9, r4
 800faec:	40cf      	lsrs	r7, r1
 800faee:	4576      	cmp	r6, lr
 800faf0:	46f4      	mov	ip, lr
 800faf2:	d815      	bhi.n	800fb20 <rshift+0x7c>
 800faf4:	1a9a      	subs	r2, r3, r2
 800faf6:	3501      	adds	r5, #1
 800faf8:	0092      	lsls	r2, r2, #2
 800fafa:	3a04      	subs	r2, #4
 800fafc:	42ae      	cmp	r6, r5
 800fafe:	bf38      	it	cc
 800fb00:	2200      	movcc	r2, #0
 800fb02:	18a3      	adds	r3, r4, r2
 800fb04:	50a7      	str	r7, [r4, r2]
 800fb06:	b107      	cbz	r7, 800fb0a <rshift+0x66>
 800fb08:	3304      	adds	r3, #4
 800fb0a:	1b1a      	subs	r2, r3, r4
 800fb0c:	42a3      	cmp	r3, r4
 800fb0e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb12:	bf08      	it	eq
 800fb14:	2300      	moveq	r3, #0
 800fb16:	6102      	str	r2, [r0, #16]
 800fb18:	bf08      	it	eq
 800fb1a:	6143      	streq	r3, [r0, #20]
 800fb1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb20:	f8dc c000 	ldr.w	ip, [ip]
 800fb24:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb28:	ea4c 0707 	orr.w	r7, ip, r7
 800fb2c:	f849 7b04 	str.w	r7, [r9], #4
 800fb30:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb34:	40cf      	lsrs	r7, r1
 800fb36:	e7da      	b.n	800faee <rshift+0x4a>
 800fb38:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb3c:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb40:	e7c3      	b.n	800faca <rshift+0x26>
 800fb42:	4623      	mov	r3, r4
 800fb44:	e7e1      	b.n	800fb0a <rshift+0x66>

0800fb46 <__hexdig_fun>:
 800fb46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fb4a:	2b09      	cmp	r3, #9
 800fb4c:	d802      	bhi.n	800fb54 <__hexdig_fun+0xe>
 800fb4e:	3820      	subs	r0, #32
 800fb50:	b2c0      	uxtb	r0, r0
 800fb52:	4770      	bx	lr
 800fb54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fb58:	2b05      	cmp	r3, #5
 800fb5a:	d801      	bhi.n	800fb60 <__hexdig_fun+0x1a>
 800fb5c:	3847      	subs	r0, #71	@ 0x47
 800fb5e:	e7f7      	b.n	800fb50 <__hexdig_fun+0xa>
 800fb60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fb64:	2b05      	cmp	r3, #5
 800fb66:	d801      	bhi.n	800fb6c <__hexdig_fun+0x26>
 800fb68:	3827      	subs	r0, #39	@ 0x27
 800fb6a:	e7f1      	b.n	800fb50 <__hexdig_fun+0xa>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	4770      	bx	lr

0800fb70 <__gethex>:
 800fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	b085      	sub	sp, #20
 800fb76:	468a      	mov	sl, r1
 800fb78:	4690      	mov	r8, r2
 800fb7a:	9302      	str	r3, [sp, #8]
 800fb7c:	680b      	ldr	r3, [r1, #0]
 800fb7e:	9001      	str	r0, [sp, #4]
 800fb80:	1c9c      	adds	r4, r3, #2
 800fb82:	46a1      	mov	r9, r4
 800fb84:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fb88:	2830      	cmp	r0, #48	@ 0x30
 800fb8a:	d0fa      	beq.n	800fb82 <__gethex+0x12>
 800fb8c:	eba9 0303 	sub.w	r3, r9, r3
 800fb90:	f1a3 0b02 	sub.w	fp, r3, #2
 800fb94:	f7ff ffd7 	bl	800fb46 <__hexdig_fun>
 800fb98:	4605      	mov	r5, r0
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d166      	bne.n	800fc6c <__gethex+0xfc>
 800fb9e:	2201      	movs	r2, #1
 800fba0:	499e      	ldr	r1, [pc, #632]	@ (800fe1c <__gethex+0x2ac>)
 800fba2:	4648      	mov	r0, r9
 800fba4:	f7ff ff14 	bl	800f9d0 <strncmp>
 800fba8:	4607      	mov	r7, r0
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d165      	bne.n	800fc7a <__gethex+0x10a>
 800fbae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fbb2:	4626      	mov	r6, r4
 800fbb4:	f7ff ffc7 	bl	800fb46 <__hexdig_fun>
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d060      	beq.n	800fc7e <__gethex+0x10e>
 800fbbc:	4623      	mov	r3, r4
 800fbbe:	7818      	ldrb	r0, [r3, #0]
 800fbc0:	4699      	mov	r9, r3
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	2830      	cmp	r0, #48	@ 0x30
 800fbc6:	d0fa      	beq.n	800fbbe <__gethex+0x4e>
 800fbc8:	f7ff ffbd 	bl	800fb46 <__hexdig_fun>
 800fbcc:	fab0 f580 	clz	r5, r0
 800fbd0:	f04f 0b01 	mov.w	fp, #1
 800fbd4:	096d      	lsrs	r5, r5, #5
 800fbd6:	464a      	mov	r2, r9
 800fbd8:	4616      	mov	r6, r2
 800fbda:	3201      	adds	r2, #1
 800fbdc:	7830      	ldrb	r0, [r6, #0]
 800fbde:	f7ff ffb2 	bl	800fb46 <__hexdig_fun>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d1f8      	bne.n	800fbd8 <__gethex+0x68>
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	498c      	ldr	r1, [pc, #560]	@ (800fe1c <__gethex+0x2ac>)
 800fbea:	4630      	mov	r0, r6
 800fbec:	f7ff fef0 	bl	800f9d0 <strncmp>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	d13e      	bne.n	800fc72 <__gethex+0x102>
 800fbf4:	b944      	cbnz	r4, 800fc08 <__gethex+0x98>
 800fbf6:	1c74      	adds	r4, r6, #1
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	4616      	mov	r6, r2
 800fbfc:	3201      	adds	r2, #1
 800fbfe:	7830      	ldrb	r0, [r6, #0]
 800fc00:	f7ff ffa1 	bl	800fb46 <__hexdig_fun>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d1f8      	bne.n	800fbfa <__gethex+0x8a>
 800fc08:	1ba4      	subs	r4, r4, r6
 800fc0a:	00a7      	lsls	r7, r4, #2
 800fc0c:	7833      	ldrb	r3, [r6, #0]
 800fc0e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fc12:	2b50      	cmp	r3, #80	@ 0x50
 800fc14:	d13d      	bne.n	800fc92 <__gethex+0x122>
 800fc16:	7873      	ldrb	r3, [r6, #1]
 800fc18:	2b2b      	cmp	r3, #43	@ 0x2b
 800fc1a:	d032      	beq.n	800fc82 <__gethex+0x112>
 800fc1c:	2b2d      	cmp	r3, #45	@ 0x2d
 800fc1e:	d033      	beq.n	800fc88 <__gethex+0x118>
 800fc20:	1c71      	adds	r1, r6, #1
 800fc22:	2400      	movs	r4, #0
 800fc24:	7808      	ldrb	r0, [r1, #0]
 800fc26:	f7ff ff8e 	bl	800fb46 <__hexdig_fun>
 800fc2a:	1e43      	subs	r3, r0, #1
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b18      	cmp	r3, #24
 800fc30:	d82f      	bhi.n	800fc92 <__gethex+0x122>
 800fc32:	f1a0 0210 	sub.w	r2, r0, #16
 800fc36:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc3a:	f7ff ff84 	bl	800fb46 <__hexdig_fun>
 800fc3e:	f100 3cff 	add.w	ip, r0, #4294967295
 800fc42:	230a      	movs	r3, #10
 800fc44:	fa5f fc8c 	uxtb.w	ip, ip
 800fc48:	f1bc 0f18 	cmp.w	ip, #24
 800fc4c:	d91e      	bls.n	800fc8c <__gethex+0x11c>
 800fc4e:	b104      	cbz	r4, 800fc52 <__gethex+0xe2>
 800fc50:	4252      	negs	r2, r2
 800fc52:	4417      	add	r7, r2
 800fc54:	f8ca 1000 	str.w	r1, [sl]
 800fc58:	b1ed      	cbz	r5, 800fc96 <__gethex+0x126>
 800fc5a:	f1bb 0f00 	cmp.w	fp, #0
 800fc5e:	bf0c      	ite	eq
 800fc60:	2506      	moveq	r5, #6
 800fc62:	2500      	movne	r5, #0
 800fc64:	4628      	mov	r0, r5
 800fc66:	b005      	add	sp, #20
 800fc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6c:	2500      	movs	r5, #0
 800fc6e:	462c      	mov	r4, r5
 800fc70:	e7b1      	b.n	800fbd6 <__gethex+0x66>
 800fc72:	2c00      	cmp	r4, #0
 800fc74:	d1c8      	bne.n	800fc08 <__gethex+0x98>
 800fc76:	4627      	mov	r7, r4
 800fc78:	e7c8      	b.n	800fc0c <__gethex+0x9c>
 800fc7a:	464e      	mov	r6, r9
 800fc7c:	462f      	mov	r7, r5
 800fc7e:	2501      	movs	r5, #1
 800fc80:	e7c4      	b.n	800fc0c <__gethex+0x9c>
 800fc82:	2400      	movs	r4, #0
 800fc84:	1cb1      	adds	r1, r6, #2
 800fc86:	e7cd      	b.n	800fc24 <__gethex+0xb4>
 800fc88:	2401      	movs	r4, #1
 800fc8a:	e7fb      	b.n	800fc84 <__gethex+0x114>
 800fc8c:	fb03 0002 	mla	r0, r3, r2, r0
 800fc90:	e7cf      	b.n	800fc32 <__gethex+0xc2>
 800fc92:	4631      	mov	r1, r6
 800fc94:	e7de      	b.n	800fc54 <__gethex+0xe4>
 800fc96:	eba6 0309 	sub.w	r3, r6, r9
 800fc9a:	4629      	mov	r1, r5
 800fc9c:	3b01      	subs	r3, #1
 800fc9e:	2b07      	cmp	r3, #7
 800fca0:	dc0a      	bgt.n	800fcb8 <__gethex+0x148>
 800fca2:	9801      	ldr	r0, [sp, #4]
 800fca4:	f7fe f934 	bl	800df10 <_Balloc>
 800fca8:	4604      	mov	r4, r0
 800fcaa:	b940      	cbnz	r0, 800fcbe <__gethex+0x14e>
 800fcac:	4b5c      	ldr	r3, [pc, #368]	@ (800fe20 <__gethex+0x2b0>)
 800fcae:	4602      	mov	r2, r0
 800fcb0:	21e4      	movs	r1, #228	@ 0xe4
 800fcb2:	485c      	ldr	r0, [pc, #368]	@ (800fe24 <__gethex+0x2b4>)
 800fcb4:	f7ff fec4 	bl	800fa40 <__assert_func>
 800fcb8:	3101      	adds	r1, #1
 800fcba:	105b      	asrs	r3, r3, #1
 800fcbc:	e7ef      	b.n	800fc9e <__gethex+0x12e>
 800fcbe:	f100 0a14 	add.w	sl, r0, #20
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	4655      	mov	r5, sl
 800fcc6:	469b      	mov	fp, r3
 800fcc8:	45b1      	cmp	r9, r6
 800fcca:	d337      	bcc.n	800fd3c <__gethex+0x1cc>
 800fccc:	f845 bb04 	str.w	fp, [r5], #4
 800fcd0:	eba5 050a 	sub.w	r5, r5, sl
 800fcd4:	4658      	mov	r0, fp
 800fcd6:	10ad      	asrs	r5, r5, #2
 800fcd8:	6125      	str	r5, [r4, #16]
 800fcda:	016d      	lsls	r5, r5, #5
 800fcdc:	f7fe fa0c 	bl	800e0f8 <__hi0bits>
 800fce0:	f8d8 6000 	ldr.w	r6, [r8]
 800fce4:	1a2d      	subs	r5, r5, r0
 800fce6:	42b5      	cmp	r5, r6
 800fce8:	dd54      	ble.n	800fd94 <__gethex+0x224>
 800fcea:	1bad      	subs	r5, r5, r6
 800fcec:	4620      	mov	r0, r4
 800fcee:	4629      	mov	r1, r5
 800fcf0:	f7fe fda9 	bl	800e846 <__any_on>
 800fcf4:	4681      	mov	r9, r0
 800fcf6:	b178      	cbz	r0, 800fd18 <__gethex+0x1a8>
 800fcf8:	1e6b      	subs	r3, r5, #1
 800fcfa:	f04f 0901 	mov.w	r9, #1
 800fcfe:	1159      	asrs	r1, r3, #5
 800fd00:	f003 021f 	and.w	r2, r3, #31
 800fd04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fd08:	fa09 f202 	lsl.w	r2, r9, r2
 800fd0c:	420a      	tst	r2, r1
 800fd0e:	d003      	beq.n	800fd18 <__gethex+0x1a8>
 800fd10:	454b      	cmp	r3, r9
 800fd12:	dc36      	bgt.n	800fd82 <__gethex+0x212>
 800fd14:	f04f 0902 	mov.w	r9, #2
 800fd18:	442f      	add	r7, r5
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f7ff fec1 	bl	800faa4 <rshift>
 800fd22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd26:	42bb      	cmp	r3, r7
 800fd28:	da42      	bge.n	800fdb0 <__gethex+0x240>
 800fd2a:	4621      	mov	r1, r4
 800fd2c:	9801      	ldr	r0, [sp, #4]
 800fd2e:	f7fe f92f 	bl	800df90 <_Bfree>
 800fd32:	2300      	movs	r3, #0
 800fd34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fd36:	25a3      	movs	r5, #163	@ 0xa3
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	e793      	b.n	800fc64 <__gethex+0xf4>
 800fd3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fd40:	2a2e      	cmp	r2, #46	@ 0x2e
 800fd42:	d012      	beq.n	800fd6a <__gethex+0x1fa>
 800fd44:	2b20      	cmp	r3, #32
 800fd46:	d104      	bne.n	800fd52 <__gethex+0x1e2>
 800fd48:	f845 bb04 	str.w	fp, [r5], #4
 800fd4c:	f04f 0b00 	mov.w	fp, #0
 800fd50:	465b      	mov	r3, fp
 800fd52:	7830      	ldrb	r0, [r6, #0]
 800fd54:	9303      	str	r3, [sp, #12]
 800fd56:	f7ff fef6 	bl	800fb46 <__hexdig_fun>
 800fd5a:	9b03      	ldr	r3, [sp, #12]
 800fd5c:	f000 000f 	and.w	r0, r0, #15
 800fd60:	4098      	lsls	r0, r3
 800fd62:	3304      	adds	r3, #4
 800fd64:	ea4b 0b00 	orr.w	fp, fp, r0
 800fd68:	e7ae      	b.n	800fcc8 <__gethex+0x158>
 800fd6a:	45b1      	cmp	r9, r6
 800fd6c:	d8ea      	bhi.n	800fd44 <__gethex+0x1d4>
 800fd6e:	2201      	movs	r2, #1
 800fd70:	492a      	ldr	r1, [pc, #168]	@ (800fe1c <__gethex+0x2ac>)
 800fd72:	4630      	mov	r0, r6
 800fd74:	9303      	str	r3, [sp, #12]
 800fd76:	f7ff fe2b 	bl	800f9d0 <strncmp>
 800fd7a:	9b03      	ldr	r3, [sp, #12]
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1e1      	bne.n	800fd44 <__gethex+0x1d4>
 800fd80:	e7a2      	b.n	800fcc8 <__gethex+0x158>
 800fd82:	1ea9      	subs	r1, r5, #2
 800fd84:	4620      	mov	r0, r4
 800fd86:	f7fe fd5e 	bl	800e846 <__any_on>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d0c2      	beq.n	800fd14 <__gethex+0x1a4>
 800fd8e:	f04f 0903 	mov.w	r9, #3
 800fd92:	e7c1      	b.n	800fd18 <__gethex+0x1a8>
 800fd94:	da09      	bge.n	800fdaa <__gethex+0x23a>
 800fd96:	1b75      	subs	r5, r6, r5
 800fd98:	4621      	mov	r1, r4
 800fd9a:	9801      	ldr	r0, [sp, #4]
 800fd9c:	462a      	mov	r2, r5
 800fd9e:	1b7f      	subs	r7, r7, r5
 800fda0:	f7fe fb10 	bl	800e3c4 <__lshift>
 800fda4:	4604      	mov	r4, r0
 800fda6:	f100 0a14 	add.w	sl, r0, #20
 800fdaa:	f04f 0900 	mov.w	r9, #0
 800fdae:	e7b8      	b.n	800fd22 <__gethex+0x1b2>
 800fdb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fdb4:	42bd      	cmp	r5, r7
 800fdb6:	dd6f      	ble.n	800fe98 <__gethex+0x328>
 800fdb8:	1bed      	subs	r5, r5, r7
 800fdba:	42ae      	cmp	r6, r5
 800fdbc:	dc34      	bgt.n	800fe28 <__gethex+0x2b8>
 800fdbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d022      	beq.n	800fe0c <__gethex+0x29c>
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d024      	beq.n	800fe14 <__gethex+0x2a4>
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d115      	bne.n	800fdfa <__gethex+0x28a>
 800fdce:	42ae      	cmp	r6, r5
 800fdd0:	d113      	bne.n	800fdfa <__gethex+0x28a>
 800fdd2:	2e01      	cmp	r6, #1
 800fdd4:	d10b      	bne.n	800fdee <__gethex+0x27e>
 800fdd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdda:	2562      	movs	r5, #98	@ 0x62
 800fddc:	9a02      	ldr	r2, [sp, #8]
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	2301      	movs	r3, #1
 800fde2:	6123      	str	r3, [r4, #16]
 800fde4:	f8ca 3000 	str.w	r3, [sl]
 800fde8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdea:	601c      	str	r4, [r3, #0]
 800fdec:	e73a      	b.n	800fc64 <__gethex+0xf4>
 800fdee:	1e71      	subs	r1, r6, #1
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f7fe fd28 	bl	800e846 <__any_on>
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d1ed      	bne.n	800fdd6 <__gethex+0x266>
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	9801      	ldr	r0, [sp, #4]
 800fdfe:	f7fe f8c7 	bl	800df90 <_Bfree>
 800fe02:	2300      	movs	r3, #0
 800fe04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe06:	2550      	movs	r5, #80	@ 0x50
 800fe08:	6013      	str	r3, [r2, #0]
 800fe0a:	e72b      	b.n	800fc64 <__gethex+0xf4>
 800fe0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1f3      	bne.n	800fdfa <__gethex+0x28a>
 800fe12:	e7e0      	b.n	800fdd6 <__gethex+0x266>
 800fe14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d1dd      	bne.n	800fdd6 <__gethex+0x266>
 800fe1a:	e7ee      	b.n	800fdfa <__gethex+0x28a>
 800fe1c:	08010ae8 	.word	0x08010ae8
 800fe20:	0801097d 	.word	0x0801097d
 800fe24:	08010c96 	.word	0x08010c96
 800fe28:	1e6f      	subs	r7, r5, #1
 800fe2a:	f1b9 0f00 	cmp.w	r9, #0
 800fe2e:	d130      	bne.n	800fe92 <__gethex+0x322>
 800fe30:	b127      	cbz	r7, 800fe3c <__gethex+0x2cc>
 800fe32:	4639      	mov	r1, r7
 800fe34:	4620      	mov	r0, r4
 800fe36:	f7fe fd06 	bl	800e846 <__any_on>
 800fe3a:	4681      	mov	r9, r0
 800fe3c:	117a      	asrs	r2, r7, #5
 800fe3e:	2301      	movs	r3, #1
 800fe40:	f007 071f 	and.w	r7, r7, #31
 800fe44:	4629      	mov	r1, r5
 800fe46:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	40bb      	lsls	r3, r7
 800fe4e:	1b76      	subs	r6, r6, r5
 800fe50:	2502      	movs	r5, #2
 800fe52:	4213      	tst	r3, r2
 800fe54:	bf18      	it	ne
 800fe56:	f049 0902 	orrne.w	r9, r9, #2
 800fe5a:	f7ff fe23 	bl	800faa4 <rshift>
 800fe5e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fe62:	f1b9 0f00 	cmp.w	r9, #0
 800fe66:	d047      	beq.n	800fef8 <__gethex+0x388>
 800fe68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe6c:	2b02      	cmp	r3, #2
 800fe6e:	d015      	beq.n	800fe9c <__gethex+0x32c>
 800fe70:	2b03      	cmp	r3, #3
 800fe72:	d017      	beq.n	800fea4 <__gethex+0x334>
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d109      	bne.n	800fe8c <__gethex+0x31c>
 800fe78:	f019 0f02 	tst.w	r9, #2
 800fe7c:	d006      	beq.n	800fe8c <__gethex+0x31c>
 800fe7e:	f8da 3000 	ldr.w	r3, [sl]
 800fe82:	ea49 0903 	orr.w	r9, r9, r3
 800fe86:	f019 0f01 	tst.w	r9, #1
 800fe8a:	d10e      	bne.n	800feaa <__gethex+0x33a>
 800fe8c:	f045 0510 	orr.w	r5, r5, #16
 800fe90:	e032      	b.n	800fef8 <__gethex+0x388>
 800fe92:	f04f 0901 	mov.w	r9, #1
 800fe96:	e7d1      	b.n	800fe3c <__gethex+0x2cc>
 800fe98:	2501      	movs	r5, #1
 800fe9a:	e7e2      	b.n	800fe62 <__gethex+0x2f2>
 800fe9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe9e:	f1c3 0301 	rsb	r3, r3, #1
 800fea2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d0f0      	beq.n	800fe8c <__gethex+0x31c>
 800feaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800feae:	f104 0314 	add.w	r3, r4, #20
 800feb2:	f04f 0c00 	mov.w	ip, #0
 800feb6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800feba:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800febe:	4618      	mov	r0, r3
 800fec0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fec4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fec8:	d01b      	beq.n	800ff02 <__gethex+0x392>
 800feca:	3201      	adds	r2, #1
 800fecc:	6002      	str	r2, [r0, #0]
 800fece:	2d02      	cmp	r5, #2
 800fed0:	f104 0314 	add.w	r3, r4, #20
 800fed4:	d13c      	bne.n	800ff50 <__gethex+0x3e0>
 800fed6:	f8d8 2000 	ldr.w	r2, [r8]
 800feda:	3a01      	subs	r2, #1
 800fedc:	42b2      	cmp	r2, r6
 800fede:	d109      	bne.n	800fef4 <__gethex+0x384>
 800fee0:	1171      	asrs	r1, r6, #5
 800fee2:	2201      	movs	r2, #1
 800fee4:	f006 061f 	and.w	r6, r6, #31
 800fee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800feec:	fa02 f606 	lsl.w	r6, r2, r6
 800fef0:	421e      	tst	r6, r3
 800fef2:	d13a      	bne.n	800ff6a <__gethex+0x3fa>
 800fef4:	f045 0520 	orr.w	r5, r5, #32
 800fef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fefa:	601c      	str	r4, [r3, #0]
 800fefc:	9b02      	ldr	r3, [sp, #8]
 800fefe:	601f      	str	r7, [r3, #0]
 800ff00:	e6b0      	b.n	800fc64 <__gethex+0xf4>
 800ff02:	4299      	cmp	r1, r3
 800ff04:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff08:	d8d9      	bhi.n	800febe <__gethex+0x34e>
 800ff0a:	68a3      	ldr	r3, [r4, #8]
 800ff0c:	459b      	cmp	fp, r3
 800ff0e:	db17      	blt.n	800ff40 <__gethex+0x3d0>
 800ff10:	6861      	ldr	r1, [r4, #4]
 800ff12:	9801      	ldr	r0, [sp, #4]
 800ff14:	3101      	adds	r1, #1
 800ff16:	f7fd fffb 	bl	800df10 <_Balloc>
 800ff1a:	4681      	mov	r9, r0
 800ff1c:	b918      	cbnz	r0, 800ff26 <__gethex+0x3b6>
 800ff1e:	4b1a      	ldr	r3, [pc, #104]	@ (800ff88 <__gethex+0x418>)
 800ff20:	4602      	mov	r2, r0
 800ff22:	2184      	movs	r1, #132	@ 0x84
 800ff24:	e6c5      	b.n	800fcb2 <__gethex+0x142>
 800ff26:	6922      	ldr	r2, [r4, #16]
 800ff28:	f104 010c 	add.w	r1, r4, #12
 800ff2c:	300c      	adds	r0, #12
 800ff2e:	3202      	adds	r2, #2
 800ff30:	0092      	lsls	r2, r2, #2
 800ff32:	f7ff fd6f 	bl	800fa14 <memcpy>
 800ff36:	4621      	mov	r1, r4
 800ff38:	464c      	mov	r4, r9
 800ff3a:	9801      	ldr	r0, [sp, #4]
 800ff3c:	f7fe f828 	bl	800df90 <_Bfree>
 800ff40:	6923      	ldr	r3, [r4, #16]
 800ff42:	1c5a      	adds	r2, r3, #1
 800ff44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff48:	6122      	str	r2, [r4, #16]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	615a      	str	r2, [r3, #20]
 800ff4e:	e7be      	b.n	800fece <__gethex+0x35e>
 800ff50:	6922      	ldr	r2, [r4, #16]
 800ff52:	455a      	cmp	r2, fp
 800ff54:	dd0b      	ble.n	800ff6e <__gethex+0x3fe>
 800ff56:	2101      	movs	r1, #1
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f7ff fda3 	bl	800faa4 <rshift>
 800ff5e:	3701      	adds	r7, #1
 800ff60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff64:	42bb      	cmp	r3, r7
 800ff66:	f6ff aee0 	blt.w	800fd2a <__gethex+0x1ba>
 800ff6a:	2501      	movs	r5, #1
 800ff6c:	e7c2      	b.n	800fef4 <__gethex+0x384>
 800ff6e:	f016 061f 	ands.w	r6, r6, #31
 800ff72:	d0fa      	beq.n	800ff6a <__gethex+0x3fa>
 800ff74:	4453      	add	r3, sl
 800ff76:	f1c6 0620 	rsb	r6, r6, #32
 800ff7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ff7e:	f7fe f8bb 	bl	800e0f8 <__hi0bits>
 800ff82:	42b0      	cmp	r0, r6
 800ff84:	dbe7      	blt.n	800ff56 <__gethex+0x3e6>
 800ff86:	e7f0      	b.n	800ff6a <__gethex+0x3fa>
 800ff88:	0801097d 	.word	0x0801097d

0800ff8c <L_shift>:
 800ff8c:	f1c2 0208 	rsb	r2, r2, #8
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	b570      	push	{r4, r5, r6, lr}
 800ff94:	f1c2 0620 	rsb	r6, r2, #32
 800ff98:	6843      	ldr	r3, [r0, #4]
 800ff9a:	6804      	ldr	r4, [r0, #0]
 800ff9c:	fa03 f506 	lsl.w	r5, r3, r6
 800ffa0:	40d3      	lsrs	r3, r2
 800ffa2:	432c      	orrs	r4, r5
 800ffa4:	6004      	str	r4, [r0, #0]
 800ffa6:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffaa:	4288      	cmp	r0, r1
 800ffac:	d3f4      	bcc.n	800ff98 <L_shift+0xc>
 800ffae:	bd70      	pop	{r4, r5, r6, pc}

0800ffb0 <__match>:
 800ffb0:	6803      	ldr	r3, [r0, #0]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	b530      	push	{r4, r5, lr}
 800ffb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffba:	b914      	cbnz	r4, 800ffc2 <__match+0x12>
 800ffbc:	6003      	str	r3, [r0, #0]
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	bd30      	pop	{r4, r5, pc}
 800ffc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ffca:	2d19      	cmp	r5, #25
 800ffcc:	bf98      	it	ls
 800ffce:	3220      	addls	r2, #32
 800ffd0:	42a2      	cmp	r2, r4
 800ffd2:	d0f0      	beq.n	800ffb6 <__match+0x6>
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	e7f3      	b.n	800ffc0 <__match+0x10>

0800ffd8 <__hexnan>:
 800ffd8:	680b      	ldr	r3, [r1, #0]
 800ffda:	6801      	ldr	r1, [r0, #0]
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	115e      	asrs	r6, r3, #5
 800ffe2:	f013 031f 	ands.w	r3, r3, #31
 800ffe6:	f04f 0500 	mov.w	r5, #0
 800ffea:	b087      	sub	sp, #28
 800ffec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fff0:	4682      	mov	sl, r0
 800fff2:	4690      	mov	r8, r2
 800fff4:	46ab      	mov	fp, r5
 800fff6:	bf18      	it	ne
 800fff8:	3604      	addne	r6, #4
 800fffa:	9301      	str	r3, [sp, #4]
 800fffc:	9502      	str	r5, [sp, #8]
 800fffe:	1f37      	subs	r7, r6, #4
 8010000:	f846 5c04 	str.w	r5, [r6, #-4]
 8010004:	46b9      	mov	r9, r7
 8010006:	463c      	mov	r4, r7
 8010008:	1c4b      	adds	r3, r1, #1
 801000a:	784a      	ldrb	r2, [r1, #1]
 801000c:	9303      	str	r3, [sp, #12]
 801000e:	b342      	cbz	r2, 8010062 <__hexnan+0x8a>
 8010010:	4610      	mov	r0, r2
 8010012:	9105      	str	r1, [sp, #20]
 8010014:	9204      	str	r2, [sp, #16]
 8010016:	f7ff fd96 	bl	800fb46 <__hexdig_fun>
 801001a:	2800      	cmp	r0, #0
 801001c:	d151      	bne.n	80100c2 <__hexnan+0xea>
 801001e:	9a04      	ldr	r2, [sp, #16]
 8010020:	9905      	ldr	r1, [sp, #20]
 8010022:	2a20      	cmp	r2, #32
 8010024:	d818      	bhi.n	8010058 <__hexnan+0x80>
 8010026:	9b02      	ldr	r3, [sp, #8]
 8010028:	459b      	cmp	fp, r3
 801002a:	dd13      	ble.n	8010054 <__hexnan+0x7c>
 801002c:	454c      	cmp	r4, r9
 801002e:	d206      	bcs.n	801003e <__hexnan+0x66>
 8010030:	2d07      	cmp	r5, #7
 8010032:	dc04      	bgt.n	801003e <__hexnan+0x66>
 8010034:	462a      	mov	r2, r5
 8010036:	4649      	mov	r1, r9
 8010038:	4620      	mov	r0, r4
 801003a:	f7ff ffa7 	bl	800ff8c <L_shift>
 801003e:	4544      	cmp	r4, r8
 8010040:	d951      	bls.n	80100e6 <__hexnan+0x10e>
 8010042:	2300      	movs	r3, #0
 8010044:	f1a4 0904 	sub.w	r9, r4, #4
 8010048:	f8cd b008 	str.w	fp, [sp, #8]
 801004c:	f844 3c04 	str.w	r3, [r4, #-4]
 8010050:	461d      	mov	r5, r3
 8010052:	464c      	mov	r4, r9
 8010054:	9903      	ldr	r1, [sp, #12]
 8010056:	e7d7      	b.n	8010008 <__hexnan+0x30>
 8010058:	2a29      	cmp	r2, #41	@ 0x29
 801005a:	d156      	bne.n	801010a <__hexnan+0x132>
 801005c:	3102      	adds	r1, #2
 801005e:	f8ca 1000 	str.w	r1, [sl]
 8010062:	f1bb 0f00 	cmp.w	fp, #0
 8010066:	d050      	beq.n	801010a <__hexnan+0x132>
 8010068:	454c      	cmp	r4, r9
 801006a:	d206      	bcs.n	801007a <__hexnan+0xa2>
 801006c:	2d07      	cmp	r5, #7
 801006e:	dc04      	bgt.n	801007a <__hexnan+0xa2>
 8010070:	462a      	mov	r2, r5
 8010072:	4649      	mov	r1, r9
 8010074:	4620      	mov	r0, r4
 8010076:	f7ff ff89 	bl	800ff8c <L_shift>
 801007a:	4544      	cmp	r4, r8
 801007c:	d935      	bls.n	80100ea <__hexnan+0x112>
 801007e:	f1a8 0204 	sub.w	r2, r8, #4
 8010082:	4623      	mov	r3, r4
 8010084:	f853 1b04 	ldr.w	r1, [r3], #4
 8010088:	429f      	cmp	r7, r3
 801008a:	f842 1f04 	str.w	r1, [r2, #4]!
 801008e:	d2f9      	bcs.n	8010084 <__hexnan+0xac>
 8010090:	1b3b      	subs	r3, r7, r4
 8010092:	3e03      	subs	r6, #3
 8010094:	3401      	adds	r4, #1
 8010096:	2200      	movs	r2, #0
 8010098:	f023 0303 	bic.w	r3, r3, #3
 801009c:	3304      	adds	r3, #4
 801009e:	42b4      	cmp	r4, r6
 80100a0:	bf88      	it	hi
 80100a2:	2304      	movhi	r3, #4
 80100a4:	4443      	add	r3, r8
 80100a6:	f843 2b04 	str.w	r2, [r3], #4
 80100aa:	429f      	cmp	r7, r3
 80100ac:	d2fb      	bcs.n	80100a6 <__hexnan+0xce>
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	b91b      	cbnz	r3, 80100ba <__hexnan+0xe2>
 80100b2:	4547      	cmp	r7, r8
 80100b4:	d127      	bne.n	8010106 <__hexnan+0x12e>
 80100b6:	2301      	movs	r3, #1
 80100b8:	603b      	str	r3, [r7, #0]
 80100ba:	2005      	movs	r0, #5
 80100bc:	b007      	add	sp, #28
 80100be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c2:	3501      	adds	r5, #1
 80100c4:	f10b 0b01 	add.w	fp, fp, #1
 80100c8:	2d08      	cmp	r5, #8
 80100ca:	dd05      	ble.n	80100d8 <__hexnan+0x100>
 80100cc:	4544      	cmp	r4, r8
 80100ce:	d9c1      	bls.n	8010054 <__hexnan+0x7c>
 80100d0:	2300      	movs	r3, #0
 80100d2:	3c04      	subs	r4, #4
 80100d4:	2501      	movs	r5, #1
 80100d6:	6023      	str	r3, [r4, #0]
 80100d8:	6822      	ldr	r2, [r4, #0]
 80100da:	f000 000f 	and.w	r0, r0, #15
 80100de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80100e2:	6020      	str	r0, [r4, #0]
 80100e4:	e7b6      	b.n	8010054 <__hexnan+0x7c>
 80100e6:	2508      	movs	r5, #8
 80100e8:	e7b4      	b.n	8010054 <__hexnan+0x7c>
 80100ea:	9b01      	ldr	r3, [sp, #4]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d0de      	beq.n	80100ae <__hexnan+0xd6>
 80100f0:	f1c3 0320 	rsb	r3, r3, #32
 80100f4:	f04f 32ff 	mov.w	r2, #4294967295
 80100f8:	40da      	lsrs	r2, r3
 80100fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80100fe:	4013      	ands	r3, r2
 8010100:	f846 3c04 	str.w	r3, [r6, #-4]
 8010104:	e7d3      	b.n	80100ae <__hexnan+0xd6>
 8010106:	3f04      	subs	r7, #4
 8010108:	e7d1      	b.n	80100ae <__hexnan+0xd6>
 801010a:	2004      	movs	r0, #4
 801010c:	e7d6      	b.n	80100bc <__hexnan+0xe4>

0801010e <__ascii_mbtowc>:
 801010e:	b082      	sub	sp, #8
 8010110:	b901      	cbnz	r1, 8010114 <__ascii_mbtowc+0x6>
 8010112:	a901      	add	r1, sp, #4
 8010114:	b142      	cbz	r2, 8010128 <__ascii_mbtowc+0x1a>
 8010116:	b14b      	cbz	r3, 801012c <__ascii_mbtowc+0x1e>
 8010118:	7813      	ldrb	r3, [r2, #0]
 801011a:	600b      	str	r3, [r1, #0]
 801011c:	7812      	ldrb	r2, [r2, #0]
 801011e:	1e10      	subs	r0, r2, #0
 8010120:	bf18      	it	ne
 8010122:	2001      	movne	r0, #1
 8010124:	b002      	add	sp, #8
 8010126:	4770      	bx	lr
 8010128:	4610      	mov	r0, r2
 801012a:	e7fb      	b.n	8010124 <__ascii_mbtowc+0x16>
 801012c:	f06f 0001 	mvn.w	r0, #1
 8010130:	e7f8      	b.n	8010124 <__ascii_mbtowc+0x16>

08010132 <_realloc_r>:
 8010132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010136:	4680      	mov	r8, r0
 8010138:	4615      	mov	r5, r2
 801013a:	460c      	mov	r4, r1
 801013c:	b921      	cbnz	r1, 8010148 <_realloc_r+0x16>
 801013e:	4611      	mov	r1, r2
 8010140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010144:	f7fd be58 	b.w	800ddf8 <_malloc_r>
 8010148:	b92a      	cbnz	r2, 8010156 <_realloc_r+0x24>
 801014a:	f7fd fde1 	bl	800dd10 <_free_r>
 801014e:	2400      	movs	r4, #0
 8010150:	4620      	mov	r0, r4
 8010152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010156:	f000 f840 	bl	80101da <_malloc_usable_size_r>
 801015a:	4285      	cmp	r5, r0
 801015c:	4606      	mov	r6, r0
 801015e:	d802      	bhi.n	8010166 <_realloc_r+0x34>
 8010160:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010164:	d8f4      	bhi.n	8010150 <_realloc_r+0x1e>
 8010166:	4629      	mov	r1, r5
 8010168:	4640      	mov	r0, r8
 801016a:	f7fd fe45 	bl	800ddf8 <_malloc_r>
 801016e:	4607      	mov	r7, r0
 8010170:	2800      	cmp	r0, #0
 8010172:	d0ec      	beq.n	801014e <_realloc_r+0x1c>
 8010174:	42b5      	cmp	r5, r6
 8010176:	462a      	mov	r2, r5
 8010178:	4621      	mov	r1, r4
 801017a:	bf28      	it	cs
 801017c:	4632      	movcs	r2, r6
 801017e:	f7ff fc49 	bl	800fa14 <memcpy>
 8010182:	4621      	mov	r1, r4
 8010184:	4640      	mov	r0, r8
 8010186:	463c      	mov	r4, r7
 8010188:	f7fd fdc2 	bl	800dd10 <_free_r>
 801018c:	e7e0      	b.n	8010150 <_realloc_r+0x1e>

0801018e <__ascii_wctomb>:
 801018e:	4603      	mov	r3, r0
 8010190:	4608      	mov	r0, r1
 8010192:	b141      	cbz	r1, 80101a6 <__ascii_wctomb+0x18>
 8010194:	2aff      	cmp	r2, #255	@ 0xff
 8010196:	d904      	bls.n	80101a2 <__ascii_wctomb+0x14>
 8010198:	228a      	movs	r2, #138	@ 0x8a
 801019a:	f04f 30ff 	mov.w	r0, #4294967295
 801019e:	601a      	str	r2, [r3, #0]
 80101a0:	4770      	bx	lr
 80101a2:	2001      	movs	r0, #1
 80101a4:	700a      	strb	r2, [r1, #0]
 80101a6:	4770      	bx	lr

080101a8 <fiprintf>:
 80101a8:	b40e      	push	{r1, r2, r3}
 80101aa:	b503      	push	{r0, r1, lr}
 80101ac:	ab03      	add	r3, sp, #12
 80101ae:	4601      	mov	r1, r0
 80101b0:	4805      	ldr	r0, [pc, #20]	@ (80101c8 <fiprintf+0x20>)
 80101b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b6:	6800      	ldr	r0, [r0, #0]
 80101b8:	9301      	str	r3, [sp, #4]
 80101ba:	f000 f83f 	bl	801023c <_vfiprintf_r>
 80101be:	b002      	add	sp, #8
 80101c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80101c4:	b003      	add	sp, #12
 80101c6:	4770      	bx	lr
 80101c8:	2000001c 	.word	0x2000001c

080101cc <abort>:
 80101cc:	2006      	movs	r0, #6
 80101ce:	b508      	push	{r3, lr}
 80101d0:	f000 fa08 	bl	80105e4 <raise>
 80101d4:	2001      	movs	r0, #1
 80101d6:	f7f2 fb3f 	bl	8002858 <_exit>

080101da <_malloc_usable_size_r>:
 80101da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101de:	1f18      	subs	r0, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	bfbc      	itt	lt
 80101e4:	580b      	ldrlt	r3, [r1, r0]
 80101e6:	18c0      	addlt	r0, r0, r3
 80101e8:	4770      	bx	lr

080101ea <__sfputc_r>:
 80101ea:	6893      	ldr	r3, [r2, #8]
 80101ec:	3b01      	subs	r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	6093      	str	r3, [r2, #8]
 80101f2:	b410      	push	{r4}
 80101f4:	da08      	bge.n	8010208 <__sfputc_r+0x1e>
 80101f6:	6994      	ldr	r4, [r2, #24]
 80101f8:	42a3      	cmp	r3, r4
 80101fa:	db01      	blt.n	8010200 <__sfputc_r+0x16>
 80101fc:	290a      	cmp	r1, #10
 80101fe:	d103      	bne.n	8010208 <__sfputc_r+0x1e>
 8010200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010204:	f000 b932 	b.w	801046c <__swbuf_r>
 8010208:	6813      	ldr	r3, [r2, #0]
 801020a:	1c58      	adds	r0, r3, #1
 801020c:	6010      	str	r0, [r2, #0]
 801020e:	4608      	mov	r0, r1
 8010210:	7019      	strb	r1, [r3, #0]
 8010212:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010216:	4770      	bx	lr

08010218 <__sfputs_r>:
 8010218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801021a:	4606      	mov	r6, r0
 801021c:	460f      	mov	r7, r1
 801021e:	4614      	mov	r4, r2
 8010220:	18d5      	adds	r5, r2, r3
 8010222:	42ac      	cmp	r4, r5
 8010224:	d101      	bne.n	801022a <__sfputs_r+0x12>
 8010226:	2000      	movs	r0, #0
 8010228:	e007      	b.n	801023a <__sfputs_r+0x22>
 801022a:	463a      	mov	r2, r7
 801022c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010230:	4630      	mov	r0, r6
 8010232:	f7ff ffda 	bl	80101ea <__sfputc_r>
 8010236:	1c43      	adds	r3, r0, #1
 8010238:	d1f3      	bne.n	8010222 <__sfputs_r+0xa>
 801023a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801023c <_vfiprintf_r>:
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	460d      	mov	r5, r1
 8010242:	b09d      	sub	sp, #116	@ 0x74
 8010244:	4614      	mov	r4, r2
 8010246:	4698      	mov	r8, r3
 8010248:	4606      	mov	r6, r0
 801024a:	b118      	cbz	r0, 8010254 <_vfiprintf_r+0x18>
 801024c:	6a03      	ldr	r3, [r0, #32]
 801024e:	b90b      	cbnz	r3, 8010254 <_vfiprintf_r+0x18>
 8010250:	f7fc fda8 	bl	800cda4 <__sinit>
 8010254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010256:	07d9      	lsls	r1, r3, #31
 8010258:	d405      	bmi.n	8010266 <_vfiprintf_r+0x2a>
 801025a:	89ab      	ldrh	r3, [r5, #12]
 801025c:	059a      	lsls	r2, r3, #22
 801025e:	d402      	bmi.n	8010266 <_vfiprintf_r+0x2a>
 8010260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010262:	f7fc feea 	bl	800d03a <__retarget_lock_acquire_recursive>
 8010266:	89ab      	ldrh	r3, [r5, #12]
 8010268:	071b      	lsls	r3, r3, #28
 801026a:	d501      	bpl.n	8010270 <_vfiprintf_r+0x34>
 801026c:	692b      	ldr	r3, [r5, #16]
 801026e:	b99b      	cbnz	r3, 8010298 <_vfiprintf_r+0x5c>
 8010270:	4629      	mov	r1, r5
 8010272:	4630      	mov	r0, r6
 8010274:	f000 f938 	bl	80104e8 <__swsetup_r>
 8010278:	b170      	cbz	r0, 8010298 <_vfiprintf_r+0x5c>
 801027a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801027c:	07dc      	lsls	r4, r3, #31
 801027e:	d504      	bpl.n	801028a <_vfiprintf_r+0x4e>
 8010280:	f04f 30ff 	mov.w	r0, #4294967295
 8010284:	b01d      	add	sp, #116	@ 0x74
 8010286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801028a:	89ab      	ldrh	r3, [r5, #12]
 801028c:	0598      	lsls	r0, r3, #22
 801028e:	d4f7      	bmi.n	8010280 <_vfiprintf_r+0x44>
 8010290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010292:	f7fc fed3 	bl	800d03c <__retarget_lock_release_recursive>
 8010296:	e7f3      	b.n	8010280 <_vfiprintf_r+0x44>
 8010298:	2300      	movs	r3, #0
 801029a:	f8cd 800c 	str.w	r8, [sp, #12]
 801029e:	f04f 0901 	mov.w	r9, #1
 80102a2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010458 <_vfiprintf_r+0x21c>
 80102a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80102a8:	2320      	movs	r3, #32
 80102aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102ae:	2330      	movs	r3, #48	@ 0x30
 80102b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80102b4:	4623      	mov	r3, r4
 80102b6:	469a      	mov	sl, r3
 80102b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102bc:	b10a      	cbz	r2, 80102c2 <_vfiprintf_r+0x86>
 80102be:	2a25      	cmp	r2, #37	@ 0x25
 80102c0:	d1f9      	bne.n	80102b6 <_vfiprintf_r+0x7a>
 80102c2:	ebba 0b04 	subs.w	fp, sl, r4
 80102c6:	d00b      	beq.n	80102e0 <_vfiprintf_r+0xa4>
 80102c8:	465b      	mov	r3, fp
 80102ca:	4622      	mov	r2, r4
 80102cc:	4629      	mov	r1, r5
 80102ce:	4630      	mov	r0, r6
 80102d0:	f7ff ffa2 	bl	8010218 <__sfputs_r>
 80102d4:	3001      	adds	r0, #1
 80102d6:	f000 80a7 	beq.w	8010428 <_vfiprintf_r+0x1ec>
 80102da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102dc:	445a      	add	r2, fp
 80102de:	9209      	str	r2, [sp, #36]	@ 0x24
 80102e0:	f89a 3000 	ldrb.w	r3, [sl]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 809f 	beq.w	8010428 <_vfiprintf_r+0x1ec>
 80102ea:	2300      	movs	r3, #0
 80102ec:	f04f 32ff 	mov.w	r2, #4294967295
 80102f0:	f10a 0a01 	add.w	sl, sl, #1
 80102f4:	9304      	str	r3, [sp, #16]
 80102f6:	9307      	str	r3, [sp, #28]
 80102f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80102fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010302:	4654      	mov	r4, sl
 8010304:	2205      	movs	r2, #5
 8010306:	4854      	ldr	r0, [pc, #336]	@ (8010458 <_vfiprintf_r+0x21c>)
 8010308:	f814 1b01 	ldrb.w	r1, [r4], #1
 801030c:	f7fc fe97 	bl	800d03e <memchr>
 8010310:	9a04      	ldr	r2, [sp, #16]
 8010312:	b9d8      	cbnz	r0, 801034c <_vfiprintf_r+0x110>
 8010314:	06d1      	lsls	r1, r2, #27
 8010316:	bf44      	itt	mi
 8010318:	2320      	movmi	r3, #32
 801031a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801031e:	0713      	lsls	r3, r2, #28
 8010320:	bf44      	itt	mi
 8010322:	232b      	movmi	r3, #43	@ 0x2b
 8010324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010328:	f89a 3000 	ldrb.w	r3, [sl]
 801032c:	2b2a      	cmp	r3, #42	@ 0x2a
 801032e:	d015      	beq.n	801035c <_vfiprintf_r+0x120>
 8010330:	9a07      	ldr	r2, [sp, #28]
 8010332:	4654      	mov	r4, sl
 8010334:	2000      	movs	r0, #0
 8010336:	f04f 0c0a 	mov.w	ip, #10
 801033a:	4621      	mov	r1, r4
 801033c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010340:	3b30      	subs	r3, #48	@ 0x30
 8010342:	2b09      	cmp	r3, #9
 8010344:	d94b      	bls.n	80103de <_vfiprintf_r+0x1a2>
 8010346:	b1b0      	cbz	r0, 8010376 <_vfiprintf_r+0x13a>
 8010348:	9207      	str	r2, [sp, #28]
 801034a:	e014      	b.n	8010376 <_vfiprintf_r+0x13a>
 801034c:	eba0 0308 	sub.w	r3, r0, r8
 8010350:	46a2      	mov	sl, r4
 8010352:	fa09 f303 	lsl.w	r3, r9, r3
 8010356:	4313      	orrs	r3, r2
 8010358:	9304      	str	r3, [sp, #16]
 801035a:	e7d2      	b.n	8010302 <_vfiprintf_r+0xc6>
 801035c:	9b03      	ldr	r3, [sp, #12]
 801035e:	1d19      	adds	r1, r3, #4
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	9103      	str	r1, [sp, #12]
 8010366:	bfbb      	ittet	lt
 8010368:	425b      	neglt	r3, r3
 801036a:	f042 0202 	orrlt.w	r2, r2, #2
 801036e:	9307      	strge	r3, [sp, #28]
 8010370:	9307      	strlt	r3, [sp, #28]
 8010372:	bfb8      	it	lt
 8010374:	9204      	strlt	r2, [sp, #16]
 8010376:	7823      	ldrb	r3, [r4, #0]
 8010378:	2b2e      	cmp	r3, #46	@ 0x2e
 801037a:	d10a      	bne.n	8010392 <_vfiprintf_r+0x156>
 801037c:	7863      	ldrb	r3, [r4, #1]
 801037e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010380:	d132      	bne.n	80103e8 <_vfiprintf_r+0x1ac>
 8010382:	9b03      	ldr	r3, [sp, #12]
 8010384:	3402      	adds	r4, #2
 8010386:	1d1a      	adds	r2, r3, #4
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801038e:	9203      	str	r2, [sp, #12]
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010468 <_vfiprintf_r+0x22c>
 8010396:	2203      	movs	r2, #3
 8010398:	7821      	ldrb	r1, [r4, #0]
 801039a:	4650      	mov	r0, sl
 801039c:	f7fc fe4f 	bl	800d03e <memchr>
 80103a0:	b138      	cbz	r0, 80103b2 <_vfiprintf_r+0x176>
 80103a2:	eba0 000a 	sub.w	r0, r0, sl
 80103a6:	2240      	movs	r2, #64	@ 0x40
 80103a8:	9b04      	ldr	r3, [sp, #16]
 80103aa:	3401      	adds	r4, #1
 80103ac:	4082      	lsls	r2, r0
 80103ae:	4313      	orrs	r3, r2
 80103b0:	9304      	str	r3, [sp, #16]
 80103b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103b6:	2206      	movs	r2, #6
 80103b8:	4828      	ldr	r0, [pc, #160]	@ (801045c <_vfiprintf_r+0x220>)
 80103ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80103be:	f7fc fe3e 	bl	800d03e <memchr>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	d03f      	beq.n	8010446 <_vfiprintf_r+0x20a>
 80103c6:	4b26      	ldr	r3, [pc, #152]	@ (8010460 <_vfiprintf_r+0x224>)
 80103c8:	bb1b      	cbnz	r3, 8010412 <_vfiprintf_r+0x1d6>
 80103ca:	9b03      	ldr	r3, [sp, #12]
 80103cc:	3307      	adds	r3, #7
 80103ce:	f023 0307 	bic.w	r3, r3, #7
 80103d2:	3308      	adds	r3, #8
 80103d4:	9303      	str	r3, [sp, #12]
 80103d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d8:	443b      	add	r3, r7
 80103da:	9309      	str	r3, [sp, #36]	@ 0x24
 80103dc:	e76a      	b.n	80102b4 <_vfiprintf_r+0x78>
 80103de:	fb0c 3202 	mla	r2, ip, r2, r3
 80103e2:	460c      	mov	r4, r1
 80103e4:	2001      	movs	r0, #1
 80103e6:	e7a8      	b.n	801033a <_vfiprintf_r+0xfe>
 80103e8:	2300      	movs	r3, #0
 80103ea:	3401      	adds	r4, #1
 80103ec:	f04f 0c0a 	mov.w	ip, #10
 80103f0:	4619      	mov	r1, r3
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	4620      	mov	r0, r4
 80103f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103fa:	3a30      	subs	r2, #48	@ 0x30
 80103fc:	2a09      	cmp	r2, #9
 80103fe:	d903      	bls.n	8010408 <_vfiprintf_r+0x1cc>
 8010400:	2b00      	cmp	r3, #0
 8010402:	d0c6      	beq.n	8010392 <_vfiprintf_r+0x156>
 8010404:	9105      	str	r1, [sp, #20]
 8010406:	e7c4      	b.n	8010392 <_vfiprintf_r+0x156>
 8010408:	fb0c 2101 	mla	r1, ip, r1, r2
 801040c:	4604      	mov	r4, r0
 801040e:	2301      	movs	r3, #1
 8010410:	e7f0      	b.n	80103f4 <_vfiprintf_r+0x1b8>
 8010412:	ab03      	add	r3, sp, #12
 8010414:	462a      	mov	r2, r5
 8010416:	a904      	add	r1, sp, #16
 8010418:	4630      	mov	r0, r6
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	4b11      	ldr	r3, [pc, #68]	@ (8010464 <_vfiprintf_r+0x228>)
 801041e:	f7fb fe67 	bl	800c0f0 <_printf_float>
 8010422:	4607      	mov	r7, r0
 8010424:	1c78      	adds	r0, r7, #1
 8010426:	d1d6      	bne.n	80103d6 <_vfiprintf_r+0x19a>
 8010428:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801042a:	07d9      	lsls	r1, r3, #31
 801042c:	d405      	bmi.n	801043a <_vfiprintf_r+0x1fe>
 801042e:	89ab      	ldrh	r3, [r5, #12]
 8010430:	059a      	lsls	r2, r3, #22
 8010432:	d402      	bmi.n	801043a <_vfiprintf_r+0x1fe>
 8010434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010436:	f7fc fe01 	bl	800d03c <__retarget_lock_release_recursive>
 801043a:	89ab      	ldrh	r3, [r5, #12]
 801043c:	065b      	lsls	r3, r3, #25
 801043e:	f53f af1f 	bmi.w	8010280 <_vfiprintf_r+0x44>
 8010442:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010444:	e71e      	b.n	8010284 <_vfiprintf_r+0x48>
 8010446:	ab03      	add	r3, sp, #12
 8010448:	462a      	mov	r2, r5
 801044a:	a904      	add	r1, sp, #16
 801044c:	4630      	mov	r0, r6
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4b04      	ldr	r3, [pc, #16]	@ (8010464 <_vfiprintf_r+0x228>)
 8010452:	f7fc f8e9 	bl	800c628 <_printf_i>
 8010456:	e7e4      	b.n	8010422 <_vfiprintf_r+0x1e6>
 8010458:	08010c41 	.word	0x08010c41
 801045c:	08010c4b 	.word	0x08010c4b
 8010460:	0800c0f1 	.word	0x0800c0f1
 8010464:	08010219 	.word	0x08010219
 8010468:	08010c47 	.word	0x08010c47

0801046c <__swbuf_r>:
 801046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046e:	460e      	mov	r6, r1
 8010470:	4614      	mov	r4, r2
 8010472:	4605      	mov	r5, r0
 8010474:	b118      	cbz	r0, 801047e <__swbuf_r+0x12>
 8010476:	6a03      	ldr	r3, [r0, #32]
 8010478:	b90b      	cbnz	r3, 801047e <__swbuf_r+0x12>
 801047a:	f7fc fc93 	bl	800cda4 <__sinit>
 801047e:	69a3      	ldr	r3, [r4, #24]
 8010480:	60a3      	str	r3, [r4, #8]
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	071a      	lsls	r2, r3, #28
 8010486:	d501      	bpl.n	801048c <__swbuf_r+0x20>
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	b943      	cbnz	r3, 801049e <__swbuf_r+0x32>
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f82a 	bl	80104e8 <__swsetup_r>
 8010494:	b118      	cbz	r0, 801049e <__swbuf_r+0x32>
 8010496:	f04f 37ff 	mov.w	r7, #4294967295
 801049a:	4638      	mov	r0, r7
 801049c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801049e:	6823      	ldr	r3, [r4, #0]
 80104a0:	b2f6      	uxtb	r6, r6
 80104a2:	6922      	ldr	r2, [r4, #16]
 80104a4:	4637      	mov	r7, r6
 80104a6:	1a98      	subs	r0, r3, r2
 80104a8:	6963      	ldr	r3, [r4, #20]
 80104aa:	4283      	cmp	r3, r0
 80104ac:	dc05      	bgt.n	80104ba <__swbuf_r+0x4e>
 80104ae:	4621      	mov	r1, r4
 80104b0:	4628      	mov	r0, r5
 80104b2:	f7ff fa4b 	bl	800f94c <_fflush_r>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d1ed      	bne.n	8010496 <__swbuf_r+0x2a>
 80104ba:	68a3      	ldr	r3, [r4, #8]
 80104bc:	3b01      	subs	r3, #1
 80104be:	60a3      	str	r3, [r4, #8]
 80104c0:	6823      	ldr	r3, [r4, #0]
 80104c2:	1c5a      	adds	r2, r3, #1
 80104c4:	6022      	str	r2, [r4, #0]
 80104c6:	701e      	strb	r6, [r3, #0]
 80104c8:	1c43      	adds	r3, r0, #1
 80104ca:	6962      	ldr	r2, [r4, #20]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d004      	beq.n	80104da <__swbuf_r+0x6e>
 80104d0:	89a3      	ldrh	r3, [r4, #12]
 80104d2:	07db      	lsls	r3, r3, #31
 80104d4:	d5e1      	bpl.n	801049a <__swbuf_r+0x2e>
 80104d6:	2e0a      	cmp	r6, #10
 80104d8:	d1df      	bne.n	801049a <__swbuf_r+0x2e>
 80104da:	4621      	mov	r1, r4
 80104dc:	4628      	mov	r0, r5
 80104de:	f7ff fa35 	bl	800f94c <_fflush_r>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	d0d9      	beq.n	801049a <__swbuf_r+0x2e>
 80104e6:	e7d6      	b.n	8010496 <__swbuf_r+0x2a>

080104e8 <__swsetup_r>:
 80104e8:	b538      	push	{r3, r4, r5, lr}
 80104ea:	4b29      	ldr	r3, [pc, #164]	@ (8010590 <__swsetup_r+0xa8>)
 80104ec:	4605      	mov	r5, r0
 80104ee:	460c      	mov	r4, r1
 80104f0:	6818      	ldr	r0, [r3, #0]
 80104f2:	b118      	cbz	r0, 80104fc <__swsetup_r+0x14>
 80104f4:	6a03      	ldr	r3, [r0, #32]
 80104f6:	b90b      	cbnz	r3, 80104fc <__swsetup_r+0x14>
 80104f8:	f7fc fc54 	bl	800cda4 <__sinit>
 80104fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010500:	0719      	lsls	r1, r3, #28
 8010502:	d422      	bmi.n	801054a <__swsetup_r+0x62>
 8010504:	06da      	lsls	r2, r3, #27
 8010506:	d407      	bmi.n	8010518 <__swsetup_r+0x30>
 8010508:	2209      	movs	r2, #9
 801050a:	602a      	str	r2, [r5, #0]
 801050c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010510:	f04f 30ff 	mov.w	r0, #4294967295
 8010514:	81a3      	strh	r3, [r4, #12]
 8010516:	e033      	b.n	8010580 <__swsetup_r+0x98>
 8010518:	0758      	lsls	r0, r3, #29
 801051a:	d512      	bpl.n	8010542 <__swsetup_r+0x5a>
 801051c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801051e:	b141      	cbz	r1, 8010532 <__swsetup_r+0x4a>
 8010520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010524:	4299      	cmp	r1, r3
 8010526:	d002      	beq.n	801052e <__swsetup_r+0x46>
 8010528:	4628      	mov	r0, r5
 801052a:	f7fd fbf1 	bl	800dd10 <_free_r>
 801052e:	2300      	movs	r3, #0
 8010530:	6363      	str	r3, [r4, #52]	@ 0x34
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010538:	81a3      	strh	r3, [r4, #12]
 801053a:	2300      	movs	r3, #0
 801053c:	6063      	str	r3, [r4, #4]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	89a3      	ldrh	r3, [r4, #12]
 8010544:	f043 0308 	orr.w	r3, r3, #8
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	6923      	ldr	r3, [r4, #16]
 801054c:	b94b      	cbnz	r3, 8010562 <__swsetup_r+0x7a>
 801054e:	89a3      	ldrh	r3, [r4, #12]
 8010550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010558:	d003      	beq.n	8010562 <__swsetup_r+0x7a>
 801055a:	4621      	mov	r1, r4
 801055c:	4628      	mov	r0, r5
 801055e:	f000 f882 	bl	8010666 <__smakebuf_r>
 8010562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010566:	f013 0201 	ands.w	r2, r3, #1
 801056a:	d00a      	beq.n	8010582 <__swsetup_r+0x9a>
 801056c:	2200      	movs	r2, #0
 801056e:	60a2      	str	r2, [r4, #8]
 8010570:	6962      	ldr	r2, [r4, #20]
 8010572:	4252      	negs	r2, r2
 8010574:	61a2      	str	r2, [r4, #24]
 8010576:	6922      	ldr	r2, [r4, #16]
 8010578:	b942      	cbnz	r2, 801058c <__swsetup_r+0xa4>
 801057a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801057e:	d1c5      	bne.n	801050c <__swsetup_r+0x24>
 8010580:	bd38      	pop	{r3, r4, r5, pc}
 8010582:	0799      	lsls	r1, r3, #30
 8010584:	bf58      	it	pl
 8010586:	6962      	ldrpl	r2, [r4, #20]
 8010588:	60a2      	str	r2, [r4, #8]
 801058a:	e7f4      	b.n	8010576 <__swsetup_r+0x8e>
 801058c:	2000      	movs	r0, #0
 801058e:	e7f7      	b.n	8010580 <__swsetup_r+0x98>
 8010590:	2000001c 	.word	0x2000001c

08010594 <_raise_r>:
 8010594:	291f      	cmp	r1, #31
 8010596:	b538      	push	{r3, r4, r5, lr}
 8010598:	4605      	mov	r5, r0
 801059a:	460c      	mov	r4, r1
 801059c:	d904      	bls.n	80105a8 <_raise_r+0x14>
 801059e:	2316      	movs	r3, #22
 80105a0:	6003      	str	r3, [r0, #0]
 80105a2:	f04f 30ff 	mov.w	r0, #4294967295
 80105a6:	bd38      	pop	{r3, r4, r5, pc}
 80105a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80105aa:	b112      	cbz	r2, 80105b2 <_raise_r+0x1e>
 80105ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105b0:	b94b      	cbnz	r3, 80105c6 <_raise_r+0x32>
 80105b2:	4628      	mov	r0, r5
 80105b4:	f000 f830 	bl	8010618 <_getpid_r>
 80105b8:	4622      	mov	r2, r4
 80105ba:	4601      	mov	r1, r0
 80105bc:	4628      	mov	r0, r5
 80105be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105c2:	f000 b817 	b.w	80105f4 <_kill_r>
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d00a      	beq.n	80105e0 <_raise_r+0x4c>
 80105ca:	1c59      	adds	r1, r3, #1
 80105cc:	d103      	bne.n	80105d6 <_raise_r+0x42>
 80105ce:	2316      	movs	r3, #22
 80105d0:	6003      	str	r3, [r0, #0]
 80105d2:	2001      	movs	r0, #1
 80105d4:	e7e7      	b.n	80105a6 <_raise_r+0x12>
 80105d6:	2100      	movs	r1, #0
 80105d8:	4620      	mov	r0, r4
 80105da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80105de:	4798      	blx	r3
 80105e0:	2000      	movs	r0, #0
 80105e2:	e7e0      	b.n	80105a6 <_raise_r+0x12>

080105e4 <raise>:
 80105e4:	4b02      	ldr	r3, [pc, #8]	@ (80105f0 <raise+0xc>)
 80105e6:	4601      	mov	r1, r0
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	f7ff bfd3 	b.w	8010594 <_raise_r>
 80105ee:	bf00      	nop
 80105f0:	2000001c 	.word	0x2000001c

080105f4 <_kill_r>:
 80105f4:	b538      	push	{r3, r4, r5, lr}
 80105f6:	2300      	movs	r3, #0
 80105f8:	4d06      	ldr	r5, [pc, #24]	@ (8010614 <_kill_r+0x20>)
 80105fa:	4604      	mov	r4, r0
 80105fc:	4608      	mov	r0, r1
 80105fe:	4611      	mov	r1, r2
 8010600:	602b      	str	r3, [r5, #0]
 8010602:	f7f2 f919 	bl	8002838 <_kill>
 8010606:	1c43      	adds	r3, r0, #1
 8010608:	d102      	bne.n	8010610 <_kill_r+0x1c>
 801060a:	682b      	ldr	r3, [r5, #0]
 801060c:	b103      	cbz	r3, 8010610 <_kill_r+0x1c>
 801060e:	6023      	str	r3, [r4, #0]
 8010610:	bd38      	pop	{r3, r4, r5, pc}
 8010612:	bf00      	nop
 8010614:	200023d4 	.word	0x200023d4

08010618 <_getpid_r>:
 8010618:	f7f2 b906 	b.w	8002828 <_getpid>

0801061c <__swhatbuf_r>:
 801061c:	b570      	push	{r4, r5, r6, lr}
 801061e:	460c      	mov	r4, r1
 8010620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010624:	b096      	sub	sp, #88	@ 0x58
 8010626:	4615      	mov	r5, r2
 8010628:	2900      	cmp	r1, #0
 801062a:	461e      	mov	r6, r3
 801062c:	da0c      	bge.n	8010648 <__swhatbuf_r+0x2c>
 801062e:	89a3      	ldrh	r3, [r4, #12]
 8010630:	2100      	movs	r1, #0
 8010632:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010636:	bf14      	ite	ne
 8010638:	2340      	movne	r3, #64	@ 0x40
 801063a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801063e:	2000      	movs	r0, #0
 8010640:	6031      	str	r1, [r6, #0]
 8010642:	602b      	str	r3, [r5, #0]
 8010644:	b016      	add	sp, #88	@ 0x58
 8010646:	bd70      	pop	{r4, r5, r6, pc}
 8010648:	466a      	mov	r2, sp
 801064a:	f000 f849 	bl	80106e0 <_fstat_r>
 801064e:	2800      	cmp	r0, #0
 8010650:	dbed      	blt.n	801062e <__swhatbuf_r+0x12>
 8010652:	9901      	ldr	r1, [sp, #4]
 8010654:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010658:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801065c:	4259      	negs	r1, r3
 801065e:	4159      	adcs	r1, r3
 8010660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010664:	e7eb      	b.n	801063e <__swhatbuf_r+0x22>

08010666 <__smakebuf_r>:
 8010666:	898b      	ldrh	r3, [r1, #12]
 8010668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801066a:	079d      	lsls	r5, r3, #30
 801066c:	4606      	mov	r6, r0
 801066e:	460c      	mov	r4, r1
 8010670:	d507      	bpl.n	8010682 <__smakebuf_r+0x1c>
 8010672:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010676:	6023      	str	r3, [r4, #0]
 8010678:	6123      	str	r3, [r4, #16]
 801067a:	2301      	movs	r3, #1
 801067c:	6163      	str	r3, [r4, #20]
 801067e:	b003      	add	sp, #12
 8010680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010682:	ab01      	add	r3, sp, #4
 8010684:	466a      	mov	r2, sp
 8010686:	f7ff ffc9 	bl	801061c <__swhatbuf_r>
 801068a:	9f00      	ldr	r7, [sp, #0]
 801068c:	4605      	mov	r5, r0
 801068e:	4630      	mov	r0, r6
 8010690:	4639      	mov	r1, r7
 8010692:	f7fd fbb1 	bl	800ddf8 <_malloc_r>
 8010696:	b948      	cbnz	r0, 80106ac <__smakebuf_r+0x46>
 8010698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801069c:	059a      	lsls	r2, r3, #22
 801069e:	d4ee      	bmi.n	801067e <__smakebuf_r+0x18>
 80106a0:	f023 0303 	bic.w	r3, r3, #3
 80106a4:	f043 0302 	orr.w	r3, r3, #2
 80106a8:	81a3      	strh	r3, [r4, #12]
 80106aa:	e7e2      	b.n	8010672 <__smakebuf_r+0xc>
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	6020      	str	r0, [r4, #0]
 80106b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106b4:	81a3      	strh	r3, [r4, #12]
 80106b6:	9b01      	ldr	r3, [sp, #4]
 80106b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80106bc:	b15b      	cbz	r3, 80106d6 <__smakebuf_r+0x70>
 80106be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106c2:	4630      	mov	r0, r6
 80106c4:	f000 f81e 	bl	8010704 <_isatty_r>
 80106c8:	b128      	cbz	r0, 80106d6 <__smakebuf_r+0x70>
 80106ca:	89a3      	ldrh	r3, [r4, #12]
 80106cc:	f023 0303 	bic.w	r3, r3, #3
 80106d0:	f043 0301 	orr.w	r3, r3, #1
 80106d4:	81a3      	strh	r3, [r4, #12]
 80106d6:	89a3      	ldrh	r3, [r4, #12]
 80106d8:	431d      	orrs	r5, r3
 80106da:	81a5      	strh	r5, [r4, #12]
 80106dc:	e7cf      	b.n	801067e <__smakebuf_r+0x18>
	...

080106e0 <_fstat_r>:
 80106e0:	b538      	push	{r3, r4, r5, lr}
 80106e2:	2300      	movs	r3, #0
 80106e4:	4d06      	ldr	r5, [pc, #24]	@ (8010700 <_fstat_r+0x20>)
 80106e6:	4604      	mov	r4, r0
 80106e8:	4608      	mov	r0, r1
 80106ea:	4611      	mov	r1, r2
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	f7f2 f903 	bl	80028f8 <_fstat>
 80106f2:	1c43      	adds	r3, r0, #1
 80106f4:	d102      	bne.n	80106fc <_fstat_r+0x1c>
 80106f6:	682b      	ldr	r3, [r5, #0]
 80106f8:	b103      	cbz	r3, 80106fc <_fstat_r+0x1c>
 80106fa:	6023      	str	r3, [r4, #0]
 80106fc:	bd38      	pop	{r3, r4, r5, pc}
 80106fe:	bf00      	nop
 8010700:	200023d4 	.word	0x200023d4

08010704 <_isatty_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	2300      	movs	r3, #0
 8010708:	4d05      	ldr	r5, [pc, #20]	@ (8010720 <_isatty_r+0x1c>)
 801070a:	4604      	mov	r4, r0
 801070c:	4608      	mov	r0, r1
 801070e:	602b      	str	r3, [r5, #0]
 8010710:	f7f2 f902 	bl	8002918 <_isatty>
 8010714:	1c43      	adds	r3, r0, #1
 8010716:	d102      	bne.n	801071e <_isatty_r+0x1a>
 8010718:	682b      	ldr	r3, [r5, #0]
 801071a:	b103      	cbz	r3, 801071e <_isatty_r+0x1a>
 801071c:	6023      	str	r3, [r4, #0]
 801071e:	bd38      	pop	{r3, r4, r5, pc}
 8010720:	200023d4 	.word	0x200023d4

08010724 <round>:
 8010724:	ec51 0b10 	vmov	r0, r1, d0
 8010728:	b570      	push	{r4, r5, r6, lr}
 801072a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801072e:	460b      	mov	r3, r1
 8010730:	4605      	mov	r5, r0
 8010732:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8010736:	2a13      	cmp	r2, #19
 8010738:	dc1b      	bgt.n	8010772 <round+0x4e>
 801073a:	2a00      	cmp	r2, #0
 801073c:	da0b      	bge.n	8010756 <round+0x32>
 801073e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010742:	3201      	adds	r2, #1
 8010744:	bf04      	itt	eq
 8010746:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801074a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801074e:	2200      	movs	r2, #0
 8010750:	4619      	mov	r1, r3
 8010752:	4610      	mov	r0, r2
 8010754:	e015      	b.n	8010782 <round+0x5e>
 8010756:	4c15      	ldr	r4, [pc, #84]	@ (80107ac <round+0x88>)
 8010758:	4114      	asrs	r4, r2
 801075a:	ea04 0601 	and.w	r6, r4, r1
 801075e:	4306      	orrs	r6, r0
 8010760:	d00f      	beq.n	8010782 <round+0x5e>
 8010762:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8010766:	fa41 f202 	asr.w	r2, r1, r2
 801076a:	4413      	add	r3, r2
 801076c:	ea23 0304 	bic.w	r3, r3, r4
 8010770:	e7ed      	b.n	801074e <round+0x2a>
 8010772:	2a33      	cmp	r2, #51	@ 0x33
 8010774:	dd08      	ble.n	8010788 <round+0x64>
 8010776:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801077a:	d102      	bne.n	8010782 <round+0x5e>
 801077c:	4602      	mov	r2, r0
 801077e:	f7ef feb7 	bl	80004f0 <__adddf3>
 8010782:	ec41 0b10 	vmov	d0, r0, r1
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801078c:	f04f 34ff 	mov.w	r4, #4294967295
 8010790:	40f4      	lsrs	r4, r6
 8010792:	4204      	tst	r4, r0
 8010794:	d0f5      	beq.n	8010782 <round+0x5e>
 8010796:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801079a:	2201      	movs	r2, #1
 801079c:	408a      	lsls	r2, r1
 801079e:	1952      	adds	r2, r2, r5
 80107a0:	bf28      	it	cs
 80107a2:	3301      	addcs	r3, #1
 80107a4:	ea22 0204 	bic.w	r2, r2, r4
 80107a8:	e7d2      	b.n	8010750 <round+0x2c>
 80107aa:	bf00      	nop
 80107ac:	000fffff 	.word	0x000fffff

080107b0 <_init>:
 80107b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b2:	bf00      	nop
 80107b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107b6:	bc08      	pop	{r3}
 80107b8:	469e      	mov	lr, r3
 80107ba:	4770      	bx	lr

080107bc <_fini>:
 80107bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107be:	bf00      	nop
 80107c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107c2:	bc08      	pop	{r3}
 80107c4:	469e      	mov	lr, r3
 80107c6:	4770      	bx	lr
